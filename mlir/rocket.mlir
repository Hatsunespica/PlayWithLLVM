module {
  sv.verbatim "// Standard header to adapt well known macros for prints and assertions."
  sv.verbatim "\0A// Users can define 'STOP_COND' to add an extra gate to stop conditions."
  sv.ifdef  "STOP_COND_" {
  } else {
    sv.ifdef  "STOP_COND" {
      sv.macro.def @STOP_COND_ "(`STOP_COND)"
    } else {
      sv.macro.def @STOP_COND_ "1"
    }
  }
  sv.verbatim ""
  sv.macro.decl @STOP_COND_
  hw.module private @SimpleClockGroupSource(in %clock : !seq.clock, in %reset : i1, out auto_out_member_subsystem_sbus_5_clock : !seq.clock, out auto_out_member_subsystem_sbus_5_reset : i1, out auto_out_member_subsystem_sbus_4_clock : !seq.clock, out auto_out_member_subsystem_sbus_4_reset : i1, out auto_out_member_subsystem_sbus_2_clock : !seq.clock, out auto_out_member_subsystem_sbus_2_reset : i1, out auto_out_member_subsystem_sbus_1_clock : !seq.clock, out auto_out_member_subsystem_sbus_1_reset : i1, out auto_out_member_subsystem_sbus_0_clock : !seq.clock, out auto_out_member_subsystem_sbus_0_reset : i1) {
    hw.output %clock, %reset, %clock, %reset, %clock, %reset, %clock, %reset, %clock, %reset : !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @ClockGroupAggregator(in %auto_in_member_subsystem_sbus_5_clock : !seq.clock, in %auto_in_member_subsystem_sbus_5_reset : i1, in %auto_in_member_subsystem_sbus_4_clock : !seq.clock, in %auto_in_member_subsystem_sbus_4_reset : i1, in %auto_in_member_subsystem_sbus_2_clock : !seq.clock, in %auto_in_member_subsystem_sbus_2_reset : i1, in %auto_in_member_subsystem_sbus_1_clock : !seq.clock, in %auto_in_member_subsystem_sbus_1_reset : i1, in %auto_in_member_subsystem_sbus_0_clock : !seq.clock, in %auto_in_member_subsystem_sbus_0_reset : i1, out auto_out_3_member_subsystem_l2_1_clock : !seq.clock, out auto_out_3_member_subsystem_l2_1_reset : i1, out auto_out_3_member_subsystem_l2_0_clock : !seq.clock, out auto_out_3_member_subsystem_l2_0_reset : i1, out auto_out_1_member_subsystem_cbus_1_clock : !seq.clock, out auto_out_1_member_subsystem_cbus_1_reset : i1, out auto_out_1_member_subsystem_cbus_0_clock : !seq.clock, out auto_out_1_member_subsystem_cbus_0_reset : i1, out auto_out_0_member_subsystem_sbus_0_clock : !seq.clock, out auto_out_0_member_subsystem_sbus_0_reset : i1) {
    hw.output %auto_in_member_subsystem_sbus_5_clock, %auto_in_member_subsystem_sbus_5_reset, %auto_in_member_subsystem_sbus_4_clock, %auto_in_member_subsystem_sbus_4_reset, %auto_in_member_subsystem_sbus_2_clock, %auto_in_member_subsystem_sbus_2_reset, %auto_in_member_subsystem_sbus_1_clock, %auto_in_member_subsystem_sbus_1_reset, %auto_in_member_subsystem_sbus_0_clock, %auto_in_member_subsystem_sbus_0_reset : !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @ClockGroup(in %auto_in_member_subsystem_sbus_0_clock : !seq.clock, in %auto_in_member_subsystem_sbus_0_reset : i1, out auto_out_clock : !seq.clock, out auto_out_reset : i1) {
    hw.output %auto_in_member_subsystem_sbus_0_clock, %auto_in_member_subsystem_sbus_0_reset : !seq.clock, i1
  }
  hw.module private @FixedClockBroadcast(in %auto_in_clock : !seq.clock, in %auto_in_reset : i1, out auto_out_2_clock : !seq.clock, out auto_out_2_reset : i1, out auto_out_0_clock : !seq.clock, out auto_out_0_reset : i1) {
    hw.output %auto_in_clock, %auto_in_reset, %auto_in_clock, %auto_in_reset : !seq.clock, i1, !seq.clock, i1
  }
  hw.module.extern private @plusarg_reader<FORMAT: none, DEFAULT: ui32, WIDTH: ui32>(out out : i32) attributes {verilogName = "plusarg_reader"}
  hw.module private @TLMonitor(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_b_ready : i1, in %io_in_b_valid : i1, in %io_in_b_bits_opcode : i3, in %io_in_b_bits_param : i2, in %io_in_b_bits_size : i4, in %io_in_b_bits_source : i2, in %io_in_b_bits_address : i32, in %io_in_b_bits_mask : i8, in %io_in_b_bits_corrupt : i1, in %io_in_c_ready : i1, in %io_in_c_valid : i1, in %io_in_c_bits_opcode : i3, in %io_in_c_bits_param : i3, in %io_in_c_bits_size : i4, in %io_in_c_bits_source : i2, in %io_in_c_bits_address : i32, in %io_in_c_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1, in %io_in_e_ready : i1, in %io_in_e_valid : i1, in %io_in_e_bits_sink : i2) {
    %c-8_i4 = hw.constant -8 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i2 = hw.constant -1 : i2
    %c4_i4 = hw.constant 4 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c0_i6 = hw.constant 0 : i6
    %c0_i16 = hw.constant 0 : i16
    %c0_i20 = hw.constant 0 : i20
    %c7_i4 = hw.constant 7 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c0_i2 = hw.constant 0 : i2
    %c-1_i12 = hw.constant -1 : i12
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %false = hw.constant false
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i23 = hw.constant 0 : i23
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %7 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %9 = comb.xor bin %8, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %10 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i12
    %11 = comb.and bin %10, %9 : i12
    %12 = comb.icmp bin eq %11, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %59 = comb.or bin %3, %4, %5 : i1
    %60 = comb.and bin %58, %59 : i1
    %61 = comb.extract %io_in_a_bits_address from 14 : (i32) -> i18
    %62 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i2
    %63 = comb.xor %62, %c-1_i2 : i2
    %64 = comb.extract %io_in_a_bits_address from 17 : (i32) -> i15
    %65 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i1
    %66 = comb.xor %65, %true : i1
    %67 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i6
    %68 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i10
    %69 = comb.xor %68, %c-512_i10 : i10
    %70 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %71 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i2
    %72 = comb.xor %71, %c-1_i2 : i2
    %73 = comb.extract %io_in_a_bits_address from 31 : (i32) -> i1
    %74 = comb.extract %io_in_a_bits_address from 29 : (i32) -> i2
    %75 = comb.xor %74, %c-1_i2 : i2
    %76 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %77 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %78 = comb.icmp eq %77, %c-8_i4 : i4
    %79 = comb.and bin %60, %76, %78 : i1
    %80 = comb.or bin %79, %reset : i1
    %81 = comb.xor bin %80, %true : i1
    %82 = comb.and bin %57, %81 : i1
    %83 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %84 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i20
    %85 = comb.icmp bin eq %84, %c0_i20 : i20
    %86 = comb.concat %61, %63 : i18, i2
    %87 = comb.icmp bin eq %86, %c0_i20 : i20
    %88 = comb.concat %64, %66 : i15, i1
    %89 = comb.icmp bin eq %88, %c0_i16 : i16
    %90 = comb.concat %67, %69 : i6, i10
    %91 = comb.icmp bin eq %90, %c0_i16 : i16
    %92 = comb.concat %70, %72 : i4, i2
    %93 = comb.icmp bin eq %92, %c0_i6 : i6
    %94 = comb.concat %73, %75 : i1, i2
    %95 = comb.icmp bin eq %94, %c0_i3 : i3
    %96 = comb.or bin %85, %87 : i1
    %97 = comb.or bin %96, %89, %91, %93, %95, %78 : i1
    %98 = comb.and bin %58, %97 : i1
    %99 = comb.and bin %3, %83, %98 : i1
    %100 = comb.or bin %99, %reset : i1
    %101 = comb.xor bin %100, %true : i1
    %102 = comb.and bin %57, %101 : i1
    %103 = comb.or bin %3, %4, %5, %reset : i1
    %104 = comb.xor bin %103, %true : i1
    %105 = comb.and bin %57, %104 : i1
    %106 = comb.or bin %14, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %57, %107 : i1
    %109 = comb.or bin %12, %reset : i1
    %110 = comb.xor bin %109, %true : i1
    %111 = comb.and bin %57, %110 : i1
    %112 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %113 = comb.or bin %112, %reset : i1
    %114 = comb.xor bin %113, %true : i1
    %115 = comb.and bin %57, %114 : i1
    %116 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %117 = comb.or bin %116, %reset : i1
    %118 = comb.xor bin %117, %true : i1
    %119 = comb.and bin %57, %118 : i1
    %120 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %121 = comb.or bin %120, %reset : i1
    %122 = comb.xor bin %121, %true : i1
    %123 = comb.and bin %57, %122 : i1
    %124 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %125 = comb.and bin %io_in_a_valid, %124 : i1
    %126 = comb.and bin %125, %81 : i1
    %127 = comb.and bin %3, %83, %98 : i1
    %128 = comb.or bin %127, %reset : i1
    %129 = comb.xor bin %128, %true : i1
    %130 = comb.and bin %125, %129 : i1
    %131 = comb.and bin %125, %104 : i1
    %132 = comb.and bin %125, %107 : i1
    %133 = comb.and bin %125, %110 : i1
    %134 = comb.and bin %125, %114 : i1
    %135 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %136 = comb.or bin %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %138 = comb.and bin %125, %137 : i1
    %139 = comb.and bin %125, %118 : i1
    %140 = comb.and bin %125, %122 : i1
    %141 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %142 = comb.and bin %io_in_a_valid, %141 : i1
    %143 = comb.or bin %60, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.and bin %142, %144 : i1
    %146 = comb.and bin %58, %87 : i1
    %147 = comb.or bin %85, %89, %91, %93, %95, %78 : i1
    %148 = comb.and bin %76, %147 : i1
    %149 = comb.or bin %146, %148, %reset : i1
    %150 = comb.xor bin %149, %true : i1
    %151 = comb.and bin %142, %150 : i1
    %152 = comb.and bin %142, %104 : i1
    %153 = comb.and bin %142, %110 : i1
    %154 = comb.xor bin %135, %true : i1
    %155 = comb.or bin %154, %reset : i1
    %156 = comb.xor bin %155, %true : i1
    %157 = comb.and bin %142, %156 : i1
    %158 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %159 = comb.or bin %158, %reset : i1
    %160 = comb.xor bin %159, %true : i1
    %161 = comb.and bin %142, %160 : i1
    %162 = comb.and bin %142, %122 : i1
    %163 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %164 = comb.and bin %io_in_a_valid, %163 : i1
    %165 = comb.or bin %85, %91, %93, %78 : i1
    %166 = comb.and bin %76, %165 : i1
    %167 = comb.icmp bin ult %io_in_a_bits_size, %c-7_i4 : i4
    %168 = comb.and bin %167, %95 : i1
    %169 = comb.or bin %146, %166, %168 : i1
    %170 = comb.and bin %60, %169 : i1
    %171 = comb.or bin %170, %reset : i1
    %172 = comb.xor bin %171, %true : i1
    %173 = comb.and bin %164, %172 : i1
    %174 = comb.and bin %164, %104 : i1
    %175 = comb.and bin %164, %110 : i1
    %176 = comb.and bin %164, %156 : i1
    %177 = comb.and bin %164, %160 : i1
    %178 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %179 = comb.and bin %io_in_a_valid, %178 : i1
    %180 = comb.and bin %179, %172 : i1
    %181 = comb.and bin %179, %104 : i1
    %182 = comb.and bin %179, %110 : i1
    %183 = comb.and bin %179, %156 : i1
    %184 = comb.xor bin %55, %c-1_i8 : i8
    %185 = comb.and bin %io_in_a_bits_mask, %184 : i8
    %186 = comb.icmp bin eq %185, %c0_i8 : i8
    %187 = comb.or bin %186, %reset : i1
    %188 = comb.xor bin %187, %true : i1
    %189 = comb.and bin %179, %188 : i1
    %190 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %191 = comb.and bin %io_in_a_valid, %190 : i1
    %192 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %193 = comb.or bin %96, %91, %93 : i1
    %194 = comb.and bin %60, %192, %193 : i1
    %195 = comb.or bin %194, %reset : i1
    %196 = comb.xor bin %195, %true : i1
    %197 = comb.and bin %191, %196 : i1
    %198 = comb.and bin %191, %104 : i1
    %199 = comb.and bin %191, %110 : i1
    %200 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %201 = comb.or bin %200, %reset : i1
    %202 = comb.xor bin %201, %true : i1
    %203 = comb.and bin %191, %202 : i1
    %204 = comb.and bin %191, %160 : i1
    %205 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %206 = comb.and bin %io_in_a_valid, %205 : i1
    %207 = comb.and bin %206, %196 : i1
    %208 = comb.and bin %206, %104 : i1
    %209 = comb.and bin %206, %110 : i1
    %210 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %211 = comb.xor bin %210, %true : i1
    %212 = comb.or bin %211, %reset : i1
    %213 = comb.xor bin %212, %true : i1
    %214 = comb.and bin %206, %213 : i1
    %215 = comb.and bin %206, %160 : i1
    %216 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %217 = comb.and bin %io_in_a_valid, %216 : i1
    %218 = comb.and bin %60, %146 : i1
    %219 = comb.or bin %218, %reset : i1
    %220 = comb.xor bin %219, %true : i1
    %221 = comb.and bin %217, %220 : i1
    %222 = comb.and bin %217, %104 : i1
    %223 = comb.and bin %217, %110 : i1
    %224 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %225 = comb.or bin %224, %reset : i1
    %226 = comb.xor bin %225, %true : i1
    %227 = comb.and bin %217, %226 : i1
    %228 = comb.and bin %217, %160 : i1
    %229 = comb.and bin %217, %122 : i1
    %230 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %231 = comb.or bin %230, %reset : i1
    %232 = comb.xor bin %231, %true : i1
    %233 = comb.and bin %io_in_d_valid, %232 : i1
    %234 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %235 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %236 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %237 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %238 = comb.and bin %io_in_d_valid, %237 : i1
    %239 = comb.or bin %234, %235, %236, %reset : i1
    %240 = comb.xor bin %239, %true : i1
    %241 = comb.and bin %238, %240 : i1
    %242 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %243 = comb.or bin %242, %reset : i1
    %244 = comb.xor bin %243, %true : i1
    %245 = comb.and bin %238, %244 : i1
    %246 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %247 = comb.or bin %246, %reset : i1
    %248 = comb.xor bin %247, %true : i1
    %249 = comb.and bin %238, %248 : i1
    %250 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %251 = comb.or bin %250, %reset : i1
    %252 = comb.xor bin %251, %true : i1
    %253 = comb.and bin %238, %252 : i1
    %254 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %255 = comb.or bin %254, %reset : i1
    %256 = comb.xor bin %255, %true : i1
    %257 = comb.and bin %238, %256 : i1
    %258 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %259 = comb.and bin %io_in_d_valid, %258 : i1
    %260 = comb.and bin %259, %240 : i1
    %261 = comb.and bin %259, %244 : i1
    %262 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %263 = comb.or bin %262, %reset : i1
    %264 = comb.xor bin %263, %true : i1
    %265 = comb.and bin %259, %264 : i1
    %266 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %267 = comb.or bin %266, %reset : i1
    %268 = comb.xor bin %267, %true : i1
    %269 = comb.and bin %259, %268 : i1
    %270 = comb.and bin %259, %252 : i1
    %271 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %272 = comb.and bin %io_in_d_valid, %271 : i1
    %273 = comb.and bin %272, %240 : i1
    %274 = comb.and bin %272, %244 : i1
    %275 = comb.and bin %272, %264 : i1
    %276 = comb.and bin %272, %268 : i1
    %277 = comb.or bin %254, %io_in_d_bits_corrupt, %reset : i1
    %278 = comb.xor bin %277, %true : i1
    %279 = comb.and bin %272, %278 : i1
    %280 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %281 = comb.and bin %io_in_d_valid, %280 : i1
    %282 = comb.and bin %281, %240 : i1
    %283 = comb.and bin %281, %248 : i1
    %284 = comb.and bin %281, %252 : i1
    %285 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %286 = comb.and bin %io_in_d_valid, %285 : i1
    %287 = comb.and bin %286, %240 : i1
    %288 = comb.and bin %286, %248 : i1
    %289 = comb.and bin %286, %278 : i1
    %290 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %291 = comb.and bin %io_in_d_valid, %290 : i1
    %292 = comb.and bin %291, %240 : i1
    %293 = comb.and bin %291, %248 : i1
    %294 = comb.and bin %291, %252 : i1
    %295 = comb.icmp bin ne %io_in_b_bits_opcode, %c-1_i3 : i3
    %296 = comb.or bin %295, %reset : i1
    %297 = comb.xor bin %296, %true : i1
    %298 = comb.and bin %io_in_b_valid, %297 : i1
    %299 = comb.icmp bin eq %io_in_b_bits_source, %c0_i2 {sv.namehint = "_legal_source_T"} : i2
    %300 = comb.icmp bin eq %io_in_b_bits_source, %c1_i2 {sv.namehint = "_legal_source_T_1"} : i2
    %301 = comb.icmp bin eq %io_in_b_bits_source, %c-2_i2 {sv.namehint = "_legal_source_T_2"} : i2
    %302 = comb.extract %io_in_b_bits_address from 14 : (i32) -> i18
    %303 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i2
    %304 = comb.xor %303, %c-1_i2 : i2
    %305 = comb.concat %302, %304 : i18, i2
    %306 = comb.icmp bin ne %305, %c0_i20 : i20
    %307 = comb.xor bin %306, %true {sv.namehint = "_address_ok_T_4"} : i1
    %308 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %309 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i2
    %310 = comb.xor %309, %c-1_i2 : i2
    %311 = comb.concat %308, %310 : i4, i2
    %312 = comb.icmp bin ne %311, %c0_i6 : i6
    %313 = comb.xor bin %312, %true {sv.namehint = "_address_ok_T_9"} : i1
    %314 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i6
    %315 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i10
    %316 = comb.xor %315, %c-512_i10 : i10
    %317 = comb.concat %314, %316 : i6, i10
    %318 = comb.icmp bin ne %317, %c0_i16 : i16
    %319 = comb.xor bin %318, %true {sv.namehint = "_address_ok_T_14"} : i1
    %320 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i20
    %321 = comb.icmp bin ne %320, %c0_i20 : i20
    %322 = comb.xor bin %321, %true {sv.namehint = "_address_ok_T_19"} : i1
    %323 = comb.extract %io_in_b_bits_address from 17 : (i32) -> i15
    %324 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i1
    %325 = comb.xor %324, %true : i1
    %326 = comb.concat %323, %325 : i15, i1
    %327 = comb.icmp bin ne %326, %c0_i16 : i16
    %328 = comb.xor bin %327, %true {sv.namehint = "_address_ok_T_24"} : i1
    %329 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %330 = comb.icmp ne %329, %c-8_i4 : i4
    %331 = comb.xor bin %330, %true {sv.namehint = "_address_ok_T_29"} : i1
    %332 = comb.extract %io_in_b_bits_address from 31 : (i32) -> i1
    %333 = comb.extract %io_in_b_bits_address from 29 : (i32) -> i2
    %334 = comb.xor %333, %c-1_i2 : i2
    %335 = comb.concat %332, %334 : i1, i2
    %336 = comb.icmp bin ne %335, %c0_i3 : i3
    %337 = comb.xor bin %336, %true {sv.namehint = "_address_ok_T_34"} : i1
    %338 = comb.concat %c0_i23, %io_in_b_bits_size : i23, i4
    %339 = comb.shl bin %c4095_i27, %338 {sv.namehint = "_is_aligned_mask_T_4"} : i27
    %340 = comb.extract %339 from 0 {sv.namehint = "_is_aligned_mask_T_5"} : (i27) -> i12
    %341 = comb.xor bin %340, %c-1_i12 {sv.namehint = "is_aligned_mask_1"} : i12
    %342 = comb.extract %io_in_b_bits_address from 0 : (i32) -> i12
    %343 = comb.and bin %342, %341 : i12
    %344 = comb.icmp bin eq %343, %c0_i12 {sv.namehint = "is_aligned_1"} : i12
    %345 = comb.extract %io_in_b_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount_1"} : (i4) -> i2
    %346 = comb.icmp bin ugt %io_in_b_bits_size, %c2_i4 {sv.namehint = "_mask_T_1"} : i4
    %347 = comb.icmp eq %345, %c-2_i2 {sv.namehint = "mask_size_3"} : i2
    %348 = comb.extract %io_in_b_bits_address from 2 {sv.namehint = "mask_bit_3"} : (i32) -> i1
    %349 = comb.xor bin %348, %true {sv.namehint = "mask_eq_14"} : i1
    %350 = comb.and bin %347, %349 {sv.namehint = "_mask_acc_T_14"} : i1
    %351 = comb.or bin %346, %350 {sv.namehint = "mask_acc_6"} : i1
    %352 = comb.and bin %347, %348 {sv.namehint = "_mask_acc_T_15"} : i1
    %353 = comb.or bin %346, %352 {sv.namehint = "mask_acc_7"} : i1
    %354 = comb.icmp eq %345, %c1_i2 {sv.namehint = "mask_size_4"} : i2
    %355 = comb.extract %io_in_b_bits_address from 1 {sv.namehint = "mask_bit_4"} : (i32) -> i1
    %356 = comb.xor bin %355, %true {sv.namehint = "mask_nbit_4"} : i1
    %357 = comb.and bin %349, %356 {sv.namehint = "mask_eq_16"} : i1
    %358 = comb.and bin %354, %357 {sv.namehint = "_mask_acc_T_16"} : i1
    %359 = comb.or bin %351, %358 {sv.namehint = "mask_acc_8"} : i1
    %360 = comb.and bin %349, %355 {sv.namehint = "mask_eq_17"} : i1
    %361 = comb.and bin %354, %360 {sv.namehint = "_mask_acc_T_17"} : i1
    %362 = comb.or bin %351, %361 {sv.namehint = "mask_acc_9"} : i1
    %363 = comb.and bin %348, %356 {sv.namehint = "mask_eq_18"} : i1
    %364 = comb.and bin %354, %363 {sv.namehint = "_mask_acc_T_18"} : i1
    %365 = comb.or bin %353, %364 {sv.namehint = "mask_acc_10"} : i1
    %366 = comb.and bin %348, %355 {sv.namehint = "mask_eq_19"} : i1
    %367 = comb.and bin %354, %366 {sv.namehint = "_mask_acc_T_19"} : i1
    %368 = comb.or bin %353, %367 {sv.namehint = "mask_acc_11"} : i1
    %369 = comb.extract %io_in_b_bits_address from 0 {sv.namehint = "mask_bit_5"} : (i32) -> i1
    %370 = comb.xor bin %369, %true {sv.namehint = "mask_nbit_5"} : i1
    %371 = comb.and bin %357, %370 {sv.namehint = "mask_eq_20"} : i1
    %372 = comb.or bin %359, %371 {sv.namehint = "mask_lo_lo_lo_1"} : i1
    %373 = comb.and bin %357, %369 {sv.namehint = "mask_eq_21"} : i1
    %374 = comb.or bin %359, %373 {sv.namehint = "mask_lo_lo_hi_1"} : i1
    %375 = comb.and bin %360, %370 {sv.namehint = "mask_eq_22"} : i1
    %376 = comb.or bin %362, %375 {sv.namehint = "mask_lo_hi_lo_1"} : i1
    %377 = comb.and bin %360, %369 {sv.namehint = "mask_eq_23"} : i1
    %378 = comb.or bin %362, %377 {sv.namehint = "mask_lo_hi_hi_1"} : i1
    %379 = comb.and bin %363, %370 {sv.namehint = "mask_eq_24"} : i1
    %380 = comb.or bin %365, %379 {sv.namehint = "mask_hi_lo_lo_1"} : i1
    %381 = comb.and bin %363, %369 {sv.namehint = "mask_eq_25"} : i1
    %382 = comb.or bin %365, %381 {sv.namehint = "mask_hi_lo_hi_1"} : i1
    %383 = comb.and bin %366, %370 {sv.namehint = "mask_eq_26"} : i1
    %384 = comb.or bin %368, %383 {sv.namehint = "mask_hi_hi_lo_1"} : i1
    %385 = comb.and bin %366, %369 {sv.namehint = "mask_eq_27"} : i1
    %386 = comb.or bin %368, %385 {sv.namehint = "mask_hi_hi_hi_1"} : i1
    %387 = comb.concat %386, %384, %382, %380, %378, %376, %374, %372 {sv.namehint = "mask_1"} : i1, i1, i1, i1, i1, i1, i1, i1
    %388 = comb.concat %301, %300 {sv.namehint = "_legal_source_WIRE_1"} : i1, i1
    %389 = comb.icmp bin eq %388, %io_in_b_bits_source {sv.namehint = "legal_source"} : i2
    %390 = comb.icmp bin eq %io_in_b_bits_opcode, %c-2_i3 : i3
    %391 = comb.and bin %io_in_b_valid, %390 : i1
    %392 = comb.icmp bin eq %io_in_b_bits_size, %c6_i4 : i4
    %393 = comb.icmp bin ult %io_in_b_bits_size, %c-3_i4 : i4
    %394 = comb.xor bin %321, %true : i1
    %395 = comb.xor bin %306, %true : i1
    %396 = comb.xor bin %327, %true : i1
    %397 = comb.xor bin %318, %true : i1
    %398 = comb.xor bin %312, %true : i1
    %399 = comb.xor bin %336, %true : i1
    %400 = comb.xor bin %330, %true : i1
    %401 = comb.or bin %394, %395, %396, %397, %398, %399, %400 : i1
    %402 = comb.and bin %299, %392, %393, %401 : i1
    %403 = comb.or bin %402, %reset : i1
    %404 = comb.xor bin %403, %true : i1
    %405 = comb.and bin %391, %404 : i1
    %406 = comb.or bin %307, %313, %319, %322, %328, %331, %337, %reset : i1
    %407 = comb.xor bin %406, %true : i1
    %408 = comb.and bin %391, %407 : i1
    %409 = comb.or bin %389, %reset : i1
    %410 = comb.xor bin %409, %true : i1
    %411 = comb.and bin %391, %410 : i1
    %412 = comb.or bin %344, %reset : i1
    %413 = comb.xor bin %412, %true : i1
    %414 = comb.and bin %391, %413 : i1
    %415 = comb.icmp bin ne %io_in_b_bits_param, %c-1_i2 : i2
    %416 = comb.or bin %415, %reset : i1
    %417 = comb.xor bin %416, %true : i1
    %418 = comb.and bin %391, %417 : i1
    %419 = comb.icmp bin eq %io_in_b_bits_mask, %387 : i8
    %420 = comb.or bin %419, %reset : i1
    %421 = comb.xor bin %420, %true : i1
    %422 = comb.and bin %391, %421 : i1
    %423 = comb.xor bin %io_in_b_bits_corrupt, %true : i1
    %424 = comb.or bin %423, %reset : i1
    %425 = comb.xor bin %424, %true : i1
    %426 = comb.and bin %391, %425 : i1
    %427 = comb.icmp bin eq %io_in_b_bits_opcode, %c-4_i3 : i3
    %428 = comb.and bin %io_in_b_valid, %427 : i1
    %429 = comb.xor bin %reset, %true : i1
    %430 = comb.and bin %428, %429 : i1
    %431 = comb.and bin %428, %407 : i1
    %432 = comb.and bin %428, %410 : i1
    %433 = comb.and bin %428, %413 : i1
    %434 = comb.icmp bin eq %io_in_b_bits_param, %c0_i2 : i2
    %435 = comb.or bin %434, %reset : i1
    %436 = comb.xor bin %435, %true : i1
    %437 = comb.and bin %428, %436 : i1
    %438 = comb.and bin %428, %421 : i1
    %439 = comb.and bin %428, %425 : i1
    %440 = comb.icmp bin eq %io_in_b_bits_opcode, %c0_i3 : i3
    %441 = comb.and bin %io_in_b_valid, %440 : i1
    %442 = comb.and bin %441, %429 : i1
    %443 = comb.and bin %441, %407 : i1
    %444 = comb.and bin %441, %410 : i1
    %445 = comb.and bin %441, %413 : i1
    %446 = comb.and bin %441, %436 : i1
    %447 = comb.and bin %441, %421 : i1
    %448 = comb.icmp bin eq %io_in_b_bits_opcode, %c1_i3 : i3
    %449 = comb.and bin %io_in_b_valid, %448 : i1
    %450 = comb.and bin %449, %429 : i1
    %451 = comb.and bin %449, %407 : i1
    %452 = comb.and bin %449, %410 : i1
    %453 = comb.and bin %449, %413 : i1
    %454 = comb.and bin %449, %436 : i1
    %455 = comb.xor bin %387, %c-1_i8 : i8
    %456 = comb.and bin %io_in_b_bits_mask, %455 : i8
    %457 = comb.icmp bin eq %456, %c0_i8 : i8
    %458 = comb.or bin %457, %reset : i1
    %459 = comb.xor bin %458, %true : i1
    %460 = comb.and bin %449, %459 : i1
    %461 = comb.icmp bin eq %io_in_b_bits_opcode, %c2_i3 : i3
    %462 = comb.and bin %io_in_b_valid, %461 : i1
    %463 = comb.and bin %462, %429 : i1
    %464 = comb.and bin %462, %407 : i1
    %465 = comb.and bin %462, %410 : i1
    %466 = comb.and bin %462, %413 : i1
    %467 = comb.and bin %462, %421 : i1
    %468 = comb.icmp bin eq %io_in_b_bits_opcode, %c3_i3 : i3
    %469 = comb.and bin %io_in_b_valid, %468 : i1
    %470 = comb.and bin %469, %429 : i1
    %471 = comb.and bin %469, %407 : i1
    %472 = comb.and bin %469, %410 : i1
    %473 = comb.and bin %469, %413 : i1
    %474 = comb.and bin %469, %421 : i1
    %475 = comb.icmp bin eq %io_in_b_bits_opcode, %c-3_i3 : i3
    %476 = comb.and bin %io_in_b_valid, %475 : i1
    %477 = comb.and bin %476, %429 : i1
    %478 = comb.and bin %476, %407 : i1
    %479 = comb.and bin %476, %410 : i1
    %480 = comb.and bin %476, %413 : i1
    %481 = comb.and bin %476, %421 : i1
    %482 = comb.and bin %476, %425 : i1
    %483 = comb.icmp bin eq %io_in_c_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_8"} : i2
    %484 = comb.icmp bin eq %io_in_c_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_9"} : i2
    %485 = comb.icmp bin eq %io_in_c_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_10"} : i2
    %486 = comb.concat %c0_i23, %io_in_c_bits_size : i23, i4
    %487 = comb.shl bin %c4095_i27, %486 {sv.namehint = "_is_aligned_mask_T_7"} : i27
    %488 = comb.extract %487 from 0 {sv.namehint = "_is_aligned_mask_T_8"} : (i27) -> i12
    %489 = comb.xor bin %488, %c-1_i12 {sv.namehint = "is_aligned_mask_2"} : i12
    %490 = comb.extract %io_in_c_bits_address from 0 : (i32) -> i12
    %491 = comb.and bin %490, %489 : i12
    %492 = comb.icmp bin eq %491, %c0_i12 {sv.namehint = "is_aligned_2"} : i12
    %493 = comb.extract %io_in_c_bits_address from 14 : (i32) -> i18
    %494 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i2
    %495 = comb.xor %494, %c-1_i2 : i2
    %496 = comb.concat %493, %495 : i18, i2
    %497 = comb.icmp bin ne %496, %c0_i20 : i20
    %498 = comb.xor bin %497, %true {sv.namehint = "_address_ok_T_44"} : i1
    %499 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %500 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i2
    %501 = comb.xor %500, %c-1_i2 : i2
    %502 = comb.concat %499, %501 : i4, i2
    %503 = comb.icmp bin ne %502, %c0_i6 : i6
    %504 = comb.xor bin %503, %true {sv.namehint = "_address_ok_T_49"} : i1
    %505 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i6
    %506 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i10
    %507 = comb.xor %506, %c-512_i10 : i10
    %508 = comb.concat %505, %507 : i6, i10
    %509 = comb.icmp bin ne %508, %c0_i16 : i16
    %510 = comb.xor bin %509, %true {sv.namehint = "_address_ok_T_54"} : i1
    %511 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i20
    %512 = comb.icmp bin ne %511, %c0_i20 : i20
    %513 = comb.xor bin %512, %true {sv.namehint = "_address_ok_T_59"} : i1
    %514 = comb.extract %io_in_c_bits_address from 17 : (i32) -> i15
    %515 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i1
    %516 = comb.xor %515, %true : i1
    %517 = comb.concat %514, %516 : i15, i1
    %518 = comb.icmp bin ne %517, %c0_i16 : i16
    %519 = comb.xor bin %518, %true {sv.namehint = "_address_ok_T_64"} : i1
    %520 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %521 = comb.icmp ne %520, %c-8_i4 : i4
    %522 = comb.xor bin %521, %true {sv.namehint = "_address_ok_T_69"} : i1
    %523 = comb.extract %io_in_c_bits_address from 31 : (i32) -> i1
    %524 = comb.extract %io_in_c_bits_address from 29 : (i32) -> i2
    %525 = comb.xor %524, %c-1_i2 : i2
    %526 = comb.concat %523, %525 : i1, i2
    %527 = comb.icmp bin ne %526, %c0_i3 : i3
    %528 = comb.xor bin %527, %true {sv.namehint = "_address_ok_T_74"} : i1
    %529 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 : i3
    %530 = comb.and bin %io_in_c_valid, %529 : i1
    %531 = comb.or bin %498, %504, %510, %513, %519, %522, %528, %reset : i1
    %532 = comb.xor bin %531, %true : i1
    %533 = comb.and bin %530, %532 : i1
    %534 = comb.or bin %483, %484, %485, %reset : i1
    %535 = comb.xor bin %534, %true : i1
    %536 = comb.and bin %530, %535 : i1
    %537 = comb.icmp bin ugt %io_in_c_bits_size, %c2_i4 : i4
    %538 = comb.or bin %537, %reset : i1
    %539 = comb.xor bin %538, %true : i1
    %540 = comb.and bin %530, %539 : i1
    %541 = comb.or bin %492, %reset : i1
    %542 = comb.xor bin %541, %true : i1
    %543 = comb.and bin %530, %542 : i1
    %544 = comb.extract %io_in_c_bits_param from 1 : (i3) -> i2
    %545 = comb.icmp bin ne %544, %c-1_i2 : i2
    %546 = comb.or bin %545, %reset : i1
    %547 = comb.xor bin %546, %true : i1
    %548 = comb.and bin %530, %547 : i1
    %549 = comb.xor bin %io_in_c_bits_corrupt, %true : i1
    %550 = comb.or bin %549, %reset : i1
    %551 = comb.xor bin %550, %true : i1
    %552 = comb.and bin %530, %551 : i1
    %553 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 : i3
    %554 = comb.and bin %io_in_c_valid, %553 : i1
    %555 = comb.and bin %554, %532 : i1
    %556 = comb.and bin %554, %535 : i1
    %557 = comb.and bin %554, %539 : i1
    %558 = comb.and bin %554, %542 : i1
    %559 = comb.and bin %554, %547 : i1
    %560 = comb.icmp bin eq %io_in_c_bits_opcode, %c-2_i3 : i3
    %561 = comb.and bin %io_in_c_valid, %560 : i1
    %562 = comb.icmp bin ult %io_in_c_bits_size, %c-3_i4 : i4
    %563 = comb.or bin %483, %484, %485 : i1
    %564 = comb.icmp bin ult %io_in_c_bits_size, %c7_i4 : i4
    %565 = comb.xor bin %521, %true : i1
    %566 = comb.and bin %562, %563, %564, %565 : i1
    %567 = comb.or bin %566, %reset : i1
    %568 = comb.xor bin %567, %true : i1
    %569 = comb.and bin %561, %568 : i1
    %570 = comb.icmp bin eq %io_in_c_bits_size, %c6_i4 : i4
    %571 = comb.xor bin %512, %true : i1
    %572 = comb.xor bin %497, %true : i1
    %573 = comb.xor bin %518, %true : i1
    %574 = comb.xor bin %509, %true : i1
    %575 = comb.xor bin %503, %true : i1
    %576 = comb.xor bin %527, %true : i1
    %577 = comb.or bin %571, %572, %573, %574, %575, %576, %565 : i1
    %578 = comb.and bin %562, %577 : i1
    %579 = comb.and bin %483, %570, %578 : i1
    %580 = comb.or bin %579, %reset : i1
    %581 = comb.xor bin %580, %true : i1
    %582 = comb.and bin %561, %581 : i1
    %583 = comb.and bin %561, %535 : i1
    %584 = comb.and bin %561, %539 : i1
    %585 = comb.and bin %561, %542 : i1
    %586 = comb.and bin %561, %547 : i1
    %587 = comb.and bin %561, %551 : i1
    %588 = comb.icmp bin eq %io_in_c_bits_opcode, %c-1_i3 : i3
    %589 = comb.and bin %io_in_c_valid, %588 : i1
    %590 = comb.and bin %589, %568 : i1
    %591 = comb.and bin %483, %570, %578 : i1
    %592 = comb.or bin %591, %reset : i1
    %593 = comb.xor bin %592, %true : i1
    %594 = comb.and bin %589, %593 : i1
    %595 = comb.and bin %589, %535 : i1
    %596 = comb.and bin %589, %539 : i1
    %597 = comb.and bin %589, %542 : i1
    %598 = comb.and bin %589, %547 : i1
    %599 = comb.icmp bin eq %io_in_c_bits_opcode, %c0_i3 : i3
    %600 = comb.and bin %io_in_c_valid, %599 : i1
    %601 = comb.and bin %600, %532 : i1
    %602 = comb.and bin %600, %535 : i1
    %603 = comb.and bin %600, %542 : i1
    %604 = comb.icmp bin eq %io_in_c_bits_param, %c0_i3 : i3
    %605 = comb.or bin %604, %reset : i1
    %606 = comb.xor bin %605, %true : i1
    %607 = comb.and bin %600, %606 : i1
    %608 = comb.and bin %600, %551 : i1
    %609 = comb.icmp bin eq %io_in_c_bits_opcode, %c1_i3 : i3
    %610 = comb.and bin %io_in_c_valid, %609 : i1
    %611 = comb.and bin %610, %532 : i1
    %612 = comb.and bin %610, %535 : i1
    %613 = comb.and bin %610, %542 : i1
    %614 = comb.and bin %610, %606 : i1
    %615 = comb.icmp bin eq %io_in_c_bits_opcode, %c2_i3 : i3
    %616 = comb.and bin %io_in_c_valid, %615 : i1
    %617 = comb.and bin %616, %532 : i1
    %618 = comb.and bin %616, %535 : i1
    %619 = comb.and bin %616, %542 : i1
    %620 = comb.and bin %616, %606 : i1
    %621 = comb.and bin %616, %551 : i1
    %622 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %623 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %624 = comb.extract %623 from 3 : (i27) -> i9
    %625 = comb.xor %624, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %626 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %627 = comb.mux bin %626, %c0_i9, %625 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %632 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %628 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %629 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %630 = comb.xor bin %629, %true {sv.namehint = "a_first"} : i1
    %631 = comb.mux bin %629, %628, %627 {sv.namehint = "_a_first_counter_T"} : i9
    %632 = comb.mux bin %622, %631, %a_first_counter : i9
    %opcode = seq.firreg %655 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %656 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %657 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %658 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %659 clock %clock {firrtl.random_init_start = 21 : ui64} : i32
    %633 = comb.and bin %io_in_a_valid, %629 : i1
    %634 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %635 = comb.or bin %634, %reset : i1
    %636 = comb.xor bin %635, %true : i1
    %637 = comb.and bin %633, %636 : i1
    %638 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %639 = comb.or bin %638, %reset : i1
    %640 = comb.xor bin %639, %true : i1
    %641 = comb.and bin %633, %640 : i1
    %642 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %643 = comb.or bin %642, %reset : i1
    %644 = comb.xor bin %643, %true : i1
    %645 = comb.and bin %633, %644 : i1
    %646 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %647 = comb.or bin %646, %reset : i1
    %648 = comb.xor bin %647, %true : i1
    %649 = comb.and bin %633, %648 : i1
    %650 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %651 = comb.or bin %650, %reset : i1
    %652 = comb.xor bin %651, %true : i1
    %653 = comb.and bin %633, %652 : i1
    %654 = comb.and bin %622, %630 : i1
    %655 = comb.mux bin %654, %io_in_a_bits_opcode, %opcode : i3
    %656 = comb.mux bin %654, %io_in_a_bits_param, %param : i3
    %657 = comb.mux bin %654, %io_in_a_bits_size, %size : i4
    %658 = comb.mux bin %654, %io_in_a_bits_source, %source : i2
    %659 = comb.mux bin %654, %io_in_a_bits_address, %address : i32
    %660 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_3"} : i1
    %661 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %662 = comb.shl bin %c4095_i27, %661 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %663 = comb.extract %662 from 3 : (i27) -> i9
    %664 = comb.xor %663, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %665 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %666 = comb.mux bin %665, %664, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %671 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 53 : ui64} : i9
    %667 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %668 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %669 = comb.xor bin %668, %true {sv.namehint = "d_first"} : i1
    %670 = comb.mux bin %668, %667, %666 {sv.namehint = "_d_first_counter_T"} : i9
    %671 = comb.mux bin %660, %670, %d_first_counter : i9
    %opcode_1 = seq.firreg %698 clock %clock {firrtl.random_init_start = 62 : ui64} : i3
    %param_1 = seq.firreg %699 clock %clock {firrtl.random_init_start = 65 : ui64} : i2
    %size_1 = seq.firreg %700 clock %clock {firrtl.random_init_start = 67 : ui64} : i4
    %source_1 = seq.firreg %701 clock %clock {firrtl.random_init_start = 71 : ui64} : i2
    %sink = seq.firreg %702 clock %clock {firrtl.random_init_start = 73 : ui64} : i2
    %denied = seq.firreg %703 clock %clock {firrtl.random_init_start = 75 : ui64} : i1
    %672 = comb.and bin %io_in_d_valid, %668 : i1
    %673 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %674 = comb.or bin %673, %reset : i1
    %675 = comb.xor bin %674, %true : i1
    %676 = comb.and bin %672, %675 : i1
    %677 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %678 = comb.or bin %677, %reset : i1
    %679 = comb.xor bin %678, %true : i1
    %680 = comb.and bin %672, %679 : i1
    %681 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %682 = comb.or bin %681, %reset : i1
    %683 = comb.xor bin %682, %true : i1
    %684 = comb.and bin %672, %683 : i1
    %685 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %686 = comb.or bin %685, %reset : i1
    %687 = comb.xor bin %686, %true : i1
    %688 = comb.and bin %672, %687 : i1
    %689 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %690 = comb.or bin %689, %reset : i1
    %691 = comb.xor bin %690, %true : i1
    %692 = comb.and bin %672, %691 : i1
    %693 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %694 = comb.or bin %693, %reset : i1
    %695 = comb.xor bin %694, %true : i1
    %696 = comb.and bin %672, %695 : i1
    %697 = comb.and bin %660, %669 : i1
    %698 = comb.mux bin %697, %io_in_d_bits_opcode, %opcode_1 : i3
    %699 = comb.mux bin %697, %io_in_d_bits_param, %param_1 : i2
    %700 = comb.mux bin %697, %io_in_d_bits_size, %size_1 : i4
    %701 = comb.mux bin %697, %io_in_d_bits_source, %source_1 : i2
    %702 = comb.mux bin %697, %io_in_d_bits_sink, %sink : i2
    %703 = comb.mux bin %697, %io_in_d_bits_denied, %denied : i1
    %704 = comb.and bin %io_in_b_ready, %io_in_b_valid {sv.namehint = "b_first_done"} : i1
    %b_first_counter = seq.firreg %709 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 76 : ui64} : i9
    %705 = comb.add %b_first_counter, %c-1_i9 {sv.namehint = "_b_first_counter1_T"} : i9
    %706 = comb.icmp bin ne %b_first_counter, %c0_i9 : i9
    %707 = comb.xor bin %706, %true {sv.namehint = "b_first"} : i1
    %708 = comb.mux bin %706, %705, %c0_i9 {sv.namehint = "_b_first_counter_T"} : i9
    %709 = comb.mux bin %704, %708, %b_first_counter : i9
    %opcode_2 = seq.firreg %732 clock %clock {firrtl.random_init_start = 85 : ui64} : i3
    %param_2 = seq.firreg %733 clock %clock {firrtl.random_init_start = 88 : ui64} : i2
    %size_2 = seq.firreg %734 clock %clock {firrtl.random_init_start = 90 : ui64} : i4
    %source_2 = seq.firreg %735 clock %clock {firrtl.random_init_start = 94 : ui64} : i2
    %address_1 = seq.firreg %736 clock %clock {firrtl.random_init_start = 96 : ui64} : i32
    %710 = comb.and bin %io_in_b_valid, %706 : i1
    %711 = comb.icmp bin eq %io_in_b_bits_opcode, %opcode_2 : i3
    %712 = comb.or bin %711, %reset : i1
    %713 = comb.xor bin %712, %true : i1
    %714 = comb.and bin %710, %713 : i1
    %715 = comb.icmp bin eq %io_in_b_bits_param, %param_2 : i2
    %716 = comb.or bin %715, %reset : i1
    %717 = comb.xor bin %716, %true : i1
    %718 = comb.and bin %710, %717 : i1
    %719 = comb.icmp bin eq %io_in_b_bits_size, %size_2 : i4
    %720 = comb.or bin %719, %reset : i1
    %721 = comb.xor bin %720, %true : i1
    %722 = comb.and bin %710, %721 : i1
    %723 = comb.icmp bin eq %io_in_b_bits_source, %source_2 : i2
    %724 = comb.or bin %723, %reset : i1
    %725 = comb.xor bin %724, %true : i1
    %726 = comb.and bin %710, %725 : i1
    %727 = comb.icmp bin eq %io_in_b_bits_address, %address_1 : i32
    %728 = comb.or bin %727, %reset : i1
    %729 = comb.xor bin %728, %true : i1
    %730 = comb.and bin %710, %729 : i1
    %731 = comb.and bin %704, %707 : i1
    %732 = comb.mux bin %731, %io_in_b_bits_opcode, %opcode_2 : i3
    %733 = comb.mux bin %731, %io_in_b_bits_param, %param_2 : i2
    %734 = comb.mux bin %731, %io_in_b_bits_size, %size_2 : i4
    %735 = comb.mux bin %731, %io_in_b_bits_source, %source_2 : i2
    %736 = comb.mux bin %731, %io_in_b_bits_address, %address_1 : i32
    %737 = comb.and bin %io_in_c_ready, %io_in_c_valid {sv.namehint = "_c_first_T_1"} : i1
    %738 = comb.shl bin %c4095_i27, %486 {sv.namehint = "_c_first_beats1_decode_T_1"} : i27
    %739 = comb.extract %738 from 3 : (i27) -> i9
    %740 = comb.xor %739, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_3"} : i9
    %741 = comb.extract %io_in_c_bits_opcode from 0 {sv.namehint = "c_first_beats1_opdata"} : (i3) -> i1
    %742 = comb.mux bin %741, %740, %c0_i9 {sv.namehint = "c_first_beats1"} : i9
    %c_first_counter = seq.firreg %747 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 128 : ui64} : i9
    %743 = comb.add %c_first_counter, %c-1_i9 {sv.namehint = "_c_first_counter1_T"} : i9
    %744 = comb.icmp bin ne %c_first_counter, %c0_i9 : i9
    %745 = comb.xor bin %744, %true {sv.namehint = "c_first"} : i1
    %746 = comb.mux bin %744, %743, %742 {sv.namehint = "_c_first_counter_T"} : i9
    %747 = comb.mux bin %737, %746, %c_first_counter : i9
    %opcode_3 = seq.firreg %770 clock %clock {firrtl.random_init_start = 137 : ui64} : i3
    %param_3 = seq.firreg %771 clock %clock {firrtl.random_init_start = 140 : ui64} : i3
    %size_3 = seq.firreg %772 clock %clock {firrtl.random_init_start = 143 : ui64} : i4
    %source_3 = seq.firreg %773 clock %clock {firrtl.random_init_start = 147 : ui64} : i2
    %address_2 = seq.firreg %774 clock %clock {firrtl.random_init_start = 149 : ui64} : i32
    %748 = comb.and bin %io_in_c_valid, %744 : i1
    %749 = comb.icmp bin eq %io_in_c_bits_opcode, %opcode_3 : i3
    %750 = comb.or bin %749, %reset : i1
    %751 = comb.xor bin %750, %true : i1
    %752 = comb.and bin %748, %751 : i1
    %753 = comb.icmp bin eq %io_in_c_bits_param, %param_3 : i3
    %754 = comb.or bin %753, %reset : i1
    %755 = comb.xor bin %754, %true : i1
    %756 = comb.and bin %748, %755 : i1
    %757 = comb.icmp bin eq %io_in_c_bits_size, %size_3 : i4
    %758 = comb.or bin %757, %reset : i1
    %759 = comb.xor bin %758, %true : i1
    %760 = comb.and bin %748, %759 : i1
    %761 = comb.icmp bin eq %io_in_c_bits_source, %source_3 : i2
    %762 = comb.or bin %761, %reset : i1
    %763 = comb.xor bin %762, %true : i1
    %764 = comb.and bin %748, %763 : i1
    %765 = comb.icmp bin eq %io_in_c_bits_address, %address_2 : i32
    %766 = comb.or bin %765, %reset : i1
    %767 = comb.xor bin %766, %true : i1
    %768 = comb.and bin %748, %767 : i1
    %769 = comb.and bin %737, %745 : i1
    %770 = comb.mux bin %769, %io_in_c_bits_opcode, %opcode_3 : i3
    %771 = comb.mux bin %769, %io_in_c_bits_param, %param_3 : i3
    %772 = comb.mux bin %769, %io_in_c_bits_size, %size_3 : i4
    %773 = comb.mux bin %769, %io_in_c_bits_source, %source_3 : i2
    %774 = comb.mux bin %769, %io_in_c_bits_address, %address_2 : i32
    %inflight = seq.firreg %897 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 181 : ui64} : i3
    %inflight_opcodes = seq.firreg %900 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 184 : ui64} : i12
    %inflight_sizes = seq.firreg %903 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 196 : ui64} : i24
    %775 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %776 = comb.extract %775 from 3 : (i27) -> i9
    %777 = comb.xor %776, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %778 = comb.mux bin %626, %c0_i9, %777 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %782 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 220 : ui64} : i9
    %779 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %780 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %781 = comb.mux bin %780, %778, %779 {sv.namehint = "_a_first_counter_T_1"} : i9
    %782 = comb.mux bin %622, %781, %a_first_counter_1 : i9
    %783 = comb.shl bin %c4095_i27, %661 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %784 = comb.extract %783 from 3 : (i27) -> i9
    %785 = comb.xor %784, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %786 = comb.mux bin %665, %785, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %790 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 229 : ui64} : i9
    %787 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %788 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %789 = comb.mux bin %788, %786, %787 {sv.namehint = "_d_first_counter_T_1"} : i9
    %790 = comb.mux bin %660, %789, %d_first_counter_1 : i9
    %791 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %792 = comb.shru bin %inflight_opcodes, %791 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %793 = comb.extract %792 from 1 : (i12) -> i3
    %794 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %795 = comb.shru bin %inflight_sizes, %794 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %796 = comb.extract %795 from 1 : (i24) -> i7
    %797 = comb.concat %false, %796 {sv.namehint = "a_size_lookup"} : i1, i7
    %798 = comb.and bin %io_in_a_valid, %780 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %799 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %800 = comb.shl bin %c1_i4, %799 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %801 = comb.extract %800 from 0 : (i4) -> i3
    %802 = comb.mux bin %798, %801, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %803 = comb.and bin %622, %780 : i1
    %804 = comb.shl bin %c1_i4, %799 {sv.namehint = "_a_set_T"} : i4
    %805 = comb.extract %804 from 0 : (i4) -> i3
    %806 = comb.mux bin %803, %805, %c0_i3 {sv.namehint = "a_set"} : i3
    %807 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %808 = comb.mux bin %803, %807, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %809 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %810 = comb.mux bin %803, %809, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %811 = comb.concat %c0_i31, %808 : i31, i4
    %812 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %813 = comb.shl bin %811, %812 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %814 = comb.extract %813 from 0 : (i35) -> i12
    %815 = comb.mux bin %803, %814, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %816 = comb.concat %c0_i31, %810 : i31, i5
    %817 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %818 = comb.shl bin %816, %817 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %819 = comb.extract %818 from 0 : (i36) -> i24
    %820 = comb.mux bin %803, %819, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %821 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %822 = comb.shru bin %inflight, %821 : i3
    %823 = comb.extract %822 from 0 : (i3) -> i1
    %824 = comb.xor bin %823, %true : i1
    %825 = comb.or bin %824, %reset : i1
    %826 = comb.xor bin %825, %true : i1
    %827 = comb.and bin %803, %826 : i1
    %828 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %829 = comb.and bin %io_in_d_valid, %788 : i1
    %830 = comb.xor bin %828, %true : i1
    %831 = comb.and bin %829, %830 : i1
    %832 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %833 = comb.shl bin %c1_i4, %832 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %834 = comb.extract %833 from 0 : (i4) -> i3
    %835 = comb.mux bin %831, %834, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %836 = comb.and bin %660, %788, %830 : i1
    %837 = comb.shl bin %c1_i4, %832 {sv.namehint = "_d_clr_T"} : i4
    %838 = comb.extract %837 from 0 : (i4) -> i3
    %839 = comb.mux bin %836, %838, %c0_i3 {sv.namehint = "d_clr"} : i3
    %840 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %841 = comb.shl bin %c15_i47, %840 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %842 = comb.extract %841 from 0 : (i47) -> i12
    %843 = comb.mux bin %836, %842, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %844 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %845 = comb.shl bin %c255_i47, %844 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %846 = comb.extract %845 from 0 : (i47) -> i24
    %847 = comb.mux bin %836, %846, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %848 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %849 = comb.and bin %798, %848 {sv.namehint = "same_cycle_resp"} : i1
    %850 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %851 = comb.shru bin %inflight, %850 : i3
    %852 = comb.extract %851 from 0 : (i3) -> i1
    %853 = comb.or bin %852, %849, %reset : i1
    %854 = comb.xor bin %853, %true : i1
    %855 = comb.and bin %831, %854 : i1
    %856 = comb.and bin %831, %849 : i1
    %857 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %858 = comb.icmp bin eq %io_in_d_bits_opcode, %857 : i3
    %859 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %860 = comb.icmp bin eq %io_in_d_bits_opcode, %859 : i3
    %861 = comb.or bin %858, %860, %reset : i1
    %862 = comb.xor bin %861, %true : i1
    %863 = comb.and bin %856, %862 : i1
    %864 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %865 = comb.or bin %864, %reset : i1
    %866 = comb.xor bin %865, %true : i1
    %867 = comb.and bin %856, %866 : i1
    %868 = comb.xor bin %849, %true : i1
    %869 = comb.and bin %831, %868 : i1
    %870 = hw.array_get %1[%793] : !hw.array<8xi3>, i3
    %871 = comb.icmp bin eq %io_in_d_bits_opcode, %870 : i3
    %872 = hw.array_get %0[%793] : !hw.array<8xi3>, i3
    %873 = comb.icmp bin eq %io_in_d_bits_opcode, %872 : i3
    %874 = comb.or bin %871, %873, %reset : i1
    %875 = comb.xor bin %874, %true : i1
    %876 = comb.and bin %869, %875 : i1
    %877 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %878 = comb.icmp bin eq %877, %797 : i8
    %879 = comb.or bin %878, %reset : i1
    %880 = comb.xor bin %879, %true : i1
    %881 = comb.and bin %869, %880 : i1
    %882 = comb.and bin %829, %780 : i1
    %883 = comb.and bin %882, %io_in_a_valid : i1
    %884 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %885 = comb.and bin %883, %884 : i1
    %886 = comb.and bin %885, %830 : i1
    %887 = comb.xor bin %io_in_d_ready, %true : i1
    %888 = comb.or bin %887, %io_in_a_ready, %reset : i1
    %889 = comb.xor bin %888, %true : i1
    %890 = comb.and bin %886, %889 : i1
    %891 = comb.icmp bin ne %802, %835 : i3
    %892 = comb.icmp bin eq %802, %c0_i3 : i3
    %893 = comb.or bin %891, %892, %reset : i1
    %894 = comb.xor bin %893, %true : i1
    %895 = comb.or bin %inflight, %806 {sv.namehint = "_inflight_T"} : i3
    %896 = comb.xor bin %839, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %897 = comb.and bin %895, %896 {sv.namehint = "_inflight_T_2"} : i3
    %898 = comb.or bin %inflight_opcodes, %815 {sv.namehint = "_inflight_opcodes_T"} : i12
    %899 = comb.xor bin %843, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %900 = comb.and bin %898, %899 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %901 = comb.or bin %inflight_sizes, %820 {sv.namehint = "_inflight_sizes_T"} : i24
    %902 = comb.xor bin %847, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %903 = comb.and bin %901, %902 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %911 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 238 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %904 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %905 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %906 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %907 = comb.or bin %904, %905, %906, %reset : i1
    %908 = comb.xor bin %907, %true : i1
    %909 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %910 = comb.or bin %622, %660 : i1
    %911 = comb.mux bin %910, %c0_i32, %909 : i32
    %inflight_1 = seq.firreg %1003 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 270 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %1006 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 285 : ui64} : i24
    %912 = comb.shl bin %c4095_i27, %486 {sv.namehint = "_c_first_beats1_decode_T_5"} : i27
    %913 = comb.extract %912 from 3 : (i27) -> i9
    %914 = comb.xor %913, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_7"} : i9
    %915 = comb.mux bin %741, %914, %c0_i9 {sv.namehint = "c_first_beats1_1"} : i9
    %c_first_counter_1 = seq.firreg %919 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 309 : ui64} : i9
    %916 = comb.add %c_first_counter_1, %c-1_i9 {sv.namehint = "_c_first_counter1_T_1"} : i9
    %917 = comb.icmp bin eq %c_first_counter_1, %c0_i9 {sv.namehint = "c_first_1"} : i9
    %918 = comb.mux bin %917, %915, %916 {sv.namehint = "_c_first_counter_T_1"} : i9
    %919 = comb.mux bin %737, %918, %c_first_counter_1 : i9
    %920 = comb.shl bin %c4095_i27, %661 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %921 = comb.extract %920 from 3 : (i27) -> i9
    %922 = comb.xor %921, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %923 = comb.mux bin %665, %922, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %927 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 318 : ui64} : i9
    %924 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %925 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %926 = comb.mux bin %925, %923, %924 {sv.namehint = "_d_first_counter_T_2"} : i9
    %927 = comb.mux bin %660, %926, %d_first_counter_2 : i9
    %928 = comb.shru bin %inflight_sizes_1, %794 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %929 = comb.extract %928 from 1 : (i24) -> i7
    %930 = comb.concat %false, %929 {sv.namehint = "c_size_lookup"} : i1, i7
    %931 = comb.and bin %io_in_c_valid, %917 {sv.namehint = "_same_cycle_resp_T_3"} : i1
    %932 = comb.extract %io_in_c_bits_opcode from 2 {sv.namehint = "_same_cycle_resp_T_4"} : (i3) -> i1
    %933 = comb.extract %io_in_c_bits_opcode from 1 {sv.namehint = "_same_cycle_resp_T_5"} : (i3) -> i1
    %934 = comb.and bin %932, %933 : i1
    %935 = comb.and bin %931, %934 : i1
    %936 = comb.concat %c0_i2, %io_in_c_bits_source : i2, i2
    %937 = comb.shl bin %c1_i4, %936 {sv.namehint = "_c_set_wo_ready_T"} : i4
    %938 = comb.extract %937 from 0 : (i4) -> i3
    %939 = comb.mux bin %935, %938, %c0_i3 {sv.namehint = "c_set_wo_ready"} : i3
    %940 = comb.and bin %737, %917, %934 : i1
    %941 = comb.shl bin %c1_i4, %936 {sv.namehint = "_c_set_T"} : i4
    %942 = comb.extract %941 from 0 : (i4) -> i3
    %943 = comb.mux bin %940, %942, %c0_i3 {sv.namehint = "c_set"} : i3
    %944 = comb.concat %io_in_c_bits_size, %true {sv.namehint = "_c_sizes_set_interm_T_1"} : i4, i1
    %945 = comb.mux bin %940, %944, %c0_i5 {sv.namehint = "c_sizes_set_interm"} : i5
    %946 = comb.concat %c0_i31, %945 : i31, i5
    %947 = comb.concat %c0_i31, %io_in_c_bits_source, %c0_i3 : i31, i2, i3
    %948 = comb.shl bin %946, %947 {sv.namehint = "_c_sizes_set_T_1"} : i36
    %949 = comb.extract %948 from 0 : (i36) -> i24
    %950 = comb.mux bin %940, %949, %c0_i24 {sv.namehint = "c_sizes_set"} : i24
    %951 = comb.concat %false, %io_in_c_bits_source : i1, i2
    %952 = comb.shru bin %inflight_1, %951 : i3
    %953 = comb.extract %952 from 0 : (i3) -> i1
    %954 = comb.xor bin %953, %true : i1
    %955 = comb.or bin %954, %reset : i1
    %956 = comb.xor bin %955, %true : i1
    %957 = comb.and bin %940, %956 : i1
    %958 = comb.and bin %io_in_d_valid, %925 : i1
    %959 = comb.and bin %958, %828 : i1
    %960 = comb.shl bin %c1_i4, %832 {sv.namehint = "_d_clr_wo_ready_T_1"} : i4
    %961 = comb.extract %960 from 0 : (i4) -> i3
    %962 = comb.mux bin %959, %961, %c0_i3 {sv.namehint = "d_clr_wo_ready_1"} : i3
    %963 = comb.and bin %660, %925, %828 : i1
    %964 = comb.shl bin %c1_i4, %832 {sv.namehint = "_d_clr_T_1"} : i4
    %965 = comb.extract %964 from 0 : (i4) -> i3
    %966 = comb.mux bin %963, %965, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %967 = comb.shl bin %c255_i47, %844 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %968 = comb.extract %967 from 0 : (i47) -> i24
    %969 = comb.mux bin %963, %968, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %970 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_8"} : i2
    %971 = comb.and bin %931, %932, %933, %970 {sv.namehint = "same_cycle_resp_1"} : i1
    %972 = comb.shru bin %inflight_1, %850 : i3
    %973 = comb.extract %972 from 0 : (i3) -> i1
    %974 = comb.or bin %973, %971, %reset : i1
    %975 = comb.xor bin %974, %true : i1
    %976 = comb.and bin %959, %975 : i1
    %977 = comb.and bin %959, %971 : i1
    %978 = comb.icmp bin eq %io_in_d_bits_size, %io_in_c_bits_size : i4
    %979 = comb.or bin %978, %reset : i1
    %980 = comb.xor bin %979, %true : i1
    %981 = comb.and bin %977, %980 : i1
    %982 = comb.xor bin %971, %true : i1
    %983 = comb.and bin %959, %982 : i1
    %984 = comb.icmp bin eq %877, %930 : i8
    %985 = comb.or bin %984, %reset : i1
    %986 = comb.xor bin %985, %true : i1
    %987 = comb.and bin %983, %986 : i1
    %988 = comb.and bin %958, %917 : i1
    %989 = comb.and bin %988, %io_in_c_valid : i1
    %990 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source : i2
    %991 = comb.and bin %989, %990 : i1
    %992 = comb.and bin %991, %828 : i1
    %993 = comb.or bin %887, %io_in_c_ready, %reset : i1
    %994 = comb.xor bin %993, %true : i1
    %995 = comb.and bin %992, %994 : i1
    %996 = comb.icmp bin ne %939, %c0_i3 : i3
    %997 = comb.icmp bin ne %939, %962 : i3
    %998 = comb.or bin %997, %reset : i1
    %999 = comb.xor bin %998, %true : i1
    %1000 = comb.and bin %996, %999 : i1
    %1001 = comb.or bin %inflight_1, %943 {sv.namehint = "_inflight_T_3"} : i3
    %1002 = comb.xor bin %966, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %1003 = comb.and bin %1001, %1002 {sv.namehint = "_inflight_T_5"} : i3
    %1004 = comb.or bin %inflight_sizes_1, %950 {sv.namehint = "_inflight_sizes_T_3"} : i24
    %1005 = comb.xor bin %969, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %1006 = comb.and bin %1004, %1005 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %1014 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 327 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %1007 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %1008 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %1009 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %1010 = comb.or bin %1007, %1008, %1009, %reset : i1
    %1011 = comb.xor bin %1010, %true : i1
    %1012 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %1013 = comb.or bin %737, %660 : i1
    %1014 = comb.mux bin %1013, %c0_i32, %1012 : i32
    %inflight_2 = seq.firreg %1048 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 359 : ui64} : i4
    %1015 = comb.shl bin %c4095_i27, %661 {sv.namehint = "_d_first_beats1_decode_T_13"} : i27
    %1016 = comb.extract %1015 from 3 : (i27) -> i9
    %1017 = comb.xor %1016, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_15"} : i9
    %1018 = comb.mux bin %665, %1017, %c0_i9 {sv.namehint = "d_first_beats1_3"} : i9
    %d_first_counter_3 = seq.firreg %1022 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 363 : ui64} : i9
    %1019 = comb.add %d_first_counter_3, %c-1_i9 {sv.namehint = "_d_first_counter1_T_3"} : i9
    %1020 = comb.icmp bin eq %d_first_counter_3, %c0_i9 {sv.namehint = "d_first_3"} : i9
    %1021 = comb.mux bin %1020, %1018, %1019 {sv.namehint = "_d_first_counter_T_3"} : i9
    %1022 = comb.mux bin %660, %1021, %d_first_counter_3 : i9
    %1023 = comb.extract %io_in_d_bits_opcode from 2 : (i3) -> i1
    %1024 = comb.extract %io_in_d_bits_opcode from 1 : (i3) -> i1
    %1025 = comb.xor bin %1024, %true : i1
    %1026 = comb.and bin %660, %1020, %1023, %1025 : i1
    %1027 = comb.concat %c0_i2, %io_in_d_bits_sink : i2, i2
    %1028 = comb.shl bin %c1_i4, %1027 {sv.namehint = "_d_set_T"} : i4
    %1029 = comb.mux bin %1026, %1028, %c0_i4 {sv.namehint = "d_set"} : i4
    %1030 = comb.shru bin %inflight_2, %1027 : i4
    %1031 = comb.extract %1030 from 0 : (i4) -> i1
    %1032 = comb.xor bin %1031, %true : i1
    %1033 = comb.or bin %1032, %reset : i1
    %1034 = comb.xor bin %1033, %true : i1
    %1035 = comb.and bin %1026, %1034 : i1
    %1036 = comb.and bin %io_in_e_ready, %io_in_e_valid : i1
    %1037 = comb.concat %c0_i2, %io_in_e_bits_sink : i2, i2
    %1038 = comb.shl bin %c1_i4, %1037 {sv.namehint = "_e_clr_T"} : i4
    %1039 = comb.mux bin %1036, %1038, %c0_i4 {sv.namehint = "e_clr"} : i4
    %1040 = comb.or bin %1029, %inflight_2 : i4
    %1041 = comb.shru bin %1040, %1037 : i4
    %1042 = comb.extract %1041 from 0 : (i4) -> i1
    %1043 = comb.or bin %1042, %reset : i1
    %1044 = comb.xor bin %1043, %true : i1
    %1045 = comb.and bin %1036, %1044 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %1049 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1049 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1050 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %1050 {
          sv.fatal 1
        }
        %1051 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %1051 {
          sv.fatal 1
        }
        %1052 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %1052 {
          sv.fatal 1
        }
        %1053 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %1053 {
          sv.fatal 1
        }
        %1054 = comb.and bin %STOP_COND_, %111 : i1
        sv.if %1054 {
          sv.fatal 1
        }
        %1055 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %1055 {
          sv.fatal 1
        }
        %1056 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %1056 {
          sv.fatal 1
        }
        %1057 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %1057 {
          sv.fatal 1
        }
        %1058 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %1058 {
          sv.fatal 1
        }
        %1059 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %1059 {
          sv.fatal 1
        }
        %1060 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %1060 {
          sv.fatal 1
        }
        %1061 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %1061 {
          sv.fatal 1
        }
        %1062 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %1062 {
          sv.fatal 1
        }
        %1063 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %1063 {
          sv.fatal 1
        }
        %1064 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %1064 {
          sv.fatal 1
        }
        %1065 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %1065 {
          sv.fatal 1
        }
        %1066 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %1066 {
          sv.fatal 1
        }
        %1067 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %1067 {
          sv.fatal 1
        }
        %1068 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %1068 {
          sv.fatal 1
        }
        %1069 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %1069 {
          sv.fatal 1
        }
        %1070 = comb.and bin %STOP_COND_, %153 : i1
        sv.if %1070 {
          sv.fatal 1
        }
        %1071 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %1071 {
          sv.fatal 1
        }
        %1072 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %1072 {
          sv.fatal 1
        }
        %1073 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %1073 {
          sv.fatal 1
        }
        %1074 = comb.and bin %STOP_COND_, %173 : i1
        sv.if %1074 {
          sv.fatal 1
        }
        %1075 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %1075 {
          sv.fatal 1
        }
        %1076 = comb.and bin %STOP_COND_, %175 : i1
        sv.if %1076 {
          sv.fatal 1
        }
        %1077 = comb.and bin %STOP_COND_, %176 : i1
        sv.if %1077 {
          sv.fatal 1
        }
        %1078 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %1078 {
          sv.fatal 1
        }
        %1079 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %1079 {
          sv.fatal 1
        }
        %1080 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %1080 {
          sv.fatal 1
        }
        %1081 = comb.and bin %STOP_COND_, %182 : i1
        sv.if %1081 {
          sv.fatal 1
        }
        %1082 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %1082 {
          sv.fatal 1
        }
        %1083 = comb.and bin %STOP_COND_, %189 : i1
        sv.if %1083 {
          sv.fatal 1
        }
        %1084 = comb.and bin %STOP_COND_, %197 : i1
        sv.if %1084 {
          sv.fatal 1
        }
        %1085 = comb.and bin %STOP_COND_, %198 : i1
        sv.if %1085 {
          sv.fatal 1
        }
        %1086 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %1086 {
          sv.fatal 1
        }
        %1087 = comb.and bin %STOP_COND_, %203 : i1
        sv.if %1087 {
          sv.fatal 1
        }
        %1088 = comb.and bin %STOP_COND_, %204 : i1
        sv.if %1088 {
          sv.fatal 1
        }
        %1089 = comb.and bin %STOP_COND_, %207 : i1
        sv.if %1089 {
          sv.fatal 1
        }
        %1090 = comb.and bin %STOP_COND_, %208 : i1
        sv.if %1090 {
          sv.fatal 1
        }
        %1091 = comb.and bin %STOP_COND_, %209 : i1
        sv.if %1091 {
          sv.fatal 1
        }
        %1092 = comb.and bin %STOP_COND_, %214 : i1
        sv.if %1092 {
          sv.fatal 1
        }
        %1093 = comb.and bin %STOP_COND_, %215 : i1
        sv.if %1093 {
          sv.fatal 1
        }
        %1094 = comb.and bin %STOP_COND_, %221 : i1
        sv.if %1094 {
          sv.fatal 1
        }
        %1095 = comb.and bin %STOP_COND_, %222 : i1
        sv.if %1095 {
          sv.fatal 1
        }
        %1096 = comb.and bin %STOP_COND_, %223 : i1
        sv.if %1096 {
          sv.fatal 1
        }
        %1097 = comb.and bin %STOP_COND_, %227 : i1
        sv.if %1097 {
          sv.fatal 1
        }
        %1098 = comb.and bin %STOP_COND_, %228 : i1
        sv.if %1098 {
          sv.fatal 1
        }
        %1099 = comb.and bin %STOP_COND_, %229 : i1
        sv.if %1099 {
          sv.fatal 1
        }
        %1100 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %1100 {
          sv.fatal 1
        }
        %1101 = comb.and bin %STOP_COND_, %241 : i1
        sv.if %1101 {
          sv.fatal 1
        }
        %1102 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %1102 {
          sv.fatal 1
        }
        %1103 = comb.and bin %STOP_COND_, %249 : i1
        sv.if %1103 {
          sv.fatal 1
        }
        %1104 = comb.and bin %STOP_COND_, %253 : i1
        sv.if %1104 {
          sv.fatal 1
        }
        %1105 = comb.and bin %STOP_COND_, %257 : i1
        sv.if %1105 {
          sv.fatal 1
        }
        %1106 = comb.and bin %STOP_COND_, %260 : i1
        sv.if %1106 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1107 = comb.and bin %STOP_COND_, %261 : i1
        sv.if %1107 {
          sv.fatal 1
        }
        %1108 = comb.and bin %STOP_COND_, %265 : i1
        sv.if %1108 {
          sv.fatal 1
        }
        %1109 = comb.and bin %STOP_COND_, %269 : i1
        sv.if %1109 {
          sv.fatal 1
        }
        %1110 = comb.and bin %STOP_COND_, %270 : i1
        sv.if %1110 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1111 = comb.and bin %STOP_COND_, %273 : i1
        sv.if %1111 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1112 = comb.and bin %STOP_COND_, %274 : i1
        sv.if %1112 {
          sv.fatal 1
        }
        %1113 = comb.and bin %STOP_COND_, %275 : i1
        sv.if %1113 {
          sv.fatal 1
        }
        %1114 = comb.and bin %STOP_COND_, %276 : i1
        sv.if %1114 {
          sv.fatal 1
        }
        %1115 = comb.and bin %STOP_COND_, %279 : i1
        sv.if %1115 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1116 = comb.and bin %STOP_COND_, %282 : i1
        sv.if %1116 {
          sv.fatal 1
        }
        %1117 = comb.and bin %STOP_COND_, %283 : i1
        sv.if %1117 {
          sv.fatal 1
        }
        %1118 = comb.and bin %STOP_COND_, %284 : i1
        sv.if %1118 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1119 = comb.and bin %STOP_COND_, %287 : i1
        sv.if %1119 {
          sv.fatal 1
        }
        %1120 = comb.and bin %STOP_COND_, %288 : i1
        sv.if %1120 {
          sv.fatal 1
        }
        %1121 = comb.and bin %STOP_COND_, %289 : i1
        sv.if %1121 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1122 = comb.and bin %STOP_COND_, %292 : i1
        sv.if %1122 {
          sv.fatal 1
        }
        %1123 = comb.and bin %STOP_COND_, %293 : i1
        sv.if %1123 {
          sv.fatal 1
        }
        %1124 = comb.and bin %STOP_COND_, %294 : i1
        sv.if %1124 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1125 = comb.and bin %STOP_COND_, %298 : i1
        sv.if %1125 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1126 = comb.and bin %STOP_COND_, %405 : i1
        sv.if %1126 {
          sv.fatal 1
        }
        %1127 = comb.and bin %STOP_COND_, %408 : i1
        sv.if %1127 {
          sv.fatal 1
        }
        %1128 = comb.and bin %STOP_COND_, %411 : i1
        sv.if %1128 {
          sv.fatal 1
        }
        %1129 = comb.and bin %STOP_COND_, %414 : i1
        sv.if %1129 {
          sv.fatal 1
        }
        %1130 = comb.and bin %STOP_COND_, %418 : i1
        sv.if %1130 {
          sv.fatal 1
        }
        %1131 = comb.and bin %STOP_COND_, %422 : i1
        sv.if %1131 {
          sv.fatal 1
        }
        %1132 = comb.and bin %STOP_COND_, %426 : i1
        sv.if %1132 {
          sv.fatal 1
        }
        %1133 = comb.and bin %STOP_COND_, %430 : i1
        sv.if %1133 {
          sv.fatal 1
        }
        %1134 = comb.and bin %STOP_COND_, %431 : i1
        sv.if %1134 {
          sv.fatal 1
        }
        %1135 = comb.and bin %STOP_COND_, %432 : i1
        sv.if %1135 {
          sv.fatal 1
        }
        %1136 = comb.and bin %STOP_COND_, %433 : i1
        sv.if %1136 {
          sv.fatal 1
        }
        %1137 = comb.and bin %STOP_COND_, %437 : i1
        sv.if %1137 {
          sv.fatal 1
        }
        %1138 = comb.and bin %STOP_COND_, %438 : i1
        sv.if %1138 {
          sv.fatal 1
        }
        %1139 = comb.and bin %STOP_COND_, %439 : i1
        sv.if %1139 {
          sv.fatal 1
        }
        %1140 = comb.and bin %STOP_COND_, %442 : i1
        sv.if %1140 {
          sv.fatal 1
        }
        %1141 = comb.and bin %STOP_COND_, %443 : i1
        sv.if %1141 {
          sv.fatal 1
        }
        %1142 = comb.and bin %STOP_COND_, %444 : i1
        sv.if %1142 {
          sv.fatal 1
        }
        %1143 = comb.and bin %STOP_COND_, %445 : i1
        sv.if %1143 {
          sv.fatal 1
        }
        %1144 = comb.and bin %STOP_COND_, %446 : i1
        sv.if %1144 {
          sv.fatal 1
        }
        %1145 = comb.and bin %STOP_COND_, %447 : i1
        sv.if %1145 {
          sv.fatal 1
        }
        %1146 = comb.and bin %STOP_COND_, %450 : i1
        sv.if %1146 {
          sv.fatal 1
        }
        %1147 = comb.and bin %STOP_COND_, %451 : i1
        sv.if %1147 {
          sv.fatal 1
        }
        %1148 = comb.and bin %STOP_COND_, %452 : i1
        sv.if %1148 {
          sv.fatal 1
        }
        %1149 = comb.and bin %STOP_COND_, %453 : i1
        sv.if %1149 {
          sv.fatal 1
        }
        %1150 = comb.and bin %STOP_COND_, %454 : i1
        sv.if %1150 {
          sv.fatal 1
        }
        %1151 = comb.and bin %STOP_COND_, %460 : i1
        sv.if %1151 {
          sv.fatal 1
        }
        %1152 = comb.and bin %STOP_COND_, %463 : i1
        sv.if %1152 {
          sv.fatal 1
        }
        %1153 = comb.and bin %STOP_COND_, %464 : i1
        sv.if %1153 {
          sv.fatal 1
        }
        %1154 = comb.and bin %STOP_COND_, %465 : i1
        sv.if %1154 {
          sv.fatal 1
        }
        %1155 = comb.and bin %STOP_COND_, %466 : i1
        sv.if %1155 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1156 = comb.and bin %STOP_COND_, %467 : i1
        sv.if %1156 {
          sv.fatal 1
        }
        %1157 = comb.and bin %STOP_COND_, %470 : i1
        sv.if %1157 {
          sv.fatal 1
        }
        %1158 = comb.and bin %STOP_COND_, %471 : i1
        sv.if %1158 {
          sv.fatal 1
        }
        %1159 = comb.and bin %STOP_COND_, %472 : i1
        sv.if %1159 {
          sv.fatal 1
        }
        %1160 = comb.and bin %STOP_COND_, %473 : i1
        sv.if %1160 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1161 = comb.and bin %STOP_COND_, %474 : i1
        sv.if %1161 {
          sv.fatal 1
        }
        %1162 = comb.and bin %STOP_COND_, %477 : i1
        sv.if %1162 {
          sv.fatal 1
        }
        %1163 = comb.and bin %STOP_COND_, %478 : i1
        sv.if %1163 {
          sv.fatal 1
        }
        %1164 = comb.and bin %STOP_COND_, %479 : i1
        sv.if %1164 {
          sv.fatal 1
        }
        %1165 = comb.and bin %STOP_COND_, %480 : i1
        sv.if %1165 {
          sv.fatal 1
        }
        %1166 = comb.and bin %STOP_COND_, %481 : i1
        sv.if %1166 {
          sv.fatal 1
        }
        %1167 = comb.and bin %STOP_COND_, %482 : i1
        sv.if %1167 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1168 = comb.and bin %STOP_COND_, %533 : i1
        sv.if %1168 {
          sv.fatal 1
        }
        %1169 = comb.and bin %STOP_COND_, %536 : i1
        sv.if %1169 {
          sv.fatal 1
        }
        %1170 = comb.and bin %STOP_COND_, %540 : i1
        sv.if %1170 {
          sv.fatal 1
        }
        %1171 = comb.and bin %STOP_COND_, %543 : i1
        sv.if %1171 {
          sv.fatal 1
        }
        %1172 = comb.and bin %STOP_COND_, %548 : i1
        sv.if %1172 {
          sv.fatal 1
        }
        %1173 = comb.and bin %STOP_COND_, %552 : i1
        sv.if %1173 {
          sv.fatal 1
        }
        %1174 = comb.and bin %STOP_COND_, %555 : i1
        sv.if %1174 {
          sv.fatal 1
        }
        %1175 = comb.and bin %STOP_COND_, %556 : i1
        sv.if %1175 {
          sv.fatal 1
        }
        %1176 = comb.and bin %STOP_COND_, %557 : i1
        sv.if %1176 {
          sv.fatal 1
        }
        %1177 = comb.and bin %STOP_COND_, %558 : i1
        sv.if %1177 {
          sv.fatal 1
        }
        %1178 = comb.and bin %STOP_COND_, %559 : i1
        sv.if %1178 {
          sv.fatal 1
        }
        %1179 = comb.and bin %STOP_COND_, %569 : i1
        sv.if %1179 {
          sv.fatal 1
        }
        %1180 = comb.and bin %STOP_COND_, %582 : i1
        sv.if %1180 {
          sv.fatal 1
        }
        %1181 = comb.and bin %STOP_COND_, %583 : i1
        sv.if %1181 {
          sv.fatal 1
        }
        %1182 = comb.and bin %STOP_COND_, %584 : i1
        sv.if %1182 {
          sv.fatal 1
        }
        %1183 = comb.and bin %STOP_COND_, %585 : i1
        sv.if %1183 {
          sv.fatal 1
        }
        %1184 = comb.and bin %STOP_COND_, %586 : i1
        sv.if %1184 {
          sv.fatal 1
        }
        %1185 = comb.and bin %STOP_COND_, %587 : i1
        sv.if %1185 {
          sv.fatal 1
        }
        %1186 = comb.and bin %STOP_COND_, %590 : i1
        sv.if %1186 {
          sv.fatal 1
        }
        %1187 = comb.and bin %STOP_COND_, %594 : i1
        sv.if %1187 {
          sv.fatal 1
        }
        %1188 = comb.and bin %STOP_COND_, %595 : i1
        sv.if %1188 {
          sv.fatal 1
        }
        %1189 = comb.and bin %STOP_COND_, %596 : i1
        sv.if %1189 {
          sv.fatal 1
        }
        %1190 = comb.and bin %STOP_COND_, %597 : i1
        sv.if %1190 {
          sv.fatal 1
        }
        %1191 = comb.and bin %STOP_COND_, %598 : i1
        sv.if %1191 {
          sv.fatal 1
        }
        %1192 = comb.and bin %STOP_COND_, %601 : i1
        sv.if %1192 {
          sv.fatal 1
        }
        %1193 = comb.and bin %STOP_COND_, %602 : i1
        sv.if %1193 {
          sv.fatal 1
        }
        %1194 = comb.and bin %STOP_COND_, %603 : i1
        sv.if %1194 {
          sv.fatal 1
        }
        %1195 = comb.and bin %STOP_COND_, %607 : i1
        sv.if %1195 {
          sv.fatal 1
        }
        %1196 = comb.and bin %STOP_COND_, %608 : i1
        sv.if %1196 {
          sv.fatal 1
        }
        %1197 = comb.and bin %STOP_COND_, %611 : i1
        sv.if %1197 {
          sv.fatal 1
        }
        %1198 = comb.and bin %STOP_COND_, %612 : i1
        sv.if %1198 {
          sv.fatal 1
        }
        %1199 = comb.and bin %STOP_COND_, %613 : i1
        sv.if %1199 {
          sv.fatal 1
        }
        %1200 = comb.and bin %STOP_COND_, %614 : i1
        sv.if %1200 {
          sv.fatal 1
        }
        %1201 = comb.and bin %STOP_COND_, %617 : i1
        sv.if %1201 {
          sv.fatal 1
        }
        %1202 = comb.and bin %STOP_COND_, %618 : i1
        sv.if %1202 {
          sv.fatal 1
        }
        %1203 = comb.and bin %STOP_COND_, %619 : i1
        sv.if %1203 {
          sv.fatal 1
        }
        %1204 = comb.and bin %STOP_COND_, %620 : i1
        sv.if %1204 {
          sv.fatal 1
        }
        %1205 = comb.and bin %STOP_COND_, %621 : i1
        sv.if %1205 {
          sv.fatal 1
        }
        sv.if %1049 {
          sv.fatal 1
        }
        %1206 = comb.and bin %STOP_COND_, %637 : i1
        sv.if %1206 {
          sv.fatal 1
        }
        %1207 = comb.and bin %STOP_COND_, %641 : i1
        sv.if %1207 {
          sv.fatal 1
        }
        %1208 = comb.and bin %STOP_COND_, %645 : i1
        sv.if %1208 {
          sv.fatal 1
        }
        %1209 = comb.and bin %STOP_COND_, %649 : i1
        sv.if %1209 {
          sv.fatal 1
        }
        %1210 = comb.and bin %STOP_COND_, %653 : i1
        sv.if %1210 {
          sv.fatal 1
        }
        %1211 = comb.and bin %STOP_COND_, %676 : i1
        sv.if %1211 {
          sv.fatal 1
        }
        %1212 = comb.and bin %STOP_COND_, %680 : i1
        sv.if %1212 {
          sv.fatal 1
        }
        %1213 = comb.and bin %STOP_COND_, %684 : i1
        sv.if %1213 {
          sv.fatal 1
        }
        %1214 = comb.and bin %STOP_COND_, %688 : i1
        sv.if %1214 {
          sv.fatal 1
        }
        %1215 = comb.and bin %STOP_COND_, %692 : i1
        sv.if %1215 {
          sv.fatal 1
        }
        %1216 = comb.and bin %STOP_COND_, %696 : i1
        sv.if %1216 {
          sv.fatal 1
        }
        %1217 = comb.and bin %STOP_COND_, %714 : i1
        sv.if %1217 {
          sv.fatal 1
        }
        %1218 = comb.and bin %STOP_COND_, %718 : i1
        sv.if %1218 {
          sv.fatal 1
        }
        %1219 = comb.and bin %STOP_COND_, %722 : i1
        sv.if %1219 {
          sv.fatal 1
        }
        %1220 = comb.and bin %STOP_COND_, %726 : i1
        sv.if %1220 {
          sv.fatal 1
        }
        %1221 = comb.and bin %STOP_COND_, %730 : i1
        sv.if %1221 {
          sv.fatal 1
        }
        %1222 = comb.and bin %STOP_COND_, %752 : i1
        sv.if %1222 {
          sv.fatal 1
        }
        %1223 = comb.and bin %STOP_COND_, %756 : i1
        sv.if %1223 {
          sv.fatal 1
        }
        %1224 = comb.and bin %STOP_COND_, %760 : i1
        sv.if %1224 {
          sv.fatal 1
        }
        %1225 = comb.and bin %STOP_COND_, %764 : i1
        sv.if %1225 {
          sv.fatal 1
        }
        %1226 = comb.and bin %STOP_COND_, %768 : i1
        sv.if %1226 {
          sv.fatal 1
        }
        %1227 = comb.and bin %STOP_COND_, %827 : i1
        sv.if %1227 {
          sv.fatal 1
        }
        %1228 = comb.and bin %STOP_COND_, %855 : i1
        sv.if %1228 {
          sv.fatal 1
        }
        %1229 = comb.and bin %STOP_COND_, %863 : i1
        sv.if %1229 {
          sv.fatal 1
        }
        %1230 = comb.and bin %STOP_COND_, %867 : i1
        sv.if %1230 {
          sv.fatal 1
        }
        %1231 = comb.and bin %STOP_COND_, %876 : i1
        sv.if %1231 {
          sv.fatal 1
        }
        %1232 = comb.and bin %STOP_COND_, %881 : i1
        sv.if %1232 {
          sv.fatal 1
        }
        %1233 = comb.and bin %STOP_COND_, %890 : i1
        sv.if %1233 {
          sv.fatal 1
        }
        %1234 = comb.and bin %STOP_COND_, %894 : i1
        sv.if %1234 {
          sv.fatal 1
        }
        %1235 = comb.and bin %STOP_COND_, %908 : i1
        sv.if %1235 {
          sv.fatal 1
        }
        %1236 = comb.and bin %STOP_COND_, %957 : i1
        sv.if %1236 {
          sv.fatal 1
        }
        %1237 = comb.and bin %STOP_COND_, %976 : i1
        sv.if %1237 {
          sv.fatal 1
        }
        %1238 = comb.and bin %STOP_COND_, %981 : i1
        sv.if %1238 {
          sv.fatal 1
        }
        %1239 = comb.and bin %STOP_COND_, %987 : i1
        sv.if %1239 {
          sv.fatal 1
        }
        %1240 = comb.and bin %STOP_COND_, %995 : i1
        sv.if %1240 {
          sv.fatal 1
        }
        %1241 = comb.and bin %STOP_COND_, %1000 : i1
        sv.if %1241 {
          sv.fatal 1
        }
        %1242 = comb.and bin %STOP_COND_, %1011 : i1
        sv.if %1242 {
          sv.fatal 1
        }
        %1243 = comb.and bin %STOP_COND_, %1035 : i1
        sv.if %1243 {
          sv.fatal 1
        }
        %1244 = comb.and bin %STOP_COND_, %1045 : i1
        sv.if %1244 {
          sv.fatal 1
        }
      }
    }
    %1046 = comb.or bin %inflight_2, %1029 {sv.namehint = "_inflight_T_6"} : i4
    %1047 = comb.xor bin %1039, %c-1_i4 {sv.namehint = "_inflight_T_7"} : i4
    %1048 = comb.and bin %1046, %1047 {sv.namehint = "_inflight_T_8"} : i4
    hw.output
  }
  hw.module private @TLXbar(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_2_a_ready : i1, out auto_out_2_a_valid : i1, out auto_out_2_a_bits_opcode : i3, out auto_out_2_a_bits_param : i3, out auto_out_2_a_bits_size : i4, out auto_out_2_a_bits_source : i2, out auto_out_2_a_bits_address : i31, out auto_out_2_a_bits_user_amba_prot_bufferable : i1, out auto_out_2_a_bits_user_amba_prot_modifiable : i1, out auto_out_2_a_bits_user_amba_prot_readalloc : i1, out auto_out_2_a_bits_user_amba_prot_writealloc : i1, out auto_out_2_a_bits_user_amba_prot_privileged : i1, out auto_out_2_a_bits_user_amba_prot_secure : i1, out auto_out_2_a_bits_user_amba_prot_fetch : i1, out auto_out_2_a_bits_mask : i8, out auto_out_2_a_bits_data : i64, out auto_out_2_a_bits_corrupt : i1, out auto_out_2_d_ready : i1, in %auto_out_2_d_valid : i1, in %auto_out_2_d_bits_opcode : i3, in %auto_out_2_d_bits_size : i4, in %auto_out_2_d_bits_source : i2, in %auto_out_2_d_bits_denied : i1, in %auto_out_2_d_bits_data : i64, in %auto_out_2_d_bits_corrupt : i1, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_param : i3, out auto_out_1_a_bits_size : i3, out auto_out_1_a_bits_source : i2, out auto_out_1_a_bits_address : i32, out auto_out_1_a_bits_user_amba_prot_bufferable : i1, out auto_out_1_a_bits_user_amba_prot_modifiable : i1, out auto_out_1_a_bits_user_amba_prot_readalloc : i1, out auto_out_1_a_bits_user_amba_prot_writealloc : i1, out auto_out_1_a_bits_user_amba_prot_privileged : i1, out auto_out_1_a_bits_user_amba_prot_secure : i1, out auto_out_1_a_bits_user_amba_prot_fetch : i1, out auto_out_1_a_bits_mask : i8, out auto_out_1_a_bits_data : i64, out auto_out_1_a_bits_corrupt : i1, out auto_out_1_b_ready : i1, in %auto_out_1_b_valid : i1, in %auto_out_1_b_bits_param : i2, in %auto_out_1_b_bits_address : i32, in %auto_out_1_c_ready : i1, out auto_out_1_c_valid : i1, out auto_out_1_c_bits_opcode : i3, out auto_out_1_c_bits_param : i3, out auto_out_1_c_bits_size : i3, out auto_out_1_c_bits_source : i2, out auto_out_1_c_bits_address : i32, out auto_out_1_c_bits_data : i64, out auto_out_1_c_bits_corrupt : i1, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_param : i2, in %auto_out_1_d_bits_size : i3, in %auto_out_1_d_bits_source : i2, in %auto_out_1_d_bits_sink : i2, in %auto_out_1_d_bits_denied : i1, in %auto_out_1_d_bits_data : i64, in %auto_out_1_d_bits_corrupt : i1, out auto_out_1_e_valid : i1, out auto_out_1_e_bits_sink : i2, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_param : i3, out auto_out_0_a_bits_size : i4, out auto_out_0_a_bits_source : i2, out auto_out_0_a_bits_address : i28, out auto_out_0_a_bits_mask : i8, out auto_out_0_a_bits_data : i64, out auto_out_0_a_bits_corrupt : i1, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_param : i2, in %auto_out_0_d_bits_size : i4, in %auto_out_0_d_bits_source : i2, in %auto_out_0_d_bits_sink : i1, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_data : i64, in %auto_out_0_d_bits_corrupt : i1) {
    %c-2_i2 = hw.constant -2 : i2
    %c0_i8 = hw.constant 0 : i8
    %c-1_i5 = hw.constant -1 : i5
    %c0_i18 = hw.constant 0 : i18
    %c-1_i9 = hw.constant -1 : i9
    %c255_i23 = hw.constant 255 : i23
    %c63_i21 = hw.constant 63 : i21
    %c4095_i27 = hw.constant 4095 : i27
    %c-2_i3 = hw.constant -2 : i3
    %c6_i4 = hw.constant 6 : i4
    %c0_i2 = hw.constant 0 : i2
    %c-1_i8 = hw.constant -1 : i8
    %false = hw.constant false
    %true = hw.constant true
    %c0_i5 = hw.constant 0 : i5
    %c0_i9 = hw.constant 0 : i9
    %c0_i64 = hw.constant 0 : i64
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c0_i23 = hw.constant 0 : i23
    %c0_i19 = hw.constant 0 : i19
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %37: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %auto_out_1_b_valid: i1, io_in_b_bits_opcode: %c-2_i3: i3, io_in_b_bits_param: %auto_out_1_b_bits_param: i2, io_in_b_bits_size: %c6_i4: i4, io_in_b_bits_source: %c0_i2: i2, io_in_b_bits_address: %auto_out_1_b_bits_address: i32, io_in_b_bits_mask: %c-1_i8: i8, io_in_b_bits_corrupt: %false: i1, io_in_c_ready: %auto_out_1_c_ready: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i4, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %auto_in_c_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %129: i1, io_in_d_bits_opcode: %159: i3, io_in_d_bits_param: %155: i2, io_in_d_bits_size: %152: i4, io_in_d_bits_source: %148: i2, io_in_d_bits_sink: %144: i2, io_in_d_bits_denied: %141: i1, io_in_d_bits_corrupt: %133: i1, io_in_e_ready: %true: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "bundleOut_0_out_1_bits_address"} : (i32) -> i28
    %2 = comb.concat %false, %auto_out_0_d_bits_sink {sv.namehint = "out_12_bits_sink"} : i1, i1
    %3 = comb.extract %auto_in_a_bits_size from 0 {sv.namehint = "bundleOut_1_out_1_bits_size"} : (i4) -> i3
    %4 = comb.extract %auto_in_c_bits_size from 0 {sv.namehint = "bundleOut_1_out_c_bits_size"} : (i4) -> i3
    %5 = comb.concat %false, %auto_out_1_d_bits_size {sv.namehint = "out_13_bits_size"} : i1, i3
    %6 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "bundleOut_2_out_1_bits_address"} : (i32) -> i31
    %7 = comb.extract %auto_in_a_bits_address from 30 : (i32) -> i2
    %8 = comb.icmp bin eq %7, %c0_i2 {sv.namehint = "requestAIO_0_0"} : i2
    %9 = comb.extract %auto_in_a_bits_address from 30 : (i32) -> i2
    %10 = comb.icmp eq %9, %c-2_i2 {sv.namehint = "requestAIO_0_1"} : i2
    %11 = comb.extract %auto_in_a_bits_address from 31 : (i32) -> i1
    %12 = comb.extract %auto_in_a_bits_address from 30 : (i32) -> i1
    %13 = comb.xor %12, %true : i1
    %14 = comb.concat %11, %13 : i1, i1
    %15 = comb.icmp bin eq %14, %c0_i2 {sv.namehint = "requestAIO_0_2"} : i2
    %16 = comb.concat %c0_i23, %auto_out_0_d_bits_size : i23, i4
    %17 = comb.shl bin %c4095_i27, %16 {sv.namehint = "_beatsDO_decode_T_1"} : i27
    %18 = comb.extract %17 from 3 : (i27) -> i9
    %19 = comb.xor %18, %c-1_i9 {sv.namehint = "_beatsDO_decode_T_3"} : i9
    %20 = comb.extract %auto_out_0_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata"} : (i3) -> i1
    %21 = comb.concat %c0_i18, %auto_out_1_d_bits_size : i18, i3
    %22 = comb.shl bin %c63_i21, %21 {sv.namehint = "_beatsDO_decode_T_5"} : i21
    %23 = comb.extract %22 from 3 : (i21) -> i3
    %24 = comb.xor %23, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_7"} : i3
    %25 = comb.extract %auto_out_1_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_1"} : (i3) -> i1
    %26 = comb.concat %c0_i19, %auto_out_2_d_bits_size : i19, i4
    %27 = comb.shl bin %c255_i23, %26 {sv.namehint = "_beatsDO_decode_T_9"} : i23
    %28 = comb.extract %27 from 3 : (i23) -> i5
    %29 = comb.xor %28, %c-1_i5 {sv.namehint = "_beatsDO_decode_T_11"} : i5
    %30 = comb.extract %auto_out_2_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_2"} : (i3) -> i1
    %31 = comb.and bin %auto_in_a_valid, %8 {sv.namehint = "portsAOI_filtered_0_earlyValid"} : i1
    %32 = comb.and bin %auto_in_a_valid, %10 {sv.namehint = "portsAOI_filtered_1_earlyValid"} : i1
    %33 = comb.and bin %auto_in_a_valid, %15 {sv.namehint = "portsAOI_filtered_2_earlyValid"} : i1
    %34 = comb.and %8, %auto_out_0_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T"} : i1
    %35 = comb.and %10, %auto_out_1_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_1"} : i1
    %36 = comb.and %15, %auto_out_2_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_2"} : i1
    %37 = comb.or bin %34, %35, %36 {sv.namehint = "_portsAOI_in_0_a_ready_T_4"} : i1
    %beatsLeft = seq.firreg %111 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %38 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %39 = comb.and bin %38, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %40 = comb.concat %auto_out_2_d_valid, %auto_out_1_d_valid, %auto_out_0_d_valid {sv.namehint = "readys_filter_lo"} : i1, i1, i1
    %readys_mask = seq.firreg %70 clock %clock reset sync %reset, %c-1_i3 {firrtl.random_init_start = 9 : ui64} : i3
    %41 = comb.xor bin %readys_mask, %c-1_i3 {sv.namehint = "_readys_filter_T"} : i3
    %42 = comb.and bin %40, %41 {sv.namehint = "readys_filter_hi"} : i3
    %43 = comb.extract %42 from 2 : (i3) -> i1
    %44 = comb.extract %42 from 0 : (i3) -> i2
    %45 = comb.concat %44, %auto_out_2_d_valid, %auto_out_1_d_valid : i2, i1, i1
    %46 = comb.concat %42, %auto_out_2_d_valid : i3, i1
    %47 = comb.or %45, %46 : i4
    %48 = comb.extract %47 from 3 : (i4) -> i1
    %49 = comb.extract %47 from 0 : (i4) -> i3
    %50 = comb.extract %47 from 2 : (i4) -> i2
    %51 = comb.concat %43, %50 : i1, i2
    %52 = comb.or %49, %51 {sv.namehint = "_readys_readys_T_1"} : i3
    %53 = comb.extract %readys_mask from 2 : (i3) -> i1
    %54 = comb.extract %readys_mask from 1 : (i3) -> i1
    %55 = comb.or %43, %54 : i1
    %56 = comb.extract %readys_mask from 0 : (i3) -> i1
    %57 = comb.or %48, %56 : i1
    %58 = comb.concat %53, %55, %57 {sv.namehint = "_readys_readys_T"} : i1, i1, i1
    %59 = comb.and bin %58, %52 {sv.namehint = "_readys_readys_T_2"} : i3
    %60 = comb.xor bin %59, %c-1_i3 {sv.namehint = "readys_readys"} : i3
    %61 = comb.icmp bin ne %40, %c0_i3 {sv.namehint = "_readys_T_5"} : i3
    %62 = comb.and bin %39, %61 {sv.namehint = "_readys_T_6"} : i1
    %63 = comb.and bin %60, %40 {sv.namehint = "_readys_mask_T"} : i3
    %64 = comb.extract %63 from 0 : (i3) -> i2
    %65 = comb.concat %64, %false {sv.namehint = "_readys_mask_T_2"} : i2, i1
    %66 = comb.or bin %63, %65 {sv.namehint = "_readys_mask_T_3"} : i3
    %67 = comb.extract %66 from 0 : (i3) -> i1
    %68 = comb.concat %67, %c0_i2 {sv.namehint = "_readys_mask_T_5"} : i1, i2
    %69 = comb.or bin %66, %68 {sv.namehint = "_readys_mask_T_7"} : i3
    %70 = comb.mux bin %62, %69, %readys_mask : i3
    %71 = comb.extract %60 from 0 {sv.namehint = "readys_0"} : (i3) -> i1
    %72 = comb.extract %60 from 1 {sv.namehint = "readys_1"} : (i3) -> i1
    %73 = comb.extract %60 from 2 {sv.namehint = "readys_2"} : (i3) -> i1
    %74 = comb.and bin %71, %auto_out_0_d_valid {sv.namehint = "prefixOR_1"} : i1
    %75 = comb.and bin %72, %auto_out_1_d_valid {sv.namehint = "earlyWinner_1"} : i1
    %76 = comb.and bin %73, %auto_out_2_d_valid {sv.namehint = "earlyWinner_2"} : i1
    %77 = comb.and bin %71, %auto_out_0_d_valid {sv.namehint = "winnerQual_0"} : i1
    %78 = comb.and bin %72, %auto_out_1_d_valid {sv.namehint = "winnerQual_1"} : i1
    %79 = comb.and bin %73, %auto_out_2_d_valid {sv.namehint = "winnerQual_2"} : i1
    %80 = comb.or bin %74, %75 {sv.namehint = "prefixOR_2"} : i1
    %81 = comb.xor bin %74, %true : i1
    %82 = comb.xor bin %75, %true : i1
    %83 = comb.or bin %81, %82 : i1
    %84 = comb.xor bin %80, %true : i1
    %85 = comb.xor bin %76, %true : i1
    %86 = comb.or bin %84, %85 : i1
    %87 = comb.and bin %83, %86 : i1
    %88 = comb.or bin %87, %reset : i1
    %89 = comb.xor bin %88, %true : i1
    %90 = comb.or bin %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T"} : i1
    %91 = comb.or bin %90, %auto_out_2_d_valid : i1
    %92 = comb.xor bin %91, %true : i1
    %93 = comb.or bin %92, %74, %75, %76, %reset : i1
    %94 = comb.xor bin %93, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %160 = comb.and bin %STOP_COND_, %false : i1
        sv.if %160 {
          sv.fatal 1
        }
        %161 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %161 {
          sv.fatal 1
        }
        %162 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %162 {
          sv.fatal 1
        }
        %163 = comb.and bin %STOP_COND_, %false : i1
        sv.if %163 {
          sv.fatal 1
        }
      }
    }
    %95 = comb.and bin %77, %20 : i1
    %96 = comb.mux bin %95, %19, %c0_i9 {sv.namehint = "maskedBeats_0"} : i9
    %97 = comb.and bin %78, %25 : i1
    %98 = comb.mux bin %97, %24, %c0_i3 {sv.namehint = "maskedBeats_1"} : i3
    %99 = comb.and bin %79, %30 : i1
    %100 = comb.mux bin %99, %29, %c0_i5 {sv.namehint = "maskedBeats_2"} : i5
    %101 = comb.extract %96 from 0 : (i9) -> i3
    %102 = comb.or bin %101, %98 : i3
    %103 = comb.extract %96 from 5 : (i9) -> i4
    %104 = comb.extract %96 from 3 : (i9) -> i2
    %105 = comb.concat %104, %102 : i2, i3
    %106 = comb.or bin %105, %100 : i5
    %107 = comb.concat %103, %106 {sv.namehint = "initBeats"} : i4, i5
    %108 = comb.and bin %auto_in_d_ready, %129 {sv.namehint = "_beatsLeft_T_2"} : i1
    %109 = comb.concat %c0_i8, %108 : i8, i1
    %110 = comb.sub %beatsLeft, %109 {sv.namehint = "_beatsLeft_T_3"} : i9
    %111 = comb.mux bin %39, %107, %110 {sv.namehint = "_beatsLeft_T_5"} : i9
    %state_0 = seq.firreg %115 clock %clock reset sync %reset, %false {firrtl.random_init_start = 12 : ui64} : i1
    %state_1 = seq.firreg %116 clock %clock reset sync %reset, %false {firrtl.random_init_start = 13 : ui64} : i1
    %state_2 = seq.firreg %117 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64} : i1
    %112 = comb.mux bin %38, %74, %state_0 {sv.namehint = "muxStateEarly_0"} : i1
    %113 = comb.mux bin %38, %75, %state_1 {sv.namehint = "muxStateEarly_1"} : i1
    %114 = comb.mux bin %38, %76, %state_2 {sv.namehint = "muxStateEarly_2"} : i1
    %115 = comb.mux bin %38, %77, %state_0 {sv.namehint = "muxStateQual_0"} : i1
    %116 = comb.mux bin %38, %78, %state_1 {sv.namehint = "muxStateQual_1"} : i1
    %117 = comb.mux bin %38, %79, %state_2 {sv.namehint = "muxStateQual_2"} : i1
    %118 = comb.mux bin %38, %71, %state_0 {sv.namehint = "allowed_0"} : i1
    %119 = comb.mux bin %38, %72, %state_1 {sv.namehint = "allowed_1"} : i1
    %120 = comb.mux bin %38, %73, %state_2 {sv.namehint = "allowed_2"} : i1
    %121 = comb.and bin %auto_in_d_ready, %118 {sv.namehint = "out_12_ready"} : i1
    %122 = comb.and bin %auto_in_d_ready, %119 {sv.namehint = "out_13_ready"} : i1
    %123 = comb.and bin %auto_in_d_ready, %120 {sv.namehint = "out_14_ready"} : i1
    %124 = comb.or bin %90, %auto_out_2_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_1"} : i1
    %125 = comb.and %state_0, %auto_out_0_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_2"} : i1
    %126 = comb.and %state_1, %auto_out_1_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_3"} : i1
    %127 = comb.and %state_2, %auto_out_2_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_4"} : i1
    %128 = comb.or bin %125, %126, %127 {sv.namehint = "_sink_ACancel_earlyValid_T_6"} : i1
    %129 = comb.mux bin %38, %124, %128 {sv.namehint = "out_15_valid"} : i1
    %130 = comb.and %112, %auto_out_0_d_bits_corrupt : i1
    %131 = comb.and %113, %auto_out_1_d_bits_corrupt : i1
    %132 = comb.and %114, %auto_out_2_d_bits_corrupt : i1
    %133 = comb.or bin %130, %131, %132 {sv.namehint = "out_15_bits_corrupt"} : i1
    %134 = comb.mux bin %112, %auto_out_0_d_bits_data, %c0_i64 : i64
    %135 = comb.mux bin %113, %auto_out_1_d_bits_data, %c0_i64 : i64
    %136 = comb.mux bin %114, %auto_out_2_d_bits_data, %c0_i64 : i64
    %137 = comb.or bin %134, %135, %136 {sv.namehint = "out_15_bits_data"} : i64
    %138 = comb.and %112, %auto_out_0_d_bits_denied : i1
    %139 = comb.and %113, %auto_out_1_d_bits_denied : i1
    %140 = comb.and %114, %auto_out_2_d_bits_denied : i1
    %141 = comb.or bin %138, %139, %140 {sv.namehint = "out_15_bits_denied"} : i1
    %142 = comb.mux bin %112, %2, %c0_i2 : i2
    %143 = comb.mux bin %113, %auto_out_1_d_bits_sink, %c0_i2 : i2
    %144 = comb.or bin %142, %143 {sv.namehint = "out_15_bits_sink"} : i2
    %145 = comb.mux bin %112, %auto_out_0_d_bits_source, %c0_i2 : i2
    %146 = comb.mux bin %113, %auto_out_1_d_bits_source, %c0_i2 : i2
    %147 = comb.mux bin %114, %auto_out_2_d_bits_source, %c0_i2 : i2
    %148 = comb.or bin %145, %146, %147 {sv.namehint = "out_15_bits_source"} : i2
    %149 = comb.mux bin %112, %auto_out_0_d_bits_size, %c0_i4 : i4
    %150 = comb.mux bin %113, %5, %c0_i4 : i4
    %151 = comb.mux bin %114, %auto_out_2_d_bits_size, %c0_i4 : i4
    %152 = comb.or bin %149, %150, %151 {sv.namehint = "out_15_bits_size"} : i4
    %153 = comb.mux bin %112, %auto_out_0_d_bits_param, %c0_i2 : i2
    %154 = comb.mux bin %113, %auto_out_1_d_bits_param, %c0_i2 : i2
    %155 = comb.or bin %153, %154 {sv.namehint = "out_15_bits_param"} : i2
    %156 = comb.mux bin %112, %auto_out_0_d_bits_opcode, %c0_i3 : i3
    %157 = comb.mux bin %113, %auto_out_1_d_bits_opcode, %c0_i3 : i3
    %158 = comb.mux bin %114, %auto_out_2_d_bits_opcode, %c0_i3 : i3
    %159 = comb.or bin %156, %157, %158 {sv.namehint = "out_15_bits_opcode"} : i3
    hw.output %37, %auto_out_1_b_valid, %auto_out_1_b_bits_param, %auto_out_1_b_bits_address, %auto_out_1_c_ready, %129, %159, %155, %152, %148, %144, %141, %137, %133, %33, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %6, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %123, %32, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %3, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %4, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %122, %auto_in_e_valid, %auto_in_e_bits_sink, %31, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %1, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %121 : i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i4, i2, i31, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLFIFOFixer(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %c-1_i8 = hw.constant -1 : i8
    %c0_i2 = hw.constant 0 : i2
    %c6_i4 = hw.constant 6 : i4
    %c-2_i3 = hw.constant -2 : i3
    hw.instance "monitor" @TLMonitor(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %auto_out_b_valid: i1, io_in_b_bits_opcode: %c-2_i3: i3, io_in_b_bits_param: %auto_out_b_bits_param: i2, io_in_b_bits_size: %c6_i4: i4, io_in_b_bits_source: %c0_i2: i2, io_in_b_bits_address: %auto_out_b_bits_address: i32, io_in_b_bits_mask: %c-1_i8: i8, io_in_b_bits_corrupt: %false: i1, io_in_c_ready: %auto_out_c_ready: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i4, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %auto_in_c_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %auto_out_d_bits_source: i2, io_in_d_bits_sink: %auto_out_d_bits_sink: i2, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_in_e_ready: %true: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_param, %auto_out_b_bits_address, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLWidthWidget(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler(out auto_widget_in_a_ready : i1, in %auto_widget_in_a_valid : i1, in %auto_widget_in_a_bits_opcode : i3, in %auto_widget_in_a_bits_param : i3, in %auto_widget_in_a_bits_size : i4, in %auto_widget_in_a_bits_source : i2, in %auto_widget_in_a_bits_address : i28, in %auto_widget_in_a_bits_mask : i8, in %auto_widget_in_a_bits_data : i64, in %auto_widget_in_a_bits_corrupt : i1, in %auto_widget_in_d_ready : i1, out auto_widget_in_d_valid : i1, out auto_widget_in_d_bits_opcode : i3, out auto_widget_in_d_bits_param : i2, out auto_widget_in_d_bits_size : i4, out auto_widget_in_d_bits_source : i2, out auto_widget_in_d_bits_sink : i1, out auto_widget_in_d_bits_denied : i1, out auto_widget_in_d_bits_data : i64, out auto_widget_in_d_bits_corrupt : i1, in %auto_bus_xing_out_a_ready : i1, out auto_bus_xing_out_a_valid : i1, out auto_bus_xing_out_a_bits_opcode : i3, out auto_bus_xing_out_a_bits_param : i3, out auto_bus_xing_out_a_bits_size : i4, out auto_bus_xing_out_a_bits_source : i2, out auto_bus_xing_out_a_bits_address : i28, out auto_bus_xing_out_a_bits_mask : i8, out auto_bus_xing_out_a_bits_data : i64, out auto_bus_xing_out_a_bits_corrupt : i1, out auto_bus_xing_out_d_ready : i1, in %auto_bus_xing_out_d_valid : i1, in %auto_bus_xing_out_d_bits_opcode : i3, in %auto_bus_xing_out_d_bits_param : i2, in %auto_bus_xing_out_d_bits_size : i4, in %auto_bus_xing_out_d_bits_source : i2, in %auto_bus_xing_out_d_bits_sink : i1, in %auto_bus_xing_out_d_bits_denied : i1, in %auto_bus_xing_out_d_bits_data : i64, in %auto_bus_xing_out_d_bits_corrupt : i1) {
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget(auto_in_a_valid: %auto_widget_in_a_valid: i1, auto_in_a_bits_opcode: %auto_widget_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_widget_in_a_bits_param: i3, auto_in_a_bits_size: %auto_widget_in_a_bits_size: i4, auto_in_a_bits_source: %auto_widget_in_a_bits_source: i2, auto_in_a_bits_address: %auto_widget_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_widget_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_widget_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_widget_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_widget_in_d_ready: i1, auto_out_a_ready: %auto_bus_xing_out_a_ready: i1, auto_out_d_valid: %auto_bus_xing_out_d_valid: i1, auto_out_d_bits_opcode: %auto_bus_xing_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_bus_xing_out_d_bits_param: i2, auto_out_d_bits_size: %auto_bus_xing_out_d_bits_size: i4, auto_out_d_bits_source: %auto_bus_xing_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_bus_xing_out_d_bits_sink: i1, auto_out_d_bits_denied: %auto_bus_xing_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_bus_xing_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_bus_xing_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_ready"}
    hw.output %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLWidthWidget_2(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i3, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i3, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_param, %auto_out_b_bits_address, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLInterconnectCoupler_2(out auto_widget_in_a_ready : i1, in %auto_widget_in_a_valid : i1, in %auto_widget_in_a_bits_opcode : i3, in %auto_widget_in_a_bits_param : i3, in %auto_widget_in_a_bits_size : i3, in %auto_widget_in_a_bits_source : i2, in %auto_widget_in_a_bits_address : i32, in %auto_widget_in_a_bits_user_amba_prot_bufferable : i1, in %auto_widget_in_a_bits_user_amba_prot_modifiable : i1, in %auto_widget_in_a_bits_user_amba_prot_readalloc : i1, in %auto_widget_in_a_bits_user_amba_prot_writealloc : i1, in %auto_widget_in_a_bits_user_amba_prot_privileged : i1, in %auto_widget_in_a_bits_user_amba_prot_secure : i1, in %auto_widget_in_a_bits_user_amba_prot_fetch : i1, in %auto_widget_in_a_bits_mask : i8, in %auto_widget_in_a_bits_data : i64, in %auto_widget_in_a_bits_corrupt : i1, in %auto_widget_in_b_ready : i1, out auto_widget_in_b_valid : i1, out auto_widget_in_b_bits_param : i2, out auto_widget_in_b_bits_address : i32, out auto_widget_in_c_ready : i1, in %auto_widget_in_c_valid : i1, in %auto_widget_in_c_bits_opcode : i3, in %auto_widget_in_c_bits_param : i3, in %auto_widget_in_c_bits_size : i3, in %auto_widget_in_c_bits_source : i2, in %auto_widget_in_c_bits_address : i32, in %auto_widget_in_c_bits_data : i64, in %auto_widget_in_c_bits_corrupt : i1, in %auto_widget_in_d_ready : i1, out auto_widget_in_d_valid : i1, out auto_widget_in_d_bits_opcode : i3, out auto_widget_in_d_bits_param : i2, out auto_widget_in_d_bits_size : i3, out auto_widget_in_d_bits_source : i2, out auto_widget_in_d_bits_sink : i2, out auto_widget_in_d_bits_denied : i1, out auto_widget_in_d_bits_data : i64, out auto_widget_in_d_bits_corrupt : i1, in %auto_widget_in_e_valid : i1, in %auto_widget_in_e_bits_sink : i2, in %auto_widget_out_a_ready : i1, out auto_widget_out_a_valid : i1, out auto_widget_out_a_bits_opcode : i3, out auto_widget_out_a_bits_param : i3, out auto_widget_out_a_bits_size : i3, out auto_widget_out_a_bits_source : i2, out auto_widget_out_a_bits_address : i32, out auto_widget_out_a_bits_user_amba_prot_bufferable : i1, out auto_widget_out_a_bits_user_amba_prot_modifiable : i1, out auto_widget_out_a_bits_user_amba_prot_readalloc : i1, out auto_widget_out_a_bits_user_amba_prot_writealloc : i1, out auto_widget_out_a_bits_user_amba_prot_privileged : i1, out auto_widget_out_a_bits_user_amba_prot_secure : i1, out auto_widget_out_a_bits_user_amba_prot_fetch : i1, out auto_widget_out_a_bits_mask : i8, out auto_widget_out_a_bits_data : i64, out auto_widget_out_a_bits_corrupt : i1, out auto_widget_out_b_ready : i1, in %auto_widget_out_b_valid : i1, in %auto_widget_out_b_bits_param : i2, in %auto_widget_out_b_bits_address : i32, in %auto_widget_out_c_ready : i1, out auto_widget_out_c_valid : i1, out auto_widget_out_c_bits_opcode : i3, out auto_widget_out_c_bits_param : i3, out auto_widget_out_c_bits_size : i3, out auto_widget_out_c_bits_source : i2, out auto_widget_out_c_bits_address : i32, out auto_widget_out_c_bits_data : i64, out auto_widget_out_c_bits_corrupt : i1, out auto_widget_out_d_ready : i1, in %auto_widget_out_d_valid : i1, in %auto_widget_out_d_bits_opcode : i3, in %auto_widget_out_d_bits_param : i2, in %auto_widget_out_d_bits_size : i3, in %auto_widget_out_d_bits_source : i2, in %auto_widget_out_d_bits_sink : i2, in %auto_widget_out_d_bits_denied : i1, in %auto_widget_out_d_bits_data : i64, in %auto_widget_out_d_bits_corrupt : i1, out auto_widget_out_e_valid : i1, out auto_widget_out_e_bits_sink : i2) {
    %widget.auto_in_a_ready, %widget.auto_in_b_valid, %widget.auto_in_b_bits_param, %widget.auto_in_b_bits_address, %widget.auto_in_c_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_user_amba_prot_fetch, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_b_ready, %widget.auto_out_c_valid, %widget.auto_out_c_bits_opcode, %widget.auto_out_c_bits_param, %widget.auto_out_c_bits_size, %widget.auto_out_c_bits_source, %widget.auto_out_c_bits_address, %widget.auto_out_c_bits_data, %widget.auto_out_c_bits_corrupt, %widget.auto_out_d_ready, %widget.auto_out_e_valid, %widget.auto_out_e_bits_sink = hw.instance "widget" @TLWidthWidget_2(auto_in_a_valid: %auto_widget_in_a_valid: i1, auto_in_a_bits_opcode: %auto_widget_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_widget_in_a_bits_param: i3, auto_in_a_bits_size: %auto_widget_in_a_bits_size: i3, auto_in_a_bits_source: %auto_widget_in_a_bits_source: i2, auto_in_a_bits_address: %auto_widget_in_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %auto_widget_in_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %auto_widget_in_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %auto_widget_in_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %auto_widget_in_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %auto_widget_in_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %auto_widget_in_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %auto_widget_in_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %auto_widget_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_widget_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_widget_in_a_bits_corrupt: i1, auto_in_b_ready: %auto_widget_in_b_ready: i1, auto_in_c_valid: %auto_widget_in_c_valid: i1, auto_in_c_bits_opcode: %auto_widget_in_c_bits_opcode: i3, auto_in_c_bits_param: %auto_widget_in_c_bits_param: i3, auto_in_c_bits_size: %auto_widget_in_c_bits_size: i3, auto_in_c_bits_source: %auto_widget_in_c_bits_source: i2, auto_in_c_bits_address: %auto_widget_in_c_bits_address: i32, auto_in_c_bits_data: %auto_widget_in_c_bits_data: i64, auto_in_c_bits_corrupt: %auto_widget_in_c_bits_corrupt: i1, auto_in_d_ready: %auto_widget_in_d_ready: i1, auto_in_e_valid: %auto_widget_in_e_valid: i1, auto_in_e_bits_sink: %auto_widget_in_e_bits_sink: i2, auto_out_a_ready: %auto_widget_out_a_ready: i1, auto_out_b_valid: %auto_widget_out_b_valid: i1, auto_out_b_bits_param: %auto_widget_out_b_bits_param: i2, auto_out_b_bits_address: %auto_widget_out_b_bits_address: i32, auto_out_c_ready: %auto_widget_out_c_ready: i1, auto_out_d_valid: %auto_widget_out_d_valid: i1, auto_out_d_bits_opcode: %auto_widget_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_widget_out_d_bits_param: i2, auto_out_d_bits_size: %auto_widget_out_d_bits_size: i3, auto_out_d_bits_source: %auto_widget_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_widget_out_d_bits_sink: i2, auto_out_d_bits_denied: %auto_widget_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_widget_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_widget_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i3, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "widget.auto_in_d_valid"}
    hw.output %widget.auto_in_a_ready, %widget.auto_in_b_valid, %widget.auto_in_b_bits_param, %widget.auto_in_b_bits_address, %widget.auto_in_c_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_param, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_sink, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_user_amba_prot_fetch, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_b_ready, %widget.auto_out_c_valid, %widget.auto_out_c_bits_opcode, %widget.auto_out_c_bits_param, %widget.auto_out_c_bits_size, %widget.auto_out_c_bits_source, %widget.auto_out_c_bits_address, %widget.auto_out_c_bits_data, %widget.auto_out_c_bits_corrupt, %widget.auto_out_d_ready, %widget.auto_out_e_valid, %widget.auto_out_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLInterconnectCoupler_3(out auto_tl_master_clock_xing_in_a_ready : i1, in %auto_tl_master_clock_xing_in_a_valid : i1, in %auto_tl_master_clock_xing_in_a_bits_opcode : i3, in %auto_tl_master_clock_xing_in_a_bits_param : i3, in %auto_tl_master_clock_xing_in_a_bits_size : i4, in %auto_tl_master_clock_xing_in_a_bits_source : i2, in %auto_tl_master_clock_xing_in_a_bits_address : i32, in %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_bufferable : i1, in %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_modifiable : i1, in %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_readalloc : i1, in %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_writealloc : i1, in %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_privileged : i1, in %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_secure : i1, in %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_fetch : i1, in %auto_tl_master_clock_xing_in_a_bits_mask : i8, in %auto_tl_master_clock_xing_in_a_bits_data : i64, in %auto_tl_master_clock_xing_in_a_bits_corrupt : i1, in %auto_tl_master_clock_xing_in_b_ready : i1, out auto_tl_master_clock_xing_in_b_valid : i1, out auto_tl_master_clock_xing_in_b_bits_param : i2, out auto_tl_master_clock_xing_in_b_bits_address : i32, out auto_tl_master_clock_xing_in_c_ready : i1, in %auto_tl_master_clock_xing_in_c_valid : i1, in %auto_tl_master_clock_xing_in_c_bits_opcode : i3, in %auto_tl_master_clock_xing_in_c_bits_param : i3, in %auto_tl_master_clock_xing_in_c_bits_size : i4, in %auto_tl_master_clock_xing_in_c_bits_source : i2, in %auto_tl_master_clock_xing_in_c_bits_address : i32, in %auto_tl_master_clock_xing_in_c_bits_data : i64, in %auto_tl_master_clock_xing_in_c_bits_corrupt : i1, in %auto_tl_master_clock_xing_in_d_ready : i1, out auto_tl_master_clock_xing_in_d_valid : i1, out auto_tl_master_clock_xing_in_d_bits_opcode : i3, out auto_tl_master_clock_xing_in_d_bits_param : i2, out auto_tl_master_clock_xing_in_d_bits_size : i4, out auto_tl_master_clock_xing_in_d_bits_source : i2, out auto_tl_master_clock_xing_in_d_bits_sink : i2, out auto_tl_master_clock_xing_in_d_bits_denied : i1, out auto_tl_master_clock_xing_in_d_bits_data : i64, out auto_tl_master_clock_xing_in_d_bits_corrupt : i1, in %auto_tl_master_clock_xing_in_e_valid : i1, in %auto_tl_master_clock_xing_in_e_bits_sink : i2, in %auto_tl_out_a_ready : i1, out auto_tl_out_a_valid : i1, out auto_tl_out_a_bits_opcode : i3, out auto_tl_out_a_bits_param : i3, out auto_tl_out_a_bits_size : i4, out auto_tl_out_a_bits_source : i2, out auto_tl_out_a_bits_address : i32, out auto_tl_out_a_bits_user_amba_prot_bufferable : i1, out auto_tl_out_a_bits_user_amba_prot_modifiable : i1, out auto_tl_out_a_bits_user_amba_prot_readalloc : i1, out auto_tl_out_a_bits_user_amba_prot_writealloc : i1, out auto_tl_out_a_bits_user_amba_prot_privileged : i1, out auto_tl_out_a_bits_user_amba_prot_secure : i1, out auto_tl_out_a_bits_user_amba_prot_fetch : i1, out auto_tl_out_a_bits_mask : i8, out auto_tl_out_a_bits_data : i64, out auto_tl_out_a_bits_corrupt : i1, out auto_tl_out_b_ready : i1, in %auto_tl_out_b_valid : i1, in %auto_tl_out_b_bits_param : i2, in %auto_tl_out_b_bits_address : i32, in %auto_tl_out_c_ready : i1, out auto_tl_out_c_valid : i1, out auto_tl_out_c_bits_opcode : i3, out auto_tl_out_c_bits_param : i3, out auto_tl_out_c_bits_size : i4, out auto_tl_out_c_bits_source : i2, out auto_tl_out_c_bits_address : i32, out auto_tl_out_c_bits_data : i64, out auto_tl_out_c_bits_corrupt : i1, out auto_tl_out_d_ready : i1, in %auto_tl_out_d_valid : i1, in %auto_tl_out_d_bits_opcode : i3, in %auto_tl_out_d_bits_param : i2, in %auto_tl_out_d_bits_size : i4, in %auto_tl_out_d_bits_source : i2, in %auto_tl_out_d_bits_sink : i2, in %auto_tl_out_d_bits_denied : i1, in %auto_tl_out_d_bits_data : i64, in %auto_tl_out_d_bits_corrupt : i1, out auto_tl_out_e_valid : i1, out auto_tl_out_e_bits_sink : i2) {
    hw.output %auto_tl_out_a_ready, %auto_tl_out_b_valid, %auto_tl_out_b_bits_param, %auto_tl_out_b_bits_address, %auto_tl_out_c_ready, %auto_tl_out_d_valid, %auto_tl_out_d_bits_opcode, %auto_tl_out_d_bits_param, %auto_tl_out_d_bits_size, %auto_tl_out_d_bits_source, %auto_tl_out_d_bits_sink, %auto_tl_out_d_bits_denied, %auto_tl_out_d_bits_data, %auto_tl_out_d_bits_corrupt, %auto_tl_master_clock_xing_in_a_valid, %auto_tl_master_clock_xing_in_a_bits_opcode, %auto_tl_master_clock_xing_in_a_bits_param, %auto_tl_master_clock_xing_in_a_bits_size, %auto_tl_master_clock_xing_in_a_bits_source, %auto_tl_master_clock_xing_in_a_bits_address, %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_bufferable, %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_modifiable, %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_readalloc, %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_writealloc, %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_privileged, %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_secure, %auto_tl_master_clock_xing_in_a_bits_user_amba_prot_fetch, %auto_tl_master_clock_xing_in_a_bits_mask, %auto_tl_master_clock_xing_in_a_bits_data, %auto_tl_master_clock_xing_in_a_bits_corrupt, %auto_tl_master_clock_xing_in_b_ready, %auto_tl_master_clock_xing_in_c_valid, %auto_tl_master_clock_xing_in_c_bits_opcode, %auto_tl_master_clock_xing_in_c_bits_param, %auto_tl_master_clock_xing_in_c_bits_size, %auto_tl_master_clock_xing_in_c_bits_source, %auto_tl_master_clock_xing_in_c_bits_address, %auto_tl_master_clock_xing_in_c_bits_data, %auto_tl_master_clock_xing_in_c_bits_corrupt, %auto_tl_master_clock_xing_in_d_ready, %auto_tl_master_clock_xing_in_e_valid, %auto_tl_master_clock_xing_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @Queue(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_addr : i31, in %io_enq_bits_len : i8, in %io_enq_bits_size : i3, in %io_enq_bits_burst : i2, in %io_enq_bits_lock : i1, in %io_enq_bits_cache : i4, in %io_enq_bits_prot : i3, in %io_enq_bits_qos : i4, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_addr : i31, out io_deq_bits_len : i8, out io_deq_bits_size : i3, out io_deq_bits_burst : i2, out io_deq_bits_lock : i1, out io_deq_bits_cache : i4, out io_deq_bits_prot : i3, out io_deq_bits_qos : i4) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 60>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %15 : <2 x 60>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 60>
    %1 = comb.concat %io_enq_bits_qos, %io_enq_bits_prot, %io_enq_bits_cache, %io_enq_bits_lock, %io_enq_bits_burst, %io_enq_bits_size, %io_enq_bits_len, %io_enq_bits_addr, %io_enq_bits_id : i4, i3, i4, i1, i2, i3, i8, i31, i4
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i60) -> i4
    %3 = comb.extract %0 from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_addr"} : (i60) -> i31
    %4 = comb.extract %0 from 35 {sv.namehint = "ram_io_deq_bits_MPORT_data_len"} : (i60) -> i8
    %5 = comb.extract %0 from 43 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i60) -> i3
    %6 = comb.extract %0 from 46 {sv.namehint = "ram_io_deq_bits_MPORT_data_burst"} : (i60) -> i2
    %7 = comb.extract %0 from 48 {sv.namehint = "ram_io_deq_bits_MPORT_data_lock"} : (i60) -> i1
    %8 = comb.extract %0 from 49 {sv.namehint = "ram_io_deq_bits_MPORT_data_cache"} : (i60) -> i4
    %9 = comb.extract %0 from 53 {sv.namehint = "ram_io_deq_bits_MPORT_data_prot"} : (i60) -> i3
    %10 = comb.extract %0 from 56 {sv.namehint = "ram_io_deq_bits_MPORT_data_qos"} : (i60) -> i4
    %wrap = seq.firreg %18 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %20 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %11 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %12 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %13 = comb.and bin %11, %12 {sv.namehint = "empty"} : i1
    %14 = comb.and bin %11, %maybe_full {sv.namehint = "full"} : i1
    %15 = comb.and bin %24, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %16 = comb.and bin %io_deq_ready, %23 {sv.namehint = "do_deq"} : i1
    %17 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %18 = comb.mux bin %15, %17, %wrap : i1
    %19 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %20 = comb.mux bin %16, %19, %wrap_1 : i1
    %21 = comb.icmp bin eq %15, %16 : i1
    %22 = comb.mux bin %21, %maybe_full, %15 : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_deq_valid"} : i1
    %24 = comb.xor bin %14, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %24, %23, %2, %3, %4, %5, %6, %7, %8, %9, %10 : i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4
  }
  hw.module private @Queue_1(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_data : i64, in %io_enq_bits_strb : i8, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_data : i64, out io_deq_bits_strb : i8, out io_deq_bits_last : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 73>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %9 : <2 x 73>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 73>
    %1 = comb.concat %io_enq_bits_last, %io_enq_bits_strb, %io_enq_bits_data : i1, i8, i64
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i73) -> i64
    %3 = comb.extract %0 from 64 {sv.namehint = "ram_io_deq_bits_MPORT_data_strb"} : (i73) -> i8
    %4 = comb.extract %0 from 72 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i73) -> i1
    %wrap = seq.firreg %12 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %14 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %5 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %6 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %7 = comb.and bin %5, %6 {sv.namehint = "empty"} : i1
    %8 = comb.and bin %5, %maybe_full {sv.namehint = "full"} : i1
    %9 = comb.and bin %18, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %10 = comb.and bin %io_deq_ready, %17 {sv.namehint = "do_deq"} : i1
    %11 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %12 = comb.mux bin %9, %11, %wrap : i1
    %13 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %14 = comb.mux bin %10, %13, %wrap_1 : i1
    %15 = comb.icmp bin eq %9, %10 : i1
    %16 = comb.mux bin %15, %maybe_full, %9 : i1
    %17 = comb.xor bin %7, %true {sv.namehint = "io_deq_valid"} : i1
    %18 = comb.xor bin %8, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %18, %17, %2, %3, %4 : i1, i1, i64, i8, i1
  }
  hw.module private @Queue_2(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_resp : i2, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_resp : i2) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 6>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %8 : <2 x 6>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 6>
    %1 = comb.concat %io_enq_bits_resp, %io_enq_bits_id : i2, i4
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i6) -> i4
    %3 = comb.extract %0 from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_resp"} : (i6) -> i2
    %wrap = seq.firreg %11 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %13 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %4 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %5 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %6 = comb.and bin %4, %5 {sv.namehint = "empty"} : i1
    %7 = comb.and bin %4, %maybe_full {sv.namehint = "full"} : i1
    %8 = comb.and bin %17, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %9 = comb.and bin %io_deq_ready, %16 {sv.namehint = "do_deq"} : i1
    %10 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %11 = comb.mux bin %8, %10, %wrap : i1
    %12 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %13 = comb.mux bin %9, %12, %wrap_1 : i1
    %14 = comb.icmp bin eq %8, %9 : i1
    %15 = comb.mux bin %14, %maybe_full, %8 : i1
    %16 = comb.xor bin %6, %true {sv.namehint = "io_deq_valid"} : i1
    %17 = comb.xor bin %7, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %17, %16, %2, %3 : i1, i1, i4, i2
  }
  hw.module private @Queue_4(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_data : i64, in %io_enq_bits_resp : i2, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_data : i64, out io_deq_bits_resp : i2, out io_deq_bits_last : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 71>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %10 : <2 x 71>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 71>
    %1 = comb.concat %io_enq_bits_last, %io_enq_bits_resp, %io_enq_bits_data, %io_enq_bits_id : i1, i2, i64, i4
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i71) -> i4
    %3 = comb.extract %0 from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i71) -> i64
    %4 = comb.extract %0 from 68 {sv.namehint = "ram_io_deq_bits_MPORT_data_resp"} : (i71) -> i2
    %5 = comb.extract %0 from 70 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i71) -> i1
    %wrap = seq.firreg %13 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %6 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %7 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %8 = comb.and bin %6, %7 {sv.namehint = "empty"} : i1
    %9 = comb.and bin %6, %maybe_full {sv.namehint = "full"} : i1
    %10 = comb.and bin %19, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %11 = comb.and bin %io_deq_ready, %18 {sv.namehint = "do_deq"} : i1
    %12 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %13 = comb.mux bin %10, %12, %wrap : i1
    %14 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %15 = comb.mux bin %11, %14, %wrap_1 : i1
    %16 = comb.icmp bin eq %10, %11 : i1
    %17 = comb.mux bin %16, %maybe_full, %10 : i1
    %18 = comb.xor bin %8, %true {sv.namehint = "io_deq_valid"} : i1
    %19 = comb.xor bin %9, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %19, %18, %2, %3, %4, %5 : i1, i1, i4, i64, i2, i1
  }
  hw.module private @AXI4Buffer(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_last : i1) {
    %bundleOut_0_aw_deq.io_enq_ready, %bundleOut_0_aw_deq.io_deq_valid, %bundleOut_0_aw_deq.io_deq_bits_id, %bundleOut_0_aw_deq.io_deq_bits_addr, %bundleOut_0_aw_deq.io_deq_bits_len, %bundleOut_0_aw_deq.io_deq_bits_size, %bundleOut_0_aw_deq.io_deq_bits_burst, %bundleOut_0_aw_deq.io_deq_bits_lock, %bundleOut_0_aw_deq.io_deq_bits_cache, %bundleOut_0_aw_deq.io_deq_bits_prot, %bundleOut_0_aw_deq.io_deq_bits_qos = hw.instance "bundleOut_0_aw_deq" @Queue(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_aw_valid: i1, io_enq_bits_id: %auto_in_aw_bits_id: i4, io_enq_bits_addr: %auto_in_aw_bits_addr: i31, io_enq_bits_len: %auto_in_aw_bits_len: i8, io_enq_bits_size: %auto_in_aw_bits_size: i3, io_enq_bits_burst: %auto_in_aw_bits_burst: i2, io_enq_bits_lock: %auto_in_aw_bits_lock: i1, io_enq_bits_cache: %auto_in_aw_bits_cache: i4, io_enq_bits_prot: %auto_in_aw_bits_prot: i3, io_enq_bits_qos: %auto_in_aw_bits_qos: i4, io_deq_ready: %auto_out_aw_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_addr: i31, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4) {sv.namehint = "bundleOut_0_aw_irr_valid"}
    %bundleOut_0_w_deq.io_enq_ready, %bundleOut_0_w_deq.io_deq_valid, %bundleOut_0_w_deq.io_deq_bits_data, %bundleOut_0_w_deq.io_deq_bits_strb, %bundleOut_0_w_deq.io_deq_bits_last = hw.instance "bundleOut_0_w_deq" @Queue_1(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_w_valid: i1, io_enq_bits_data: %auto_in_w_bits_data: i64, io_enq_bits_strb: %auto_in_w_bits_strb: i8, io_enq_bits_last: %auto_in_w_bits_last: i1, io_deq_ready: %auto_out_w_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_data: i64, io_deq_bits_strb: i8, io_deq_bits_last: i1) {sv.namehint = "bundleOut_0_w_irr_valid"}
    %bundleIn_0_b_deq.io_enq_ready, %bundleIn_0_b_deq.io_deq_valid, %bundleIn_0_b_deq.io_deq_bits_id, %bundleIn_0_b_deq.io_deq_bits_resp = hw.instance "bundleIn_0_b_deq" @Queue_2(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_b_valid: i1, io_enq_bits_id: %auto_out_b_bits_id: i4, io_enq_bits_resp: %auto_out_b_bits_resp: i2, io_deq_ready: %auto_in_b_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_resp: i2) {sv.namehint = "bundleIn_0_b_irr_valid"}
    %bundleOut_0_ar_deq.io_enq_ready, %bundleOut_0_ar_deq.io_deq_valid, %bundleOut_0_ar_deq.io_deq_bits_id, %bundleOut_0_ar_deq.io_deq_bits_addr, %bundleOut_0_ar_deq.io_deq_bits_len, %bundleOut_0_ar_deq.io_deq_bits_size, %bundleOut_0_ar_deq.io_deq_bits_burst, %bundleOut_0_ar_deq.io_deq_bits_lock, %bundleOut_0_ar_deq.io_deq_bits_cache, %bundleOut_0_ar_deq.io_deq_bits_prot, %bundleOut_0_ar_deq.io_deq_bits_qos = hw.instance "bundleOut_0_ar_deq" @Queue(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_ar_valid: i1, io_enq_bits_id: %auto_in_ar_bits_id: i4, io_enq_bits_addr: %auto_in_ar_bits_addr: i31, io_enq_bits_len: %auto_in_ar_bits_len: i8, io_enq_bits_size: %auto_in_ar_bits_size: i3, io_enq_bits_burst: %auto_in_ar_bits_burst: i2, io_enq_bits_lock: %auto_in_ar_bits_lock: i1, io_enq_bits_cache: %auto_in_ar_bits_cache: i4, io_enq_bits_prot: %auto_in_ar_bits_prot: i3, io_enq_bits_qos: %auto_in_ar_bits_qos: i4, io_deq_ready: %auto_out_ar_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_addr: i31, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4) {sv.namehint = "bundleOut_0_ar_irr_valid"}
    %bundleIn_0_r_deq.io_enq_ready, %bundleIn_0_r_deq.io_deq_valid, %bundleIn_0_r_deq.io_deq_bits_id, %bundleIn_0_r_deq.io_deq_bits_data, %bundleIn_0_r_deq.io_deq_bits_resp, %bundleIn_0_r_deq.io_deq_bits_last = hw.instance "bundleIn_0_r_deq" @Queue_4(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_r_valid: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %auto_in_r_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_last: i1) {sv.namehint = "bundleIn_0_r_irr_valid"}
    hw.output %bundleOut_0_aw_deq.io_enq_ready, %bundleOut_0_w_deq.io_enq_ready, %bundleIn_0_b_deq.io_deq_valid, %bundleIn_0_b_deq.io_deq_bits_id, %bundleIn_0_b_deq.io_deq_bits_resp, %bundleOut_0_ar_deq.io_enq_ready, %bundleIn_0_r_deq.io_deq_valid, %bundleIn_0_r_deq.io_deq_bits_id, %bundleIn_0_r_deq.io_deq_bits_data, %bundleIn_0_r_deq.io_deq_bits_resp, %bundleIn_0_r_deq.io_deq_bits_last, %bundleOut_0_aw_deq.io_deq_valid, %bundleOut_0_aw_deq.io_deq_bits_id, %bundleOut_0_aw_deq.io_deq_bits_addr, %bundleOut_0_aw_deq.io_deq_bits_len, %bundleOut_0_aw_deq.io_deq_bits_size, %bundleOut_0_aw_deq.io_deq_bits_burst, %bundleOut_0_aw_deq.io_deq_bits_lock, %bundleOut_0_aw_deq.io_deq_bits_cache, %bundleOut_0_aw_deq.io_deq_bits_prot, %bundleOut_0_aw_deq.io_deq_bits_qos, %bundleOut_0_w_deq.io_deq_valid, %bundleOut_0_w_deq.io_deq_bits_data, %bundleOut_0_w_deq.io_deq_bits_strb, %bundleOut_0_w_deq.io_deq_bits_last, %bundleIn_0_b_deq.io_enq_ready, %bundleOut_0_ar_deq.io_deq_valid, %bundleOut_0_ar_deq.io_deq_bits_id, %bundleOut_0_ar_deq.io_deq_bits_addr, %bundleOut_0_ar_deq.io_deq_bits_len, %bundleOut_0_ar_deq.io_deq_bits_size, %bundleOut_0_ar_deq.io_deq_bits_burst, %bundleOut_0_ar_deq.io_deq_bits_lock, %bundleOut_0_ar_deq.io_deq_bits_cache, %bundleOut_0_ar_deq.io_deq_bits_prot, %bundleOut_0_ar_deq.io_deq_bits_qos, %bundleIn_0_r_deq.io_enq_ready : i1, i1, i1, i4, i2, i1, i1, i4, i64, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1
  }
  hw.module private @QueueCompatibility(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_tl_state_size : i4, in %io_enq_bits_tl_state_source : i2, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_tl_state_size : i4, out io_deq_bits_tl_state_source : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firreg %8 clock %clock : i6
    %0 = comb.concat %io_enq_bits_tl_state_source, %io_enq_bits_tl_state_size : i2, i4
    %1 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_size"} : (i6) -> i4
    %2 = comb.extract %ram from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_source"} : (i6) -> i2
    %full = seq.firreg %6 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %3 = comb.and bin %7, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %4 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %5 = comb.icmp bin eq %3, %4 : i1
    %6 = comb.mux bin %5, %full, %3 : i1
    %7 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %8 = comb.mux bin %3, %0, %ram : i6
    hw.output %7, %full, %1, %2 : i1, i1, i4, i2
  }
  hw.module private @AXI4UserYanker(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i2, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i2, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_last : i1) {
    %c2_i4 = hw.constant 2 : i4
    %c1_i4 = hw.constant 1 : i4
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %false = hw.constant false
    %true = hw.constant true
    %0 = seq.from_clock %clock
    %QueueCompatibility.io_enq_ready, %QueueCompatibility.io_deq_valid, %QueueCompatibility.io_deq_bits_tl_state_size, %QueueCompatibility.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility" @QueueCompatibility(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %23: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i2, io_deq_ready: %21: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "QueueCompatibility.io_deq_valid"}
    %QueueCompatibility_1.io_enq_ready, %QueueCompatibility_1.io_deq_valid, %QueueCompatibility_1.io_deq_bits_tl_state_size, %QueueCompatibility_1.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_1" @QueueCompatibility(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %25: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i2, io_deq_ready: %24: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "QueueCompatibility_1.io_deq_valid"}
    %QueueCompatibility_2.io_enq_ready, %QueueCompatibility_2.io_deq_valid, %QueueCompatibility_2.io_deq_bits_tl_state_size, %QueueCompatibility_2.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_2" @QueueCompatibility(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %27: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i2, io_deq_ready: %26: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "QueueCompatibility_2.io_deq_valid"}
    %QueueCompatibility_3.io_enq_ready, %QueueCompatibility_3.io_deq_valid, %QueueCompatibility_3.io_deq_bits_tl_state_size, %QueueCompatibility_3.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_3" @QueueCompatibility(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %50: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i2, io_deq_ready: %48: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "QueueCompatibility_3.io_deq_valid"}
    %QueueCompatibility_4.io_enq_ready, %QueueCompatibility_4.io_deq_valid, %QueueCompatibility_4.io_deq_bits_tl_state_size, %QueueCompatibility_4.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_4" @QueueCompatibility(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %52: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i2, io_deq_ready: %51: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "QueueCompatibility_4.io_deq_valid"}
    %QueueCompatibility_5.io_enq_ready, %QueueCompatibility_5.io_deq_valid, %QueueCompatibility_5.io_deq_bits_tl_state_size, %QueueCompatibility_5.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_5" @QueueCompatibility(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %54: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i2, io_deq_ready: %53: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i2) {sv.namehint = "QueueCompatibility_5.io_deq_valid"}
    %1 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %QueueCompatibility_2.io_enq_ready, %QueueCompatibility_1.io_enq_ready, %QueueCompatibility.io_enq_ready : i1
    %2 = hw.array_get %1[%auto_in_ar_bits_id] : !hw.array<16xi1>, i4
    %3 = comb.and bin %auto_out_ar_ready, %2 {sv.namehint = "bundleIn_0_ar_ready"} : i1
    %4 = comb.and bin %auto_in_ar_valid, %2 {sv.namehint = "bundleOut_0_ar_valid"} : i1
    %5 = comb.xor bin %auto_out_r_valid, %true : i1
    %6 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %QueueCompatibility_2.io_deq_valid, %QueueCompatibility_1.io_deq_valid, %QueueCompatibility.io_deq_valid : i1
    %7 = hw.array_get %6[%auto_out_r_bits_id] : !hw.array<16xi1>, i4
    %8 = comb.or bin %5, %7, %reset : i1
    %9 = comb.xor bin %8, %true : i1
    %10 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %QueueCompatibility_2.io_deq_bits_tl_state_size, %QueueCompatibility_1.io_deq_bits_tl_state_size, %QueueCompatibility.io_deq_bits_tl_state_size : i4
    %11 = hw.array_get %10[%auto_out_r_bits_id] {sv.namehint = "bundleIn_0_r_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %12 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %QueueCompatibility_2.io_deq_bits_tl_state_source, %QueueCompatibility_1.io_deq_bits_tl_state_source, %QueueCompatibility.io_deq_bits_tl_state_source : i2
    %13 = hw.array_get %12[%auto_out_r_bits_id] {sv.namehint = "bundleIn_0_r_bits_echo_tl_state_source"} : !hw.array<16xi2>, i4
    %14 = comb.icmp eq %auto_in_ar_bits_id, %c0_i4 {sv.namehint = "arsel_0"} : i4
    %15 = comb.icmp eq %auto_in_ar_bits_id, %c1_i4 {sv.namehint = "arsel_1"} : i4
    %16 = comb.icmp eq %auto_in_ar_bits_id, %c2_i4 {sv.namehint = "arsel_2"} : i4
    %17 = comb.icmp eq %auto_out_r_bits_id, %c0_i4 {sv.namehint = "rsel_0"} : i4
    %18 = comb.icmp eq %auto_out_r_bits_id, %c1_i4 {sv.namehint = "rsel_1"} : i4
    %19 = comb.icmp eq %auto_out_r_bits_id, %c2_i4 {sv.namehint = "rsel_2"} : i4
    %20 = comb.and bin %auto_out_r_valid, %auto_in_r_ready {sv.namehint = "_rqueues_15_deq_ready_T"} : i1
    %21 = comb.and bin %20, %17, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility.io_deq_ready"} : i1
    %22 = comb.and bin %auto_in_ar_valid, %auto_out_ar_ready {sv.namehint = "_rqueues_15_enq_valid_T"} : i1
    %23 = comb.and bin %22, %14 {sv.namehint = "QueueCompatibility.io_enq_valid"} : i1
    %24 = comb.and bin %20, %18, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_1.io_deq_ready"} : i1
    %25 = comb.and bin %22, %15 {sv.namehint = "QueueCompatibility_1.io_enq_valid"} : i1
    %26 = comb.and bin %20, %19, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_2.io_deq_ready"} : i1
    %27 = comb.and bin %22, %16 {sv.namehint = "QueueCompatibility_2.io_enq_valid"} : i1
    %28 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %QueueCompatibility_5.io_enq_ready, %QueueCompatibility_4.io_enq_ready, %QueueCompatibility_3.io_enq_ready : i1
    %29 = hw.array_get %28[%auto_in_aw_bits_id] : !hw.array<16xi1>, i4
    %30 = comb.and bin %auto_out_aw_ready, %29 {sv.namehint = "bundleIn_0_aw_ready"} : i1
    %31 = comb.and bin %auto_in_aw_valid, %29 {sv.namehint = "bundleOut_0_aw_valid"} : i1
    %32 = comb.xor bin %auto_out_b_valid, %true : i1
    %33 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %QueueCompatibility_5.io_deq_valid, %QueueCompatibility_4.io_deq_valid, %QueueCompatibility_3.io_deq_valid : i1
    %34 = hw.array_get %33[%auto_out_b_bits_id] : !hw.array<16xi1>, i4
    %35 = comb.or bin %32, %34, %reset : i1
    %36 = comb.xor bin %35, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %55 = comb.and bin %STOP_COND_, %9 : i1
        sv.if %55 {
          sv.fatal 1
        }
        %56 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %56 {
          sv.fatal 1
        }
      }
    }
    %37 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %QueueCompatibility_5.io_deq_bits_tl_state_size, %QueueCompatibility_4.io_deq_bits_tl_state_size, %QueueCompatibility_3.io_deq_bits_tl_state_size : i4
    %38 = hw.array_get %37[%auto_out_b_bits_id] {sv.namehint = "bundleIn_0_b_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %39 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %QueueCompatibility_5.io_deq_bits_tl_state_source, %QueueCompatibility_4.io_deq_bits_tl_state_source, %QueueCompatibility_3.io_deq_bits_tl_state_source : i2
    %40 = hw.array_get %39[%auto_out_b_bits_id] {sv.namehint = "bundleIn_0_b_bits_echo_tl_state_source"} : !hw.array<16xi2>, i4
    %41 = comb.icmp eq %auto_in_aw_bits_id, %c0_i4 {sv.namehint = "awsel_0"} : i4
    %42 = comb.icmp eq %auto_in_aw_bits_id, %c1_i4 {sv.namehint = "awsel_1"} : i4
    %43 = comb.icmp eq %auto_in_aw_bits_id, %c2_i4 {sv.namehint = "awsel_2"} : i4
    %44 = comb.icmp eq %auto_out_b_bits_id, %c0_i4 {sv.namehint = "bsel_0"} : i4
    %45 = comb.icmp eq %auto_out_b_bits_id, %c1_i4 {sv.namehint = "bsel_1"} : i4
    %46 = comb.icmp eq %auto_out_b_bits_id, %c2_i4 {sv.namehint = "bsel_2"} : i4
    %47 = comb.and bin %auto_out_b_valid, %auto_in_b_ready {sv.namehint = "_wqueues_15_deq_ready_T"} : i1
    %48 = comb.and bin %47, %44 {sv.namehint = "QueueCompatibility_3.io_deq_ready"} : i1
    %49 = comb.and bin %auto_in_aw_valid, %auto_out_aw_ready {sv.namehint = "_wqueues_15_enq_valid_T"} : i1
    %50 = comb.and bin %49, %41 {sv.namehint = "QueueCompatibility_3.io_enq_valid"} : i1
    %51 = comb.and bin %47, %45 {sv.namehint = "QueueCompatibility_4.io_deq_ready"} : i1
    %52 = comb.and bin %49, %42 {sv.namehint = "QueueCompatibility_4.io_enq_valid"} : i1
    %53 = comb.and bin %47, %46 {sv.namehint = "QueueCompatibility_5.io_deq_ready"} : i1
    %54 = comb.and bin %49, %43 {sv.namehint = "QueueCompatibility_5.io_enq_valid"} : i1
    hw.output %30, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %38, %40, %3, %auto_out_r_valid, %auto_out_r_bits_id, %auto_out_r_bits_data, %auto_out_r_bits_resp, %11, %13, %auto_out_r_bits_last, %31, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %4, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_r_ready : i1, i1, i1, i4, i2, i4, i2, i1, i1, i4, i64, i2, i4, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1
  }
  hw.module private @Queue_5(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_data : i64, in %io_enq_bits_resp : i2, in %io_enq_bits_echo_tl_state_size : i4, in %io_enq_bits_echo_tl_state_source : i2, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_bits_id : i4, out io_deq_bits_data : i64, out io_deq_bits_resp : i2, out io_deq_bits_echo_tl_state_size : i4, out io_deq_bits_echo_tl_state_source : i2, out io_deq_bits_last : i1) {
    %c1_i3 = hw.constant 1 : i3
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <8 x 77>
    seq.firmem.write_port %ram[%enq_ptr_value] = %1, clock %clock enable %12 : <8 x 77>
    %0 = seq.firmem.read_port %ram[%deq_ptr_value], clock %clock : <8 x 77>
    %1 = comb.concat %io_enq_bits_last, %io_enq_bits_echo_tl_state_source, %io_enq_bits_echo_tl_state_size, %io_enq_bits_resp, %io_enq_bits_data, %io_enq_bits_id : i1, i2, i4, i2, i64, i4
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i77) -> i4
    %3 = comb.extract %0 from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i77) -> i64
    %4 = comb.extract %0 from 68 {sv.namehint = "ram_io_deq_bits_MPORT_data_resp"} : (i77) -> i2
    %5 = comb.extract %0 from 70 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_size"} : (i77) -> i4
    %6 = comb.extract %0 from 74 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_source"} : (i77) -> i2
    %7 = comb.extract %0 from 76 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i77) -> i1
    %enq_ptr_value = seq.firreg %15 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64, sv.namehint = "enq_ptr_value"} : i3
    %deq_ptr_value = seq.firreg %17 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 3 : ui64, sv.namehint = "deq_ptr_value"} : i3
    %maybe_full = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %8 = comb.icmp bin eq %enq_ptr_value, %deq_ptr_value {sv.namehint = "ptr_match"} : i3
    %9 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %10 = comb.and bin %8, %9 {sv.namehint = "empty"} : i1
    %11 = comb.and bin %8, %maybe_full {sv.namehint = "full"} : i1
    %12 = comb.and bin %21, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %13 = comb.and bin %io_deq_ready, %20 {sv.namehint = "do_deq"} : i1
    %14 = comb.add %enq_ptr_value, %c1_i3 {sv.namehint = "_value_T"} : i3
    %15 = comb.mux bin %12, %14, %enq_ptr_value : i3
    %16 = comb.add %deq_ptr_value, %c1_i3 {sv.namehint = "_value_T_2"} : i3
    %17 = comb.mux bin %13, %16, %deq_ptr_value : i3
    %18 = comb.icmp bin eq %12, %13 : i1
    %19 = comb.mux bin %18, %maybe_full, %12 : i1
    %20 = comb.xor bin %10, %true {sv.namehint = "io_deq_valid"} : i1
    %21 = comb.xor bin %11, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %21, %2, %3, %4, %5, %6, %7 : i1, i4, i64, i2, i4, i2, i1
  }
  hw.module private @AXI4Deinterleaver(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i2, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i2, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i2, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i2, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i2, in %auto_out_r_bits_last : i1) {
    %c-1_i4 = hw.constant -1 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c-4_i4 = hw.constant -4 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c7_i4 = hw.constant 7 : i4
    %c6_i4 = hw.constant 6 : i4
    %c5_i4 = hw.constant 5 : i4
    %c4_i4 = hw.constant 4 : i4
    %c3_i4 = hw.constant 3 : i4
    %c0_i13 = hw.constant 0 : i13
    %c2_i4 = hw.constant 2 : i4
    %c1_i4 = hw.constant 1 : i4
    %c0_i3 = hw.constant 0 : i3
    %false = hw.constant false {sv.namehint = "deq_id_hi"}
    %c0_i4 = hw.constant 0 : i4
    %c0_i64 = hw.constant 0 : i64
    %c0_i2 = hw.constant 0 : i2
    %c-8_i4 = hw.constant -8 : i4
    %true = hw.constant true
    %c0_i8 = hw.constant 0 : i8
    %0 = seq.from_clock %clock
    %qs_queue_0.io_enq_ready, %qs_queue_0.io_deq_bits_id, %qs_queue_0.io_deq_bits_data, %qs_queue_0.io_deq_bits_resp, %qs_queue_0.io_deq_bits_echo_tl_state_size, %qs_queue_0.io_deq_bits_echo_tl_state_source, %qs_queue_0.io_deq_bits_last = hw.instance "qs_queue_0" @Queue_5(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %172: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_echo_tl_state_size: %auto_out_r_bits_echo_tl_state_size: i4, io_enq_bits_echo_tl_state_source: %auto_out_r_bits_echo_tl_state_source: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %154: i1) -> (io_enq_ready: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_last: i1) {sv.namehint = "enq_readys_0"}
    %qs_queue_1.io_enq_ready, %qs_queue_1.io_deq_bits_id, %qs_queue_1.io_deq_bits_data, %qs_queue_1.io_deq_bits_resp, %qs_queue_1.io_deq_bits_echo_tl_state_size, %qs_queue_1.io_deq_bits_echo_tl_state_source, %qs_queue_1.io_deq_bits_last = hw.instance "qs_queue_1" @Queue_5(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %173: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_echo_tl_state_size: %auto_out_r_bits_echo_tl_state_size: i4, io_enq_bits_echo_tl_state_source: %auto_out_r_bits_echo_tl_state_source: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %155: i1) -> (io_enq_ready: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_last: i1) {sv.namehint = "enq_readys_1"}
    %qs_queue_2.io_enq_ready, %qs_queue_2.io_deq_bits_id, %qs_queue_2.io_deq_bits_data, %qs_queue_2.io_deq_bits_resp, %qs_queue_2.io_deq_bits_echo_tl_state_size, %qs_queue_2.io_deq_bits_echo_tl_state_source, %qs_queue_2.io_deq_bits_last = hw.instance "qs_queue_2" @Queue_5(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %174: i1, io_enq_bits_id: %auto_out_r_bits_id: i4, io_enq_bits_data: %auto_out_r_bits_data: i64, io_enq_bits_resp: %auto_out_r_bits_resp: i2, io_enq_bits_echo_tl_state_size: %auto_out_r_bits_echo_tl_state_size: i4, io_enq_bits_echo_tl_state_source: %auto_out_r_bits_echo_tl_state_source: i2, io_enq_bits_last: %auto_out_r_bits_last: i1, io_deq_ready: %156: i1) -> (io_enq_ready: i1, io_deq_bits_id: i4, io_deq_bits_data: i64, io_deq_bits_resp: i2, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_last: i1) {sv.namehint = "enq_readys_2"}
    %1 = comb.xor bin %175, %true {sv.namehint = "_qs_T"} : i1
    %2 = comb.or bin %1, %reset {sv.namehint = "_qs_T_2"} : i1
    %3 = comb.xor bin %2, %true {sv.namehint = "_qs_T_3"} : i1
    %4 = comb.xor bin %176, %true {sv.namehint = "_qs_T_4"} : i1
    %5 = comb.or bin %4, %reset {sv.namehint = "_qs_T_6"} : i1
    %6 = comb.xor bin %5, %true {sv.namehint = "_qs_T_7"} : i1
    %7 = comb.xor bin %177, %true {sv.namehint = "_qs_T_8"} : i1
    %8 = comb.or bin %7, %reset {sv.namehint = "_qs_T_10"} : i1
    %9 = comb.xor bin %8, %true {sv.namehint = "_qs_T_11"} : i1
    %10 = comb.xor bin %178, %true {sv.namehint = "_qs_T_12"} : i1
    %11 = comb.or bin %10, %reset {sv.namehint = "_qs_T_14"} : i1
    %12 = comb.xor bin %11, %true {sv.namehint = "_qs_T_15"} : i1
    %13 = comb.xor bin %179, %true {sv.namehint = "_qs_T_16"} : i1
    %14 = comb.or bin %13, %reset {sv.namehint = "_qs_T_18"} : i1
    %15 = comb.xor bin %14, %true {sv.namehint = "_qs_T_19"} : i1
    %16 = comb.xor bin %180, %true {sv.namehint = "_qs_T_20"} : i1
    %17 = comb.or bin %16, %reset {sv.namehint = "_qs_T_22"} : i1
    %18 = comb.xor bin %17, %true {sv.namehint = "_qs_T_23"} : i1
    %19 = comb.xor bin %181, %true {sv.namehint = "_qs_T_24"} : i1
    %20 = comb.or bin %19, %reset {sv.namehint = "_qs_T_26"} : i1
    %21 = comb.xor bin %20, %true {sv.namehint = "_qs_T_27"} : i1
    %22 = comb.xor bin %182, %true {sv.namehint = "_qs_T_28"} : i1
    %23 = comb.or bin %22, %reset {sv.namehint = "_qs_T_30"} : i1
    %24 = comb.xor bin %23, %true {sv.namehint = "_qs_T_31"} : i1
    %25 = comb.xor bin %183, %true {sv.namehint = "_qs_T_32"} : i1
    %26 = comb.or bin %25, %reset {sv.namehint = "_qs_T_34"} : i1
    %27 = comb.xor bin %26, %true {sv.namehint = "_qs_T_35"} : i1
    %28 = comb.xor bin %184, %true {sv.namehint = "_qs_T_36"} : i1
    %29 = comb.or bin %28, %reset {sv.namehint = "_qs_T_38"} : i1
    %30 = comb.xor bin %29, %true {sv.namehint = "_qs_T_39"} : i1
    %31 = comb.xor bin %185, %true {sv.namehint = "_qs_T_40"} : i1
    %32 = comb.or bin %31, %reset {sv.namehint = "_qs_T_42"} : i1
    %33 = comb.xor bin %32, %true {sv.namehint = "_qs_T_43"} : i1
    %34 = comb.xor bin %186, %true {sv.namehint = "_qs_T_44"} : i1
    %35 = comb.or bin %34, %reset {sv.namehint = "_qs_T_46"} : i1
    %36 = comb.xor bin %35, %true {sv.namehint = "_qs_T_47"} : i1
    %37 = comb.xor bin %187, %true {sv.namehint = "_qs_T_48"} : i1
    %38 = comb.or bin %37, %reset {sv.namehint = "_qs_T_50"} : i1
    %39 = comb.xor bin %38, %true {sv.namehint = "_qs_T_51"} : i1
    %locked = seq.firreg %124 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "locked"} : i1
    %deq_id = seq.firreg %141 clock %clock {firrtl.random_init_start = 1 : ui64} : i4
    %pending_count = seq.firreg %49 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 5 : ui64} : i4
    %40 = comb.icmp eq %auto_out_r_bits_id, %c0_i4 {sv.namehint = "enq_OH_bools_0"} : i4
    %41 = comb.and bin %171, %auto_out_r_valid {sv.namehint = "_pending_inc_T_7"} : i1
    %42 = comb.and bin %40, %41, %auto_out_r_bits_last {sv.namehint = "pending_inc"} : i1
    %43 = comb.icmp eq %deq_id, %c0_i4 {sv.namehint = "deq_OH_bools_0"} : i4
    %44 = comb.and bin %auto_in_r_ready, %locked {sv.namehint = "_queue_wire_15_deq_ready_T"} : i1
    %45 = comb.and bin %43, %44, %153 {sv.namehint = "pending_dec"} : i1
    %46 = comb.concat %c0_i3, %42 : i3, i1
    %47 = comb.add %pending_count, %46 {sv.namehint = "_pending_next_T"} : i4
    %48 = comb.concat %c0_i3, %45 : i3, i1
    %49 = comb.sub %47, %48 {sv.namehint = "_pending_next_T_2"} : i4
    %50 = comb.xor bin %45, %true {sv.namehint = "_pending_T"} : i1
    %51 = comb.icmp bin ne %pending_count, %c0_i4 {sv.namehint = "_pending_T_1"} : i4
    %52 = comb.or bin %50, %51, %reset {sv.namehint = "_pending_T_4"} : i1
    %53 = comb.xor bin %52, %true {sv.namehint = "_pending_T_5"} : i1
    %54 = comb.xor bin %42, %true {sv.namehint = "_pending_T_6"} : i1
    %55 = comb.icmp bin ne %pending_count, %c-8_i4 {sv.namehint = "_pending_T_7"} : i4
    %56 = comb.or bin %54, %55, %reset {sv.namehint = "_pending_T_10"} : i1
    %57 = comb.xor bin %56, %true {sv.namehint = "_pending_T_11"} : i1
    %58 = comb.icmp bin ne %49, %c0_i4 {sv.namehint = "pending_lo_lo_lo_lo"} : i4
    %pending_count_1 = seq.firreg %66 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 9 : ui64} : i4
    %59 = comb.icmp eq %auto_out_r_bits_id, %c1_i4 {sv.namehint = "enq_OH_bools_1"} : i4
    %60 = comb.and bin %59, %41, %auto_out_r_bits_last {sv.namehint = "pending_inc_1"} : i1
    %61 = comb.icmp eq %deq_id, %c1_i4 {sv.namehint = "deq_OH_bools_1"} : i4
    %62 = comb.and bin %61, %44, %153 {sv.namehint = "pending_dec_1"} : i1
    %63 = comb.concat %c0_i3, %60 : i3, i1
    %64 = comb.add %pending_count_1, %63 {sv.namehint = "_pending_next_T_4"} : i4
    %65 = comb.concat %c0_i3, %62 : i3, i1
    %66 = comb.sub %64, %65 {sv.namehint = "_pending_next_T_6"} : i4
    %67 = comb.xor bin %62, %true {sv.namehint = "_pending_T_12"} : i1
    %68 = comb.icmp bin ne %pending_count_1, %c0_i4 {sv.namehint = "_pending_T_13"} : i4
    %69 = comb.or bin %67, %68, %reset {sv.namehint = "_pending_T_16"} : i1
    %70 = comb.xor bin %69, %true {sv.namehint = "_pending_T_17"} : i1
    %71 = comb.xor bin %60, %true {sv.namehint = "_pending_T_18"} : i1
    %72 = comb.icmp bin ne %pending_count_1, %c-8_i4 {sv.namehint = "_pending_T_19"} : i4
    %73 = comb.or bin %71, %72, %reset {sv.namehint = "_pending_T_22"} : i1
    %74 = comb.xor bin %73, %true {sv.namehint = "_pending_T_23"} : i1
    %75 = comb.icmp bin ne %66, %c0_i4 {sv.namehint = "pending_lo_lo_lo_hi"} : i4
    %pending_count_2 = seq.firreg %83 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 13 : ui64} : i4
    %76 = comb.icmp eq %auto_out_r_bits_id, %c2_i4 {sv.namehint = "enq_OH_bools_2"} : i4
    %77 = comb.and bin %76, %41, %auto_out_r_bits_last {sv.namehint = "pending_inc_2"} : i1
    %78 = comb.icmp eq %deq_id, %c2_i4 {sv.namehint = "deq_OH_bools_2"} : i4
    %79 = comb.and bin %78, %44, %153 {sv.namehint = "pending_dec_2"} : i1
    %80 = comb.concat %c0_i3, %77 : i3, i1
    %81 = comb.add %pending_count_2, %80 {sv.namehint = "_pending_next_T_8"} : i4
    %82 = comb.concat %c0_i3, %79 : i3, i1
    %83 = comb.sub %81, %82 {sv.namehint = "_pending_next_T_10"} : i4
    %84 = comb.xor bin %79, %true {sv.namehint = "_pending_T_24"} : i1
    %85 = comb.icmp bin ne %pending_count_2, %c0_i4 {sv.namehint = "_pending_T_25"} : i4
    %86 = comb.or bin %84, %85, %reset {sv.namehint = "_pending_T_28"} : i1
    %87 = comb.xor bin %86, %true {sv.namehint = "_pending_T_29"} : i1
    %88 = comb.xor bin %77, %true {sv.namehint = "_pending_T_30"} : i1
    %89 = comb.icmp bin ne %pending_count_2, %c-8_i4 {sv.namehint = "_pending_T_31"} : i4
    %90 = comb.or bin %88, %89, %reset {sv.namehint = "_pending_T_34"} : i1
    %91 = comb.xor bin %90, %true {sv.namehint = "_pending_T_35"} : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %188 = comb.and bin %STOP_COND_, %3 : i1
        sv.if %188 {
          sv.fatal 1
        }
        %189 = comb.and bin %STOP_COND_, %6 : i1
        sv.if %189 {
          sv.fatal 1
        }
        %190 = comb.and bin %STOP_COND_, %9 : i1
        sv.if %190 {
          sv.fatal 1
        }
        %191 = comb.and bin %STOP_COND_, %12 : i1
        sv.if %191 {
          sv.fatal 1
        }
        %192 = comb.and bin %STOP_COND_, %15 : i1
        sv.if %192 {
          sv.fatal 1
        }
        %193 = comb.and bin %STOP_COND_, %18 : i1
        sv.if %193 {
          sv.fatal 1
        }
        %194 = comb.and bin %STOP_COND_, %21 : i1
        sv.if %194 {
          sv.fatal 1
        }
        %195 = comb.and bin %STOP_COND_, %24 : i1
        sv.if %195 {
          sv.fatal 1
        }
        %196 = comb.and bin %STOP_COND_, %27 : i1
        sv.if %196 {
          sv.fatal 1
        }
        %197 = comb.and bin %STOP_COND_, %30 : i1
        sv.if %197 {
          sv.fatal 1
        }
        %198 = comb.and bin %STOP_COND_, %33 : i1
        sv.if %198 {
          sv.fatal 1
        }
        %199 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %199 {
          sv.fatal 1
        }
        %200 = comb.and bin %STOP_COND_, %39 : i1
        sv.if %200 {
          sv.fatal 1
        }
        %201 = comb.and bin %STOP_COND_, %53 : i1
        sv.if %201 {
          sv.fatal 1
        }
        %202 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %202 {
          sv.fatal 1
        }
        %203 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %203 {
          sv.fatal 1
        }
        %204 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %204 {
          sv.fatal 1
        }
        %205 = comb.and bin %STOP_COND_, %87 : i1
        sv.if %205 {
          sv.fatal 1
        }
        %206 = comb.and bin %STOP_COND_, %91 : i1
        sv.if %206 {
          sv.fatal 1
        }
      }
    }
    %92 = comb.icmp bin ne %83, %c0_i4 {sv.namehint = "pending_lo_lo_hi_lo"} : i4
    %93 = comb.or %92, %75 : i1
    %94 = comb.or %75, %58 : i1
    %95 = comb.or %92, %94 : i1
    %96 = comb.or %93, %58 : i1
    %97 = comb.or %92, %94 : i1
    %98 = comb.or %93, %58 : i1
    %99 = comb.or %92, %94 : i1
    %100 = comb.or %93, %58 : i1
    %101 = comb.xor %96, %true : i1
    %102 = comb.xor %97, %true : i1
    %103 = comb.xor %98, %true : i1
    %104 = comb.xor %95, %true : i1
    %105 = comb.xor %96, %true : i1
    %106 = comb.xor %99, %true : i1
    %107 = comb.xor %100, %true : i1
    %108 = comb.xor %95, %true : i1
    %109 = comb.xor %96, %true : i1
    %110 = comb.xor %97, %true : i1
    %111 = comb.xor %98, %true : i1
    %112 = comb.xor %95, %true : i1
    %113 = comb.xor %96, %true : i1
    %114 = comb.xor %94, %true : i1
    %115 = comb.xor %58, %true : i1
    %116 = comb.concat %101, %102, %103, %104, %105, %106, %107, %108, %109, %110, %111, %112, %113, %114, %115 : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %117 = comb.concat %c0_i13, %92, %75 : i13, i1, i1
    %118 = comb.and %116, %117 {sv.namehint = "deq_id_lo"} : i15
    %119 = comb.xor bin %locked, %true : i1
    %120 = comb.and bin %44, %153 : i1
    %121 = comb.or bin %119, %120 : i1
    %122 = comb.concat %92, %75, %58 : i1, i1, i1
    %123 = comb.icmp bin ne %122, %c0_i3 {sv.namehint = "_locked_T"} : i3
    %124 = comb.mux bin %121, %123, %locked : i1
    %125 = comb.extract %118 from 7 {sv.namehint = "deq_id_hi_2"} : (i15) -> i8
    %126 = comb.icmp bin ne %125, %c0_i8 {sv.namehint = "deq_id_hi_3"} : i8
    %127 = comb.extract %118 from 8 : (i15) -> i7
    %128 = comb.extract %118 from 0 : (i15) -> i7
    %129 = comb.or %127, %128 {sv.namehint = "_deq_id_T_1"} : i7
    %130 = comb.extract %129 from 3 {sv.namehint = "deq_id_hi_4"} : (i7) -> i4
    %131 = comb.icmp bin ne %130, %c0_i4 {sv.namehint = "deq_id_hi_5"} : i4
    %132 = comb.extract %129 from 4 : (i7) -> i3
    %133 = comb.extract %129 from 0 : (i7) -> i3
    %134 = comb.or %132, %133 {sv.namehint = "_deq_id_T_2"} : i3
    %135 = comb.extract %134 from 1 {sv.namehint = "deq_id_hi_6"} : (i3) -> i2
    %136 = comb.icmp bin ne %135, %c0_i2 {sv.namehint = "deq_id_hi_7"} : i2
    %137 = comb.extract %134 from 2 : (i3) -> i1
    %138 = comb.extract %134 from 0 : (i3) -> i1
    %139 = comb.or %137, %138 {sv.namehint = "_deq_id_T_3"} : i1
    %140 = comb.concat %126, %131, %136, %139 : i1, i1, i1, i1
    %141 = comb.mux bin %121, %140, %deq_id : i4
    %142 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %qs_queue_2.io_deq_bits_id, %qs_queue_1.io_deq_bits_id, %qs_queue_0.io_deq_bits_id : i4
    %143 = hw.array_get %142[%deq_id] {sv.namehint = "bundleIn_0_r_bits_id"} : !hw.array<16xi4>, i4
    %144 = hw.array_create %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %qs_queue_2.io_deq_bits_data, %qs_queue_1.io_deq_bits_data, %qs_queue_0.io_deq_bits_data : i64
    %145 = hw.array_get %144[%deq_id] {sv.namehint = "bundleIn_0_r_bits_data"} : !hw.array<16xi64>, i4
    %146 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %qs_queue_2.io_deq_bits_resp, %qs_queue_1.io_deq_bits_resp, %qs_queue_0.io_deq_bits_resp : i2
    %147 = hw.array_get %146[%deq_id] {sv.namehint = "bundleIn_0_r_bits_resp"} : !hw.array<16xi2>, i4
    %148 = hw.array_create %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %c0_i4, %qs_queue_2.io_deq_bits_echo_tl_state_size, %qs_queue_1.io_deq_bits_echo_tl_state_size, %qs_queue_0.io_deq_bits_echo_tl_state_size : i4
    %149 = hw.array_get %148[%deq_id] {sv.namehint = "bundleIn_0_r_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %150 = hw.array_create %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %c0_i2, %qs_queue_2.io_deq_bits_echo_tl_state_source, %qs_queue_1.io_deq_bits_echo_tl_state_source, %qs_queue_0.io_deq_bits_echo_tl_state_source : i2
    %151 = hw.array_get %150[%deq_id] {sv.namehint = "bundleIn_0_r_bits_echo_tl_state_source"} : !hw.array<16xi2>, i4
    %152 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %qs_queue_2.io_deq_bits_last, %qs_queue_1.io_deq_bits_last, %qs_queue_0.io_deq_bits_last : i1
    %153 = hw.array_get %152[%deq_id] {sv.namehint = "bundleIn_0_r_bits_last"} : !hw.array<16xi1>, i4
    %154 = comb.and bin %43, %44 {sv.namehint = "qs_queue_0.io_deq_ready"} : i1
    %155 = comb.and bin %61, %44 {sv.namehint = "qs_queue_1.io_deq_ready"} : i1
    %156 = comb.and bin %78, %44 {sv.namehint = "qs_queue_2.io_deq_ready"} : i1
    %157 = comb.icmp eq %auto_out_r_bits_id, %c3_i4 {sv.namehint = "enq_OH_bools_3"} : i4
    %158 = comb.icmp eq %auto_out_r_bits_id, %c4_i4 {sv.namehint = "enq_OH_bools_4"} : i4
    %159 = comb.icmp eq %auto_out_r_bits_id, %c5_i4 {sv.namehint = "enq_OH_bools_5"} : i4
    %160 = comb.icmp eq %auto_out_r_bits_id, %c6_i4 {sv.namehint = "enq_OH_bools_6"} : i4
    %161 = comb.icmp eq %auto_out_r_bits_id, %c7_i4 {sv.namehint = "enq_OH_bools_7"} : i4
    %162 = comb.icmp eq %auto_out_r_bits_id, %c-8_i4 {sv.namehint = "enq_OH_bools_8"} : i4
    %163 = comb.icmp eq %auto_out_r_bits_id, %c-7_i4 {sv.namehint = "enq_OH_bools_9"} : i4
    %164 = comb.icmp eq %auto_out_r_bits_id, %c-6_i4 {sv.namehint = "enq_OH_bools_10"} : i4
    %165 = comb.icmp eq %auto_out_r_bits_id, %c-5_i4 {sv.namehint = "enq_OH_bools_11"} : i4
    %166 = comb.icmp eq %auto_out_r_bits_id, %c-4_i4 {sv.namehint = "enq_OH_bools_12"} : i4
    %167 = comb.icmp eq %auto_out_r_bits_id, %c-3_i4 {sv.namehint = "enq_OH_bools_13"} : i4
    %168 = comb.icmp eq %auto_out_r_bits_id, %c-2_i4 {sv.namehint = "enq_OH_bools_14"} : i4
    %169 = comb.icmp eq %auto_out_r_bits_id, %c-1_i4 {sv.namehint = "enq_OH_bools_15"} : i4
    %170 = hw.array_create %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %false, %qs_queue_2.io_enq_ready, %qs_queue_1.io_enq_ready, %qs_queue_0.io_enq_ready : i1
    %171 = hw.array_get %170[%auto_out_r_bits_id] {sv.namehint = "bundleOut_0_r_ready"} : !hw.array<16xi1>, i4
    %172 = comb.and bin %40, %auto_out_r_valid {sv.namehint = "qs_queue_0.io_enq_valid"} : i1
    %173 = comb.and bin %59, %auto_out_r_valid {sv.namehint = "qs_queue_1.io_enq_valid"} : i1
    %174 = comb.and bin %76, %auto_out_r_valid {sv.namehint = "qs_queue_2.io_enq_valid"} : i1
    %175 = comb.and bin %157, %auto_out_r_valid {sv.namehint = "queue_wire_3_enq_valid"} : i1
    %176 = comb.and bin %158, %auto_out_r_valid {sv.namehint = "queue_wire_4_enq_valid"} : i1
    %177 = comb.and bin %159, %auto_out_r_valid {sv.namehint = "queue_wire_5_enq_valid"} : i1
    %178 = comb.and bin %160, %auto_out_r_valid {sv.namehint = "queue_wire_6_enq_valid"} : i1
    %179 = comb.and bin %161, %auto_out_r_valid {sv.namehint = "queue_wire_7_enq_valid"} : i1
    %180 = comb.and bin %162, %auto_out_r_valid {sv.namehint = "queue_wire_8_enq_valid"} : i1
    %181 = comb.and bin %163, %auto_out_r_valid {sv.namehint = "queue_wire_9_enq_valid"} : i1
    %182 = comb.and bin %164, %auto_out_r_valid {sv.namehint = "queue_wire_10_enq_valid"} : i1
    %183 = comb.and bin %165, %auto_out_r_valid {sv.namehint = "queue_wire_11_enq_valid"} : i1
    %184 = comb.and bin %166, %auto_out_r_valid {sv.namehint = "queue_wire_12_enq_valid"} : i1
    %185 = comb.and bin %167, %auto_out_r_valid {sv.namehint = "queue_wire_13_enq_valid"} : i1
    %186 = comb.and bin %168, %auto_out_r_valid {sv.namehint = "queue_wire_14_enq_valid"} : i1
    %187 = comb.and bin %169, %auto_out_r_valid {sv.namehint = "queue_wire_15_enq_valid"} : i1
    hw.output %auto_out_aw_ready, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %auto_out_b_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_source, %auto_out_ar_ready, %locked, %143, %145, %147, %149, %151, %153, %auto_in_aw_valid, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_aw_bits_echo_tl_state_size, %auto_in_aw_bits_echo_tl_state_source, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %auto_in_ar_valid, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_ar_bits_echo_tl_state_size, %auto_in_ar_bits_echo_tl_state_source, %171 : i1, i1, i1, i4, i2, i4, i2, i1, i1, i4, i64, i2, i4, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @AXI4IdIndexer(out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i2, in %auto_in_aw_bits_addr : i31, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i2, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i2, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i2, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i2, in %auto_in_ar_bits_addr : i31, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i2, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i2, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i2, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i2, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i2, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i2, in %auto_out_r_bits_last : i1) {
    %c0_i2 = hw.constant 0 : i2
    %0 = comb.concat %c0_i2, %auto_in_ar_bits_id {sv.namehint = "bundleOut_0_ar_bits_id"} : i2, i2
    %1 = comb.concat %c0_i2, %auto_in_aw_bits_id {sv.namehint = "bundleOut_0_aw_bits_id"} : i2, i2
    %2 = comb.extract %auto_out_b_bits_id from 0 {sv.namehint = "bundleIn_0_b_bits_id"} : (i4) -> i2
    %3 = comb.extract %auto_out_r_bits_id from 0 {sv.namehint = "bundleIn_0_r_bits_id"} : (i4) -> i2
    hw.output %auto_out_aw_ready, %auto_out_w_ready, %auto_out_b_valid, %2, %auto_out_b_bits_resp, %auto_out_b_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_source, %auto_out_ar_ready, %auto_out_r_valid, %3, %auto_out_r_bits_data, %auto_out_r_bits_resp, %auto_out_r_bits_echo_tl_state_size, %auto_out_r_bits_echo_tl_state_source, %auto_out_r_bits_last, %auto_in_aw_valid, %1, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_aw_bits_echo_tl_state_size, %auto_in_aw_bits_echo_tl_state_source, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %auto_in_ar_valid, %0, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_ar_bits_echo_tl_state_size, %auto_in_ar_bits_echo_tl_state_source, %auto_in_r_ready : i1, i1, i1, i2, i2, i4, i2, i1, i1, i2, i64, i2, i4, i2, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @TLMonitor_2(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i31, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-1_i2 = hw.constant -1 : i2
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i5 = hw.constant -1 : i5
    %c-7_i4 = hw.constant -7 : i4
    %c7_i4 = hw.constant 7 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c255_i23 = hw.constant 255 : i23
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %c-1_i8 = hw.constant -1 : i8
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i24 = hw.constant -1 : i24
    %c-1_i12 = hw.constant -1 : i12
    %c0_i42 = hw.constant 0 : i42
    %c-1_i3 = hw.constant -1 : i3
    %c0_i31 = hw.constant 0 : i31
    %c0_i8 = hw.constant 0 : i8
    %c0_i19 = hw.constant 0 : i19
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i19, %io_in_a_bits_size : i19, i4
    %7 = comb.shl bin %c255_i23, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i23
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i23) -> i8
    %9 = comb.xor bin %8, %c-1_i8 {sv.namehint = "is_aligned_mask"} : i8
    %10 = comb.extract %io_in_a_bits_address from 0 : (i31) -> i8
    %11 = comb.and bin %10, %9 : i8
    %12 = comb.icmp bin eq %11, %c0_i8 {sv.namehint = "is_aligned"} : i8
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i31) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i31) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i31) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %59 = comb.extract %io_in_a_bits_address from 29 : (i31) -> i2
    %60 = comb.xor bin %reset, %true : i1
    %61 = comb.and bin %57, %60 : i1
    %62 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %63 = comb.icmp eq %59, %c-1_i2 : i2
    %64 = comb.and bin %58, %63 : i1
    %65 = comb.and bin %3, %62, %64 : i1
    %66 = comb.or bin %65, %reset : i1
    %67 = comb.xor bin %66, %true : i1
    %68 = comb.and bin %57, %67 : i1
    %69 = comb.or bin %3, %4, %5, %reset : i1
    %70 = comb.xor bin %69, %true : i1
    %71 = comb.and bin %57, %70 : i1
    %72 = comb.or bin %14, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %57, %73 : i1
    %75 = comb.or bin %12, %reset : i1
    %76 = comb.xor bin %75, %true : i1
    %77 = comb.and bin %57, %76 : i1
    %78 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %79 = comb.or bin %78, %reset : i1
    %80 = comb.xor bin %79, %true : i1
    %81 = comb.and bin %57, %80 : i1
    %82 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %83 = comb.or bin %82, %reset : i1
    %84 = comb.xor bin %83, %true : i1
    %85 = comb.and bin %57, %84 : i1
    %86 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %87 = comb.or bin %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %57, %88 : i1
    %90 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %91 = comb.and bin %io_in_a_valid, %90 : i1
    %92 = comb.and bin %91, %60 : i1
    %93 = comb.and bin %3, %62, %64 : i1
    %94 = comb.or bin %93, %reset : i1
    %95 = comb.xor bin %94, %true : i1
    %96 = comb.and bin %91, %95 : i1
    %97 = comb.and bin %91, %70 : i1
    %98 = comb.and bin %91, %73 : i1
    %99 = comb.and bin %91, %76 : i1
    %100 = comb.and bin %91, %80 : i1
    %101 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %102 = comb.or bin %101, %reset : i1
    %103 = comb.xor bin %102, %true : i1
    %104 = comb.and bin %91, %103 : i1
    %105 = comb.and bin %91, %84 : i1
    %106 = comb.and bin %91, %88 : i1
    %107 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %108 = comb.and bin %io_in_a_valid, %107 : i1
    %109 = comb.or bin %3, %4, %5 : i1
    %110 = comb.and bin %58, %109 : i1
    %111 = comb.or bin %110, %reset : i1
    %112 = comb.xor bin %111, %true : i1
    %113 = comb.and bin %108, %112 : i1
    %114 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %115 = comb.and bin %114, %63 : i1
    %116 = comb.or bin %115, %reset : i1
    %117 = comb.xor bin %116, %true : i1
    %118 = comb.and bin %108, %117 : i1
    %119 = comb.and bin %108, %70 : i1
    %120 = comb.and bin %108, %76 : i1
    %121 = comb.xor bin %101, %true : i1
    %122 = comb.or bin %121, %reset : i1
    %123 = comb.xor bin %122, %true : i1
    %124 = comb.and bin %108, %123 : i1
    %125 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %126 = comb.or bin %125, %reset : i1
    %127 = comb.xor bin %126, %true : i1
    %128 = comb.and bin %108, %127 : i1
    %129 = comb.and bin %108, %88 : i1
    %130 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %131 = comb.and bin %io_in_a_valid, %130 : i1
    %132 = comb.icmp bin ult %io_in_a_bits_size, %c-7_i4 : i4
    %133 = comb.and bin %110, %132, %63 : i1
    %134 = comb.or bin %133, %reset : i1
    %135 = comb.xor bin %134, %true : i1
    %136 = comb.and bin %131, %135 : i1
    %137 = comb.and bin %131, %70 : i1
    %138 = comb.and bin %131, %76 : i1
    %139 = comb.and bin %131, %123 : i1
    %140 = comb.and bin %131, %127 : i1
    %141 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %142 = comb.and bin %io_in_a_valid, %141 : i1
    %143 = comb.and bin %142, %135 : i1
    %144 = comb.and bin %142, %70 : i1
    %145 = comb.and bin %142, %76 : i1
    %146 = comb.and bin %142, %123 : i1
    %147 = comb.xor bin %55, %c-1_i8 : i8
    %148 = comb.and bin %io_in_a_bits_mask, %147 : i8
    %149 = comb.icmp bin eq %148, %c0_i8 : i8
    %150 = comb.or bin %149, %reset : i1
    %151 = comb.xor bin %150, %true : i1
    %152 = comb.and bin %142, %151 : i1
    %153 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %154 = comb.and bin %io_in_a_valid, %153 : i1
    %155 = comb.and bin %154, %60 : i1
    %156 = comb.and bin %154, %70 : i1
    %157 = comb.and bin %154, %76 : i1
    %158 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %159 = comb.or bin %158, %reset : i1
    %160 = comb.xor bin %159, %true : i1
    %161 = comb.and bin %154, %160 : i1
    %162 = comb.and bin %154, %127 : i1
    %163 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %164 = comb.and bin %io_in_a_valid, %163 : i1
    %165 = comb.and bin %164, %60 : i1
    %166 = comb.and bin %164, %70 : i1
    %167 = comb.and bin %164, %76 : i1
    %168 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %169 = comb.xor bin %168, %true : i1
    %170 = comb.or bin %169, %reset : i1
    %171 = comb.xor bin %170, %true : i1
    %172 = comb.and bin %164, %171 : i1
    %173 = comb.and bin %164, %127 : i1
    %174 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %175 = comb.and bin %io_in_a_valid, %174 : i1
    %176 = comb.and bin %175, %60 : i1
    %177 = comb.and bin %175, %70 : i1
    %178 = comb.and bin %175, %76 : i1
    %179 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %180 = comb.or bin %179, %reset : i1
    %181 = comb.xor bin %180, %true : i1
    %182 = comb.and bin %175, %181 : i1
    %183 = comb.and bin %175, %127 : i1
    %184 = comb.and bin %175, %88 : i1
    %185 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %186 = comb.or bin %185, %reset : i1
    %187 = comb.xor bin %186, %true : i1
    %188 = comb.and bin %io_in_d_valid, %187 : i1
    %189 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %190 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %191 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %192 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %193 = comb.and bin %io_in_d_valid, %192 : i1
    %194 = comb.or bin %189, %190, %191, %reset : i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.and bin %193, %195 : i1
    %197 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %198 = comb.or bin %197, %reset : i1
    %199 = comb.xor bin %198, %true : i1
    %200 = comb.and bin %193, %199 : i1
    %201 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %202 = comb.or bin %201, %reset : i1
    %203 = comb.xor bin %202, %true : i1
    %204 = comb.and bin %193, %203 : i1
    %205 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %206 = comb.or bin %205, %reset : i1
    %207 = comb.xor bin %206, %true : i1
    %208 = comb.and bin %193, %207 : i1
    %209 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %210 = comb.and bin %io_in_d_valid, %209 : i1
    %211 = comb.and bin %210, %195 : i1
    %212 = comb.and bin %210, %60 : i1
    %213 = comb.and bin %210, %199 : i1
    %214 = comb.and bin %210, %203 : i1
    %215 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %216 = comb.and bin %io_in_d_valid, %215 : i1
    %217 = comb.and bin %216, %195 : i1
    %218 = comb.and bin %216, %60 : i1
    %219 = comb.and bin %216, %199 : i1
    %220 = comb.or bin %205, %io_in_d_bits_corrupt, %reset : i1
    %221 = comb.xor bin %220, %true : i1
    %222 = comb.and bin %216, %221 : i1
    %223 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %224 = comb.and bin %io_in_d_valid, %223 : i1
    %225 = comb.and bin %224, %195 : i1
    %226 = comb.and bin %224, %203 : i1
    %227 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %228 = comb.and bin %io_in_d_valid, %227 : i1
    %229 = comb.and bin %228, %195 : i1
    %230 = comb.and bin %228, %221 : i1
    %231 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %232 = comb.and bin %io_in_d_valid, %231 : i1
    %233 = comb.and bin %232, %195 : i1
    %234 = comb.and bin %232, %203 : i1
    %235 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %236 = comb.shl bin %c255_i23, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i23
    %237 = comb.extract %236 from 3 : (i23) -> i5
    %238 = comb.xor %237, %c-1_i5 {sv.namehint = "_a_first_beats1_decode_T_3"} : i5
    %239 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %240 = comb.mux bin %239, %c0_i5, %238 {sv.namehint = "a_first_beats1"} : i5
    %a_first_counter = seq.firreg %245 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 0 : ui64} : i5
    %241 = comb.add %a_first_counter, %c-1_i5 {sv.namehint = "_a_first_counter1_T"} : i5
    %242 = comb.icmp bin ne %a_first_counter, %c0_i5 : i5
    %243 = comb.xor bin %242, %true {sv.namehint = "a_first"} : i1
    %244 = comb.mux bin %242, %241, %240 {sv.namehint = "_a_first_counter_T"} : i5
    %245 = comb.mux bin %235, %244, %a_first_counter : i5
    %opcode = seq.firreg %268 clock %clock {firrtl.random_init_start = 5 : ui64} : i3
    %param = seq.firreg %269 clock %clock {firrtl.random_init_start = 8 : ui64} : i3
    %size = seq.firreg %270 clock %clock {firrtl.random_init_start = 11 : ui64} : i4
    %source = seq.firreg %271 clock %clock {firrtl.random_init_start = 15 : ui64} : i2
    %address = seq.firreg %272 clock %clock {firrtl.random_init_start = 17 : ui64} : i31
    %246 = comb.and bin %io_in_a_valid, %242 : i1
    %247 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %248 = comb.or bin %247, %reset : i1
    %249 = comb.xor bin %248, %true : i1
    %250 = comb.and bin %246, %249 : i1
    %251 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %252 = comb.or bin %251, %reset : i1
    %253 = comb.xor bin %252, %true : i1
    %254 = comb.and bin %246, %253 : i1
    %255 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %256 = comb.or bin %255, %reset : i1
    %257 = comb.xor bin %256, %true : i1
    %258 = comb.and bin %246, %257 : i1
    %259 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %260 = comb.or bin %259, %reset : i1
    %261 = comb.xor bin %260, %true : i1
    %262 = comb.and bin %246, %261 : i1
    %263 = comb.icmp bin eq %io_in_a_bits_address, %address : i31
    %264 = comb.or bin %263, %reset : i1
    %265 = comb.xor bin %264, %true : i1
    %266 = comb.and bin %246, %265 : i1
    %267 = comb.and bin %235, %243 : i1
    %268 = comb.mux bin %267, %io_in_a_bits_opcode, %opcode : i3
    %269 = comb.mux bin %267, %io_in_a_bits_param, %param : i3
    %270 = comb.mux bin %267, %io_in_a_bits_size, %size : i4
    %271 = comb.mux bin %267, %io_in_a_bits_source, %source : i2
    %272 = comb.mux bin %267, %io_in_a_bits_address, %address : i31
    %273 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %274 = comb.concat %c0_i19, %io_in_d_bits_size : i19, i4
    %275 = comb.shl bin %c255_i23, %274 {sv.namehint = "_d_first_beats1_decode_T_1"} : i23
    %276 = comb.extract %275 from 3 : (i23) -> i5
    %277 = comb.xor %276, %c-1_i5 {sv.namehint = "_d_first_beats1_decode_T_3"} : i5
    %278 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %279 = comb.mux bin %278, %277, %c0_i5 {sv.namehint = "d_first_beats1"} : i5
    %d_first_counter = seq.firreg %284 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 48 : ui64} : i5
    %280 = comb.add %d_first_counter, %c-1_i5 {sv.namehint = "_d_first_counter1_T"} : i5
    %281 = comb.icmp bin ne %d_first_counter, %c0_i5 : i5
    %282 = comb.xor bin %281, %true {sv.namehint = "d_first"} : i1
    %283 = comb.mux bin %281, %280, %279 {sv.namehint = "_d_first_counter_T"} : i5
    %284 = comb.mux bin %273, %283, %d_first_counter : i5
    %opcode_1 = seq.firreg %303 clock %clock {firrtl.random_init_start = 53 : ui64} : i3
    %size_1 = seq.firreg %304 clock %clock {firrtl.random_init_start = 58 : ui64} : i4
    %source_1 = seq.firreg %305 clock %clock {firrtl.random_init_start = 62 : ui64} : i2
    %denied = seq.firreg %306 clock %clock {firrtl.random_init_start = 65 : ui64} : i1
    %285 = comb.and bin %io_in_d_valid, %281 : i1
    %286 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %287 = comb.or bin %286, %reset : i1
    %288 = comb.xor bin %287, %true : i1
    %289 = comb.and bin %285, %288 : i1
    %290 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %291 = comb.or bin %290, %reset : i1
    %292 = comb.xor bin %291, %true : i1
    %293 = comb.and bin %285, %292 : i1
    %294 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %295 = comb.or bin %294, %reset : i1
    %296 = comb.xor bin %295, %true : i1
    %297 = comb.and bin %285, %296 : i1
    %298 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %299 = comb.or bin %298, %reset : i1
    %300 = comb.xor bin %299, %true : i1
    %301 = comb.and bin %285, %300 : i1
    %302 = comb.and bin %273, %282 : i1
    %303 = comb.mux bin %302, %io_in_d_bits_opcode, %opcode_1 : i3
    %304 = comb.mux bin %302, %io_in_d_bits_size, %size_1 : i4
    %305 = comb.mux bin %302, %io_in_d_bits_source, %source_1 : i2
    %306 = comb.mux bin %302, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %429 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 66 : ui64} : i3
    %inflight_opcodes = seq.firreg %432 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 69 : ui64} : i12
    %inflight_sizes = seq.firreg %435 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 81 : ui64} : i24
    %307 = comb.shl bin %c255_i23, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i23
    %308 = comb.extract %307 from 3 : (i23) -> i5
    %309 = comb.xor %308, %c-1_i5 {sv.namehint = "_a_first_beats1_decode_T_7"} : i5
    %310 = comb.mux bin %239, %c0_i5, %309 {sv.namehint = "a_first_beats1_1"} : i5
    %a_first_counter_1 = seq.firreg %314 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 105 : ui64} : i5
    %311 = comb.add %a_first_counter_1, %c-1_i5 {sv.namehint = "_a_first_counter1_T_1"} : i5
    %312 = comb.icmp bin eq %a_first_counter_1, %c0_i5 {sv.namehint = "a_first_1"} : i5
    %313 = comb.mux bin %312, %310, %311 {sv.namehint = "_a_first_counter_T_1"} : i5
    %314 = comb.mux bin %235, %313, %a_first_counter_1 : i5
    %315 = comb.shl bin %c255_i23, %274 {sv.namehint = "_d_first_beats1_decode_T_5"} : i23
    %316 = comb.extract %315 from 3 : (i23) -> i5
    %317 = comb.xor %316, %c-1_i5 {sv.namehint = "_d_first_beats1_decode_T_7"} : i5
    %318 = comb.mux bin %278, %317, %c0_i5 {sv.namehint = "d_first_beats1_1"} : i5
    %d_first_counter_1 = seq.firreg %322 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 110 : ui64} : i5
    %319 = comb.add %d_first_counter_1, %c-1_i5 {sv.namehint = "_d_first_counter1_T_1"} : i5
    %320 = comb.icmp bin eq %d_first_counter_1, %c0_i5 {sv.namehint = "d_first_1"} : i5
    %321 = comb.mux bin %320, %318, %319 {sv.namehint = "_d_first_counter_T_1"} : i5
    %322 = comb.mux bin %273, %321, %d_first_counter_1 : i5
    %323 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %324 = comb.shru bin %inflight_opcodes, %323 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %325 = comb.extract %324 from 1 : (i12) -> i3
    %326 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %327 = comb.shru bin %inflight_sizes, %326 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %328 = comb.extract %327 from 1 : (i24) -> i7
    %329 = comb.concat %false, %328 {sv.namehint = "a_size_lookup"} : i1, i7
    %330 = comb.and bin %io_in_a_valid, %312 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %331 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %332 = comb.shl bin %c1_i4, %331 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %333 = comb.extract %332 from 0 : (i4) -> i3
    %334 = comb.mux bin %330, %333, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %335 = comb.and bin %235, %312 : i1
    %336 = comb.shl bin %c1_i4, %331 {sv.namehint = "_a_set_T"} : i4
    %337 = comb.extract %336 from 0 : (i4) -> i3
    %338 = comb.mux bin %335, %337, %c0_i3 {sv.namehint = "a_set"} : i3
    %339 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %340 = comb.mux bin %335, %339, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %341 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %342 = comb.mux bin %335, %341, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %343 = comb.concat %c0_i31, %340 : i31, i4
    %344 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %345 = comb.shl bin %343, %344 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %346 = comb.extract %345 from 0 : (i35) -> i12
    %347 = comb.mux bin %335, %346, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %348 = comb.concat %c0_i31, %342 : i31, i5
    %349 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %350 = comb.shl bin %348, %349 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %351 = comb.extract %350 from 0 : (i36) -> i24
    %352 = comb.mux bin %335, %351, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %353 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %354 = comb.shru bin %inflight, %353 : i3
    %355 = comb.extract %354 from 0 : (i3) -> i1
    %356 = comb.xor bin %355, %true : i1
    %357 = comb.or bin %356, %reset : i1
    %358 = comb.xor bin %357, %true : i1
    %359 = comb.and bin %335, %358 : i1
    %360 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %361 = comb.and bin %io_in_d_valid, %320 : i1
    %362 = comb.xor bin %360, %true : i1
    %363 = comb.and bin %361, %362 : i1
    %364 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %365 = comb.shl bin %c1_i4, %364 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %366 = comb.extract %365 from 0 : (i4) -> i3
    %367 = comb.mux bin %363, %366, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %368 = comb.and bin %273, %320, %362 : i1
    %369 = comb.shl bin %c1_i4, %364 {sv.namehint = "_d_clr_T"} : i4
    %370 = comb.extract %369 from 0 : (i4) -> i3
    %371 = comb.mux bin %368, %370, %c0_i3 {sv.namehint = "d_clr"} : i3
    %372 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %373 = comb.shl bin %c15_i47, %372 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %374 = comb.extract %373 from 0 : (i47) -> i12
    %375 = comb.mux bin %368, %374, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %376 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %377 = comb.shl bin %c255_i47, %376 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %378 = comb.extract %377 from 0 : (i47) -> i24
    %379 = comb.mux bin %368, %378, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %380 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %381 = comb.and bin %330, %380 {sv.namehint = "same_cycle_resp"} : i1
    %382 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %383 = comb.shru bin %inflight, %382 : i3
    %384 = comb.extract %383 from 0 : (i3) -> i1
    %385 = comb.or bin %384, %381, %reset : i1
    %386 = comb.xor bin %385, %true : i1
    %387 = comb.and bin %363, %386 : i1
    %388 = comb.and bin %363, %381 : i1
    %389 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %390 = comb.icmp bin eq %io_in_d_bits_opcode, %389 : i3
    %391 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %392 = comb.icmp bin eq %io_in_d_bits_opcode, %391 : i3
    %393 = comb.or bin %390, %392, %reset : i1
    %394 = comb.xor bin %393, %true : i1
    %395 = comb.and bin %388, %394 : i1
    %396 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %397 = comb.or bin %396, %reset : i1
    %398 = comb.xor bin %397, %true : i1
    %399 = comb.and bin %388, %398 : i1
    %400 = comb.xor bin %381, %true : i1
    %401 = comb.and bin %363, %400 : i1
    %402 = hw.array_get %1[%325] : !hw.array<8xi3>, i3
    %403 = comb.icmp bin eq %io_in_d_bits_opcode, %402 : i3
    %404 = hw.array_get %0[%325] : !hw.array<8xi3>, i3
    %405 = comb.icmp bin eq %io_in_d_bits_opcode, %404 : i3
    %406 = comb.or bin %403, %405, %reset : i1
    %407 = comb.xor bin %406, %true : i1
    %408 = comb.and bin %401, %407 : i1
    %409 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %410 = comb.icmp bin eq %409, %329 : i8
    %411 = comb.or bin %410, %reset : i1
    %412 = comb.xor bin %411, %true : i1
    %413 = comb.and bin %401, %412 : i1
    %414 = comb.and bin %361, %312 : i1
    %415 = comb.and bin %414, %io_in_a_valid : i1
    %416 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %417 = comb.and bin %415, %416 : i1
    %418 = comb.and bin %417, %362 : i1
    %419 = comb.xor bin %io_in_d_ready, %true : i1
    %420 = comb.or bin %419, %io_in_a_ready, %reset : i1
    %421 = comb.xor bin %420, %true : i1
    %422 = comb.and bin %418, %421 : i1
    %423 = comb.icmp bin ne %334, %367 : i3
    %424 = comb.icmp bin eq %334, %c0_i3 : i3
    %425 = comb.or bin %423, %424, %reset : i1
    %426 = comb.xor bin %425, %true : i1
    %427 = comb.or bin %inflight, %338 {sv.namehint = "_inflight_T"} : i3
    %428 = comb.xor bin %371, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %429 = comb.and bin %427, %428 {sv.namehint = "_inflight_T_2"} : i3
    %430 = comb.or bin %inflight_opcodes, %347 {sv.namehint = "_inflight_opcodes_T"} : i12
    %431 = comb.xor bin %375, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %432 = comb.and bin %430, %431 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %433 = comb.or bin %inflight_sizes, %352 {sv.namehint = "_inflight_sizes_T"} : i24
    %434 = comb.xor bin %379, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %435 = comb.and bin %433, %434 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %443 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 115 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %436 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %437 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %438 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %439 = comb.or bin %436, %437, %438, %reset : i1
    %440 = comb.xor bin %439, %true : i1
    %441 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %442 = comb.or bin %235, %273 : i1
    %443 = comb.mux bin %442, %c0_i32, %441 : i32
    %inflight_1 = seq.firreg %473 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 147 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %475 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 162 : ui64} : i24
    %444 = comb.shl bin %c255_i23, %274 {sv.namehint = "_d_first_beats1_decode_T_9"} : i23
    %445 = comb.extract %444 from 3 : (i23) -> i5
    %446 = comb.xor %445, %c-1_i5 {sv.namehint = "_d_first_beats1_decode_T_11"} : i5
    %447 = comb.mux bin %278, %446, %c0_i5 {sv.namehint = "d_first_beats1_2"} : i5
    %d_first_counter_2 = seq.firreg %451 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 191 : ui64} : i5
    %448 = comb.add %d_first_counter_2, %c-1_i5 {sv.namehint = "_d_first_counter1_T_2"} : i5
    %449 = comb.icmp bin eq %d_first_counter_2, %c0_i5 {sv.namehint = "d_first_2"} : i5
    %450 = comb.mux bin %449, %447, %448 {sv.namehint = "_d_first_counter_T_2"} : i5
    %451 = comb.mux bin %273, %450, %d_first_counter_2 : i5
    %452 = comb.shru bin %inflight_sizes_1, %326 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %453 = comb.extract %452 from 1 : (i24) -> i7
    %454 = comb.concat %false, %453 {sv.namehint = "c_size_lookup"} : i1, i7
    %455 = comb.and bin %273, %449, %360 : i1
    %456 = comb.shl bin %c1_i4, %364 {sv.namehint = "_d_clr_T_1"} : i4
    %457 = comb.extract %456 from 0 : (i4) -> i3
    %458 = comb.mux bin %455, %457, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %459 = comb.shl bin %c255_i47, %376 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %460 = comb.extract %459 from 0 : (i47) -> i24
    %461 = comb.mux bin %455, %460, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %462 = comb.and bin %io_in_d_valid, %449, %360 : i1
    %463 = comb.shru bin %inflight_1, %382 : i3
    %464 = comb.extract %463 from 0 : (i3) -> i1
    %465 = comb.or bin %464, %reset : i1
    %466 = comb.xor bin %465, %true : i1
    %467 = comb.and bin %462, %466 : i1
    %468 = comb.icmp bin eq %409, %454 : i8
    %469 = comb.or bin %468, %reset : i1
    %470 = comb.xor bin %469, %true : i1
    %471 = comb.and bin %462, %470 : i1
    %472 = comb.xor bin %458, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %473 = comb.and bin %inflight_1, %472 {sv.namehint = "_inflight_T_5"} : i3
    %474 = comb.xor bin %461, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %475 = comb.and bin %inflight_sizes_1, %474 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %482 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 196 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %476 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %477 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %478 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %479 = comb.or bin %476, %477, %478, %reset : i1
    %480 = comb.xor bin %479, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %483 = comb.and bin %STOP_COND_, %false : i1
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %484 = comb.and bin %STOP_COND_, %61 : i1
        sv.if %484 {
          sv.fatal 1
        }
        %485 = comb.and bin %STOP_COND_, %68 : i1
        sv.if %485 {
          sv.fatal 1
        }
        %486 = comb.and bin %STOP_COND_, %71 : i1
        sv.if %486 {
          sv.fatal 1
        }
        %487 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %487 {
          sv.fatal 1
        }
        %488 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %488 {
          sv.fatal 1
        }
        %489 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %489 {
          sv.fatal 1
        }
        %490 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %490 {
          sv.fatal 1
        }
        %491 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %491 {
          sv.fatal 1
        }
        %492 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %492 {
          sv.fatal 1
        }
        %493 = comb.and bin %STOP_COND_, %96 : i1
        sv.if %493 {
          sv.fatal 1
        }
        %494 = comb.and bin %STOP_COND_, %97 : i1
        sv.if %494 {
          sv.fatal 1
        }
        %495 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %495 {
          sv.fatal 1
        }
        %496 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %496 {
          sv.fatal 1
        }
        %497 = comb.and bin %STOP_COND_, %100 : i1
        sv.if %497 {
          sv.fatal 1
        }
        %498 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %498 {
          sv.fatal 1
        }
        %499 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %499 {
          sv.fatal 1
        }
        %500 = comb.and bin %STOP_COND_, %106 : i1
        sv.if %500 {
          sv.fatal 1
        }
        %501 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %501 {
          sv.fatal 1
        }
        %502 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %502 {
          sv.fatal 1
        }
        %503 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %503 {
          sv.fatal 1
        }
        %504 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %504 {
          sv.fatal 1
        }
        %505 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %505 {
          sv.fatal 1
        }
        %506 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %506 {
          sv.fatal 1
        }
        %507 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %507 {
          sv.fatal 1
        }
        %508 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %508 {
          sv.fatal 1
        }
        %509 = comb.and bin %STOP_COND_, %137 : i1
        sv.if %509 {
          sv.fatal 1
        }
        %510 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %510 {
          sv.fatal 1
        }
        %511 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %511 {
          sv.fatal 1
        }
        %512 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %512 {
          sv.fatal 1
        }
        %513 = comb.and bin %STOP_COND_, %143 : i1
        sv.if %513 {
          sv.fatal 1
        }
        %514 = comb.and bin %STOP_COND_, %144 : i1
        sv.if %514 {
          sv.fatal 1
        }
        %515 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %515 {
          sv.fatal 1
        }
        %516 = comb.and bin %STOP_COND_, %146 : i1
        sv.if %516 {
          sv.fatal 1
        }
        %517 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %517 {
          sv.fatal 1
        }
        %518 = comb.and bin %STOP_COND_, %155 : i1
        sv.if %518 {
          sv.fatal 1
        }
        %519 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %519 {
          sv.fatal 1
        }
        %520 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %520 {
          sv.fatal 1
        }
        %521 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %521 {
          sv.fatal 1
        }
        %522 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %522 {
          sv.fatal 1
        }
        %523 = comb.and bin %STOP_COND_, %165 : i1
        sv.if %523 {
          sv.fatal 1
        }
        %524 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %524 {
          sv.fatal 1
        }
        %525 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %525 {
          sv.fatal 1
        }
        %526 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %526 {
          sv.fatal 1
        }
        %527 = comb.and bin %STOP_COND_, %173 : i1
        sv.if %527 {
          sv.fatal 1
        }
        %528 = comb.and bin %STOP_COND_, %176 : i1
        sv.if %528 {
          sv.fatal 1
        }
        %529 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %529 {
          sv.fatal 1
        }
        %530 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %530 {
          sv.fatal 1
        }
        %531 = comb.and bin %STOP_COND_, %182 : i1
        sv.if %531 {
          sv.fatal 1
        }
        %532 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %532 {
          sv.fatal 1
        }
        %533 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %533 {
          sv.fatal 1
        }
        %534 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %534 {
          sv.fatal 1
        }
        %535 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %535 {
          sv.fatal 1
        }
        %536 = comb.and bin %STOP_COND_, %200 : i1
        sv.if %536 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %537 = comb.and bin %STOP_COND_, %204 : i1
        sv.if %537 {
          sv.fatal 1
        }
        %538 = comb.and bin %STOP_COND_, %208 : i1
        sv.if %538 {
          sv.fatal 1
        }
        %539 = comb.and bin %STOP_COND_, %211 : i1
        sv.if %539 {
          sv.fatal 1
        }
        %540 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %540 {
          sv.fatal 1
        }
        %541 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %541 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %542 = comb.and bin %STOP_COND_, %214 : i1
        sv.if %542 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %543 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %543 {
          sv.fatal 1
        }
        %544 = comb.and bin %STOP_COND_, %218 : i1
        sv.if %544 {
          sv.fatal 1
        }
        %545 = comb.and bin %STOP_COND_, %219 : i1
        sv.if %545 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %546 = comb.and bin %STOP_COND_, %222 : i1
        sv.if %546 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %547 = comb.and bin %STOP_COND_, %225 : i1
        sv.if %547 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %548 = comb.and bin %STOP_COND_, %226 : i1
        sv.if %548 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %549 = comb.and bin %STOP_COND_, %229 : i1
        sv.if %549 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %550 = comb.and bin %STOP_COND_, %230 : i1
        sv.if %550 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %551 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %551 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %552 = comb.and bin %STOP_COND_, %234 : i1
        sv.if %552 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %553 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %553 {
          sv.fatal 1
        }
        %554 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %554 {
          sv.fatal 1
        }
        %555 = comb.and bin %STOP_COND_, %258 : i1
        sv.if %555 {
          sv.fatal 1
        }
        %556 = comb.and bin %STOP_COND_, %262 : i1
        sv.if %556 {
          sv.fatal 1
        }
        %557 = comb.and bin %STOP_COND_, %266 : i1
        sv.if %557 {
          sv.fatal 1
        }
        %558 = comb.and bin %STOP_COND_, %289 : i1
        sv.if %558 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %559 = comb.and bin %STOP_COND_, %293 : i1
        sv.if %559 {
          sv.fatal 1
        }
        %560 = comb.and bin %STOP_COND_, %297 : i1
        sv.if %560 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %561 = comb.and bin %STOP_COND_, %301 : i1
        sv.if %561 {
          sv.fatal 1
        }
        %562 = comb.and bin %STOP_COND_, %359 : i1
        sv.if %562 {
          sv.fatal 1
        }
        %563 = comb.and bin %STOP_COND_, %387 : i1
        sv.if %563 {
          sv.fatal 1
        }
        %564 = comb.and bin %STOP_COND_, %395 : i1
        sv.if %564 {
          sv.fatal 1
        }
        %565 = comb.and bin %STOP_COND_, %399 : i1
        sv.if %565 {
          sv.fatal 1
        }
        %566 = comb.and bin %STOP_COND_, %408 : i1
        sv.if %566 {
          sv.fatal 1
        }
        %567 = comb.and bin %STOP_COND_, %413 : i1
        sv.if %567 {
          sv.fatal 1
        }
        %568 = comb.and bin %STOP_COND_, %422 : i1
        sv.if %568 {
          sv.fatal 1
        }
        %569 = comb.and bin %STOP_COND_, %426 : i1
        sv.if %569 {
          sv.fatal 1
        }
        %570 = comb.and bin %STOP_COND_, %440 : i1
        sv.if %570 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %571 = comb.and bin %STOP_COND_, %467 : i1
        sv.if %571 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %572 = comb.and bin %STOP_COND_, %471 : i1
        sv.if %572 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %483 {
          sv.fatal 1
        }
        %573 = comb.and bin %STOP_COND_, %480 : i1
        sv.if %573 {
          sv.fatal 1
        }
      }
    }
    %481 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %482 = comb.mux bin %273, %c0_i32, %481 : i32
    hw.output
  }
  hw.module private @Queue_8(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_data : i64, in %io_enq_bits_strb : i8, in %io_enq_bits_last : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_data : i64, out io_deq_bits_strb : i8, out io_deq_bits_last : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firreg %16 clock %clock : i73
    %0 = comb.concat %io_enq_bits_last, %io_enq_bits_strb, %io_enq_bits_data : i1, i8, i64
    %1 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i73) -> i64
    %2 = comb.extract %ram from 64 {sv.namehint = "ram_io_deq_bits_MPORT_data_strb"} : (i73) -> i8
    %3 = comb.extract %ram from 72 {sv.namehint = "ram_io_deq_bits_MPORT_data_last"} : (i73) -> i1
    %full = seq.firreg %6 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %4 = comb.xor bin %full, %true {sv.namehint = "empty"} : i1
    %5 = comb.icmp bin eq %15, %12 : i1
    %6 = comb.mux bin %5, %full, %15 : i1
    %7 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %8 = comb.or %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %9 = comb.mux bin %full, %3, %io_enq_bits_last {sv.namehint = "io_deq_bits_last"} : i1
    %10 = comb.mux bin %full, %2, %io_enq_bits_strb {sv.namehint = "io_deq_bits_strb"} : i8
    %11 = comb.mux bin %full, %1, %io_enq_bits_data {sv.namehint = "io_deq_bits_data"} : i64
    %12 = comb.and %full, %io_deq_ready, %8 {sv.namehint = "do_deq"} : i1
    %13 = comb.and bin %4, %io_deq_ready : i1
    %14 = comb.xor %13, %true : i1
    %15 = comb.and %14, %7, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %16 = comb.mux bin %15, %0, %ram : i73
    hw.output %7, %8, %11, %10, %9 : i1, i1, i64, i8, i1
  }
  hw.module private @Queue_9(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i2, in %io_enq_bits_addr : i31, in %io_enq_bits_len : i8, in %io_enq_bits_size : i3, in %io_enq_bits_cache : i4, in %io_enq_bits_prot : i3, in %io_enq_bits_echo_tl_state_size : i4, in %io_enq_bits_echo_tl_state_source : i2, in %io_enq_bits_wen : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i2, out io_deq_bits_addr : i31, out io_deq_bits_len : i8, out io_deq_bits_size : i3, out io_deq_bits_burst : i2, out io_deq_bits_lock : i1, out io_deq_bits_cache : i4, out io_deq_bits_prot : i3, out io_deq_bits_qos : i4, out io_deq_bits_echo_tl_state_size : i4, out io_deq_bits_echo_tl_state_source : i2, out io_deq_bits_wen : i1) {
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %false = hw.constant false
    %c1_i2 = hw.constant 1 : i2
    %c1_i3 = hw.constant 1 : i3
    %ram = seq.firreg %34 clock %clock : i65
    %0 = comb.concat %io_enq_bits_wen, %io_enq_bits_echo_tl_state_source, %io_enq_bits_echo_tl_state_size, %c0_i4, %io_enq_bits_prot, %io_enq_bits_cache, %c1_i3, %io_enq_bits_size, %io_enq_bits_len, %io_enq_bits_addr, %io_enq_bits_id : i1, i2, i4, i4, i3, i4, i3, i3, i8, i31, i2
    %1 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i65) -> i2
    %2 = comb.extract %ram from 2 {sv.namehint = "ram_io_deq_bits_MPORT_data_addr"} : (i65) -> i31
    %3 = comb.extract %ram from 33 {sv.namehint = "ram_io_deq_bits_MPORT_data_len"} : (i65) -> i8
    %4 = comb.extract %ram from 41 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i65) -> i3
    %5 = comb.extract %ram from 44 {sv.namehint = "ram_io_deq_bits_MPORT_data_burst"} : (i65) -> i2
    %6 = comb.extract %ram from 46 {sv.namehint = "ram_io_deq_bits_MPORT_data_lock"} : (i65) -> i1
    %7 = comb.extract %ram from 47 {sv.namehint = "ram_io_deq_bits_MPORT_data_cache"} : (i65) -> i4
    %8 = comb.extract %ram from 51 {sv.namehint = "ram_io_deq_bits_MPORT_data_prot"} : (i65) -> i3
    %9 = comb.extract %ram from 54 {sv.namehint = "ram_io_deq_bits_MPORT_data_qos"} : (i65) -> i4
    %10 = comb.extract %ram from 58 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_size"} : (i65) -> i4
    %11 = comb.extract %ram from 62 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_source"} : (i65) -> i2
    %12 = comb.extract %ram from 64 {sv.namehint = "ram_io_deq_bits_MPORT_data_wen"} : (i65) -> i1
    %full = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %13 = comb.xor bin %full, %true {sv.namehint = "empty"} : i1
    %14 = comb.icmp bin eq %33, %30 : i1
    %15 = comb.mux bin %14, %full, %33 : i1
    %16 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %17 = comb.or %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %18 = comb.mux bin %full, %12, %io_enq_bits_wen {sv.namehint = "io_deq_bits_wen"} : i1
    %19 = comb.mux bin %full, %11, %io_enq_bits_echo_tl_state_source {sv.namehint = "io_deq_bits_echo_tl_state_source"} : i2
    %20 = comb.mux bin %full, %10, %io_enq_bits_echo_tl_state_size {sv.namehint = "io_deq_bits_echo_tl_state_size"} : i4
    %21 = comb.mux bin %full, %9, %c0_i4 {sv.namehint = "io_deq_bits_qos"} : i4
    %22 = comb.mux bin %full, %8, %io_enq_bits_prot {sv.namehint = "io_deq_bits_prot"} : i3
    %23 = comb.mux bin %full, %7, %io_enq_bits_cache {sv.namehint = "io_deq_bits_cache"} : i4
    %24 = comb.and %full, %6 {sv.namehint = "io_deq_bits_lock"} : i1
    %25 = comb.mux bin %full, %5, %c1_i2 {sv.namehint = "io_deq_bits_burst"} : i2
    %26 = comb.mux bin %full, %4, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %27 = comb.mux bin %full, %3, %io_enq_bits_len {sv.namehint = "io_deq_bits_len"} : i8
    %28 = comb.mux bin %full, %2, %io_enq_bits_addr {sv.namehint = "io_deq_bits_addr"} : i31
    %29 = comb.mux bin %full, %1, %io_enq_bits_id {sv.namehint = "io_deq_bits_id"} : i2
    %30 = comb.and %full, %io_deq_ready, %17 {sv.namehint = "do_deq"} : i1
    %31 = comb.and bin %13, %io_deq_ready : i1
    %32 = comb.xor %31, %true : i1
    %33 = comb.and %32, %16, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %34 = comb.mux bin %33, %0, %ram : i65
    hw.output %16, %17, %29, %28, %27, %26, %25, %24, %23, %22, %21, %20, %19, %18 : i1, i1, i2, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @TLToAXI4(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i31, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i2, out auto_out_aw_bits_addr : i31, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i2, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i2, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i2, out auto_out_ar_bits_addr : i31, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i2, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i2, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i2, in %auto_out_r_bits_last : i1) {
    %c-2_i2 = hw.constant -2 : i2
    %c1_i2 = hw.constant 1 : i2
    %c3_i3 = hw.constant 3 : i3
    %c2_i4 = hw.constant 2 : i4
    %c-1_i8 = hw.constant -1 : i8
    %0 = hw.aggregate_constant [-2 : i2, 0 : i2, 1 : i2, -2 : i2] : !hw.array<4xi2>
    %c-1_i5 = hw.constant -1 : i5
    %c2047_i26 = hw.constant 2047 : i26
    %c1_i5 = hw.constant 1 : i5
    %c255_i23 = hw.constant 255 : i23
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c0_i5 = hw.constant 0 : i5
    %true = hw.constant true
    %c0_i19 = hw.constant 0 : i19
    %c0_i22 = hw.constant 0 : i22
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_2(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %41: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i31, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %53: i1, io_in_d_bits_opcode: %61: i3, io_in_d_bits_size: %62: i4, io_in_d_bits_source: %63: i2, io_in_d_bits_denied: %64: i1, io_in_d_bits_corrupt: %65: i1) -> ()
    %2 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_beats1_opdata_T"} : (i3) -> i1
    %3 = comb.xor bin %2, %true {sv.namehint = "a_isPut"} : i1
    %4 = comb.and bin %41, %auto_in_a_valid : i1
    %5 = comb.concat %c0_i19, %auto_in_a_bits_size : i19, i4
    %6 = comb.shl bin %c255_i23, %5 {sv.namehint = "_beats1_decode_T_1"} : i23
    %7 = comb.extract %6 from 3 : (i23) -> i5
    %8 = comb.xor %7, %c-1_i5 {sv.namehint = "_beats1_decode_T_3"} : i5
    %9 = comb.mux bin %2, %c0_i5, %8 {sv.namehint = "beats1"} : i5
    %counter = seq.firreg %16 clock %clock reset sync %reset, %c0_i5 {firrtl.random_init_start = 0 : ui64} : i5
    %10 = comb.add %counter, %c-1_i5 {sv.namehint = "_counter1_T"} : i5
    %11 = comb.icmp bin eq %counter, %c0_i5 {sv.namehint = "a_first"} : i5
    %12 = comb.icmp bin eq %counter, %c1_i5 {sv.namehint = "_last_T"} : i5
    %13 = comb.icmp bin eq %9, %c0_i5 {sv.namehint = "_last_T_1"} : i5
    %14 = comb.or bin %12, %13 {sv.namehint = "a_last"} : i1
    %15 = comb.mux bin %11, %9, %10 {sv.namehint = "_counter_T"} : i5
    %16 = comb.mux bin %4, %15, %counter : i5
    %deq.io_enq_ready, %deq.io_deq_valid, %deq.io_deq_bits_data, %deq.io_deq_bits_strb, %deq.io_deq_bits_last = hw.instance "deq" @Queue_8(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %46: i1, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_strb: %auto_in_a_bits_mask: i8, io_enq_bits_last: %14: i1, io_deq_ready: %auto_out_w_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_data: i64, io_deq_bits_strb: i8, io_deq_bits_last: i1) {sv.namehint = "irr_valid"}
    %queue_arw_deq.io_enq_ready, %queue_arw_deq.io_deq_valid, %queue_arw_deq.io_deq_bits_id, %queue_arw_deq.io_deq_bits_addr, %queue_arw_deq.io_deq_bits_len, %queue_arw_deq.io_deq_bits_size, %queue_arw_deq.io_deq_bits_burst, %queue_arw_deq.io_deq_bits_lock, %queue_arw_deq.io_deq_bits_cache, %queue_arw_deq.io_deq_bits_prot, %queue_arw_deq.io_deq_bits_qos, %queue_arw_deq.io_deq_bits_echo_tl_state_size, %queue_arw_deq.io_deq_bits_echo_tl_state_source, %queue_arw_deq.io_deq_bits_wen = hw.instance "queue_arw_deq" @Queue_9(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %45: i1, io_enq_bits_id: %23: i2, io_enq_bits_addr: %auto_in_a_bits_address: i31, io_enq_bits_len: %27: i8, io_enq_bits_size: %30: i3, io_enq_bits_cache: %33: i4, io_enq_bits_prot: %32: i3, io_enq_bits_echo_tl_state_size: %auto_in_a_bits_size: i4, io_enq_bits_echo_tl_state_source: %auto_in_a_bits_source: i2, io_enq_bits_wen: %3: i1, io_deq_ready: %20: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i2, io_deq_bits_addr: i31, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i2, io_deq_bits_wen: i1) {sv.namehint = "queue_arw_valid"}
    %17 = comb.xor bin %queue_arw_deq.io_deq_bits_wen, %true {sv.namehint = "_bundleOut_0_ar_valid_T"} : i1
    %18 = comb.and bin %queue_arw_deq.io_deq_valid, %17 {sv.namehint = "bundleOut_0_ar_valid"} : i1
    %19 = comb.and bin %queue_arw_deq.io_deq_valid, %queue_arw_deq.io_deq_bits_wen {sv.namehint = "bundleOut_0_aw_valid"} : i1
    %20 = comb.mux bin %queue_arw_deq.io_deq_bits_wen, %auto_out_aw_ready, %auto_out_ar_ready {sv.namehint = "queue_arw_ready"} : i1
    %doneAW = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 5 : ui64} : i1
    %21 = comb.xor bin %14, %true {sv.namehint = "_doneAW_T"} : i1
    %22 = comb.mux bin %4, %21, %doneAW : i1
    %23 = hw.array_get %0[%auto_in_a_bits_source] {sv.namehint = "a_sel_shiftAmount"} : !hw.array<4xi2>, i2
    %24 = comb.concat %c0_i22, %auto_in_a_bits_size : i22, i4
    %25 = comb.shl bin %c2047_i26, %24 {sv.namehint = "_out_arw_bits_len_T_1"} : i26
    %26 = comb.extract %25 from 3 : (i26) -> i8
    %27 = comb.xor %26, %c-1_i8 {sv.namehint = "_out_arw_bits_len_T_3"} : i8
    %28 = comb.icmp bin ugt %auto_in_a_bits_size, %c2_i4 {sv.namehint = "_out_arw_bits_size_T"} : i4
    %29 = comb.extract %auto_in_a_bits_size from 0 : (i4) -> i3
    %30 = comb.mux %28, %c3_i3, %29 {sv.namehint = "_out_arw_bits_size_T_1"} : i3
    %31 = comb.xor bin %auto_in_a_bits_user_amba_prot_secure, %true {sv.namehint = "prot_1"} : i1
    %32 = comb.concat %auto_in_a_bits_user_amba_prot_fetch, %31, %auto_in_a_bits_user_amba_prot_privileged {sv.namehint = "out_arw_bits_prot"} : i1, i1, i1
    %33 = comb.concat %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_bufferable {sv.namehint = "out_arw_bits_cache"} : i1, i1, i1, i1
    %34 = hw.array_create %count_3, %count_1, %count_2, %count_3 : i1
    %35 = hw.array_get %34[%auto_in_a_bits_source] : !hw.array<4xi1>, i2
    %36 = comb.and bin %35, %11 {sv.namehint = "stall"} : i1
    %37 = comb.xor bin %36, %true {sv.namehint = "_out_w_valid_T"} : i1
    %38 = comb.or bin %doneAW, %queue_arw_deq.io_enq_ready {sv.namehint = "_out_w_valid_T_3"} : i1
    %39 = comb.and bin %38, %deq.io_enq_ready {sv.namehint = "_bundleIn_0_a_ready_T_2"} : i1
    %40 = comb.mux bin %2, %queue_arw_deq.io_enq_ready, %39 {sv.namehint = "_bundleIn_0_a_ready_T_3"} : i1
    %41 = comb.and bin %37, %40 {sv.namehint = "bundleIn_0_a_ready"} : i1
    %42 = comb.xor bin %doneAW, %true {sv.namehint = "_out_arw_valid_T_2"} : i1
    %43 = comb.and bin %42, %deq.io_enq_ready {sv.namehint = "_out_arw_valid_T_3"} : i1
    %44 = comb.or %2, %43 {sv.namehint = "_out_arw_valid_T_4"} : i1
    %45 = comb.and bin %37, %auto_in_a_valid, %44 {sv.namehint = "out_arw_valid"} : i1
    %46 = comb.and bin %37, %auto_in_a_valid, %3, %38 {sv.namehint = "out_w_valid"} : i1
    %r_holds_d = seq.firreg %49 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %47 = comb.and bin %auto_in_d_ready, %auto_out_r_valid : i1
    %48 = comb.xor bin %auto_out_r_bits_last, %true {sv.namehint = "_r_holds_d_T"} : i1
    %49 = comb.mux bin %47, %48, %r_holds_d : i1
    %50 = comb.or bin %auto_out_r_valid, %r_holds_d {sv.namehint = "r_wins"} : i1
    %51 = comb.xor bin %50, %true {sv.namehint = "_bundleOut_0_b_ready_T"} : i1
    %52 = comb.and bin %auto_in_d_ready, %51 {sv.namehint = "bundleOut_0_b_ready"} : i1
    %53 = comb.mux bin %50, %auto_out_r_valid, %auto_out_b_valid {sv.namehint = "bundleIn_0_d_valid"} : i1
    %r_first = seq.firreg %54 clock %clock reset sync %reset, %true {firrtl.random_init_start = 7 : ui64} : i1
    %54 = comb.mux bin %47, %auto_out_r_bits_last, %r_first : i1
    %55 = comb.icmp bin eq %auto_out_r_bits_resp, %c-1_i2 {sv.namehint = "_r_denied_T"} : i2
    %r_denied_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 8 : ui64} : i1
    %56 = comb.mux bin %r_first, %55, %r_denied_r : i1
    %57 = comb.mux bin %r_first, %55, %r_denied_r {sv.namehint = "r_denied"} : i1
    %58 = comb.icmp bin ne %auto_out_r_bits_resp, %c0_i2 {sv.namehint = "r_corrupt"} : i2
    %59 = comb.icmp bin ne %auto_out_b_bits_resp, %c0_i2 {sv.namehint = "b_denied"} : i2
    %60 = comb.or bin %58, %57 {sv.namehint = "r_d_corrupt"} : i1
    %61 = comb.concat %c0_i2, %50 {sv.namehint = "bundleIn_0_d_bits_opcode"} : i2, i1
    %62 = comb.mux bin %50, %auto_out_r_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_size {sv.namehint = "bundleIn_0_d_bits_size"} : i4
    %63 = comb.mux bin %50, %auto_out_r_bits_echo_tl_state_source, %auto_out_b_bits_echo_tl_state_source {sv.namehint = "bundleIn_0_d_bits_source"} : i2
    %64 = comb.mux bin %50, %57, %59 {sv.namehint = "bundleIn_0_d_bits_denied"} : i1
    %65 = comb.and %50, %60 {sv.namehint = "bundleIn_0_d_bits_corrupt"} : i1
    %66 = comb.icmp eq %23, %c0_i2 {sv.namehint = "a_sel_0"} : i2
    %67 = comb.icmp eq %23, %c1_i2 {sv.namehint = "a_sel_1"} : i2
    %68 = comb.icmp eq %23, %c-2_i2 {sv.namehint = "a_sel_2"} : i2
    %69 = comb.mux bin %50, %auto_out_r_bits_id, %auto_out_b_bits_id {sv.namehint = "d_sel_shiftAmount"} : i2
    %70 = comb.icmp eq %69, %c0_i2 {sv.namehint = "d_sel_0"} : i2
    %71 = comb.icmp eq %69, %c1_i2 {sv.namehint = "d_sel_1"} : i2
    %72 = comb.icmp eq %69, %c-2_i2 {sv.namehint = "d_sel_2"} : i2
    %73 = comb.xor %50, %true : i1
    %74 = comb.or %73, %auto_out_r_bits_last {sv.namehint = "d_last"} : i1
    %count_1 = seq.firreg %80 clock %clock reset sync %reset, %false {firrtl.random_init_start = 9 : ui64, sv.namehint = "count_1"} : i1
    %75 = comb.and bin %queue_arw_deq.io_enq_ready, %45 {sv.namehint = "_inc_T_2"} : i1
    %76 = comb.and bin %66, %75 {sv.namehint = "inc"} : i1
    %77 = comb.and bin %auto_in_d_ready, %53 {sv.namehint = "_dec_T_5"} : i1
    %78 = comb.and bin %70, %74, %77 {sv.namehint = "dec"} : i1
    %79 = comb.add %count_1, %76 {sv.namehint = "_count_T_1"} : i1
    %80 = comb.sub %79, %78 {sv.namehint = "_count_T_3"} : i1
    %81 = comb.xor bin %78, %true : i1
    %82 = comb.or bin %81, %count_1, %reset : i1
    %83 = comb.xor bin %82, %true : i1
    %84 = comb.xor bin %76, %true : i1
    %85 = comb.xor bin %count_1, %true : i1
    %86 = comb.or bin %84, %85, %reset : i1
    %87 = comb.xor bin %86, %true : i1
    %count_2 = seq.firreg %91 clock %clock reset sync %reset, %false {firrtl.random_init_start = 11 : ui64, sv.namehint = "count_2"} : i1
    %88 = comb.and bin %67, %75 {sv.namehint = "inc_1"} : i1
    %89 = comb.and bin %71, %74, %77 {sv.namehint = "dec_1"} : i1
    %90 = comb.add %count_2, %88 {sv.namehint = "_count_T_5"} : i1
    %91 = comb.sub %90, %89 {sv.namehint = "_count_T_7"} : i1
    %92 = comb.xor bin %89, %true : i1
    %93 = comb.or bin %92, %count_2, %reset : i1
    %94 = comb.xor bin %93, %true : i1
    %95 = comb.xor bin %88, %true : i1
    %96 = comb.xor bin %count_2, %true : i1
    %97 = comb.or bin %95, %96, %reset : i1
    %98 = comb.xor bin %97, %true : i1
    %count_3 = seq.firreg %102 clock %clock reset sync %reset, %false {firrtl.random_init_start = 13 : ui64, sv.namehint = "count_3"} : i1
    %99 = comb.and bin %68, %75 {sv.namehint = "inc_2"} : i1
    %100 = comb.and bin %72, %74, %77 {sv.namehint = "dec_2"} : i1
    %101 = comb.add %count_3, %99 {sv.namehint = "_count_T_9"} : i1
    %102 = comb.sub %101, %100 {sv.namehint = "_count_T_11"} : i1
    %103 = comb.xor bin %100, %true : i1
    %104 = comb.or bin %103, %count_3, %reset : i1
    %105 = comb.xor bin %104, %true : i1
    %106 = comb.xor bin %99, %true : i1
    %107 = comb.xor bin %count_3, %true : i1
    %108 = comb.or bin %106, %107, %reset : i1
    %109 = comb.xor bin %108, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %1 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %110 = comb.and bin %STOP_COND_, %83 : i1
        sv.if %110 {
          sv.fatal 1
        }
        %111 = comb.and bin %STOP_COND_, %87 : i1
        sv.if %111 {
          sv.fatal 1
        }
        %112 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %112 {
          sv.fatal 1
        }
        %113 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %113 {
          sv.fatal 1
        }
        %114 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %114 {
          sv.fatal 1
        }
        %115 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %115 {
          sv.fatal 1
        }
      }
    }
    hw.output %41, %53, %61, %62, %63, %64, %auto_out_r_bits_data, %65, %19, %queue_arw_deq.io_deq_bits_id, %queue_arw_deq.io_deq_bits_addr, %queue_arw_deq.io_deq_bits_len, %queue_arw_deq.io_deq_bits_size, %queue_arw_deq.io_deq_bits_burst, %queue_arw_deq.io_deq_bits_lock, %queue_arw_deq.io_deq_bits_cache, %queue_arw_deq.io_deq_bits_prot, %queue_arw_deq.io_deq_bits_qos, %queue_arw_deq.io_deq_bits_echo_tl_state_size, %queue_arw_deq.io_deq_bits_echo_tl_state_source, %deq.io_deq_valid, %deq.io_deq_bits_data, %deq.io_deq_bits_strb, %deq.io_deq_bits_last, %52, %18, %queue_arw_deq.io_deq_bits_id, %queue_arw_deq.io_deq_bits_addr, %queue_arw_deq.io_deq_bits_len, %queue_arw_deq.io_deq_bits_size, %queue_arw_deq.io_deq_bits_burst, %queue_arw_deq.io_deq_bits_lock, %queue_arw_deq.io_deq_bits_cache, %queue_arw_deq.io_deq_bits_prot, %queue_arw_deq.io_deq_bits_qos, %queue_arw_deq.io_deq_bits_echo_tl_state_size, %queue_arw_deq.io_deq_bits_echo_tl_state_source, %auto_in_d_ready : i1, i1, i3, i4, i2, i1, i64, i1, i1, i2, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1, i64, i8, i1, i1, i1, i2, i31, i8, i3, i2, i1, i4, i3, i4, i4, i2, i1
  }
  hw.module private @TLWidthWidget_3(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i31, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i31, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i4, i2, i1, i64, i1, i1, i3, i3, i4, i2, i31, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_4(in %clock : !seq.clock, in %reset : i1, in %auto_axi4buf_out_aw_ready : i1, out auto_axi4buf_out_aw_valid : i1, out auto_axi4buf_out_aw_bits_id : i4, out auto_axi4buf_out_aw_bits_addr : i31, out auto_axi4buf_out_aw_bits_len : i8, out auto_axi4buf_out_aw_bits_size : i3, out auto_axi4buf_out_aw_bits_burst : i2, out auto_axi4buf_out_aw_bits_lock : i1, out auto_axi4buf_out_aw_bits_cache : i4, out auto_axi4buf_out_aw_bits_prot : i3, out auto_axi4buf_out_aw_bits_qos : i4, in %auto_axi4buf_out_w_ready : i1, out auto_axi4buf_out_w_valid : i1, out auto_axi4buf_out_w_bits_data : i64, out auto_axi4buf_out_w_bits_strb : i8, out auto_axi4buf_out_w_bits_last : i1, out auto_axi4buf_out_b_ready : i1, in %auto_axi4buf_out_b_valid : i1, in %auto_axi4buf_out_b_bits_id : i4, in %auto_axi4buf_out_b_bits_resp : i2, in %auto_axi4buf_out_ar_ready : i1, out auto_axi4buf_out_ar_valid : i1, out auto_axi4buf_out_ar_bits_id : i4, out auto_axi4buf_out_ar_bits_addr : i31, out auto_axi4buf_out_ar_bits_len : i8, out auto_axi4buf_out_ar_bits_size : i3, out auto_axi4buf_out_ar_bits_burst : i2, out auto_axi4buf_out_ar_bits_lock : i1, out auto_axi4buf_out_ar_bits_cache : i4, out auto_axi4buf_out_ar_bits_prot : i3, out auto_axi4buf_out_ar_bits_qos : i4, out auto_axi4buf_out_r_ready : i1, in %auto_axi4buf_out_r_valid : i1, in %auto_axi4buf_out_r_bits_id : i4, in %auto_axi4buf_out_r_bits_data : i64, in %auto_axi4buf_out_r_bits_resp : i2, in %auto_axi4buf_out_r_bits_last : i1, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i4, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i31, in %auto_tl_in_a_bits_user_amba_prot_bufferable : i1, in %auto_tl_in_a_bits_user_amba_prot_modifiable : i1, in %auto_tl_in_a_bits_user_amba_prot_readalloc : i1, in %auto_tl_in_a_bits_user_amba_prot_writealloc : i1, in %auto_tl_in_a_bits_user_amba_prot_privileged : i1, in %auto_tl_in_a_bits_user_amba_prot_secure : i1, in %auto_tl_in_a_bits_user_amba_prot_fetch : i1, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i4, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_denied : i1, out auto_tl_in_d_bits_data : i64, out auto_tl_in_d_bits_corrupt : i1) {
    %axi4buf.auto_in_aw_ready, %axi4buf.auto_in_w_ready, %axi4buf.auto_in_b_valid, %axi4buf.auto_in_b_bits_id, %axi4buf.auto_in_b_bits_resp, %axi4buf.auto_in_ar_ready, %axi4buf.auto_in_r_valid, %axi4buf.auto_in_r_bits_id, %axi4buf.auto_in_r_bits_data, %axi4buf.auto_in_r_bits_resp, %axi4buf.auto_in_r_bits_last, %axi4buf.auto_out_aw_valid, %axi4buf.auto_out_aw_bits_id, %axi4buf.auto_out_aw_bits_addr, %axi4buf.auto_out_aw_bits_len, %axi4buf.auto_out_aw_bits_size, %axi4buf.auto_out_aw_bits_burst, %axi4buf.auto_out_aw_bits_lock, %axi4buf.auto_out_aw_bits_cache, %axi4buf.auto_out_aw_bits_prot, %axi4buf.auto_out_aw_bits_qos, %axi4buf.auto_out_w_valid, %axi4buf.auto_out_w_bits_data, %axi4buf.auto_out_w_bits_strb, %axi4buf.auto_out_w_bits_last, %axi4buf.auto_out_b_ready, %axi4buf.auto_out_ar_valid, %axi4buf.auto_out_ar_bits_id, %axi4buf.auto_out_ar_bits_addr, %axi4buf.auto_out_ar_bits_len, %axi4buf.auto_out_ar_bits_size, %axi4buf.auto_out_ar_bits_burst, %axi4buf.auto_out_ar_bits_lock, %axi4buf.auto_out_ar_bits_cache, %axi4buf.auto_out_ar_bits_prot, %axi4buf.auto_out_ar_bits_qos, %axi4buf.auto_out_r_ready = hw.instance "axi4buf" @AXI4Buffer(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4yank.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4yank.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4yank.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %axi4yank.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4yank.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4yank.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4yank.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4yank.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4yank.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4yank.auto_out_aw_bits_qos: i4, auto_in_w_valid: %axi4yank.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4yank.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4yank.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4yank.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4yank.auto_out_b_ready: i1, auto_in_ar_valid: %axi4yank.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4yank.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4yank.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %axi4yank.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4yank.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4yank.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4yank.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4yank.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4yank.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4yank.auto_out_ar_bits_qos: i4, auto_in_r_ready: %axi4yank.auto_out_r_ready: i1, auto_out_aw_ready: %auto_axi4buf_out_aw_ready: i1, auto_out_w_ready: %auto_axi4buf_out_w_ready: i1, auto_out_b_valid: %auto_axi4buf_out_b_valid: i1, auto_out_b_bits_id: %auto_axi4buf_out_b_bits_id: i4, auto_out_b_bits_resp: %auto_axi4buf_out_b_bits_resp: i2, auto_out_ar_ready: %auto_axi4buf_out_ar_ready: i1, auto_out_r_valid: %auto_axi4buf_out_r_valid: i1, auto_out_r_bits_id: %auto_axi4buf_out_r_bits_id: i4, auto_out_r_bits_data: %auto_axi4buf_out_r_bits_data: i64, auto_out_r_bits_resp: %auto_axi4buf_out_r_bits_resp: i2, auto_out_r_bits_last: %auto_axi4buf_out_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_r_ready: i1) {sv.namehint = "axi4buf.auto_in_r_valid"}
    %axi4yank.auto_in_aw_ready, %axi4yank.auto_in_w_ready, %axi4yank.auto_in_b_valid, %axi4yank.auto_in_b_bits_id, %axi4yank.auto_in_b_bits_resp, %axi4yank.auto_in_b_bits_echo_tl_state_size, %axi4yank.auto_in_b_bits_echo_tl_state_source, %axi4yank.auto_in_ar_ready, %axi4yank.auto_in_r_valid, %axi4yank.auto_in_r_bits_id, %axi4yank.auto_in_r_bits_data, %axi4yank.auto_in_r_bits_resp, %axi4yank.auto_in_r_bits_echo_tl_state_size, %axi4yank.auto_in_r_bits_echo_tl_state_source, %axi4yank.auto_in_r_bits_last, %axi4yank.auto_out_aw_valid, %axi4yank.auto_out_aw_bits_id, %axi4yank.auto_out_aw_bits_addr, %axi4yank.auto_out_aw_bits_len, %axi4yank.auto_out_aw_bits_size, %axi4yank.auto_out_aw_bits_burst, %axi4yank.auto_out_aw_bits_lock, %axi4yank.auto_out_aw_bits_cache, %axi4yank.auto_out_aw_bits_prot, %axi4yank.auto_out_aw_bits_qos, %axi4yank.auto_out_w_valid, %axi4yank.auto_out_w_bits_data, %axi4yank.auto_out_w_bits_strb, %axi4yank.auto_out_w_bits_last, %axi4yank.auto_out_b_ready, %axi4yank.auto_out_ar_valid, %axi4yank.auto_out_ar_bits_id, %axi4yank.auto_out_ar_bits_addr, %axi4yank.auto_out_ar_bits_len, %axi4yank.auto_out_ar_bits_size, %axi4yank.auto_out_ar_bits_burst, %axi4yank.auto_out_ar_bits_lock, %axi4yank.auto_out_ar_bits_cache, %axi4yank.auto_out_ar_bits_prot, %axi4yank.auto_out_ar_bits_qos, %axi4yank.auto_out_r_ready = hw.instance "axi4yank" @AXI4UserYanker(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4deint.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4deint.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4deint.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %axi4deint.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4deint.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4deint.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4deint.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4deint.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4deint.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4deint.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %axi4deint.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %axi4deint.auto_out_aw_bits_echo_tl_state_source: i2, auto_in_w_valid: %axi4deint.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4deint.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4deint.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4deint.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4deint.auto_out_b_ready: i1, auto_in_ar_valid: %axi4deint.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4deint.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4deint.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %axi4deint.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4deint.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4deint.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4deint.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4deint.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4deint.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4deint.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %axi4deint.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %axi4deint.auto_out_ar_bits_echo_tl_state_source: i2, auto_in_r_ready: %axi4deint.auto_out_r_ready: i1, auto_out_aw_ready: %axi4buf.auto_in_aw_ready: i1, auto_out_w_ready: %axi4buf.auto_in_w_ready: i1, auto_out_b_valid: %axi4buf.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4buf.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4buf.auto_in_b_bits_resp: i2, auto_out_ar_ready: %axi4buf.auto_in_ar_ready: i1, auto_out_r_valid: %axi4buf.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4buf.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4buf.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4buf.auto_in_r_bits_resp: i2, auto_out_r_bits_last: %axi4buf.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_r_ready: i1) {sv.namehint = "axi4yank.auto_in_r_valid"}
    %axi4deint.auto_in_aw_ready, %axi4deint.auto_in_w_ready, %axi4deint.auto_in_b_valid, %axi4deint.auto_in_b_bits_id, %axi4deint.auto_in_b_bits_resp, %axi4deint.auto_in_b_bits_echo_tl_state_size, %axi4deint.auto_in_b_bits_echo_tl_state_source, %axi4deint.auto_in_ar_ready, %axi4deint.auto_in_r_valid, %axi4deint.auto_in_r_bits_id, %axi4deint.auto_in_r_bits_data, %axi4deint.auto_in_r_bits_resp, %axi4deint.auto_in_r_bits_echo_tl_state_size, %axi4deint.auto_in_r_bits_echo_tl_state_source, %axi4deint.auto_in_r_bits_last, %axi4deint.auto_out_aw_valid, %axi4deint.auto_out_aw_bits_id, %axi4deint.auto_out_aw_bits_addr, %axi4deint.auto_out_aw_bits_len, %axi4deint.auto_out_aw_bits_size, %axi4deint.auto_out_aw_bits_burst, %axi4deint.auto_out_aw_bits_lock, %axi4deint.auto_out_aw_bits_cache, %axi4deint.auto_out_aw_bits_prot, %axi4deint.auto_out_aw_bits_qos, %axi4deint.auto_out_aw_bits_echo_tl_state_size, %axi4deint.auto_out_aw_bits_echo_tl_state_source, %axi4deint.auto_out_w_valid, %axi4deint.auto_out_w_bits_data, %axi4deint.auto_out_w_bits_strb, %axi4deint.auto_out_w_bits_last, %axi4deint.auto_out_b_ready, %axi4deint.auto_out_ar_valid, %axi4deint.auto_out_ar_bits_id, %axi4deint.auto_out_ar_bits_addr, %axi4deint.auto_out_ar_bits_len, %axi4deint.auto_out_ar_bits_size, %axi4deint.auto_out_ar_bits_burst, %axi4deint.auto_out_ar_bits_lock, %axi4deint.auto_out_ar_bits_cache, %axi4deint.auto_out_ar_bits_prot, %axi4deint.auto_out_ar_bits_qos, %axi4deint.auto_out_ar_bits_echo_tl_state_size, %axi4deint.auto_out_ar_bits_echo_tl_state_source, %axi4deint.auto_out_r_ready = hw.instance "axi4deint" @AXI4Deinterleaver(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4index.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4index.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4index.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %axi4index.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4index.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4index.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4index.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4index.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4index.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4index.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %axi4index.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %axi4index.auto_out_aw_bits_echo_tl_state_source: i2, auto_in_w_valid: %axi4index.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4index.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4index.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4index.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4index.auto_out_b_ready: i1, auto_in_ar_valid: %axi4index.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4index.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4index.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %axi4index.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4index.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4index.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4index.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4index.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4index.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4index.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %axi4index.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %axi4index.auto_out_ar_bits_echo_tl_state_source: i2, auto_in_r_ready: %axi4index.auto_out_r_ready: i1, auto_out_aw_ready: %axi4yank.auto_in_aw_ready: i1, auto_out_w_ready: %axi4yank.auto_in_w_ready: i1, auto_out_b_valid: %axi4yank.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4yank.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4yank.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4yank.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4yank.auto_in_b_bits_echo_tl_state_source: i2, auto_out_ar_ready: %axi4yank.auto_in_ar_ready: i1, auto_out_r_valid: %axi4yank.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4yank.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4yank.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4yank.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4yank.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4yank.auto_in_r_bits_echo_tl_state_source: i2, auto_out_r_bits_last: %axi4yank.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i2, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i2, auto_out_r_ready: i1) {sv.namehint = "axi4deint.auto_in_r_valid"}
    %axi4index.auto_in_aw_ready, %axi4index.auto_in_w_ready, %axi4index.auto_in_b_valid, %axi4index.auto_in_b_bits_id, %axi4index.auto_in_b_bits_resp, %axi4index.auto_in_b_bits_echo_tl_state_size, %axi4index.auto_in_b_bits_echo_tl_state_source, %axi4index.auto_in_ar_ready, %axi4index.auto_in_r_valid, %axi4index.auto_in_r_bits_id, %axi4index.auto_in_r_bits_data, %axi4index.auto_in_r_bits_resp, %axi4index.auto_in_r_bits_echo_tl_state_size, %axi4index.auto_in_r_bits_echo_tl_state_source, %axi4index.auto_in_r_bits_last, %axi4index.auto_out_aw_valid, %axi4index.auto_out_aw_bits_id, %axi4index.auto_out_aw_bits_addr, %axi4index.auto_out_aw_bits_len, %axi4index.auto_out_aw_bits_size, %axi4index.auto_out_aw_bits_burst, %axi4index.auto_out_aw_bits_lock, %axi4index.auto_out_aw_bits_cache, %axi4index.auto_out_aw_bits_prot, %axi4index.auto_out_aw_bits_qos, %axi4index.auto_out_aw_bits_echo_tl_state_size, %axi4index.auto_out_aw_bits_echo_tl_state_source, %axi4index.auto_out_w_valid, %axi4index.auto_out_w_bits_data, %axi4index.auto_out_w_bits_strb, %axi4index.auto_out_w_bits_last, %axi4index.auto_out_b_ready, %axi4index.auto_out_ar_valid, %axi4index.auto_out_ar_bits_id, %axi4index.auto_out_ar_bits_addr, %axi4index.auto_out_ar_bits_len, %axi4index.auto_out_ar_bits_size, %axi4index.auto_out_ar_bits_burst, %axi4index.auto_out_ar_bits_lock, %axi4index.auto_out_ar_bits_cache, %axi4index.auto_out_ar_bits_prot, %axi4index.auto_out_ar_bits_qos, %axi4index.auto_out_ar_bits_echo_tl_state_size, %axi4index.auto_out_ar_bits_echo_tl_state_source, %axi4index.auto_out_r_ready = hw.instance "axi4index" @AXI4IdIndexer(auto_in_aw_valid: %tl2axi4.auto_out_aw_valid: i1, auto_in_aw_bits_id: %tl2axi4.auto_out_aw_bits_id: i2, auto_in_aw_bits_addr: %tl2axi4.auto_out_aw_bits_addr: i31, auto_in_aw_bits_len: %tl2axi4.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %tl2axi4.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %tl2axi4.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %tl2axi4.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %tl2axi4.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %tl2axi4.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %tl2axi4.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %tl2axi4.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %tl2axi4.auto_out_aw_bits_echo_tl_state_source: i2, auto_in_w_valid: %tl2axi4.auto_out_w_valid: i1, auto_in_w_bits_data: %tl2axi4.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %tl2axi4.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %tl2axi4.auto_out_w_bits_last: i1, auto_in_b_ready: %tl2axi4.auto_out_b_ready: i1, auto_in_ar_valid: %tl2axi4.auto_out_ar_valid: i1, auto_in_ar_bits_id: %tl2axi4.auto_out_ar_bits_id: i2, auto_in_ar_bits_addr: %tl2axi4.auto_out_ar_bits_addr: i31, auto_in_ar_bits_len: %tl2axi4.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %tl2axi4.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %tl2axi4.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %tl2axi4.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %tl2axi4.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %tl2axi4.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %tl2axi4.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %tl2axi4.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %tl2axi4.auto_out_ar_bits_echo_tl_state_source: i2, auto_in_r_ready: %tl2axi4.auto_out_r_ready: i1, auto_out_aw_ready: %axi4deint.auto_in_aw_ready: i1, auto_out_w_ready: %axi4deint.auto_in_w_ready: i1, auto_out_b_valid: %axi4deint.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4deint.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4deint.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4deint.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4deint.auto_in_b_bits_echo_tl_state_source: i2, auto_out_ar_ready: %axi4deint.auto_in_ar_ready: i1, auto_out_r_valid: %axi4deint.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4deint.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4deint.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4deint.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4deint.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4deint.auto_in_r_bits_echo_tl_state_source: i2, auto_out_r_bits_last: %axi4deint.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i2, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i2, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i2, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i2, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i2, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i2, auto_out_r_ready: i1) {sv.namehint = "tl2axi4.auto_out_r_valid"}
    %tl2axi4.auto_in_a_ready, %tl2axi4.auto_in_d_valid, %tl2axi4.auto_in_d_bits_opcode, %tl2axi4.auto_in_d_bits_size, %tl2axi4.auto_in_d_bits_source, %tl2axi4.auto_in_d_bits_denied, %tl2axi4.auto_in_d_bits_data, %tl2axi4.auto_in_d_bits_corrupt, %tl2axi4.auto_out_aw_valid, %tl2axi4.auto_out_aw_bits_id, %tl2axi4.auto_out_aw_bits_addr, %tl2axi4.auto_out_aw_bits_len, %tl2axi4.auto_out_aw_bits_size, %tl2axi4.auto_out_aw_bits_burst, %tl2axi4.auto_out_aw_bits_lock, %tl2axi4.auto_out_aw_bits_cache, %tl2axi4.auto_out_aw_bits_prot, %tl2axi4.auto_out_aw_bits_qos, %tl2axi4.auto_out_aw_bits_echo_tl_state_size, %tl2axi4.auto_out_aw_bits_echo_tl_state_source, %tl2axi4.auto_out_w_valid, %tl2axi4.auto_out_w_bits_data, %tl2axi4.auto_out_w_bits_strb, %tl2axi4.auto_out_w_bits_last, %tl2axi4.auto_out_b_ready, %tl2axi4.auto_out_ar_valid, %tl2axi4.auto_out_ar_bits_id, %tl2axi4.auto_out_ar_bits_addr, %tl2axi4.auto_out_ar_bits_len, %tl2axi4.auto_out_ar_bits_size, %tl2axi4.auto_out_ar_bits_burst, %tl2axi4.auto_out_ar_bits_lock, %tl2axi4.auto_out_ar_bits_cache, %tl2axi4.auto_out_ar_bits_prot, %tl2axi4.auto_out_ar_bits_qos, %tl2axi4.auto_out_ar_bits_echo_tl_state_size, %tl2axi4.auto_out_ar_bits_echo_tl_state_source, %tl2axi4.auto_out_r_ready = hw.instance "tl2axi4" @TLToAXI4(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %widget.auto_out_a_valid: i1, auto_in_a_bits_opcode: %widget.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %widget.auto_out_a_bits_param: i3, auto_in_a_bits_size: %widget.auto_out_a_bits_size: i4, auto_in_a_bits_source: %widget.auto_out_a_bits_source: i2, auto_in_a_bits_address: %widget.auto_out_a_bits_address: i31, auto_in_a_bits_user_amba_prot_bufferable: %widget.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %widget.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %widget.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %widget.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %widget.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %widget.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %widget.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %widget.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %widget.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %widget.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %widget.auto_out_d_ready: i1, auto_out_aw_ready: %axi4index.auto_in_aw_ready: i1, auto_out_w_ready: %axi4index.auto_in_w_ready: i1, auto_out_b_valid: %axi4index.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4index.auto_in_b_bits_id: i2, auto_out_b_bits_resp: %axi4index.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4index.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4index.auto_in_b_bits_echo_tl_state_source: i2, auto_out_ar_ready: %axi4index.auto_in_ar_ready: i1, auto_out_r_valid: %axi4index.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4index.auto_in_r_bits_id: i2, auto_out_r_bits_data: %axi4index.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4index.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4index.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4index.auto_in_r_bits_echo_tl_state_source: i2, auto_out_r_bits_last: %axi4index.auto_in_r_bits_last: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i2, auto_out_aw_bits_addr: i31, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i2, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i2, auto_out_ar_bits_addr: i31, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i2, auto_out_r_ready: i1) {sv.namehint = "widget.auto_out_d_valid"}
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_user_amba_prot_fetch, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_a_bits_corrupt, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget_3(auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i4, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i31, auto_in_a_bits_user_amba_prot_bufferable: %auto_tl_in_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %auto_tl_in_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %auto_tl_in_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %auto_tl_in_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %auto_tl_in_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %auto_tl_in_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %auto_tl_in_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %tl2axi4.auto_in_a_ready: i1, auto_out_d_valid: %tl2axi4.auto_in_d_valid: i1, auto_out_d_bits_opcode: %tl2axi4.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %tl2axi4.auto_in_d_bits_size: i4, auto_out_d_bits_source: %tl2axi4.auto_in_d_bits_source: i2, auto_out_d_bits_denied: %tl2axi4.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %tl2axi4.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %tl2axi4.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i31, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_valid"}
    hw.output %axi4buf.auto_out_aw_valid, %axi4buf.auto_out_aw_bits_id, %axi4buf.auto_out_aw_bits_addr, %axi4buf.auto_out_aw_bits_len, %axi4buf.auto_out_aw_bits_size, %axi4buf.auto_out_aw_bits_burst, %axi4buf.auto_out_aw_bits_lock, %axi4buf.auto_out_aw_bits_cache, %axi4buf.auto_out_aw_bits_prot, %axi4buf.auto_out_aw_bits_qos, %axi4buf.auto_out_w_valid, %axi4buf.auto_out_w_bits_data, %axi4buf.auto_out_w_bits_strb, %axi4buf.auto_out_w_bits_last, %axi4buf.auto_out_b_ready, %axi4buf.auto_out_ar_valid, %axi4buf.auto_out_ar_bits_id, %axi4buf.auto_out_ar_bits_addr, %axi4buf.auto_out_ar_bits_len, %axi4buf.auto_out_ar_bits_size, %axi4buf.auto_out_ar_bits_burst, %axi4buf.auto_out_ar_bits_lock, %axi4buf.auto_out_ar_bits_cache, %axi4buf.auto_out_ar_bits_prot, %axi4buf.auto_out_ar_bits_qos, %axi4buf.auto_out_r_ready, %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt : i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i3, i4, i2, i1, i64, i1
  }
  hw.module private @SystemBus(in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr : i31, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len : i8, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst : i2, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos : i4, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data : i64, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb : i8, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id : i4, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp : i2, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr : i31, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len : i8, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst : i2, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock : i1, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot : i3, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos : i4, out auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid : i1, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id : i4, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data : i64, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp : i2, in %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_a_ready : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_valid : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size : i4, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source : i2, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address : i32, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_bufferable : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_modifiable : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_readalloc : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_writealloc : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_privileged : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_secure : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_fetch : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask : i8, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data : i64, in %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_corrupt : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_b_ready : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_b_valid : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address : i32, out auto_coupler_from_tile_tl_master_clock_xing_in_c_ready : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_valid : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param : i3, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size : i4, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source : i2, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address : i32, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data : i64, in %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_corrupt : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_d_ready : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_d_valid : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode : i3, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size : i4, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink : i2, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied : i1, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data : i64, out auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_e_valid : i1, in %auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source : i2, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address : i32, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_bufferable : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_modifiable : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_readalloc : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_writealloc : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_privileged : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_secure : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_fetch : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask : i8, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data : i64, out auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address : i32, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size : i3, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source : i2, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address : i32, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data : i64, out auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode : i3, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size : i3, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink : i2, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied : i1, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data : i64, in %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid : i1, out auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink : i2, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready : i1, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid : i1, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param : i3, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size : i4, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source : i2, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address : i28, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask : i8, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data : i64, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt : i1, out auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode : i3, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param : i2, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size : i4, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source : i2, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied : i1, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data : i64, in %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt : i1, out auto_fixedClockNode_out_1_clock : !seq.clock, out auto_fixedClockNode_out_1_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset : i1, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock : !seq.clock, in %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset : i1, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset : i1, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset : i1, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset : i1, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock : !seq.clock, out auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset : i1) {
    %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_reset, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_reset, %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_clock, %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_reset = hw.instance "subsystem_sbus_clock_groups" @ClockGroupAggregator(auto_in_member_subsystem_sbus_5_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock: !seq.clock, auto_in_member_subsystem_sbus_5_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset: i1, auto_in_member_subsystem_sbus_4_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_clock: !seq.clock, auto_in_member_subsystem_sbus_4_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_reset: i1, auto_in_member_subsystem_sbus_2_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock: !seq.clock, auto_in_member_subsystem_sbus_2_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset: i1, auto_in_member_subsystem_sbus_1_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock: !seq.clock, auto_in_member_subsystem_sbus_1_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset: i1, auto_in_member_subsystem_sbus_0_clock: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset: i1) -> (auto_out_3_member_subsystem_l2_1_clock: !seq.clock, auto_out_3_member_subsystem_l2_1_reset: i1, auto_out_3_member_subsystem_l2_0_clock: !seq.clock, auto_out_3_member_subsystem_l2_0_reset: i1, auto_out_1_member_subsystem_cbus_1_clock: !seq.clock, auto_out_1_member_subsystem_cbus_1_reset: i1, auto_out_1_member_subsystem_cbus_0_clock: !seq.clock, auto_out_1_member_subsystem_cbus_0_reset: i1, auto_out_0_member_subsystem_sbus_0_clock: !seq.clock, auto_out_0_member_subsystem_sbus_0_reset: i1) {sv.namehint = "clockGroup.auto_in_member_subsystem_sbus_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_sbus_clock_groups.auto_out_0_member_subsystem_sbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_2_clock, %fixedClockNode.auto_out_2_reset, %fixedClockNode.auto_out_0_clock, %fixedClockNode.auto_out_0_reset = hw.instance "fixedClockNode" @FixedClockBroadcast(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_2_clock: !seq.clock, auto_out_2_reset: i1, auto_out_0_clock: !seq.clock, auto_out_0_reset: i1) {sv.namehint = "bundleIn_0_reset"}
    %system_bus_xbar.auto_in_a_ready, %system_bus_xbar.auto_in_b_valid, %system_bus_xbar.auto_in_b_bits_param, %system_bus_xbar.auto_in_b_bits_address, %system_bus_xbar.auto_in_c_ready, %system_bus_xbar.auto_in_d_valid, %system_bus_xbar.auto_in_d_bits_opcode, %system_bus_xbar.auto_in_d_bits_param, %system_bus_xbar.auto_in_d_bits_size, %system_bus_xbar.auto_in_d_bits_source, %system_bus_xbar.auto_in_d_bits_sink, %system_bus_xbar.auto_in_d_bits_denied, %system_bus_xbar.auto_in_d_bits_data, %system_bus_xbar.auto_in_d_bits_corrupt, %system_bus_xbar.auto_out_2_a_valid, %system_bus_xbar.auto_out_2_a_bits_opcode, %system_bus_xbar.auto_out_2_a_bits_param, %system_bus_xbar.auto_out_2_a_bits_size, %system_bus_xbar.auto_out_2_a_bits_source, %system_bus_xbar.auto_out_2_a_bits_address, %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_bufferable, %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_modifiable, %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_readalloc, %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_writealloc, %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_privileged, %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_secure, %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_fetch, %system_bus_xbar.auto_out_2_a_bits_mask, %system_bus_xbar.auto_out_2_a_bits_data, %system_bus_xbar.auto_out_2_a_bits_corrupt, %system_bus_xbar.auto_out_2_d_ready, %system_bus_xbar.auto_out_1_a_valid, %system_bus_xbar.auto_out_1_a_bits_opcode, %system_bus_xbar.auto_out_1_a_bits_param, %system_bus_xbar.auto_out_1_a_bits_size, %system_bus_xbar.auto_out_1_a_bits_source, %system_bus_xbar.auto_out_1_a_bits_address, %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_bufferable, %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_modifiable, %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_readalloc, %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_writealloc, %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_privileged, %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_secure, %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_fetch, %system_bus_xbar.auto_out_1_a_bits_mask, %system_bus_xbar.auto_out_1_a_bits_data, %system_bus_xbar.auto_out_1_a_bits_corrupt, %system_bus_xbar.auto_out_1_b_ready, %system_bus_xbar.auto_out_1_c_valid, %system_bus_xbar.auto_out_1_c_bits_opcode, %system_bus_xbar.auto_out_1_c_bits_param, %system_bus_xbar.auto_out_1_c_bits_size, %system_bus_xbar.auto_out_1_c_bits_source, %system_bus_xbar.auto_out_1_c_bits_address, %system_bus_xbar.auto_out_1_c_bits_data, %system_bus_xbar.auto_out_1_c_bits_corrupt, %system_bus_xbar.auto_out_1_d_ready, %system_bus_xbar.auto_out_1_e_valid, %system_bus_xbar.auto_out_1_e_bits_sink, %system_bus_xbar.auto_out_0_a_valid, %system_bus_xbar.auto_out_0_a_bits_opcode, %system_bus_xbar.auto_out_0_a_bits_param, %system_bus_xbar.auto_out_0_a_bits_size, %system_bus_xbar.auto_out_0_a_bits_source, %system_bus_xbar.auto_out_0_a_bits_address, %system_bus_xbar.auto_out_0_a_bits_mask, %system_bus_xbar.auto_out_0_a_bits_data, %system_bus_xbar.auto_out_0_a_bits_corrupt, %system_bus_xbar.auto_out_0_d_ready = hw.instance "system_bus_xbar" @TLXbar(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %fixer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %fixer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %fixer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %fixer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %fixer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %fixer.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %fixer.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %fixer.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %fixer.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %fixer.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %fixer.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %fixer.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %fixer.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %fixer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %fixer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %fixer.auto_out_a_bits_corrupt: i1, auto_in_b_ready: %fixer.auto_out_b_ready: i1, auto_in_c_valid: %fixer.auto_out_c_valid: i1, auto_in_c_bits_opcode: %fixer.auto_out_c_bits_opcode: i3, auto_in_c_bits_param: %fixer.auto_out_c_bits_param: i3, auto_in_c_bits_size: %fixer.auto_out_c_bits_size: i4, auto_in_c_bits_source: %fixer.auto_out_c_bits_source: i2, auto_in_c_bits_address: %fixer.auto_out_c_bits_address: i32, auto_in_c_bits_data: %fixer.auto_out_c_bits_data: i64, auto_in_c_bits_corrupt: %fixer.auto_out_c_bits_corrupt: i1, auto_in_d_ready: %fixer.auto_out_d_ready: i1, auto_in_e_valid: %fixer.auto_out_e_valid: i1, auto_in_e_bits_sink: %fixer.auto_out_e_bits_sink: i2, auto_out_2_a_ready: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_a_ready: i1, auto_out_2_d_valid: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_valid: i1, auto_out_2_d_bits_opcode: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_opcode: i3, auto_out_2_d_bits_size: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_size: i4, auto_out_2_d_bits_source: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_source: i2, auto_out_2_d_bits_denied: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_denied: i1, auto_out_2_d_bits_data: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_data: i64, auto_out_2_d_bits_corrupt: %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_corrupt: i1, auto_out_1_a_ready: %coupler_to_bus_named_subsystem_l2.auto_widget_in_a_ready: i1, auto_out_1_b_valid: %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_valid: i1, auto_out_1_b_bits_param: %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_param: i2, auto_out_1_b_bits_address: %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_address: i32, auto_out_1_c_ready: %coupler_to_bus_named_subsystem_l2.auto_widget_in_c_ready: i1, auto_out_1_d_valid: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_valid: i1, auto_out_1_d_bits_opcode: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_opcode: i3, auto_out_1_d_bits_param: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_param: i2, auto_out_1_d_bits_size: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_size: i3, auto_out_1_d_bits_source: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_source: i2, auto_out_1_d_bits_sink: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_sink: i2, auto_out_1_d_bits_denied: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_denied: i1, auto_out_1_d_bits_data: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_data: i64, auto_out_1_d_bits_corrupt: %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_corrupt: i1, auto_out_0_a_ready: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_a_ready: i1, auto_out_0_d_valid: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_valid: i1, auto_out_0_d_bits_opcode: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_opcode: i3, auto_out_0_d_bits_param: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_param: i2, auto_out_0_d_bits_size: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_size: i4, auto_out_0_d_bits_source: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_source: i2, auto_out_0_d_bits_sink: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_sink: i1, auto_out_0_d_bits_denied: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_denied: i1, auto_out_0_d_bits_data: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_data: i64, auto_out_0_d_bits_corrupt: %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_2_a_valid: i1, auto_out_2_a_bits_opcode: i3, auto_out_2_a_bits_param: i3, auto_out_2_a_bits_size: i4, auto_out_2_a_bits_source: i2, auto_out_2_a_bits_address: i31, auto_out_2_a_bits_user_amba_prot_bufferable: i1, auto_out_2_a_bits_user_amba_prot_modifiable: i1, auto_out_2_a_bits_user_amba_prot_readalloc: i1, auto_out_2_a_bits_user_amba_prot_writealloc: i1, auto_out_2_a_bits_user_amba_prot_privileged: i1, auto_out_2_a_bits_user_amba_prot_secure: i1, auto_out_2_a_bits_user_amba_prot_fetch: i1, auto_out_2_a_bits_mask: i8, auto_out_2_a_bits_data: i64, auto_out_2_a_bits_corrupt: i1, auto_out_2_d_ready: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_param: i3, auto_out_1_a_bits_size: i3, auto_out_1_a_bits_source: i2, auto_out_1_a_bits_address: i32, auto_out_1_a_bits_user_amba_prot_bufferable: i1, auto_out_1_a_bits_user_amba_prot_modifiable: i1, auto_out_1_a_bits_user_amba_prot_readalloc: i1, auto_out_1_a_bits_user_amba_prot_writealloc: i1, auto_out_1_a_bits_user_amba_prot_privileged: i1, auto_out_1_a_bits_user_amba_prot_secure: i1, auto_out_1_a_bits_user_amba_prot_fetch: i1, auto_out_1_a_bits_mask: i8, auto_out_1_a_bits_data: i64, auto_out_1_a_bits_corrupt: i1, auto_out_1_b_ready: i1, auto_out_1_c_valid: i1, auto_out_1_c_bits_opcode: i3, auto_out_1_c_bits_param: i3, auto_out_1_c_bits_size: i3, auto_out_1_c_bits_source: i2, auto_out_1_c_bits_address: i32, auto_out_1_c_bits_data: i64, auto_out_1_c_bits_corrupt: i1, auto_out_1_d_ready: i1, auto_out_1_e_valid: i1, auto_out_1_e_bits_sink: i2, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_param: i3, auto_out_0_a_bits_size: i4, auto_out_0_a_bits_source: i2, auto_out_0_a_bits_address: i28, auto_out_0_a_bits_mask: i8, auto_out_0_a_bits_data: i64, auto_out_0_a_bits_corrupt: i1, auto_out_0_d_ready: i1) {sv.namehint = "fixer.auto_out_d_valid"}
    %fixer.auto_in_a_ready, %fixer.auto_in_b_valid, %fixer.auto_in_b_bits_param, %fixer.auto_in_b_bits_address, %fixer.auto_in_c_ready, %fixer.auto_in_d_valid, %fixer.auto_in_d_bits_opcode, %fixer.auto_in_d_bits_param, %fixer.auto_in_d_bits_size, %fixer.auto_in_d_bits_source, %fixer.auto_in_d_bits_sink, %fixer.auto_in_d_bits_denied, %fixer.auto_in_d_bits_data, %fixer.auto_in_d_bits_corrupt, %fixer.auto_out_a_valid, %fixer.auto_out_a_bits_opcode, %fixer.auto_out_a_bits_param, %fixer.auto_out_a_bits_size, %fixer.auto_out_a_bits_source, %fixer.auto_out_a_bits_address, %fixer.auto_out_a_bits_user_amba_prot_bufferable, %fixer.auto_out_a_bits_user_amba_prot_modifiable, %fixer.auto_out_a_bits_user_amba_prot_readalloc, %fixer.auto_out_a_bits_user_amba_prot_writealloc, %fixer.auto_out_a_bits_user_amba_prot_privileged, %fixer.auto_out_a_bits_user_amba_prot_secure, %fixer.auto_out_a_bits_user_amba_prot_fetch, %fixer.auto_out_a_bits_mask, %fixer.auto_out_a_bits_data, %fixer.auto_out_a_bits_corrupt, %fixer.auto_out_b_ready, %fixer.auto_out_c_valid, %fixer.auto_out_c_bits_opcode, %fixer.auto_out_c_bits_param, %fixer.auto_out_c_bits_size, %fixer.auto_out_c_bits_source, %fixer.auto_out_c_bits_address, %fixer.auto_out_c_bits_data, %fixer.auto_out_c_bits_corrupt, %fixer.auto_out_d_ready, %fixer.auto_out_e_valid, %fixer.auto_out_e_bits_sink = hw.instance "fixer" @TLFIFOFixer(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %coupler_from_tile.auto_tl_out_a_valid: i1, auto_in_a_bits_opcode: %coupler_from_tile.auto_tl_out_a_bits_opcode: i3, auto_in_a_bits_param: %coupler_from_tile.auto_tl_out_a_bits_param: i3, auto_in_a_bits_size: %coupler_from_tile.auto_tl_out_a_bits_size: i4, auto_in_a_bits_source: %coupler_from_tile.auto_tl_out_a_bits_source: i2, auto_in_a_bits_address: %coupler_from_tile.auto_tl_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %coupler_from_tile.auto_tl_out_a_bits_mask: i8, auto_in_a_bits_data: %coupler_from_tile.auto_tl_out_a_bits_data: i64, auto_in_a_bits_corrupt: %coupler_from_tile.auto_tl_out_a_bits_corrupt: i1, auto_in_b_ready: %coupler_from_tile.auto_tl_out_b_ready: i1, auto_in_c_valid: %coupler_from_tile.auto_tl_out_c_valid: i1, auto_in_c_bits_opcode: %coupler_from_tile.auto_tl_out_c_bits_opcode: i3, auto_in_c_bits_param: %coupler_from_tile.auto_tl_out_c_bits_param: i3, auto_in_c_bits_size: %coupler_from_tile.auto_tl_out_c_bits_size: i4, auto_in_c_bits_source: %coupler_from_tile.auto_tl_out_c_bits_source: i2, auto_in_c_bits_address: %coupler_from_tile.auto_tl_out_c_bits_address: i32, auto_in_c_bits_data: %coupler_from_tile.auto_tl_out_c_bits_data: i64, auto_in_c_bits_corrupt: %coupler_from_tile.auto_tl_out_c_bits_corrupt: i1, auto_in_d_ready: %coupler_from_tile.auto_tl_out_d_ready: i1, auto_in_e_valid: %coupler_from_tile.auto_tl_out_e_valid: i1, auto_in_e_bits_sink: %coupler_from_tile.auto_tl_out_e_bits_sink: i2, auto_out_a_ready: %system_bus_xbar.auto_in_a_ready: i1, auto_out_b_valid: %system_bus_xbar.auto_in_b_valid: i1, auto_out_b_bits_param: %system_bus_xbar.auto_in_b_bits_param: i2, auto_out_b_bits_address: %system_bus_xbar.auto_in_b_bits_address: i32, auto_out_c_ready: %system_bus_xbar.auto_in_c_ready: i1, auto_out_d_valid: %system_bus_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %system_bus_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %system_bus_xbar.auto_in_d_bits_param: i2, auto_out_d_bits_size: %system_bus_xbar.auto_in_d_bits_size: i4, auto_out_d_bits_source: %system_bus_xbar.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %system_bus_xbar.auto_in_d_bits_sink: i2, auto_out_d_bits_denied: %system_bus_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %system_bus_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %system_bus_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "fixer.auto_in_d_valid"}
    %coupler_to_bus_named_subsystem_cbus.auto_widget_in_a_ready, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_valid, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_opcode, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_param, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_size, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_source, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_sink, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_denied, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_data, %coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_d_ready = hw.instance "coupler_to_bus_named_subsystem_cbus" @TLInterconnectCoupler(auto_widget_in_a_valid: %system_bus_xbar.auto_out_0_a_valid: i1, auto_widget_in_a_bits_opcode: %system_bus_xbar.auto_out_0_a_bits_opcode: i3, auto_widget_in_a_bits_param: %system_bus_xbar.auto_out_0_a_bits_param: i3, auto_widget_in_a_bits_size: %system_bus_xbar.auto_out_0_a_bits_size: i4, auto_widget_in_a_bits_source: %system_bus_xbar.auto_out_0_a_bits_source: i2, auto_widget_in_a_bits_address: %system_bus_xbar.auto_out_0_a_bits_address: i28, auto_widget_in_a_bits_mask: %system_bus_xbar.auto_out_0_a_bits_mask: i8, auto_widget_in_a_bits_data: %system_bus_xbar.auto_out_0_a_bits_data: i64, auto_widget_in_a_bits_corrupt: %system_bus_xbar.auto_out_0_a_bits_corrupt: i1, auto_widget_in_d_ready: %system_bus_xbar.auto_out_0_d_ready: i1, auto_bus_xing_out_a_ready: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready: i1, auto_bus_xing_out_d_valid: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid: i1, auto_bus_xing_out_d_bits_opcode: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode: i3, auto_bus_xing_out_d_bits_param: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param: i2, auto_bus_xing_out_d_bits_size: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size: i4, auto_bus_xing_out_d_bits_source: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source: i2, auto_bus_xing_out_d_bits_sink: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink: i1, auto_bus_xing_out_d_bits_denied: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied: i1, auto_bus_xing_out_d_bits_data: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data: i64, auto_bus_xing_out_d_bits_corrupt: %auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt: i1) -> (auto_widget_in_a_ready: i1, auto_widget_in_d_valid: i1, auto_widget_in_d_bits_opcode: i3, auto_widget_in_d_bits_param: i2, auto_widget_in_d_bits_size: i4, auto_widget_in_d_bits_source: i2, auto_widget_in_d_bits_sink: i1, auto_widget_in_d_bits_denied: i1, auto_widget_in_d_bits_data: i64, auto_widget_in_d_bits_corrupt: i1, auto_bus_xing_out_a_valid: i1, auto_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_out_a_bits_param: i3, auto_bus_xing_out_a_bits_size: i4, auto_bus_xing_out_a_bits_source: i2, auto_bus_xing_out_a_bits_address: i28, auto_bus_xing_out_a_bits_mask: i8, auto_bus_xing_out_a_bits_data: i64, auto_bus_xing_out_a_bits_corrupt: i1, auto_bus_xing_out_d_ready: i1) {sv.namehint = "coupler_to_bus_named_subsystem_cbus.auto_widget_in_d_valid"}
    %coupler_to_bus_named_subsystem_l2.auto_widget_in_a_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_in_b_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_in_c_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_sink, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_denied, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_bufferable, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_modifiable, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_readalloc, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_writealloc, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_privileged, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_secure, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_fetch, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_mask, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_b_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_d_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_bits_sink = hw.instance "coupler_to_bus_named_subsystem_l2" @TLInterconnectCoupler_2(auto_widget_in_a_valid: %system_bus_xbar.auto_out_1_a_valid: i1, auto_widget_in_a_bits_opcode: %system_bus_xbar.auto_out_1_a_bits_opcode: i3, auto_widget_in_a_bits_param: %system_bus_xbar.auto_out_1_a_bits_param: i3, auto_widget_in_a_bits_size: %system_bus_xbar.auto_out_1_a_bits_size: i3, auto_widget_in_a_bits_source: %system_bus_xbar.auto_out_1_a_bits_source: i2, auto_widget_in_a_bits_address: %system_bus_xbar.auto_out_1_a_bits_address: i32, auto_widget_in_a_bits_user_amba_prot_bufferable: %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_bufferable: i1, auto_widget_in_a_bits_user_amba_prot_modifiable: %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_modifiable: i1, auto_widget_in_a_bits_user_amba_prot_readalloc: %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_readalloc: i1, auto_widget_in_a_bits_user_amba_prot_writealloc: %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_writealloc: i1, auto_widget_in_a_bits_user_amba_prot_privileged: %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_privileged: i1, auto_widget_in_a_bits_user_amba_prot_secure: %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_secure: i1, auto_widget_in_a_bits_user_amba_prot_fetch: %system_bus_xbar.auto_out_1_a_bits_user_amba_prot_fetch: i1, auto_widget_in_a_bits_mask: %system_bus_xbar.auto_out_1_a_bits_mask: i8, auto_widget_in_a_bits_data: %system_bus_xbar.auto_out_1_a_bits_data: i64, auto_widget_in_a_bits_corrupt: %system_bus_xbar.auto_out_1_a_bits_corrupt: i1, auto_widget_in_b_ready: %system_bus_xbar.auto_out_1_b_ready: i1, auto_widget_in_c_valid: %system_bus_xbar.auto_out_1_c_valid: i1, auto_widget_in_c_bits_opcode: %system_bus_xbar.auto_out_1_c_bits_opcode: i3, auto_widget_in_c_bits_param: %system_bus_xbar.auto_out_1_c_bits_param: i3, auto_widget_in_c_bits_size: %system_bus_xbar.auto_out_1_c_bits_size: i3, auto_widget_in_c_bits_source: %system_bus_xbar.auto_out_1_c_bits_source: i2, auto_widget_in_c_bits_address: %system_bus_xbar.auto_out_1_c_bits_address: i32, auto_widget_in_c_bits_data: %system_bus_xbar.auto_out_1_c_bits_data: i64, auto_widget_in_c_bits_corrupt: %system_bus_xbar.auto_out_1_c_bits_corrupt: i1, auto_widget_in_d_ready: %system_bus_xbar.auto_out_1_d_ready: i1, auto_widget_in_e_valid: %system_bus_xbar.auto_out_1_e_valid: i1, auto_widget_in_e_bits_sink: %system_bus_xbar.auto_out_1_e_bits_sink: i2, auto_widget_out_a_ready: %auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready: i1, auto_widget_out_b_valid: %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid: i1, auto_widget_out_b_bits_param: %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param: i2, auto_widget_out_b_bits_address: %auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address: i32, auto_widget_out_c_ready: %auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready: i1, auto_widget_out_d_valid: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid: i1, auto_widget_out_d_bits_opcode: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode: i3, auto_widget_out_d_bits_param: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param: i2, auto_widget_out_d_bits_size: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size: i3, auto_widget_out_d_bits_source: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source: i2, auto_widget_out_d_bits_sink: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink: i2, auto_widget_out_d_bits_denied: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied: i1, auto_widget_out_d_bits_data: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data: i64, auto_widget_out_d_bits_corrupt: %auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt: i1) -> (auto_widget_in_a_ready: i1, auto_widget_in_b_valid: i1, auto_widget_in_b_bits_param: i2, auto_widget_in_b_bits_address: i32, auto_widget_in_c_ready: i1, auto_widget_in_d_valid: i1, auto_widget_in_d_bits_opcode: i3, auto_widget_in_d_bits_param: i2, auto_widget_in_d_bits_size: i3, auto_widget_in_d_bits_source: i2, auto_widget_in_d_bits_sink: i2, auto_widget_in_d_bits_denied: i1, auto_widget_in_d_bits_data: i64, auto_widget_in_d_bits_corrupt: i1, auto_widget_out_a_valid: i1, auto_widget_out_a_bits_opcode: i3, auto_widget_out_a_bits_param: i3, auto_widget_out_a_bits_size: i3, auto_widget_out_a_bits_source: i2, auto_widget_out_a_bits_address: i32, auto_widget_out_a_bits_user_amba_prot_bufferable: i1, auto_widget_out_a_bits_user_amba_prot_modifiable: i1, auto_widget_out_a_bits_user_amba_prot_readalloc: i1, auto_widget_out_a_bits_user_amba_prot_writealloc: i1, auto_widget_out_a_bits_user_amba_prot_privileged: i1, auto_widget_out_a_bits_user_amba_prot_secure: i1, auto_widget_out_a_bits_user_amba_prot_fetch: i1, auto_widget_out_a_bits_mask: i8, auto_widget_out_a_bits_data: i64, auto_widget_out_a_bits_corrupt: i1, auto_widget_out_b_ready: i1, auto_widget_out_c_valid: i1, auto_widget_out_c_bits_opcode: i3, auto_widget_out_c_bits_param: i3, auto_widget_out_c_bits_size: i3, auto_widget_out_c_bits_source: i2, auto_widget_out_c_bits_address: i32, auto_widget_out_c_bits_data: i64, auto_widget_out_c_bits_corrupt: i1, auto_widget_out_d_ready: i1, auto_widget_out_e_valid: i1, auto_widget_out_e_bits_sink: i2) {sv.namehint = "coupler_to_bus_named_subsystem_l2.auto_widget_in_d_valid"}
    %coupler_from_tile.auto_tl_master_clock_xing_in_a_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_b_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_address, %coupler_from_tile.auto_tl_master_clock_xing_in_c_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_d_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_opcode, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_size, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_source, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_sink, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_denied, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_data, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_corrupt, %coupler_from_tile.auto_tl_out_a_valid, %coupler_from_tile.auto_tl_out_a_bits_opcode, %coupler_from_tile.auto_tl_out_a_bits_param, %coupler_from_tile.auto_tl_out_a_bits_size, %coupler_from_tile.auto_tl_out_a_bits_source, %coupler_from_tile.auto_tl_out_a_bits_address, %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_bufferable, %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_modifiable, %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_readalloc, %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_writealloc, %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_privileged, %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_secure, %coupler_from_tile.auto_tl_out_a_bits_user_amba_prot_fetch, %coupler_from_tile.auto_tl_out_a_bits_mask, %coupler_from_tile.auto_tl_out_a_bits_data, %coupler_from_tile.auto_tl_out_a_bits_corrupt, %coupler_from_tile.auto_tl_out_b_ready, %coupler_from_tile.auto_tl_out_c_valid, %coupler_from_tile.auto_tl_out_c_bits_opcode, %coupler_from_tile.auto_tl_out_c_bits_param, %coupler_from_tile.auto_tl_out_c_bits_size, %coupler_from_tile.auto_tl_out_c_bits_source, %coupler_from_tile.auto_tl_out_c_bits_address, %coupler_from_tile.auto_tl_out_c_bits_data, %coupler_from_tile.auto_tl_out_c_bits_corrupt, %coupler_from_tile.auto_tl_out_d_ready, %coupler_from_tile.auto_tl_out_e_valid, %coupler_from_tile.auto_tl_out_e_bits_sink = hw.instance "coupler_from_tile" @TLInterconnectCoupler_3(auto_tl_master_clock_xing_in_a_valid: %auto_coupler_from_tile_tl_master_clock_xing_in_a_valid: i1, auto_tl_master_clock_xing_in_a_bits_opcode: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode: i3, auto_tl_master_clock_xing_in_a_bits_param: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param: i3, auto_tl_master_clock_xing_in_a_bits_size: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size: i4, auto_tl_master_clock_xing_in_a_bits_source: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source: i2, auto_tl_master_clock_xing_in_a_bits_address: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address: i32, auto_tl_master_clock_xing_in_a_bits_user_amba_prot_bufferable: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_bufferable: i1, auto_tl_master_clock_xing_in_a_bits_user_amba_prot_modifiable: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_modifiable: i1, auto_tl_master_clock_xing_in_a_bits_user_amba_prot_readalloc: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_readalloc: i1, auto_tl_master_clock_xing_in_a_bits_user_amba_prot_writealloc: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_writealloc: i1, auto_tl_master_clock_xing_in_a_bits_user_amba_prot_privileged: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_privileged: i1, auto_tl_master_clock_xing_in_a_bits_user_amba_prot_secure: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_secure: i1, auto_tl_master_clock_xing_in_a_bits_user_amba_prot_fetch: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_fetch: i1, auto_tl_master_clock_xing_in_a_bits_mask: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask: i8, auto_tl_master_clock_xing_in_a_bits_data: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data: i64, auto_tl_master_clock_xing_in_a_bits_corrupt: %auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_corrupt: i1, auto_tl_master_clock_xing_in_b_ready: %auto_coupler_from_tile_tl_master_clock_xing_in_b_ready: i1, auto_tl_master_clock_xing_in_c_valid: %auto_coupler_from_tile_tl_master_clock_xing_in_c_valid: i1, auto_tl_master_clock_xing_in_c_bits_opcode: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode: i3, auto_tl_master_clock_xing_in_c_bits_param: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param: i3, auto_tl_master_clock_xing_in_c_bits_size: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size: i4, auto_tl_master_clock_xing_in_c_bits_source: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source: i2, auto_tl_master_clock_xing_in_c_bits_address: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address: i32, auto_tl_master_clock_xing_in_c_bits_data: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data: i64, auto_tl_master_clock_xing_in_c_bits_corrupt: %auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_corrupt: i1, auto_tl_master_clock_xing_in_d_ready: %auto_coupler_from_tile_tl_master_clock_xing_in_d_ready: i1, auto_tl_master_clock_xing_in_e_valid: %auto_coupler_from_tile_tl_master_clock_xing_in_e_valid: i1, auto_tl_master_clock_xing_in_e_bits_sink: %auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink: i2, auto_tl_out_a_ready: %fixer.auto_in_a_ready: i1, auto_tl_out_b_valid: %fixer.auto_in_b_valid: i1, auto_tl_out_b_bits_param: %fixer.auto_in_b_bits_param: i2, auto_tl_out_b_bits_address: %fixer.auto_in_b_bits_address: i32, auto_tl_out_c_ready: %fixer.auto_in_c_ready: i1, auto_tl_out_d_valid: %fixer.auto_in_d_valid: i1, auto_tl_out_d_bits_opcode: %fixer.auto_in_d_bits_opcode: i3, auto_tl_out_d_bits_param: %fixer.auto_in_d_bits_param: i2, auto_tl_out_d_bits_size: %fixer.auto_in_d_bits_size: i4, auto_tl_out_d_bits_source: %fixer.auto_in_d_bits_source: i2, auto_tl_out_d_bits_sink: %fixer.auto_in_d_bits_sink: i2, auto_tl_out_d_bits_denied: %fixer.auto_in_d_bits_denied: i1, auto_tl_out_d_bits_data: %fixer.auto_in_d_bits_data: i64, auto_tl_out_d_bits_corrupt: %fixer.auto_in_d_bits_corrupt: i1) -> (auto_tl_master_clock_xing_in_a_ready: i1, auto_tl_master_clock_xing_in_b_valid: i1, auto_tl_master_clock_xing_in_b_bits_param: i2, auto_tl_master_clock_xing_in_b_bits_address: i32, auto_tl_master_clock_xing_in_c_ready: i1, auto_tl_master_clock_xing_in_d_valid: i1, auto_tl_master_clock_xing_in_d_bits_opcode: i3, auto_tl_master_clock_xing_in_d_bits_param: i2, auto_tl_master_clock_xing_in_d_bits_size: i4, auto_tl_master_clock_xing_in_d_bits_source: i2, auto_tl_master_clock_xing_in_d_bits_sink: i2, auto_tl_master_clock_xing_in_d_bits_denied: i1, auto_tl_master_clock_xing_in_d_bits_data: i64, auto_tl_master_clock_xing_in_d_bits_corrupt: i1, auto_tl_out_a_valid: i1, auto_tl_out_a_bits_opcode: i3, auto_tl_out_a_bits_param: i3, auto_tl_out_a_bits_size: i4, auto_tl_out_a_bits_source: i2, auto_tl_out_a_bits_address: i32, auto_tl_out_a_bits_user_amba_prot_bufferable: i1, auto_tl_out_a_bits_user_amba_prot_modifiable: i1, auto_tl_out_a_bits_user_amba_prot_readalloc: i1, auto_tl_out_a_bits_user_amba_prot_writealloc: i1, auto_tl_out_a_bits_user_amba_prot_privileged: i1, auto_tl_out_a_bits_user_amba_prot_secure: i1, auto_tl_out_a_bits_user_amba_prot_fetch: i1, auto_tl_out_a_bits_mask: i8, auto_tl_out_a_bits_data: i64, auto_tl_out_a_bits_corrupt: i1, auto_tl_out_b_ready: i1, auto_tl_out_c_valid: i1, auto_tl_out_c_bits_opcode: i3, auto_tl_out_c_bits_param: i3, auto_tl_out_c_bits_size: i4, auto_tl_out_c_bits_source: i2, auto_tl_out_c_bits_address: i32, auto_tl_out_c_bits_data: i64, auto_tl_out_c_bits_corrupt: i1, auto_tl_out_d_ready: i1, auto_tl_out_e_valid: i1, auto_tl_out_e_bits_sink: i2) {sv.namehint = "coupler_from_tile.auto_tl_out_e_valid"}
    %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_data, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_strb, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_last, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_b_ready, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_r_ready, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_a_ready, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_valid, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_opcode, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_source, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_denied, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_data, %coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_bits_corrupt = hw.instance "coupler_to_port_named_mmio_port_axi4" @TLInterconnectCoupler_4(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_axi4buf_out_aw_ready: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready: i1, auto_axi4buf_out_w_ready: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready: i1, auto_axi4buf_out_b_valid: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid: i1, auto_axi4buf_out_b_bits_id: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id: i4, auto_axi4buf_out_b_bits_resp: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp: i2, auto_axi4buf_out_ar_ready: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready: i1, auto_axi4buf_out_r_valid: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid: i1, auto_axi4buf_out_r_bits_id: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id: i4, auto_axi4buf_out_r_bits_data: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data: i64, auto_axi4buf_out_r_bits_resp: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp: i2, auto_axi4buf_out_r_bits_last: %auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last: i1, auto_tl_in_a_valid: %system_bus_xbar.auto_out_2_a_valid: i1, auto_tl_in_a_bits_opcode: %system_bus_xbar.auto_out_2_a_bits_opcode: i3, auto_tl_in_a_bits_param: %system_bus_xbar.auto_out_2_a_bits_param: i3, auto_tl_in_a_bits_size: %system_bus_xbar.auto_out_2_a_bits_size: i4, auto_tl_in_a_bits_source: %system_bus_xbar.auto_out_2_a_bits_source: i2, auto_tl_in_a_bits_address: %system_bus_xbar.auto_out_2_a_bits_address: i31, auto_tl_in_a_bits_user_amba_prot_bufferable: %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_bufferable: i1, auto_tl_in_a_bits_user_amba_prot_modifiable: %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_modifiable: i1, auto_tl_in_a_bits_user_amba_prot_readalloc: %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_readalloc: i1, auto_tl_in_a_bits_user_amba_prot_writealloc: %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_writealloc: i1, auto_tl_in_a_bits_user_amba_prot_privileged: %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_privileged: i1, auto_tl_in_a_bits_user_amba_prot_secure: %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_secure: i1, auto_tl_in_a_bits_user_amba_prot_fetch: %system_bus_xbar.auto_out_2_a_bits_user_amba_prot_fetch: i1, auto_tl_in_a_bits_mask: %system_bus_xbar.auto_out_2_a_bits_mask: i8, auto_tl_in_a_bits_data: %system_bus_xbar.auto_out_2_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %system_bus_xbar.auto_out_2_a_bits_corrupt: i1, auto_tl_in_d_ready: %system_bus_xbar.auto_out_2_d_ready: i1) -> (auto_axi4buf_out_aw_valid: i1, auto_axi4buf_out_aw_bits_id: i4, auto_axi4buf_out_aw_bits_addr: i31, auto_axi4buf_out_aw_bits_len: i8, auto_axi4buf_out_aw_bits_size: i3, auto_axi4buf_out_aw_bits_burst: i2, auto_axi4buf_out_aw_bits_lock: i1, auto_axi4buf_out_aw_bits_cache: i4, auto_axi4buf_out_aw_bits_prot: i3, auto_axi4buf_out_aw_bits_qos: i4, auto_axi4buf_out_w_valid: i1, auto_axi4buf_out_w_bits_data: i64, auto_axi4buf_out_w_bits_strb: i8, auto_axi4buf_out_w_bits_last: i1, auto_axi4buf_out_b_ready: i1, auto_axi4buf_out_ar_valid: i1, auto_axi4buf_out_ar_bits_id: i4, auto_axi4buf_out_ar_bits_addr: i31, auto_axi4buf_out_ar_bits_len: i8, auto_axi4buf_out_ar_bits_size: i3, auto_axi4buf_out_ar_bits_burst: i2, auto_axi4buf_out_ar_bits_lock: i1, auto_axi4buf_out_ar_bits_cache: i4, auto_axi4buf_out_ar_bits_prot: i3, auto_axi4buf_out_ar_bits_qos: i4, auto_axi4buf_out_r_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i4, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_denied: i1, auto_tl_in_d_bits_data: i64, auto_tl_in_d_bits_corrupt: i1) {sv.namehint = "coupler_to_port_named_mmio_port_axi4.auto_tl_in_d_valid"}
    hw.output %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_aw_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_data, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_strb, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_w_bits_last, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_b_ready, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_valid, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_id, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_addr, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_len, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_size, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_burst, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_lock, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_cache, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_prot, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_ar_bits_qos, %coupler_to_port_named_mmio_port_axi4.auto_axi4buf_out_r_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_a_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_b_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_b_bits_address, %coupler_from_tile.auto_tl_master_clock_xing_in_c_ready, %coupler_from_tile.auto_tl_master_clock_xing_in_d_valid, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_opcode, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_param, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_size, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_source, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_sink, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_denied, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_data, %coupler_from_tile.auto_tl_master_clock_xing_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_bufferable, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_modifiable, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_readalloc, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_writealloc, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_privileged, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_secure, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_user_amba_prot_fetch, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_mask, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_b_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_opcode, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_param, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_size, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_source, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_address, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_data, %coupler_to_bus_named_subsystem_l2.auto_widget_out_c_bits_corrupt, %coupler_to_bus_named_subsystem_l2.auto_widget_out_d_ready, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_valid, %coupler_to_bus_named_subsystem_l2.auto_widget_out_e_bits_sink, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_a_bits_corrupt, %coupler_to_bus_named_subsystem_cbus.auto_bus_xing_out_d_ready, %fixedClockNode.auto_out_2_clock, %fixedClockNode.auto_out_2_reset, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_1_reset, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_clock, %subsystem_sbus_clock_groups.auto_out_3_member_subsystem_l2_0_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_1_reset, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_clock, %subsystem_sbus_clock_groups.auto_out_1_member_subsystem_cbus_0_reset : i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i2, i32, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @ClockGroupAggregator_1(in %auto_in_member_subsystem_pbus_0_clock : !seq.clock, in %auto_in_member_subsystem_pbus_0_reset : i1, out auto_out_member_subsystem_pbus_0_clock : !seq.clock, out auto_out_member_subsystem_pbus_0_reset : i1) {
    hw.output %auto_in_member_subsystem_pbus_0_clock, %auto_in_member_subsystem_pbus_0_reset : !seq.clock, i1
  }
  hw.module private @FixedClockBroadcast_1(in %auto_in_clock : !seq.clock, in %auto_in_reset : i1, out auto_out_clock : !seq.clock, out auto_out_reset : i1) {
    hw.output %auto_in_clock, %auto_in_reset : !seq.clock, i1
  }
  hw.module private @ClockGroupAggregator_3(in %auto_in_member_subsystem_cbus_1_clock : !seq.clock, in %auto_in_member_subsystem_cbus_1_reset : i1, in %auto_in_member_subsystem_cbus_0_clock : !seq.clock, in %auto_in_member_subsystem_cbus_0_reset : i1, out auto_out_1_member_subsystem_pbus_0_clock : !seq.clock, out auto_out_1_member_subsystem_pbus_0_reset : i1, out auto_out_0_member_subsystem_cbus_0_clock : !seq.clock, out auto_out_0_member_subsystem_cbus_0_reset : i1) {
    hw.output %auto_in_member_subsystem_cbus_1_clock, %auto_in_member_subsystem_cbus_1_reset, %auto_in_member_subsystem_cbus_0_clock, %auto_in_member_subsystem_cbus_0_reset : !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @FixedClockBroadcast_3(in %auto_in_clock : !seq.clock, in %auto_in_reset : i1, out auto_out_3_clock : !seq.clock, out auto_out_3_reset : i1, out auto_out_1_clock : !seq.clock, out auto_out_1_reset : i1, out auto_out_0_clock : !seq.clock, out auto_out_0_reset : i1) {
    hw.output %auto_in_clock, %auto_in_reset, %auto_in_clock, %auto_in_reset, %auto_in_clock, %auto_in_reset : !seq.clock, i1, !seq.clock, i1, !seq.clock, i1
  }
  hw.module private @TLMonitor_3(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i2 = hw.constant -1 : i2
    %c4_i4 = hw.constant 4 : i4
    %c7_i4 = hw.constant 7 : i4
    %c0_i16 = hw.constant 0 : i16
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i23 = hw.constant 0 : i23
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %7 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %9 = comb.xor bin %8, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %10 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i12
    %11 = comb.and bin %10, %9 : i12
    %12 = comb.icmp bin eq %11, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %59 = comb.extract %io_in_a_bits_address from 14 : (i28) -> i14
    %60 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i2
    %61 = comb.xor %60, %c-1_i2 : i2
    %62 = comb.extract %io_in_a_bits_address from 17 : (i28) -> i11
    %63 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i1
    %64 = comb.xor %63, %true : i1
    %65 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %66 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i10
    %67 = comb.xor %66, %c-512_i10 : i10
    %68 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %69 = comb.xor bin %reset, %true : i1
    %70 = comb.and bin %57, %69 : i1
    %71 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %72 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i16
    %73 = comb.icmp bin eq %72, %c0_i16 : i16
    %74 = comb.concat %59, %61 : i14, i2
    %75 = comb.icmp bin eq %74, %c0_i16 : i16
    %76 = comb.concat %62, %64 : i11, i1
    %77 = comb.icmp bin eq %76, %c0_i12 : i12
    %78 = comb.concat %65, %67 : i2, i10
    %79 = comb.icmp bin eq %78, %c0_i12 : i12
    %80 = comb.icmp eq %68, %c-1_i2 : i2
    %81 = comb.or bin %73, %75, %77, %79, %80 : i1
    %82 = comb.and bin %58, %81 : i1
    %83 = comb.and bin %3, %71, %82 : i1
    %84 = comb.or bin %83, %reset : i1
    %85 = comb.xor bin %84, %true : i1
    %86 = comb.and bin %57, %85 : i1
    %87 = comb.or bin %3, %4, %5, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %57, %88 : i1
    %90 = comb.or bin %14, %reset : i1
    %91 = comb.xor bin %90, %true : i1
    %92 = comb.and bin %57, %91 : i1
    %93 = comb.or bin %12, %reset : i1
    %94 = comb.xor bin %93, %true : i1
    %95 = comb.and bin %57, %94 : i1
    %96 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %97 = comb.or bin %96, %reset : i1
    %98 = comb.xor bin %97, %true : i1
    %99 = comb.and bin %57, %98 : i1
    %100 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %57, %102 : i1
    %104 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %105 = comb.or bin %104, %reset : i1
    %106 = comb.xor bin %105, %true : i1
    %107 = comb.and bin %57, %106 : i1
    %108 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %109 = comb.and bin %io_in_a_valid, %108 : i1
    %110 = comb.and bin %109, %69 : i1
    %111 = comb.and bin %3, %71, %82 : i1
    %112 = comb.or bin %111, %reset : i1
    %113 = comb.xor bin %112, %true : i1
    %114 = comb.and bin %109, %113 : i1
    %115 = comb.and bin %109, %88 : i1
    %116 = comb.and bin %109, %91 : i1
    %117 = comb.and bin %109, %94 : i1
    %118 = comb.and bin %109, %98 : i1
    %119 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %120 = comb.or bin %119, %reset : i1
    %121 = comb.xor bin %120, %true : i1
    %122 = comb.and bin %109, %121 : i1
    %123 = comb.and bin %109, %102 : i1
    %124 = comb.and bin %109, %106 : i1
    %125 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %126 = comb.and bin %io_in_a_valid, %125 : i1
    %127 = comb.or bin %3, %4, %5 : i1
    %128 = comb.and bin %58, %127 : i1
    %129 = comb.or bin %128, %reset : i1
    %130 = comb.xor bin %129, %true : i1
    %131 = comb.and bin %126, %130 : i1
    %132 = comb.and bin %58, %75 : i1
    %133 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %134 = comb.or bin %73, %77, %79, %80 : i1
    %135 = comb.and bin %133, %134 : i1
    %136 = comb.or bin %132, %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %138 = comb.and bin %126, %137 : i1
    %139 = comb.and bin %126, %88 : i1
    %140 = comb.and bin %126, %94 : i1
    %141 = comb.xor bin %119, %true : i1
    %142 = comb.or bin %141, %reset : i1
    %143 = comb.xor bin %142, %true : i1
    %144 = comb.and bin %126, %143 : i1
    %145 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %146 = comb.or bin %145, %reset : i1
    %147 = comb.xor bin %146, %true : i1
    %148 = comb.and bin %126, %147 : i1
    %149 = comb.and bin %126, %106 : i1
    %150 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %151 = comb.and bin %io_in_a_valid, %150 : i1
    %152 = comb.or bin %73, %79, %80 : i1
    %153 = comb.and bin %133, %152 : i1
    %154 = comb.or bin %132, %153 : i1
    %155 = comb.and bin %128, %154 : i1
    %156 = comb.or bin %155, %reset : i1
    %157 = comb.xor bin %156, %true : i1
    %158 = comb.and bin %151, %157 : i1
    %159 = comb.and bin %151, %88 : i1
    %160 = comb.and bin %151, %94 : i1
    %161 = comb.and bin %151, %143 : i1
    %162 = comb.and bin %151, %147 : i1
    %163 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %164 = comb.and bin %io_in_a_valid, %163 : i1
    %165 = comb.and bin %164, %157 : i1
    %166 = comb.and bin %164, %88 : i1
    %167 = comb.and bin %164, %94 : i1
    %168 = comb.and bin %164, %143 : i1
    %169 = comb.xor bin %55, %c-1_i8 : i8
    %170 = comb.and bin %io_in_a_bits_mask, %169 : i8
    %171 = comb.icmp bin eq %170, %c0_i8 : i8
    %172 = comb.or bin %171, %reset : i1
    %173 = comb.xor bin %172, %true : i1
    %174 = comb.and bin %164, %173 : i1
    %175 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %176 = comb.and bin %io_in_a_valid, %175 : i1
    %177 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %178 = comb.and bin %128, %177, %75 : i1
    %179 = comb.or bin %178, %reset : i1
    %180 = comb.xor bin %179, %true : i1
    %181 = comb.and bin %176, %180 : i1
    %182 = comb.and bin %176, %88 : i1
    %183 = comb.and bin %176, %94 : i1
    %184 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %185 = comb.or bin %184, %reset : i1
    %186 = comb.xor bin %185, %true : i1
    %187 = comb.and bin %176, %186 : i1
    %188 = comb.and bin %176, %147 : i1
    %189 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %190 = comb.and bin %io_in_a_valid, %189 : i1
    %191 = comb.and bin %190, %180 : i1
    %192 = comb.and bin %190, %88 : i1
    %193 = comb.and bin %190, %94 : i1
    %194 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.or bin %195, %reset : i1
    %197 = comb.xor bin %196, %true : i1
    %198 = comb.and bin %190, %197 : i1
    %199 = comb.and bin %190, %147 : i1
    %200 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %201 = comb.and bin %io_in_a_valid, %200 : i1
    %202 = comb.and bin %128, %132 : i1
    %203 = comb.or bin %202, %reset : i1
    %204 = comb.xor bin %203, %true : i1
    %205 = comb.and bin %201, %204 : i1
    %206 = comb.and bin %201, %88 : i1
    %207 = comb.and bin %201, %94 : i1
    %208 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %209 = comb.or bin %208, %reset : i1
    %210 = comb.xor bin %209, %true : i1
    %211 = comb.and bin %201, %210 : i1
    %212 = comb.and bin %201, %147 : i1
    %213 = comb.and bin %201, %106 : i1
    %214 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %215 = comb.or bin %214, %reset : i1
    %216 = comb.xor bin %215, %true : i1
    %217 = comb.and bin %io_in_d_valid, %216 : i1
    %218 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %219 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %220 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %221 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %222 = comb.and bin %io_in_d_valid, %221 : i1
    %223 = comb.or bin %218, %219, %220, %reset : i1
    %224 = comb.xor bin %223, %true : i1
    %225 = comb.and bin %222, %224 : i1
    %226 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %227 = comb.or bin %226, %reset : i1
    %228 = comb.xor bin %227, %true : i1
    %229 = comb.and bin %222, %228 : i1
    %230 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %231 = comb.or bin %230, %reset : i1
    %232 = comb.xor bin %231, %true : i1
    %233 = comb.and bin %222, %232 : i1
    %234 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %235 = comb.or bin %234, %reset : i1
    %236 = comb.xor bin %235, %true : i1
    %237 = comb.and bin %222, %236 : i1
    %238 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %239 = comb.or bin %238, %reset : i1
    %240 = comb.xor bin %239, %true : i1
    %241 = comb.and bin %222, %240 : i1
    %242 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %243 = comb.and bin %io_in_d_valid, %242 : i1
    %244 = comb.and bin %243, %224 : i1
    %245 = comb.and bin %243, %69 : i1
    %246 = comb.and bin %243, %228 : i1
    %247 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %248 = comb.or bin %247, %reset : i1
    %249 = comb.xor bin %248, %true : i1
    %250 = comb.and bin %243, %249 : i1
    %251 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %252 = comb.or bin %251, %reset : i1
    %253 = comb.xor bin %252, %true : i1
    %254 = comb.and bin %243, %253 : i1
    %255 = comb.and bin %243, %236 : i1
    %256 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %257 = comb.and bin %io_in_d_valid, %256 : i1
    %258 = comb.and bin %257, %224 : i1
    %259 = comb.and bin %257, %69 : i1
    %260 = comb.and bin %257, %228 : i1
    %261 = comb.and bin %257, %249 : i1
    %262 = comb.and bin %257, %253 : i1
    %263 = comb.or bin %238, %io_in_d_bits_corrupt, %reset : i1
    %264 = comb.xor bin %263, %true : i1
    %265 = comb.and bin %257, %264 : i1
    %266 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %267 = comb.and bin %io_in_d_valid, %266 : i1
    %268 = comb.and bin %267, %224 : i1
    %269 = comb.and bin %267, %232 : i1
    %270 = comb.and bin %267, %236 : i1
    %271 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %272 = comb.and bin %io_in_d_valid, %271 : i1
    %273 = comb.and bin %272, %224 : i1
    %274 = comb.and bin %272, %232 : i1
    %275 = comb.and bin %272, %264 : i1
    %276 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %277 = comb.and bin %io_in_d_valid, %276 : i1
    %278 = comb.and bin %277, %224 : i1
    %279 = comb.and bin %277, %232 : i1
    %280 = comb.and bin %277, %236 : i1
    %281 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %282 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %283 = comb.extract %282 from 3 : (i27) -> i9
    %284 = comb.xor %283, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %285 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %286 = comb.mux bin %285, %c0_i9, %284 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %291 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %287 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %288 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %289 = comb.xor bin %288, %true {sv.namehint = "a_first"} : i1
    %290 = comb.mux bin %288, %287, %286 {sv.namehint = "_a_first_counter_T"} : i9
    %291 = comb.mux bin %281, %290, %a_first_counter : i9
    %opcode = seq.firreg %314 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %315 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %316 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %317 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %318 clock %clock {firrtl.random_init_start = 21 : ui64} : i28
    %292 = comb.and bin %io_in_a_valid, %288 : i1
    %293 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %294 = comb.or bin %293, %reset : i1
    %295 = comb.xor bin %294, %true : i1
    %296 = comb.and bin %292, %295 : i1
    %297 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %298 = comb.or bin %297, %reset : i1
    %299 = comb.xor bin %298, %true : i1
    %300 = comb.and bin %292, %299 : i1
    %301 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %302 = comb.or bin %301, %reset : i1
    %303 = comb.xor bin %302, %true : i1
    %304 = comb.and bin %292, %303 : i1
    %305 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %306 = comb.or bin %305, %reset : i1
    %307 = comb.xor bin %306, %true : i1
    %308 = comb.and bin %292, %307 : i1
    %309 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %310 = comb.or bin %309, %reset : i1
    %311 = comb.xor bin %310, %true : i1
    %312 = comb.and bin %292, %311 : i1
    %313 = comb.and bin %281, %289 : i1
    %314 = comb.mux bin %313, %io_in_a_bits_opcode, %opcode : i3
    %315 = comb.mux bin %313, %io_in_a_bits_param, %param : i3
    %316 = comb.mux bin %313, %io_in_a_bits_size, %size : i4
    %317 = comb.mux bin %313, %io_in_a_bits_source, %source : i2
    %318 = comb.mux bin %313, %io_in_a_bits_address, %address : i28
    %319 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %320 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %321 = comb.shl bin %c4095_i27, %320 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %322 = comb.extract %321 from 3 : (i27) -> i9
    %323 = comb.xor %322, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %324 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %325 = comb.mux bin %324, %323, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %330 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 49 : ui64} : i9
    %326 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %327 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %328 = comb.xor bin %327, %true {sv.namehint = "d_first"} : i1
    %329 = comb.mux bin %327, %326, %325 {sv.namehint = "_d_first_counter_T"} : i9
    %330 = comb.mux bin %319, %329, %d_first_counter : i9
    %opcode_1 = seq.firreg %357 clock %clock {firrtl.random_init_start = 58 : ui64} : i3
    %param_1 = seq.firreg %358 clock %clock {firrtl.random_init_start = 61 : ui64} : i2
    %size_1 = seq.firreg %359 clock %clock {firrtl.random_init_start = 63 : ui64} : i4
    %source_1 = seq.firreg %360 clock %clock {firrtl.random_init_start = 67 : ui64} : i2
    %sink = seq.firreg %361 clock %clock {firrtl.random_init_start = 69 : ui64} : i1
    %denied = seq.firreg %362 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %331 = comb.and bin %io_in_d_valid, %327 : i1
    %332 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %333 = comb.or bin %332, %reset : i1
    %334 = comb.xor bin %333, %true : i1
    %335 = comb.and bin %331, %334 : i1
    %336 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %337 = comb.or bin %336, %reset : i1
    %338 = comb.xor bin %337, %true : i1
    %339 = comb.and bin %331, %338 : i1
    %340 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %341 = comb.or bin %340, %reset : i1
    %342 = comb.xor bin %341, %true : i1
    %343 = comb.and bin %331, %342 : i1
    %344 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %345 = comb.or bin %344, %reset : i1
    %346 = comb.xor bin %345, %true : i1
    %347 = comb.and bin %331, %346 : i1
    %348 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %349 = comb.or bin %348, %reset : i1
    %350 = comb.xor bin %349, %true : i1
    %351 = comb.and bin %331, %350 : i1
    %352 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %353 = comb.or bin %352, %reset : i1
    %354 = comb.xor bin %353, %true : i1
    %355 = comb.and bin %331, %354 : i1
    %356 = comb.and bin %319, %328 : i1
    %357 = comb.mux bin %356, %io_in_d_bits_opcode, %opcode_1 : i3
    %358 = comb.mux bin %356, %io_in_d_bits_param, %param_1 : i2
    %359 = comb.mux bin %356, %io_in_d_bits_size, %size_1 : i4
    %360 = comb.mux bin %356, %io_in_d_bits_source, %source_1 : i2
    %361 = comb.mux bin %356, %io_in_d_bits_sink, %sink : i1
    %362 = comb.mux bin %356, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %474 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %inflight_opcodes = seq.firreg %477 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 74 : ui64} : i12
    %inflight_sizes = seq.firreg %480 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 86 : ui64} : i24
    %363 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %364 = comb.extract %363 from 3 : (i27) -> i9
    %365 = comb.xor %364, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %366 = comb.mux bin %285, %c0_i9, %365 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %370 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %367 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %368 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %369 = comb.mux bin %368, %366, %367 {sv.namehint = "_a_first_counter_T_1"} : i9
    %370 = comb.mux bin %281, %369, %a_first_counter_1 : i9
    %371 = comb.shl bin %c4095_i27, %320 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %372 = comb.extract %371 from 3 : (i27) -> i9
    %373 = comb.xor %372, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %374 = comb.mux bin %324, %373, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %378 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 119 : ui64} : i9
    %375 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %376 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %377 = comb.mux bin %376, %374, %375 {sv.namehint = "_d_first_counter_T_1"} : i9
    %378 = comb.mux bin %319, %377, %d_first_counter_1 : i9
    %379 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %380 = comb.shru bin %inflight_opcodes, %379 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %381 = comb.extract %380 from 1 : (i12) -> i3
    %382 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %383 = comb.shru bin %inflight_sizes, %382 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %384 = comb.extract %383 from 1 : (i24) -> i7
    %385 = comb.concat %false, %384 {sv.namehint = "a_size_lookup"} : i1, i7
    %386 = comb.and bin %281, %368 : i1
    %387 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %388 = comb.shl bin %c1_i4, %387 {sv.namehint = "_a_set_T"} : i4
    %389 = comb.extract %388 from 0 : (i4) -> i3
    %390 = comb.mux bin %386, %389, %c0_i3 {sv.namehint = "a_set"} : i3
    %391 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %392 = comb.mux bin %386, %391, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %393 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %394 = comb.mux bin %386, %393, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %395 = comb.concat %c0_i31, %392 : i31, i4
    %396 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %397 = comb.shl bin %395, %396 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %398 = comb.extract %397 from 0 : (i35) -> i12
    %399 = comb.mux bin %386, %398, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %400 = comb.concat %c0_i31, %394 : i31, i5
    %401 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %402 = comb.shl bin %400, %401 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %403 = comb.extract %402 from 0 : (i36) -> i24
    %404 = comb.mux bin %386, %403, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %405 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %406 = comb.shru bin %inflight, %405 : i3
    %407 = comb.extract %406 from 0 : (i3) -> i1
    %408 = comb.xor bin %407, %true : i1
    %409 = comb.or bin %408, %reset : i1
    %410 = comb.xor bin %409, %true : i1
    %411 = comb.and bin %386, %410 : i1
    %412 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %413 = comb.and bin %io_in_d_valid, %376 : i1
    %414 = comb.xor bin %412, %true : i1
    %415 = comb.and bin %319, %376, %414 : i1
    %416 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %417 = comb.shl bin %c1_i4, %416 {sv.namehint = "_d_clr_T"} : i4
    %418 = comb.extract %417 from 0 : (i4) -> i3
    %419 = comb.mux bin %415, %418, %c0_i3 {sv.namehint = "d_clr"} : i3
    %420 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %421 = comb.shl bin %c15_i47, %420 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %422 = comb.extract %421 from 0 : (i47) -> i12
    %423 = comb.mux bin %415, %422, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %424 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %425 = comb.shl bin %c255_i47, %424 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %426 = comb.extract %425 from 0 : (i47) -> i24
    %427 = comb.mux bin %415, %426, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %428 = comb.and bin %413, %414 : i1
    %429 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %430 = comb.and bin %io_in_a_valid, %368, %429 {sv.namehint = "same_cycle_resp"} : i1
    %431 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %432 = comb.shru bin %inflight, %431 : i3
    %433 = comb.extract %432 from 0 : (i3) -> i1
    %434 = comb.or bin %433, %430, %reset : i1
    %435 = comb.xor bin %434, %true : i1
    %436 = comb.and bin %428, %435 : i1
    %437 = comb.and bin %428, %430 : i1
    %438 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %439 = comb.icmp bin eq %io_in_d_bits_opcode, %438 : i3
    %440 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %441 = comb.icmp bin eq %io_in_d_bits_opcode, %440 : i3
    %442 = comb.or bin %439, %441, %reset : i1
    %443 = comb.xor bin %442, %true : i1
    %444 = comb.and bin %437, %443 : i1
    %445 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %446 = comb.or bin %445, %reset : i1
    %447 = comb.xor bin %446, %true : i1
    %448 = comb.and bin %437, %447 : i1
    %449 = comb.xor bin %430, %true : i1
    %450 = comb.and bin %428, %449 : i1
    %451 = hw.array_get %1[%381] : !hw.array<8xi3>, i3
    %452 = comb.icmp bin eq %io_in_d_bits_opcode, %451 : i3
    %453 = hw.array_get %0[%381] : !hw.array<8xi3>, i3
    %454 = comb.icmp bin eq %io_in_d_bits_opcode, %453 : i3
    %455 = comb.or bin %452, %454, %reset : i1
    %456 = comb.xor bin %455, %true : i1
    %457 = comb.and bin %450, %456 : i1
    %458 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %459 = comb.icmp bin eq %458, %385 : i8
    %460 = comb.or bin %459, %reset : i1
    %461 = comb.xor bin %460, %true : i1
    %462 = comb.and bin %450, %461 : i1
    %463 = comb.and bin %413, %368 : i1
    %464 = comb.and bin %463, %io_in_a_valid : i1
    %465 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %466 = comb.and bin %464, %465 : i1
    %467 = comb.and bin %466, %414 : i1
    %468 = comb.xor bin %io_in_d_ready, %true : i1
    %469 = comb.or bin %468, %io_in_a_ready, %reset : i1
    %470 = comb.xor bin %469, %true : i1
    %471 = comb.and bin %467, %470 : i1
    %472 = comb.or bin %inflight, %390 {sv.namehint = "_inflight_T"} : i3
    %473 = comb.xor bin %419, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %474 = comb.and bin %472, %473 {sv.namehint = "_inflight_T_2"} : i3
    %475 = comb.or bin %inflight_opcodes, %399 {sv.namehint = "_inflight_opcodes_T"} : i12
    %476 = comb.xor bin %423, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %477 = comb.and bin %475, %476 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %478 = comb.or bin %inflight_sizes, %404 {sv.namehint = "_inflight_sizes_T"} : i24
    %479 = comb.xor bin %427, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %480 = comb.and bin %478, %479 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %488 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 128 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %481 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %482 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %483 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %484 = comb.or bin %481, %482, %483, %reset : i1
    %485 = comb.xor bin %484, %true : i1
    %486 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %487 = comb.or bin %281, %319 : i1
    %488 = comb.mux bin %487, %c0_i32, %486 : i32
    %inflight_1 = seq.firreg %518 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 160 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %520 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 175 : ui64} : i24
    %489 = comb.shl bin %c4095_i27, %320 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %490 = comb.extract %489 from 3 : (i27) -> i9
    %491 = comb.xor %490, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %492 = comb.mux bin %324, %491, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %496 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 208 : ui64} : i9
    %493 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %494 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %495 = comb.mux bin %494, %492, %493 {sv.namehint = "_d_first_counter_T_2"} : i9
    %496 = comb.mux bin %319, %495, %d_first_counter_2 : i9
    %497 = comb.shru bin %inflight_sizes_1, %382 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %498 = comb.extract %497 from 1 : (i24) -> i7
    %499 = comb.concat %false, %498 {sv.namehint = "c_size_lookup"} : i1, i7
    %500 = comb.and bin %319, %494, %412 : i1
    %501 = comb.shl bin %c1_i4, %416 {sv.namehint = "_d_clr_T_1"} : i4
    %502 = comb.extract %501 from 0 : (i4) -> i3
    %503 = comb.mux bin %500, %502, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %504 = comb.shl bin %c255_i47, %424 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %505 = comb.extract %504 from 0 : (i47) -> i24
    %506 = comb.mux bin %500, %505, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %507 = comb.and bin %io_in_d_valid, %494, %412 : i1
    %508 = comb.shru bin %inflight_1, %431 : i3
    %509 = comb.extract %508 from 0 : (i3) -> i1
    %510 = comb.or bin %509, %reset : i1
    %511 = comb.xor bin %510, %true : i1
    %512 = comb.and bin %507, %511 : i1
    %513 = comb.icmp bin eq %458, %499 : i8
    %514 = comb.or bin %513, %reset : i1
    %515 = comb.xor bin %514, %true : i1
    %516 = comb.and bin %507, %515 : i1
    %517 = comb.xor bin %503, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %518 = comb.and bin %inflight_1, %517 {sv.namehint = "_inflight_T_5"} : i3
    %519 = comb.xor bin %506, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %520 = comb.and bin %inflight_sizes_1, %519 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %527 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 217 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %521 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %522 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %523 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %524 = comb.or bin %521, %522, %523, %reset : i1
    %525 = comb.xor bin %524, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %528 = comb.and bin %STOP_COND_, %false : i1
        sv.if %528 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %529 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %529 {
          sv.fatal 1
        }
        %530 = comb.and bin %STOP_COND_, %86 : i1
        sv.if %530 {
          sv.fatal 1
        }
        %531 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %531 {
          sv.fatal 1
        }
        %532 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %532 {
          sv.fatal 1
        }
        %533 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %533 {
          sv.fatal 1
        }
        %534 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %534 {
          sv.fatal 1
        }
        %535 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %535 {
          sv.fatal 1
        }
        %536 = comb.and bin %STOP_COND_, %107 : i1
        sv.if %536 {
          sv.fatal 1
        }
        %537 = comb.and bin %STOP_COND_, %110 : i1
        sv.if %537 {
          sv.fatal 1
        }
        %538 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %538 {
          sv.fatal 1
        }
        %539 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %539 {
          sv.fatal 1
        }
        %540 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %540 {
          sv.fatal 1
        }
        %541 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %541 {
          sv.fatal 1
        }
        %542 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %542 {
          sv.fatal 1
        }
        %543 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %543 {
          sv.fatal 1
        }
        %544 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %544 {
          sv.fatal 1
        }
        %545 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %545 {
          sv.fatal 1
        }
        %546 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %546 {
          sv.fatal 1
        }
        %547 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %547 {
          sv.fatal 1
        }
        %548 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %548 {
          sv.fatal 1
        }
        %549 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %549 {
          sv.fatal 1
        }
        %550 = comb.and bin %STOP_COND_, %144 : i1
        sv.if %550 {
          sv.fatal 1
        }
        %551 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %551 {
          sv.fatal 1
        }
        %552 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %552 {
          sv.fatal 1
        }
        %553 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %553 {
          sv.fatal 1
        }
        %554 = comb.and bin %STOP_COND_, %159 : i1
        sv.if %554 {
          sv.fatal 1
        }
        %555 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %555 {
          sv.fatal 1
        }
        %556 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %556 {
          sv.fatal 1
        }
        %557 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %557 {
          sv.fatal 1
        }
        %558 = comb.and bin %STOP_COND_, %165 : i1
        sv.if %558 {
          sv.fatal 1
        }
        %559 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %559 {
          sv.fatal 1
        }
        %560 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %560 {
          sv.fatal 1
        }
        %561 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %561 {
          sv.fatal 1
        }
        %562 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %562 {
          sv.fatal 1
        }
        %563 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %563 {
          sv.fatal 1
        }
        %564 = comb.and bin %STOP_COND_, %182 : i1
        sv.if %564 {
          sv.fatal 1
        }
        %565 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %565 {
          sv.fatal 1
        }
        %566 = comb.and bin %STOP_COND_, %187 : i1
        sv.if %566 {
          sv.fatal 1
        }
        %567 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %567 {
          sv.fatal 1
        }
        %568 = comb.and bin %STOP_COND_, %191 : i1
        sv.if %568 {
          sv.fatal 1
        }
        %569 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %569 {
          sv.fatal 1
        }
        %570 = comb.and bin %STOP_COND_, %193 : i1
        sv.if %570 {
          sv.fatal 1
        }
        %571 = comb.and bin %STOP_COND_, %198 : i1
        sv.if %571 {
          sv.fatal 1
        }
        %572 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %572 {
          sv.fatal 1
        }
        %573 = comb.and bin %STOP_COND_, %205 : i1
        sv.if %573 {
          sv.fatal 1
        }
        %574 = comb.and bin %STOP_COND_, %206 : i1
        sv.if %574 {
          sv.fatal 1
        }
        %575 = comb.and bin %STOP_COND_, %207 : i1
        sv.if %575 {
          sv.fatal 1
        }
        %576 = comb.and bin %STOP_COND_, %211 : i1
        sv.if %576 {
          sv.fatal 1
        }
        %577 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %577 {
          sv.fatal 1
        }
        %578 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %578 {
          sv.fatal 1
        }
        %579 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %579 {
          sv.fatal 1
        }
        %580 = comb.and bin %STOP_COND_, %225 : i1
        sv.if %580 {
          sv.fatal 1
        }
        %581 = comb.and bin %STOP_COND_, %229 : i1
        sv.if %581 {
          sv.fatal 1
        }
        %582 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %582 {
          sv.fatal 1
        }
        %583 = comb.and bin %STOP_COND_, %237 : i1
        sv.if %583 {
          sv.fatal 1
        }
        %584 = comb.and bin %STOP_COND_, %241 : i1
        sv.if %584 {
          sv.fatal 1
        }
        %585 = comb.and bin %STOP_COND_, %244 : i1
        sv.if %585 {
          sv.fatal 1
        }
        %586 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %586 {
          sv.fatal 1
        }
        %587 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %587 {
          sv.fatal 1
        }
        %588 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %588 {
          sv.fatal 1
        }
        %589 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %589 {
          sv.fatal 1
        }
        %590 = comb.and bin %STOP_COND_, %255 : i1
        sv.if %590 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %591 = comb.and bin %STOP_COND_, %258 : i1
        sv.if %591 {
          sv.fatal 1
        }
        %592 = comb.and bin %STOP_COND_, %259 : i1
        sv.if %592 {
          sv.fatal 1
        }
        %593 = comb.and bin %STOP_COND_, %260 : i1
        sv.if %593 {
          sv.fatal 1
        }
        %594 = comb.and bin %STOP_COND_, %261 : i1
        sv.if %594 {
          sv.fatal 1
        }
        %595 = comb.and bin %STOP_COND_, %262 : i1
        sv.if %595 {
          sv.fatal 1
        }
        %596 = comb.and bin %STOP_COND_, %265 : i1
        sv.if %596 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %597 = comb.and bin %STOP_COND_, %268 : i1
        sv.if %597 {
          sv.fatal 1
        }
        %598 = comb.and bin %STOP_COND_, %269 : i1
        sv.if %598 {
          sv.fatal 1
        }
        %599 = comb.and bin %STOP_COND_, %270 : i1
        sv.if %599 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %600 = comb.and bin %STOP_COND_, %273 : i1
        sv.if %600 {
          sv.fatal 1
        }
        %601 = comb.and bin %STOP_COND_, %274 : i1
        sv.if %601 {
          sv.fatal 1
        }
        %602 = comb.and bin %STOP_COND_, %275 : i1
        sv.if %602 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %603 = comb.and bin %STOP_COND_, %278 : i1
        sv.if %603 {
          sv.fatal 1
        }
        %604 = comb.and bin %STOP_COND_, %279 : i1
        sv.if %604 {
          sv.fatal 1
        }
        %605 = comb.and bin %STOP_COND_, %280 : i1
        sv.if %605 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %606 = comb.and bin %STOP_COND_, %296 : i1
        sv.if %606 {
          sv.fatal 1
        }
        %607 = comb.and bin %STOP_COND_, %300 : i1
        sv.if %607 {
          sv.fatal 1
        }
        %608 = comb.and bin %STOP_COND_, %304 : i1
        sv.if %608 {
          sv.fatal 1
        }
        %609 = comb.and bin %STOP_COND_, %308 : i1
        sv.if %609 {
          sv.fatal 1
        }
        %610 = comb.and bin %STOP_COND_, %312 : i1
        sv.if %610 {
          sv.fatal 1
        }
        %611 = comb.and bin %STOP_COND_, %335 : i1
        sv.if %611 {
          sv.fatal 1
        }
        %612 = comb.and bin %STOP_COND_, %339 : i1
        sv.if %612 {
          sv.fatal 1
        }
        %613 = comb.and bin %STOP_COND_, %343 : i1
        sv.if %613 {
          sv.fatal 1
        }
        %614 = comb.and bin %STOP_COND_, %347 : i1
        sv.if %614 {
          sv.fatal 1
        }
        %615 = comb.and bin %STOP_COND_, %351 : i1
        sv.if %615 {
          sv.fatal 1
        }
        %616 = comb.and bin %STOP_COND_, %355 : i1
        sv.if %616 {
          sv.fatal 1
        }
        %617 = comb.and bin %STOP_COND_, %411 : i1
        sv.if %617 {
          sv.fatal 1
        }
        %618 = comb.and bin %STOP_COND_, %436 : i1
        sv.if %618 {
          sv.fatal 1
        }
        %619 = comb.and bin %STOP_COND_, %444 : i1
        sv.if %619 {
          sv.fatal 1
        }
        %620 = comb.and bin %STOP_COND_, %448 : i1
        sv.if %620 {
          sv.fatal 1
        }
        %621 = comb.and bin %STOP_COND_, %457 : i1
        sv.if %621 {
          sv.fatal 1
        }
        %622 = comb.and bin %STOP_COND_, %462 : i1
        sv.if %622 {
          sv.fatal 1
        }
        %623 = comb.and bin %STOP_COND_, %471 : i1
        sv.if %623 {
          sv.fatal 1
        }
        %624 = comb.and bin %STOP_COND_, %485 : i1
        sv.if %624 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %625 = comb.and bin %STOP_COND_, %512 : i1
        sv.if %625 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %626 = comb.and bin %STOP_COND_, %516 : i1
        sv.if %626 {
          sv.fatal 1
        }
        sv.if %528 {
          sv.fatal 1
        }
        %627 = comb.and bin %STOP_COND_, %525 : i1
        sv.if %627 {
          sv.fatal 1
        }
      }
    }
    %526 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %527 = comb.mux bin %319, %c0_i32, %526 : i32
    hw.output
  }
  hw.module private @TLFIFOFixer_2(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_3(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %auto_out_d_bits_source: i2, io_in_d_bits_sink: %auto_out_d_bits_sink: i1, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLXbar_4(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLXbar_5(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_4_a_ready : i1, out auto_out_4_a_valid : i1, out auto_out_4_a_bits_opcode : i3, out auto_out_4_a_bits_param : i3, out auto_out_4_a_bits_size : i3, out auto_out_4_a_bits_source : i2, out auto_out_4_a_bits_address : i17, out auto_out_4_a_bits_mask : i8, out auto_out_4_a_bits_corrupt : i1, out auto_out_4_d_ready : i1, in %auto_out_4_d_valid : i1, in %auto_out_4_d_bits_size : i3, in %auto_out_4_d_bits_source : i2, in %auto_out_4_d_bits_data : i64, in %auto_out_3_a_ready : i1, out auto_out_3_a_valid : i1, out auto_out_3_a_bits_opcode : i3, out auto_out_3_a_bits_param : i3, out auto_out_3_a_bits_size : i3, out auto_out_3_a_bits_source : i2, out auto_out_3_a_bits_address : i12, out auto_out_3_a_bits_mask : i8, out auto_out_3_a_bits_data : i64, out auto_out_3_a_bits_corrupt : i1, out auto_out_3_d_ready : i1, in %auto_out_3_d_valid : i1, in %auto_out_3_d_bits_opcode : i3, in %auto_out_3_d_bits_size : i3, in %auto_out_3_d_bits_source : i2, in %auto_out_3_d_bits_data : i64, in %auto_out_2_a_ready : i1, out auto_out_2_a_valid : i1, out auto_out_2_a_bits_opcode : i3, out auto_out_2_a_bits_param : i3, out auto_out_2_a_bits_size : i3, out auto_out_2_a_bits_source : i2, out auto_out_2_a_bits_address : i26, out auto_out_2_a_bits_mask : i8, out auto_out_2_a_bits_data : i64, out auto_out_2_a_bits_corrupt : i1, out auto_out_2_d_ready : i1, in %auto_out_2_d_valid : i1, in %auto_out_2_d_bits_opcode : i3, in %auto_out_2_d_bits_size : i3, in %auto_out_2_d_bits_source : i2, in %auto_out_2_d_bits_data : i64, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_param : i3, out auto_out_1_a_bits_size : i3, out auto_out_1_a_bits_source : i2, out auto_out_1_a_bits_address : i28, out auto_out_1_a_bits_mask : i8, out auto_out_1_a_bits_data : i64, out auto_out_1_a_bits_corrupt : i1, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_size : i3, in %auto_out_1_d_bits_source : i2, in %auto_out_1_d_bits_data : i64, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_param : i3, out auto_out_0_a_bits_size : i4, out auto_out_0_a_bits_source : i2, out auto_out_0_a_bits_address : i14, out auto_out_0_a_bits_mask : i8, out auto_out_0_a_bits_data : i64, out auto_out_0_a_bits_corrupt : i1, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_param : i2, in %auto_out_0_d_bits_size : i4, in %auto_out_0_d_bits_source : i2, in %auto_out_0_d_bits_sink : i1, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_data : i64, in %auto_out_0_d_bits_corrupt : i1) {
    %c0_i8 = hw.constant 0 : i8
    %c-1_i3 = hw.constant -1 : i3
    %c0_i18 = hw.constant 0 : i18
    %c-1_i9 = hw.constant -1 : i9
    %c63_i21 = hw.constant 63 : i21
    %c4095_i27 = hw.constant 4095 : i27
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false
    %c0_i9 = hw.constant 0 : i9
    %c0_i64 = hw.constant 0 : i64
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-1_i5 = hw.constant -1 : i5
    %true = hw.constant true
    %c0_i23 = hw.constant 0 : i23
    %c0_i5 = hw.constant 0 : i5
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_3(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %70: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %196: i1, io_in_d_bits_opcode: %224: i3, io_in_d_bits_param: %218: i2, io_in_d_bits_size: %217: i4, io_in_d_bits_source: %211: i2, io_in_d_bits_sink: %205: i1, io_in_d_bits_denied: %204: i1, io_in_d_bits_corrupt: %197: i1) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "bundleOut_0_out_1_bits_address"} : (i28) -> i14
    %2 = comb.extract %auto_in_a_bits_size from 0 {sv.namehint = "bundleOut_4_out_1_bits_size"} : (i4) -> i3
    %3 = comb.concat %false, %auto_out_1_d_bits_size {sv.namehint = "out_14_bits_size"} : i1, i3
    %4 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "bundleOut_2_out_1_bits_address"} : (i28) -> i26
    %5 = comb.concat %false, %auto_out_2_d_bits_size {sv.namehint = "out_15_bits_size"} : i1, i3
    %6 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "bundleOut_3_out_1_bits_address"} : (i28) -> i12
    %7 = comb.concat %false, %auto_out_3_d_bits_size {sv.namehint = "out_16_bits_size"} : i1, i3
    %8 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "bundleOut_4_out_1_bits_address"} : (i28) -> i17
    %9 = comb.concat %false, %auto_out_4_d_bits_size {sv.namehint = "out_17_bits_size"} : i1, i3
    %10 = comb.extract %auto_in_a_bits_address from 13 : (i28) -> i1
    %11 = comb.xor %10, %true : i1
    %12 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %13 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %14 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %15 = comb.concat %12, %13, %14, %11 : i1, i1, i1, i1
    %16 = comb.icmp bin eq %15, %c0_i4 {sv.namehint = "requestAIO_0_0"} : i4
    %17 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %18 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %19 = comb.xor %18, %true : i1
    %20 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %21 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %22 = comb.concat %20, %19, %21 : i1, i1, i1
    %23 = comb.icmp bin eq %22, %c0_i3 {sv.namehint = "requestAIO_0_2"} : i3
    %24 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %25 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %26 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %27 = comb.extract %auto_in_a_bits_address from 13 : (i28) -> i1
    %28 = comb.concat %24, %25, %26, %27 : i1, i1, i1, i1
    %29 = comb.icmp bin eq %28, %c0_i4 {sv.namehint = "requestAIO_0_3"} : i4
    %30 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %31 = comb.xor %30, %true : i1
    %32 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %33 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %34 = comb.concat %32, %33, %31 : i1, i1, i1
    %35 = comb.icmp bin eq %34, %c0_i3 {sv.namehint = "requestAIO_0_4"} : i3
    %36 = comb.concat %c0_i23, %auto_out_0_d_bits_size : i23, i4
    %37 = comb.shl bin %c4095_i27, %36 {sv.namehint = "_beatsDO_decode_T_1"} : i27
    %38 = comb.extract %37 from 3 : (i27) -> i9
    %39 = comb.xor %38, %c-1_i9 {sv.namehint = "_beatsDO_decode_T_3"} : i9
    %40 = comb.extract %auto_out_0_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata"} : (i3) -> i1
    %41 = comb.concat %c0_i18, %auto_out_1_d_bits_size : i18, i3
    %42 = comb.shl bin %c63_i21, %41 {sv.namehint = "_beatsDO_decode_T_5"} : i21
    %43 = comb.extract %42 from 3 : (i21) -> i3
    %44 = comb.xor %43, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_7"} : i3
    %45 = comb.extract %auto_out_1_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_1"} : (i3) -> i1
    %46 = comb.concat %c0_i18, %auto_out_2_d_bits_size : i18, i3
    %47 = comb.shl bin %c63_i21, %46 {sv.namehint = "_beatsDO_decode_T_9"} : i21
    %48 = comb.extract %47 from 3 : (i21) -> i3
    %49 = comb.xor %48, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_11"} : i3
    %50 = comb.extract %auto_out_2_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_2"} : (i3) -> i1
    %51 = comb.concat %c0_i18, %auto_out_3_d_bits_size : i18, i3
    %52 = comb.shl bin %c63_i21, %51 {sv.namehint = "_beatsDO_decode_T_13"} : i21
    %53 = comb.extract %52 from 3 : (i21) -> i3
    %54 = comb.xor %53, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_15"} : i3
    %55 = comb.extract %auto_out_3_d_bits_opcode from 0 {sv.namehint = "beatsDO_opdata_3"} : (i3) -> i1
    %56 = comb.concat %c0_i18, %auto_out_4_d_bits_size : i18, i3
    %57 = comb.shl bin %c63_i21, %56 {sv.namehint = "_beatsDO_decode_T_17"} : i21
    %58 = comb.extract %57 from 3 : (i21) -> i3
    %59 = comb.xor %58, %c-1_i3 {sv.namehint = "_beatsDO_decode_T_19"} : i3
    %60 = comb.and bin %auto_in_a_valid, %16 {sv.namehint = "portsAOI_filtered_0_earlyValid"} : i1
    %61 = comb.and bin %auto_in_a_valid, %17 {sv.namehint = "portsAOI_filtered_1_earlyValid"} : i1
    %62 = comb.and bin %auto_in_a_valid, %23 {sv.namehint = "portsAOI_filtered_2_earlyValid"} : i1
    %63 = comb.and bin %auto_in_a_valid, %29 {sv.namehint = "portsAOI_filtered_3_earlyValid"} : i1
    %64 = comb.and bin %auto_in_a_valid, %35 {sv.namehint = "portsAOI_filtered_4_earlyValid"} : i1
    %65 = comb.and %16, %auto_out_0_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T"} : i1
    %66 = comb.and %17, %auto_out_1_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_1"} : i1
    %67 = comb.and %23, %auto_out_2_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_2"} : i1
    %68 = comb.and %29, %auto_out_3_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_3"} : i1
    %69 = comb.and %35, %auto_out_4_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_4"} : i1
    %70 = comb.or bin %65, %66, %67, %68, %69 {sv.namehint = "_portsAOI_in_0_a_ready_T_8"} : i1
    %beatsLeft = seq.firreg %168 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %71 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %72 = comb.and bin %71, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %73 = comb.concat %auto_out_4_d_valid, %auto_out_3_d_valid, %auto_out_2_d_valid, %auto_out_1_d_valid, %auto_out_0_d_valid {sv.namehint = "readys_filter_lo"} : i1, i1, i1, i1, i1
    %readys_mask = seq.firreg %113 clock %clock reset sync %reset, %c-1_i5 {firrtl.random_init_start = 9 : ui64} : i5
    %74 = comb.xor bin %readys_mask, %c-1_i5 {sv.namehint = "_readys_filter_T"} : i5
    %75 = comb.and bin %73, %74 {sv.namehint = "readys_filter_hi"} : i5
    %76 = comb.extract %75 from 4 : (i5) -> i1
    %77 = comb.extract %75 from 0 : (i5) -> i4
    %78 = comb.concat %77, %auto_out_4_d_valid, %auto_out_3_d_valid, %auto_out_2_d_valid, %auto_out_1_d_valid : i4, i1, i1, i1, i1
    %79 = comb.concat %75, %auto_out_4_d_valid, %auto_out_3_d_valid, %auto_out_2_d_valid : i5, i1, i1, i1
    %80 = comb.or %78, %79 : i8
    %81 = comb.extract %80 from 7 : (i8) -> i1
    %82 = comb.extract %80 from 0 : (i8) -> i7
    %83 = comb.extract %80 from 2 : (i8) -> i6
    %84 = comb.concat %76, %83 : i1, i6
    %85 = comb.or %82, %84 : i7
    %86 = comb.extract %85 from 5 : (i7) -> i2
    %87 = comb.extract %85 from 0 : (i7) -> i5
    %88 = comb.extract %85 from 4 : (i7) -> i3
    %89 = comb.concat %76, %81, %88 : i1, i1, i3
    %90 = comb.or %87, %89 {sv.namehint = "_readys_readys_T_1"} : i5
    %91 = comb.extract %readys_mask from 4 : (i5) -> i1
    %92 = comb.extract %readys_mask from 3 : (i5) -> i1
    %93 = comb.or %76, %92 : i1
    %94 = comb.extract %readys_mask from 2 : (i5) -> i1
    %95 = comb.or %81, %94 : i1
    %96 = comb.extract %readys_mask from 0 : (i5) -> i2
    %97 = comb.or %86, %96 : i2
    %98 = comb.concat %91, %93, %95, %97 {sv.namehint = "_readys_readys_T"} : i1, i1, i1, i2
    %99 = comb.and bin %98, %90 {sv.namehint = "_readys_readys_T_2"} : i5
    %100 = comb.xor bin %99, %c-1_i5 {sv.namehint = "readys_readys"} : i5
    %101 = comb.icmp bin ne %73, %c0_i5 {sv.namehint = "_readys_T_5"} : i5
    %102 = comb.and bin %72, %101 {sv.namehint = "_readys_T_6"} : i1
    %103 = comb.and bin %100, %73 {sv.namehint = "_readys_mask_T"} : i5
    %104 = comb.extract %103 from 0 : (i5) -> i4
    %105 = comb.concat %104, %false {sv.namehint = "_readys_mask_T_2"} : i4, i1
    %106 = comb.or bin %103, %105 {sv.namehint = "_readys_mask_T_3"} : i5
    %107 = comb.extract %106 from 0 : (i5) -> i3
    %108 = comb.concat %107, %c0_i2 {sv.namehint = "_readys_mask_T_5"} : i3, i2
    %109 = comb.or bin %106, %108 {sv.namehint = "_readys_mask_T_6"} : i5
    %110 = comb.extract %109 from 0 : (i5) -> i1
    %111 = comb.concat %110, %c0_i4 {sv.namehint = "_readys_mask_T_8"} : i1, i4
    %112 = comb.or bin %109, %111 {sv.namehint = "_readys_mask_T_10"} : i5
    %113 = comb.mux bin %102, %112, %readys_mask : i5
    %114 = comb.extract %100 from 0 {sv.namehint = "readys_0"} : (i5) -> i1
    %115 = comb.extract %100 from 1 {sv.namehint = "readys_1"} : (i5) -> i1
    %116 = comb.extract %100 from 2 {sv.namehint = "readys_2"} : (i5) -> i1
    %117 = comb.extract %100 from 3 {sv.namehint = "readys_3"} : (i5) -> i1
    %118 = comb.extract %100 from 4 {sv.namehint = "readys_4"} : (i5) -> i1
    %119 = comb.and bin %114, %auto_out_0_d_valid {sv.namehint = "prefixOR_1"} : i1
    %120 = comb.and bin %115, %auto_out_1_d_valid {sv.namehint = "earlyWinner_1"} : i1
    %121 = comb.and bin %116, %auto_out_2_d_valid {sv.namehint = "earlyWinner_2"} : i1
    %122 = comb.and bin %117, %auto_out_3_d_valid {sv.namehint = "earlyWinner_3"} : i1
    %123 = comb.and bin %118, %auto_out_4_d_valid {sv.namehint = "earlyWinner_4"} : i1
    %124 = comb.and bin %114, %auto_out_0_d_valid {sv.namehint = "winnerQual_0"} : i1
    %125 = comb.and bin %115, %auto_out_1_d_valid {sv.namehint = "winnerQual_1"} : i1
    %126 = comb.and bin %116, %auto_out_2_d_valid {sv.namehint = "winnerQual_2"} : i1
    %127 = comb.and bin %117, %auto_out_3_d_valid {sv.namehint = "winnerQual_3"} : i1
    %128 = comb.and bin %118, %auto_out_4_d_valid {sv.namehint = "winnerQual_4"} : i1
    %129 = comb.or bin %119, %120 {sv.namehint = "prefixOR_2"} : i1
    %130 = comb.or bin %129, %121 {sv.namehint = "prefixOR_3"} : i1
    %131 = comb.or bin %130, %122 {sv.namehint = "prefixOR_4"} : i1
    %132 = comb.xor bin %119, %true : i1
    %133 = comb.xor bin %120, %true : i1
    %134 = comb.or bin %132, %133 : i1
    %135 = comb.xor bin %129, %true : i1
    %136 = comb.xor bin %121, %true : i1
    %137 = comb.or bin %135, %136 : i1
    %138 = comb.xor bin %130, %true : i1
    %139 = comb.xor bin %122, %true : i1
    %140 = comb.or bin %138, %139 : i1
    %141 = comb.xor bin %131, %true : i1
    %142 = comb.xor bin %123, %true : i1
    %143 = comb.or bin %141, %142 : i1
    %144 = comb.and bin %134, %137, %140, %143 : i1
    %145 = comb.or bin %144, %reset : i1
    %146 = comb.xor bin %145, %true : i1
    %147 = comb.or bin %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T"} : i1
    %148 = comb.or bin %147, %auto_out_2_d_valid, %auto_out_3_d_valid, %auto_out_4_d_valid : i1
    %149 = comb.xor bin %148, %true : i1
    %150 = comb.or bin %149, %119, %120, %121, %122, %123, %reset : i1
    %151 = comb.xor bin %150, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %225 = comb.and bin %STOP_COND_, %false : i1
        sv.if %225 {
          sv.fatal 1
        }
        %226 = comb.and bin %STOP_COND_, %146 : i1
        sv.if %226 {
          sv.fatal 1
        }
        %227 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %227 {
          sv.fatal 1
        }
        %228 = comb.and bin %STOP_COND_, %false : i1
        sv.if %228 {
          sv.fatal 1
        }
      }
    }
    %152 = comb.and bin %124, %40 : i1
    %153 = comb.mux bin %152, %39, %c0_i9 {sv.namehint = "maskedBeats_0"} : i9
    %154 = comb.and bin %125, %45 : i1
    %155 = comb.mux bin %154, %44, %c0_i3 {sv.namehint = "maskedBeats_1"} : i3
    %156 = comb.and bin %126, %50 : i1
    %157 = comb.mux bin %156, %49, %c0_i3 {sv.namehint = "maskedBeats_2"} : i3
    %158 = comb.and bin %127, %55 : i1
    %159 = comb.mux bin %158, %54, %c0_i3 {sv.namehint = "maskedBeats_3"} : i3
    %160 = comb.mux bin %128, %59, %c0_i3 {sv.namehint = "maskedBeats_4"} : i3
    %161 = comb.extract %153 from 3 : (i9) -> i6
    %162 = comb.extract %153 from 0 : (i9) -> i3
    %163 = comb.or bin %162, %155, %157, %159, %160 : i3
    %164 = comb.concat %161, %163 {sv.namehint = "initBeats"} : i6, i3
    %165 = comb.and bin %auto_in_d_ready, %196 {sv.namehint = "_beatsLeft_T_2"} : i1
    %166 = comb.concat %c0_i8, %165 : i8, i1
    %167 = comb.sub %beatsLeft, %166 {sv.namehint = "_beatsLeft_T_3"} : i9
    %168 = comb.mux bin %72, %164, %167 {sv.namehint = "_beatsLeft_T_5"} : i9
    %state_0 = seq.firreg %174 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64} : i1
    %state_1 = seq.firreg %175 clock %clock reset sync %reset, %false {firrtl.random_init_start = 15 : ui64} : i1
    %state_2 = seq.firreg %176 clock %clock reset sync %reset, %false {firrtl.random_init_start = 16 : ui64} : i1
    %state_3 = seq.firreg %177 clock %clock reset sync %reset, %false {firrtl.random_init_start = 17 : ui64} : i1
    %state_4 = seq.firreg %178 clock %clock reset sync %reset, %false {firrtl.random_init_start = 18 : ui64} : i1
    %169 = comb.mux bin %71, %119, %state_0 {sv.namehint = "muxStateEarly_0"} : i1
    %170 = comb.mux bin %71, %120, %state_1 {sv.namehint = "muxStateEarly_1"} : i1
    %171 = comb.mux bin %71, %121, %state_2 {sv.namehint = "muxStateEarly_2"} : i1
    %172 = comb.mux bin %71, %122, %state_3 {sv.namehint = "muxStateEarly_3"} : i1
    %173 = comb.mux bin %71, %123, %state_4 {sv.namehint = "muxStateEarly_4"} : i1
    %174 = comb.mux bin %71, %124, %state_0 {sv.namehint = "muxStateQual_0"} : i1
    %175 = comb.mux bin %71, %125, %state_1 {sv.namehint = "muxStateQual_1"} : i1
    %176 = comb.mux bin %71, %126, %state_2 {sv.namehint = "muxStateQual_2"} : i1
    %177 = comb.mux bin %71, %127, %state_3 {sv.namehint = "muxStateQual_3"} : i1
    %178 = comb.mux bin %71, %128, %state_4 {sv.namehint = "muxStateQual_4"} : i1
    %179 = comb.mux bin %71, %114, %state_0 {sv.namehint = "allowed_0"} : i1
    %180 = comb.mux bin %71, %115, %state_1 {sv.namehint = "allowed_1"} : i1
    %181 = comb.mux bin %71, %116, %state_2 {sv.namehint = "allowed_2"} : i1
    %182 = comb.mux bin %71, %117, %state_3 {sv.namehint = "allowed_3"} : i1
    %183 = comb.mux bin %71, %118, %state_4 {sv.namehint = "allowed_4"} : i1
    %184 = comb.and bin %auto_in_d_ready, %179 {sv.namehint = "out_13_ready"} : i1
    %185 = comb.and bin %auto_in_d_ready, %180 {sv.namehint = "out_14_ready"} : i1
    %186 = comb.and bin %auto_in_d_ready, %181 {sv.namehint = "out_15_ready"} : i1
    %187 = comb.and bin %auto_in_d_ready, %182 {sv.namehint = "out_16_ready"} : i1
    %188 = comb.and bin %auto_in_d_ready, %183 {sv.namehint = "out_17_ready"} : i1
    %189 = comb.or bin %147, %auto_out_2_d_valid, %auto_out_3_d_valid, %auto_out_4_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_3"} : i1
    %190 = comb.and %state_0, %auto_out_0_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_4"} : i1
    %191 = comb.and %state_1, %auto_out_1_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_5"} : i1
    %192 = comb.and %state_2, %auto_out_2_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_6"} : i1
    %193 = comb.and %state_3, %auto_out_3_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_7"} : i1
    %194 = comb.and %state_4, %auto_out_4_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_8"} : i1
    %195 = comb.or bin %190, %191, %192, %193, %194 {sv.namehint = "_sink_ACancel_earlyValid_T_12"} : i1
    %196 = comb.mux bin %71, %189, %195 {sv.namehint = "out_18_valid"} : i1
    %197 = comb.and %169, %auto_out_0_d_bits_corrupt {sv.namehint = "out_18_bits_corrupt"} : i1
    %198 = comb.mux bin %169, %auto_out_0_d_bits_data, %c0_i64 : i64
    %199 = comb.mux bin %170, %auto_out_1_d_bits_data, %c0_i64 : i64
    %200 = comb.mux bin %171, %auto_out_2_d_bits_data, %c0_i64 : i64
    %201 = comb.mux bin %172, %auto_out_3_d_bits_data, %c0_i64 : i64
    %202 = comb.mux bin %173, %auto_out_4_d_bits_data, %c0_i64 : i64
    %203 = comb.or bin %198, %199, %200, %201, %202 {sv.namehint = "out_18_bits_data"} : i64
    %204 = comb.and %169, %auto_out_0_d_bits_denied {sv.namehint = "out_18_bits_denied"} : i1
    %205 = comb.and %169, %auto_out_0_d_bits_sink {sv.namehint = "out_18_bits_sink"} : i1
    %206 = comb.mux bin %169, %auto_out_0_d_bits_source, %c0_i2 : i2
    %207 = comb.mux bin %170, %auto_out_1_d_bits_source, %c0_i2 : i2
    %208 = comb.mux bin %171, %auto_out_2_d_bits_source, %c0_i2 : i2
    %209 = comb.mux bin %172, %auto_out_3_d_bits_source, %c0_i2 : i2
    %210 = comb.mux bin %173, %auto_out_4_d_bits_source, %c0_i2 : i2
    %211 = comb.or bin %206, %207, %208, %209, %210 {sv.namehint = "out_18_bits_source"} : i2
    %212 = comb.mux bin %169, %auto_out_0_d_bits_size, %c0_i4 : i4
    %213 = comb.mux bin %170, %3, %c0_i4 : i4
    %214 = comb.mux bin %171, %5, %c0_i4 : i4
    %215 = comb.mux bin %172, %7, %c0_i4 : i4
    %216 = comb.mux bin %173, %9, %c0_i4 : i4
    %217 = comb.or bin %212, %213, %214, %215, %216 {sv.namehint = "out_18_bits_size"} : i4
    %218 = comb.mux bin %169, %auto_out_0_d_bits_param, %c0_i2 {sv.namehint = "out_18_bits_param"} : i2
    %219 = comb.mux bin %169, %auto_out_0_d_bits_opcode, %c0_i3 : i3
    %220 = comb.mux bin %170, %auto_out_1_d_bits_opcode, %c0_i3 : i3
    %221 = comb.mux bin %171, %auto_out_2_d_bits_opcode, %c0_i3 : i3
    %222 = comb.mux bin %172, %auto_out_3_d_bits_opcode, %c0_i3 : i3
    %223 = comb.concat %c0_i2, %173 : i2, i1
    %224 = comb.or bin %219, %220, %221, %222, %223 {sv.namehint = "out_18_bits_opcode"} : i3
    hw.output %70, %196, %224, %218, %217, %211, %205, %204, %203, %197, %64, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %8, %auto_in_a_bits_mask, %auto_in_a_bits_corrupt, %188, %63, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %6, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %187, %62, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %4, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %186, %61, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %2, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %185, %60, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %1, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %184 : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i3, i2, i17, i8, i1, i1, i1, i3, i3, i3, i2, i12, i8, i64, i1, i1, i1, i3, i3, i3, i2, i26, i8, i64, i1, i1, i1, i3, i3, i3, i2, i28, i8, i64, i1, i1, i1, i3, i3, i4, i2, i14, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_5(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i2 = hw.constant -1 : i2
    %c4_i4 = hw.constant 4 : i4
    %c7_i4 = hw.constant 7 : i4
    %c0_i16 = hw.constant 0 : i16
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i23 = hw.constant 0 : i23
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %7 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %9 = comb.xor bin %8, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %10 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i12
    %11 = comb.and bin %10, %9 : i12
    %12 = comb.icmp bin eq %11, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %59 = comb.extract %io_in_a_bits_address from 14 : (i28) -> i14
    %60 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i2
    %61 = comb.xor %60, %c-1_i2 : i2
    %62 = comb.extract %io_in_a_bits_address from 17 : (i28) -> i11
    %63 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i1
    %64 = comb.xor %63, %true : i1
    %65 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %66 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i10
    %67 = comb.xor %66, %c-512_i10 : i10
    %68 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %69 = comb.xor bin %reset, %true : i1
    %70 = comb.and bin %57, %69 : i1
    %71 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %72 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i16
    %73 = comb.icmp bin eq %72, %c0_i16 : i16
    %74 = comb.concat %59, %61 : i14, i2
    %75 = comb.icmp bin eq %74, %c0_i16 : i16
    %76 = comb.concat %62, %64 : i11, i1
    %77 = comb.icmp bin eq %76, %c0_i12 : i12
    %78 = comb.concat %65, %67 : i2, i10
    %79 = comb.icmp bin eq %78, %c0_i12 : i12
    %80 = comb.icmp eq %68, %c-1_i2 : i2
    %81 = comb.or bin %73, %75, %77, %79, %80 : i1
    %82 = comb.and bin %58, %81 : i1
    %83 = comb.and bin %3, %71, %82 : i1
    %84 = comb.or bin %83, %reset : i1
    %85 = comb.xor bin %84, %true : i1
    %86 = comb.and bin %57, %85 : i1
    %87 = comb.or bin %3, %4, %5, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %57, %88 : i1
    %90 = comb.or bin %14, %reset : i1
    %91 = comb.xor bin %90, %true : i1
    %92 = comb.and bin %57, %91 : i1
    %93 = comb.or bin %12, %reset : i1
    %94 = comb.xor bin %93, %true : i1
    %95 = comb.and bin %57, %94 : i1
    %96 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %97 = comb.or bin %96, %reset : i1
    %98 = comb.xor bin %97, %true : i1
    %99 = comb.and bin %57, %98 : i1
    %100 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %57, %102 : i1
    %104 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %105 = comb.or bin %104, %reset : i1
    %106 = comb.xor bin %105, %true : i1
    %107 = comb.and bin %57, %106 : i1
    %108 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %109 = comb.and bin %io_in_a_valid, %108 : i1
    %110 = comb.and bin %109, %69 : i1
    %111 = comb.and bin %3, %71, %82 : i1
    %112 = comb.or bin %111, %reset : i1
    %113 = comb.xor bin %112, %true : i1
    %114 = comb.and bin %109, %113 : i1
    %115 = comb.and bin %109, %88 : i1
    %116 = comb.and bin %109, %91 : i1
    %117 = comb.and bin %109, %94 : i1
    %118 = comb.and bin %109, %98 : i1
    %119 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %120 = comb.or bin %119, %reset : i1
    %121 = comb.xor bin %120, %true : i1
    %122 = comb.and bin %109, %121 : i1
    %123 = comb.and bin %109, %102 : i1
    %124 = comb.and bin %109, %106 : i1
    %125 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %126 = comb.and bin %io_in_a_valid, %125 : i1
    %127 = comb.or bin %3, %4, %5 : i1
    %128 = comb.and bin %58, %127 : i1
    %129 = comb.or bin %128, %reset : i1
    %130 = comb.xor bin %129, %true : i1
    %131 = comb.and bin %126, %130 : i1
    %132 = comb.and bin %58, %75 : i1
    %133 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %134 = comb.or bin %73, %77, %79, %80 : i1
    %135 = comb.and bin %133, %134 : i1
    %136 = comb.or bin %132, %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %138 = comb.and bin %126, %137 : i1
    %139 = comb.and bin %126, %88 : i1
    %140 = comb.and bin %126, %94 : i1
    %141 = comb.xor bin %119, %true : i1
    %142 = comb.or bin %141, %reset : i1
    %143 = comb.xor bin %142, %true : i1
    %144 = comb.and bin %126, %143 : i1
    %145 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %146 = comb.or bin %145, %reset : i1
    %147 = comb.xor bin %146, %true : i1
    %148 = comb.and bin %126, %147 : i1
    %149 = comb.and bin %126, %106 : i1
    %150 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %151 = comb.and bin %io_in_a_valid, %150 : i1
    %152 = comb.or bin %73, %79, %80 : i1
    %153 = comb.and bin %133, %152 : i1
    %154 = comb.or bin %132, %153 : i1
    %155 = comb.and bin %128, %154 : i1
    %156 = comb.or bin %155, %reset : i1
    %157 = comb.xor bin %156, %true : i1
    %158 = comb.and bin %151, %157 : i1
    %159 = comb.and bin %151, %88 : i1
    %160 = comb.and bin %151, %94 : i1
    %161 = comb.and bin %151, %143 : i1
    %162 = comb.and bin %151, %147 : i1
    %163 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %164 = comb.and bin %io_in_a_valid, %163 : i1
    %165 = comb.and bin %164, %157 : i1
    %166 = comb.and bin %164, %88 : i1
    %167 = comb.and bin %164, %94 : i1
    %168 = comb.and bin %164, %143 : i1
    %169 = comb.xor bin %55, %c-1_i8 : i8
    %170 = comb.and bin %io_in_a_bits_mask, %169 : i8
    %171 = comb.icmp bin eq %170, %c0_i8 : i8
    %172 = comb.or bin %171, %reset : i1
    %173 = comb.xor bin %172, %true : i1
    %174 = comb.and bin %164, %173 : i1
    %175 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %176 = comb.and bin %io_in_a_valid, %175 : i1
    %177 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %178 = comb.and bin %128, %177, %75 : i1
    %179 = comb.or bin %178, %reset : i1
    %180 = comb.xor bin %179, %true : i1
    %181 = comb.and bin %176, %180 : i1
    %182 = comb.and bin %176, %88 : i1
    %183 = comb.and bin %176, %94 : i1
    %184 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %185 = comb.or bin %184, %reset : i1
    %186 = comb.xor bin %185, %true : i1
    %187 = comb.and bin %176, %186 : i1
    %188 = comb.and bin %176, %147 : i1
    %189 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %190 = comb.and bin %io_in_a_valid, %189 : i1
    %191 = comb.and bin %190, %180 : i1
    %192 = comb.and bin %190, %88 : i1
    %193 = comb.and bin %190, %94 : i1
    %194 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.or bin %195, %reset : i1
    %197 = comb.xor bin %196, %true : i1
    %198 = comb.and bin %190, %197 : i1
    %199 = comb.and bin %190, %147 : i1
    %200 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %201 = comb.and bin %io_in_a_valid, %200 : i1
    %202 = comb.and bin %128, %132 : i1
    %203 = comb.or bin %202, %reset : i1
    %204 = comb.xor bin %203, %true : i1
    %205 = comb.and bin %201, %204 : i1
    %206 = comb.and bin %201, %88 : i1
    %207 = comb.and bin %201, %94 : i1
    %208 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %209 = comb.or bin %208, %reset : i1
    %210 = comb.xor bin %209, %true : i1
    %211 = comb.and bin %201, %210 : i1
    %212 = comb.and bin %201, %147 : i1
    %213 = comb.and bin %201, %106 : i1
    %214 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %215 = comb.or bin %214, %reset : i1
    %216 = comb.xor bin %215, %true : i1
    %217 = comb.and bin %io_in_d_valid, %216 : i1
    %218 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %219 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %220 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %221 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %222 = comb.and bin %io_in_d_valid, %221 : i1
    %223 = comb.or bin %218, %219, %220, %reset : i1
    %224 = comb.xor bin %223, %true : i1
    %225 = comb.and bin %222, %224 : i1
    %226 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %227 = comb.or bin %226, %reset : i1
    %228 = comb.xor bin %227, %true : i1
    %229 = comb.and bin %222, %228 : i1
    %230 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %231 = comb.or bin %230, %reset : i1
    %232 = comb.xor bin %231, %true : i1
    %233 = comb.and bin %222, %232 : i1
    %234 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %235 = comb.or bin %234, %reset : i1
    %236 = comb.xor bin %235, %true : i1
    %237 = comb.and bin %222, %236 : i1
    %238 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %239 = comb.or bin %238, %reset : i1
    %240 = comb.xor bin %239, %true : i1
    %241 = comb.and bin %222, %240 : i1
    %242 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %243 = comb.and bin %io_in_d_valid, %242 : i1
    %244 = comb.and bin %243, %224 : i1
    %245 = comb.and bin %243, %69 : i1
    %246 = comb.and bin %243, %228 : i1
    %247 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %248 = comb.or bin %247, %reset : i1
    %249 = comb.xor bin %248, %true : i1
    %250 = comb.and bin %243, %249 : i1
    %251 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %252 = comb.or bin %251, %reset : i1
    %253 = comb.xor bin %252, %true : i1
    %254 = comb.and bin %243, %253 : i1
    %255 = comb.and bin %243, %236 : i1
    %256 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %257 = comb.and bin %io_in_d_valid, %256 : i1
    %258 = comb.and bin %257, %224 : i1
    %259 = comb.and bin %257, %69 : i1
    %260 = comb.and bin %257, %228 : i1
    %261 = comb.and bin %257, %249 : i1
    %262 = comb.and bin %257, %253 : i1
    %263 = comb.or bin %238, %io_in_d_bits_corrupt, %reset : i1
    %264 = comb.xor bin %263, %true : i1
    %265 = comb.and bin %257, %264 : i1
    %266 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %267 = comb.and bin %io_in_d_valid, %266 : i1
    %268 = comb.and bin %267, %224 : i1
    %269 = comb.and bin %267, %232 : i1
    %270 = comb.and bin %267, %236 : i1
    %271 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %272 = comb.and bin %io_in_d_valid, %271 : i1
    %273 = comb.and bin %272, %224 : i1
    %274 = comb.and bin %272, %232 : i1
    %275 = comb.and bin %272, %264 : i1
    %276 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %277 = comb.and bin %io_in_d_valid, %276 : i1
    %278 = comb.and bin %277, %224 : i1
    %279 = comb.and bin %277, %232 : i1
    %280 = comb.and bin %277, %236 : i1
    %281 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %282 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %283 = comb.extract %282 from 3 : (i27) -> i9
    %284 = comb.xor %283, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %285 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %286 = comb.mux bin %285, %c0_i9, %284 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %291 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %287 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %288 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %289 = comb.xor bin %288, %true {sv.namehint = "a_first"} : i1
    %290 = comb.mux bin %288, %287, %286 {sv.namehint = "_a_first_counter_T"} : i9
    %291 = comb.mux bin %281, %290, %a_first_counter : i9
    %opcode = seq.firreg %314 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %315 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %316 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %317 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %318 clock %clock {firrtl.random_init_start = 21 : ui64} : i28
    %292 = comb.and bin %io_in_a_valid, %288 : i1
    %293 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %294 = comb.or bin %293, %reset : i1
    %295 = comb.xor bin %294, %true : i1
    %296 = comb.and bin %292, %295 : i1
    %297 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %298 = comb.or bin %297, %reset : i1
    %299 = comb.xor bin %298, %true : i1
    %300 = comb.and bin %292, %299 : i1
    %301 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %302 = comb.or bin %301, %reset : i1
    %303 = comb.xor bin %302, %true : i1
    %304 = comb.and bin %292, %303 : i1
    %305 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %306 = comb.or bin %305, %reset : i1
    %307 = comb.xor bin %306, %true : i1
    %308 = comb.and bin %292, %307 : i1
    %309 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %310 = comb.or bin %309, %reset : i1
    %311 = comb.xor bin %310, %true : i1
    %312 = comb.and bin %292, %311 : i1
    %313 = comb.and bin %281, %289 : i1
    %314 = comb.mux bin %313, %io_in_a_bits_opcode, %opcode : i3
    %315 = comb.mux bin %313, %io_in_a_bits_param, %param : i3
    %316 = comb.mux bin %313, %io_in_a_bits_size, %size : i4
    %317 = comb.mux bin %313, %io_in_a_bits_source, %source : i2
    %318 = comb.mux bin %313, %io_in_a_bits_address, %address : i28
    %319 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %320 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %321 = comb.shl bin %c4095_i27, %320 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %322 = comb.extract %321 from 3 : (i27) -> i9
    %323 = comb.xor %322, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %324 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %325 = comb.mux bin %324, %323, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %330 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 49 : ui64} : i9
    %326 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %327 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %328 = comb.xor bin %327, %true {sv.namehint = "d_first"} : i1
    %329 = comb.mux bin %327, %326, %325 {sv.namehint = "_d_first_counter_T"} : i9
    %330 = comb.mux bin %319, %329, %d_first_counter : i9
    %opcode_1 = seq.firreg %357 clock %clock {firrtl.random_init_start = 58 : ui64} : i3
    %param_1 = seq.firreg %358 clock %clock {firrtl.random_init_start = 61 : ui64} : i2
    %size_1 = seq.firreg %359 clock %clock {firrtl.random_init_start = 63 : ui64} : i4
    %source_1 = seq.firreg %360 clock %clock {firrtl.random_init_start = 67 : ui64} : i2
    %sink = seq.firreg %361 clock %clock {firrtl.random_init_start = 69 : ui64} : i1
    %denied = seq.firreg %362 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %331 = comb.and bin %io_in_d_valid, %327 : i1
    %332 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %333 = comb.or bin %332, %reset : i1
    %334 = comb.xor bin %333, %true : i1
    %335 = comb.and bin %331, %334 : i1
    %336 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %337 = comb.or bin %336, %reset : i1
    %338 = comb.xor bin %337, %true : i1
    %339 = comb.and bin %331, %338 : i1
    %340 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %341 = comb.or bin %340, %reset : i1
    %342 = comb.xor bin %341, %true : i1
    %343 = comb.and bin %331, %342 : i1
    %344 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %345 = comb.or bin %344, %reset : i1
    %346 = comb.xor bin %345, %true : i1
    %347 = comb.and bin %331, %346 : i1
    %348 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %349 = comb.or bin %348, %reset : i1
    %350 = comb.xor bin %349, %true : i1
    %351 = comb.and bin %331, %350 : i1
    %352 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %353 = comb.or bin %352, %reset : i1
    %354 = comb.xor bin %353, %true : i1
    %355 = comb.and bin %331, %354 : i1
    %356 = comb.and bin %319, %328 : i1
    %357 = comb.mux bin %356, %io_in_d_bits_opcode, %opcode_1 : i3
    %358 = comb.mux bin %356, %io_in_d_bits_param, %param_1 : i2
    %359 = comb.mux bin %356, %io_in_d_bits_size, %size_1 : i4
    %360 = comb.mux bin %356, %io_in_d_bits_source, %source_1 : i2
    %361 = comb.mux bin %356, %io_in_d_bits_sink, %sink : i1
    %362 = comb.mux bin %356, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %485 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %inflight_opcodes = seq.firreg %488 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 74 : ui64} : i12
    %inflight_sizes = seq.firreg %491 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 86 : ui64} : i24
    %363 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %364 = comb.extract %363 from 3 : (i27) -> i9
    %365 = comb.xor %364, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %366 = comb.mux bin %285, %c0_i9, %365 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %370 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %367 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %368 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %369 = comb.mux bin %368, %366, %367 {sv.namehint = "_a_first_counter_T_1"} : i9
    %370 = comb.mux bin %281, %369, %a_first_counter_1 : i9
    %371 = comb.shl bin %c4095_i27, %320 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %372 = comb.extract %371 from 3 : (i27) -> i9
    %373 = comb.xor %372, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %374 = comb.mux bin %324, %373, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %378 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 119 : ui64} : i9
    %375 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %376 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %377 = comb.mux bin %376, %374, %375 {sv.namehint = "_d_first_counter_T_1"} : i9
    %378 = comb.mux bin %319, %377, %d_first_counter_1 : i9
    %379 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %380 = comb.shru bin %inflight_opcodes, %379 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %381 = comb.extract %380 from 1 : (i12) -> i3
    %382 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %383 = comb.shru bin %inflight_sizes, %382 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %384 = comb.extract %383 from 1 : (i24) -> i7
    %385 = comb.concat %false, %384 {sv.namehint = "a_size_lookup"} : i1, i7
    %386 = comb.and bin %io_in_a_valid, %368 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %387 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %388 = comb.shl bin %c1_i4, %387 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %389 = comb.extract %388 from 0 : (i4) -> i3
    %390 = comb.mux bin %386, %389, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %391 = comb.and bin %281, %368 : i1
    %392 = comb.shl bin %c1_i4, %387 {sv.namehint = "_a_set_T"} : i4
    %393 = comb.extract %392 from 0 : (i4) -> i3
    %394 = comb.mux bin %391, %393, %c0_i3 {sv.namehint = "a_set"} : i3
    %395 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %396 = comb.mux bin %391, %395, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %397 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %398 = comb.mux bin %391, %397, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %399 = comb.concat %c0_i31, %396 : i31, i4
    %400 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %401 = comb.shl bin %399, %400 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %402 = comb.extract %401 from 0 : (i35) -> i12
    %403 = comb.mux bin %391, %402, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %404 = comb.concat %c0_i31, %398 : i31, i5
    %405 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %406 = comb.shl bin %404, %405 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %407 = comb.extract %406 from 0 : (i36) -> i24
    %408 = comb.mux bin %391, %407, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %409 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %410 = comb.shru bin %inflight, %409 : i3
    %411 = comb.extract %410 from 0 : (i3) -> i1
    %412 = comb.xor bin %411, %true : i1
    %413 = comb.or bin %412, %reset : i1
    %414 = comb.xor bin %413, %true : i1
    %415 = comb.and bin %391, %414 : i1
    %416 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %417 = comb.and bin %io_in_d_valid, %376 : i1
    %418 = comb.xor bin %416, %true : i1
    %419 = comb.and bin %417, %418 : i1
    %420 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %421 = comb.shl bin %c1_i4, %420 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %422 = comb.extract %421 from 0 : (i4) -> i3
    %423 = comb.mux bin %419, %422, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %424 = comb.and bin %319, %376, %418 : i1
    %425 = comb.shl bin %c1_i4, %420 {sv.namehint = "_d_clr_T"} : i4
    %426 = comb.extract %425 from 0 : (i4) -> i3
    %427 = comb.mux bin %424, %426, %c0_i3 {sv.namehint = "d_clr"} : i3
    %428 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %429 = comb.shl bin %c15_i47, %428 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %430 = comb.extract %429 from 0 : (i47) -> i12
    %431 = comb.mux bin %424, %430, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %432 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %433 = comb.shl bin %c255_i47, %432 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %434 = comb.extract %433 from 0 : (i47) -> i24
    %435 = comb.mux bin %424, %434, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %436 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %437 = comb.and bin %386, %436 {sv.namehint = "same_cycle_resp"} : i1
    %438 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %439 = comb.shru bin %inflight, %438 : i3
    %440 = comb.extract %439 from 0 : (i3) -> i1
    %441 = comb.or bin %440, %437, %reset : i1
    %442 = comb.xor bin %441, %true : i1
    %443 = comb.and bin %419, %442 : i1
    %444 = comb.and bin %419, %437 : i1
    %445 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %446 = comb.icmp bin eq %io_in_d_bits_opcode, %445 : i3
    %447 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %448 = comb.icmp bin eq %io_in_d_bits_opcode, %447 : i3
    %449 = comb.or bin %446, %448, %reset : i1
    %450 = comb.xor bin %449, %true : i1
    %451 = comb.and bin %444, %450 : i1
    %452 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %453 = comb.or bin %452, %reset : i1
    %454 = comb.xor bin %453, %true : i1
    %455 = comb.and bin %444, %454 : i1
    %456 = comb.xor bin %437, %true : i1
    %457 = comb.and bin %419, %456 : i1
    %458 = hw.array_get %1[%381] : !hw.array<8xi3>, i3
    %459 = comb.icmp bin eq %io_in_d_bits_opcode, %458 : i3
    %460 = hw.array_get %0[%381] : !hw.array<8xi3>, i3
    %461 = comb.icmp bin eq %io_in_d_bits_opcode, %460 : i3
    %462 = comb.or bin %459, %461, %reset : i1
    %463 = comb.xor bin %462, %true : i1
    %464 = comb.and bin %457, %463 : i1
    %465 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %466 = comb.icmp bin eq %465, %385 : i8
    %467 = comb.or bin %466, %reset : i1
    %468 = comb.xor bin %467, %true : i1
    %469 = comb.and bin %457, %468 : i1
    %470 = comb.and bin %417, %368 : i1
    %471 = comb.and bin %470, %io_in_a_valid : i1
    %472 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %473 = comb.and bin %471, %472 : i1
    %474 = comb.and bin %473, %418 : i1
    %475 = comb.xor bin %io_in_d_ready, %true : i1
    %476 = comb.or bin %475, %io_in_a_ready, %reset : i1
    %477 = comb.xor bin %476, %true : i1
    %478 = comb.and bin %474, %477 : i1
    %479 = comb.icmp bin ne %390, %423 : i3
    %480 = comb.icmp bin eq %390, %c0_i3 : i3
    %481 = comb.or bin %479, %480, %reset : i1
    %482 = comb.xor bin %481, %true : i1
    %483 = comb.or bin %inflight, %394 {sv.namehint = "_inflight_T"} : i3
    %484 = comb.xor bin %427, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %485 = comb.and bin %483, %484 {sv.namehint = "_inflight_T_2"} : i3
    %486 = comb.or bin %inflight_opcodes, %403 {sv.namehint = "_inflight_opcodes_T"} : i12
    %487 = comb.xor bin %431, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %488 = comb.and bin %486, %487 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %489 = comb.or bin %inflight_sizes, %408 {sv.namehint = "_inflight_sizes_T"} : i24
    %490 = comb.xor bin %435, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %491 = comb.and bin %489, %490 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %499 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 128 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %492 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %493 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %494 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %495 = comb.or bin %492, %493, %494, %reset : i1
    %496 = comb.xor bin %495, %true : i1
    %497 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %498 = comb.or bin %281, %319 : i1
    %499 = comb.mux bin %498, %c0_i32, %497 : i32
    %inflight_1 = seq.firreg %529 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 160 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %531 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 175 : ui64} : i24
    %500 = comb.shl bin %c4095_i27, %320 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %501 = comb.extract %500 from 3 : (i27) -> i9
    %502 = comb.xor %501, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %503 = comb.mux bin %324, %502, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %507 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 208 : ui64} : i9
    %504 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %505 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %506 = comb.mux bin %505, %503, %504 {sv.namehint = "_d_first_counter_T_2"} : i9
    %507 = comb.mux bin %319, %506, %d_first_counter_2 : i9
    %508 = comb.shru bin %inflight_sizes_1, %382 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %509 = comb.extract %508 from 1 : (i24) -> i7
    %510 = comb.concat %false, %509 {sv.namehint = "c_size_lookup"} : i1, i7
    %511 = comb.and bin %319, %505, %416 : i1
    %512 = comb.shl bin %c1_i4, %420 {sv.namehint = "_d_clr_T_1"} : i4
    %513 = comb.extract %512 from 0 : (i4) -> i3
    %514 = comb.mux bin %511, %513, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %515 = comb.shl bin %c255_i47, %432 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %516 = comb.extract %515 from 0 : (i47) -> i24
    %517 = comb.mux bin %511, %516, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %518 = comb.and bin %io_in_d_valid, %505, %416 : i1
    %519 = comb.shru bin %inflight_1, %438 : i3
    %520 = comb.extract %519 from 0 : (i3) -> i1
    %521 = comb.or bin %520, %reset : i1
    %522 = comb.xor bin %521, %true : i1
    %523 = comb.and bin %518, %522 : i1
    %524 = comb.icmp bin eq %465, %510 : i8
    %525 = comb.or bin %524, %reset : i1
    %526 = comb.xor bin %525, %true : i1
    %527 = comb.and bin %518, %526 : i1
    %528 = comb.xor bin %514, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %529 = comb.and bin %inflight_1, %528 {sv.namehint = "_inflight_T_5"} : i3
    %530 = comb.xor bin %517, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %531 = comb.and bin %inflight_sizes_1, %530 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %538 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 217 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %532 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %533 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %534 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %535 = comb.or bin %532, %533, %534, %reset : i1
    %536 = comb.xor bin %535, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %539 = comb.and bin %STOP_COND_, %false : i1
        sv.if %539 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %540 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %540 {
          sv.fatal 1
        }
        %541 = comb.and bin %STOP_COND_, %86 : i1
        sv.if %541 {
          sv.fatal 1
        }
        %542 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %542 {
          sv.fatal 1
        }
        %543 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %543 {
          sv.fatal 1
        }
        %544 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %544 {
          sv.fatal 1
        }
        %545 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %545 {
          sv.fatal 1
        }
        %546 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %546 {
          sv.fatal 1
        }
        %547 = comb.and bin %STOP_COND_, %107 : i1
        sv.if %547 {
          sv.fatal 1
        }
        %548 = comb.and bin %STOP_COND_, %110 : i1
        sv.if %548 {
          sv.fatal 1
        }
        %549 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %549 {
          sv.fatal 1
        }
        %550 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %550 {
          sv.fatal 1
        }
        %551 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %551 {
          sv.fatal 1
        }
        %552 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %552 {
          sv.fatal 1
        }
        %553 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %553 {
          sv.fatal 1
        }
        %554 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %554 {
          sv.fatal 1
        }
        %555 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %555 {
          sv.fatal 1
        }
        %556 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %556 {
          sv.fatal 1
        }
        %557 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %557 {
          sv.fatal 1
        }
        %558 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %558 {
          sv.fatal 1
        }
        %559 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %559 {
          sv.fatal 1
        }
        %560 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %560 {
          sv.fatal 1
        }
        %561 = comb.and bin %STOP_COND_, %144 : i1
        sv.if %561 {
          sv.fatal 1
        }
        %562 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %562 {
          sv.fatal 1
        }
        %563 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %563 {
          sv.fatal 1
        }
        %564 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %564 {
          sv.fatal 1
        }
        %565 = comb.and bin %STOP_COND_, %159 : i1
        sv.if %565 {
          sv.fatal 1
        }
        %566 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %566 {
          sv.fatal 1
        }
        %567 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %567 {
          sv.fatal 1
        }
        %568 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %568 {
          sv.fatal 1
        }
        %569 = comb.and bin %STOP_COND_, %165 : i1
        sv.if %569 {
          sv.fatal 1
        }
        %570 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %570 {
          sv.fatal 1
        }
        %571 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %571 {
          sv.fatal 1
        }
        %572 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %572 {
          sv.fatal 1
        }
        %573 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %573 {
          sv.fatal 1
        }
        %574 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %574 {
          sv.fatal 1
        }
        %575 = comb.and bin %STOP_COND_, %182 : i1
        sv.if %575 {
          sv.fatal 1
        }
        %576 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %576 {
          sv.fatal 1
        }
        %577 = comb.and bin %STOP_COND_, %187 : i1
        sv.if %577 {
          sv.fatal 1
        }
        %578 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %578 {
          sv.fatal 1
        }
        %579 = comb.and bin %STOP_COND_, %191 : i1
        sv.if %579 {
          sv.fatal 1
        }
        %580 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %580 {
          sv.fatal 1
        }
        %581 = comb.and bin %STOP_COND_, %193 : i1
        sv.if %581 {
          sv.fatal 1
        }
        %582 = comb.and bin %STOP_COND_, %198 : i1
        sv.if %582 {
          sv.fatal 1
        }
        %583 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %583 {
          sv.fatal 1
        }
        %584 = comb.and bin %STOP_COND_, %205 : i1
        sv.if %584 {
          sv.fatal 1
        }
        %585 = comb.and bin %STOP_COND_, %206 : i1
        sv.if %585 {
          sv.fatal 1
        }
        %586 = comb.and bin %STOP_COND_, %207 : i1
        sv.if %586 {
          sv.fatal 1
        }
        %587 = comb.and bin %STOP_COND_, %211 : i1
        sv.if %587 {
          sv.fatal 1
        }
        %588 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %588 {
          sv.fatal 1
        }
        %589 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %589 {
          sv.fatal 1
        }
        %590 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %590 {
          sv.fatal 1
        }
        %591 = comb.and bin %STOP_COND_, %225 : i1
        sv.if %591 {
          sv.fatal 1
        }
        %592 = comb.and bin %STOP_COND_, %229 : i1
        sv.if %592 {
          sv.fatal 1
        }
        %593 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %593 {
          sv.fatal 1
        }
        %594 = comb.and bin %STOP_COND_, %237 : i1
        sv.if %594 {
          sv.fatal 1
        }
        %595 = comb.and bin %STOP_COND_, %241 : i1
        sv.if %595 {
          sv.fatal 1
        }
        %596 = comb.and bin %STOP_COND_, %244 : i1
        sv.if %596 {
          sv.fatal 1
        }
        %597 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %597 {
          sv.fatal 1
        }
        %598 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %598 {
          sv.fatal 1
        }
        %599 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %599 {
          sv.fatal 1
        }
        %600 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %600 {
          sv.fatal 1
        }
        %601 = comb.and bin %STOP_COND_, %255 : i1
        sv.if %601 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %602 = comb.and bin %STOP_COND_, %258 : i1
        sv.if %602 {
          sv.fatal 1
        }
        %603 = comb.and bin %STOP_COND_, %259 : i1
        sv.if %603 {
          sv.fatal 1
        }
        %604 = comb.and bin %STOP_COND_, %260 : i1
        sv.if %604 {
          sv.fatal 1
        }
        %605 = comb.and bin %STOP_COND_, %261 : i1
        sv.if %605 {
          sv.fatal 1
        }
        %606 = comb.and bin %STOP_COND_, %262 : i1
        sv.if %606 {
          sv.fatal 1
        }
        %607 = comb.and bin %STOP_COND_, %265 : i1
        sv.if %607 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %608 = comb.and bin %STOP_COND_, %268 : i1
        sv.if %608 {
          sv.fatal 1
        }
        %609 = comb.and bin %STOP_COND_, %269 : i1
        sv.if %609 {
          sv.fatal 1
        }
        %610 = comb.and bin %STOP_COND_, %270 : i1
        sv.if %610 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %611 = comb.and bin %STOP_COND_, %273 : i1
        sv.if %611 {
          sv.fatal 1
        }
        %612 = comb.and bin %STOP_COND_, %274 : i1
        sv.if %612 {
          sv.fatal 1
        }
        %613 = comb.and bin %STOP_COND_, %275 : i1
        sv.if %613 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %614 = comb.and bin %STOP_COND_, %278 : i1
        sv.if %614 {
          sv.fatal 1
        }
        %615 = comb.and bin %STOP_COND_, %279 : i1
        sv.if %615 {
          sv.fatal 1
        }
        %616 = comb.and bin %STOP_COND_, %280 : i1
        sv.if %616 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %617 = comb.and bin %STOP_COND_, %296 : i1
        sv.if %617 {
          sv.fatal 1
        }
        %618 = comb.and bin %STOP_COND_, %300 : i1
        sv.if %618 {
          sv.fatal 1
        }
        %619 = comb.and bin %STOP_COND_, %304 : i1
        sv.if %619 {
          sv.fatal 1
        }
        %620 = comb.and bin %STOP_COND_, %308 : i1
        sv.if %620 {
          sv.fatal 1
        }
        %621 = comb.and bin %STOP_COND_, %312 : i1
        sv.if %621 {
          sv.fatal 1
        }
        %622 = comb.and bin %STOP_COND_, %335 : i1
        sv.if %622 {
          sv.fatal 1
        }
        %623 = comb.and bin %STOP_COND_, %339 : i1
        sv.if %623 {
          sv.fatal 1
        }
        %624 = comb.and bin %STOP_COND_, %343 : i1
        sv.if %624 {
          sv.fatal 1
        }
        %625 = comb.and bin %STOP_COND_, %347 : i1
        sv.if %625 {
          sv.fatal 1
        }
        %626 = comb.and bin %STOP_COND_, %351 : i1
        sv.if %626 {
          sv.fatal 1
        }
        %627 = comb.and bin %STOP_COND_, %355 : i1
        sv.if %627 {
          sv.fatal 1
        }
        %628 = comb.and bin %STOP_COND_, %415 : i1
        sv.if %628 {
          sv.fatal 1
        }
        %629 = comb.and bin %STOP_COND_, %443 : i1
        sv.if %629 {
          sv.fatal 1
        }
        %630 = comb.and bin %STOP_COND_, %451 : i1
        sv.if %630 {
          sv.fatal 1
        }
        %631 = comb.and bin %STOP_COND_, %455 : i1
        sv.if %631 {
          sv.fatal 1
        }
        %632 = comb.and bin %STOP_COND_, %464 : i1
        sv.if %632 {
          sv.fatal 1
        }
        %633 = comb.and bin %STOP_COND_, %469 : i1
        sv.if %633 {
          sv.fatal 1
        }
        %634 = comb.and bin %STOP_COND_, %478 : i1
        sv.if %634 {
          sv.fatal 1
        }
        %635 = comb.and bin %STOP_COND_, %482 : i1
        sv.if %635 {
          sv.fatal 1
        }
        %636 = comb.and bin %STOP_COND_, %496 : i1
        sv.if %636 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %637 = comb.and bin %STOP_COND_, %523 : i1
        sv.if %637 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %638 = comb.and bin %STOP_COND_, %527 : i1
        sv.if %638 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        sv.if %539 {
          sv.fatal 1
        }
        %639 = comb.and bin %STOP_COND_, %536 : i1
        sv.if %639 {
          sv.fatal 1
        }
      }
    }
    %537 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %538 = comb.mux bin %319, %c0_i32, %537 : i32
    hw.output
  }
  hw.module private @Queue_10(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i28, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i28, out io_deq_bits_mask : i8, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 113>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 113>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 113>
    %1 = comb.concat %io_enq_bits_corrupt, %io_enq_bits_data, %io_enq_bits_mask, %io_enq_bits_address, %io_enq_bits_source, %io_enq_bits_size, %io_enq_bits_param, %io_enq_bits_opcode : i1, i64, i8, i28, i2, i4, i3, i3
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i113) -> i3
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i113) -> i3
    %4 = comb.extract %0 from 6 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i113) -> i4
    %5 = comb.extract %0 from 10 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i113) -> i2
    %6 = comb.extract %0 from 12 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i113) -> i28
    %7 = comb.extract %0 from 40 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i113) -> i8
    %8 = comb.extract %0 from 48 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i113) -> i64
    %9 = comb.extract %0 from 112 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i113) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i3, i4, i2, i28, i8, i64, i1
  }
  hw.module private @Queue_11(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i2, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_sink : i1, in %io_enq_bits_denied : i1, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_sink : i1, out io_deq_bits_denied : i1, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 78>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 78>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 78>
    %1 = comb.concat %io_enq_bits_corrupt, %io_enq_bits_data, %io_enq_bits_denied, %io_enq_bits_sink, %io_enq_bits_source, %io_enq_bits_size, %io_enq_bits_param, %io_enq_bits_opcode : i1, i64, i1, i1, i2, i4, i2, i3
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i78) -> i3
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i78) -> i2
    %4 = comb.extract %0 from 5 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i78) -> i4
    %5 = comb.extract %0 from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i78) -> i2
    %6 = comb.extract %0 from 11 {sv.namehint = "ram_io_deq_bits_MPORT_data_sink"} : (i78) -> i1
    %7 = comb.extract %0 from 12 {sv.namehint = "ram_io_deq_bits_MPORT_data_denied"} : (i78) -> i1
    %8 = comb.extract %0 from 13 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i78) -> i64
    %9 = comb.extract %0 from 77 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i78) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1
  }
  hw.module private @TLBuffer_3(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_5(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %bundleOut_0_a_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %bundleIn_0_d_q.io_deq_valid: i1, io_in_d_bits_opcode: %bundleIn_0_d_q.io_deq_bits_opcode: i3, io_in_d_bits_param: %bundleIn_0_d_q.io_deq_bits_param: i2, io_in_d_bits_size: %bundleIn_0_d_q.io_deq_bits_size: i4, io_in_d_bits_source: %bundleIn_0_d_q.io_deq_bits_source: i2, io_in_d_bits_sink: %bundleIn_0_d_q.io_deq_bits_sink: i1, io_in_d_bits_denied: %bundleIn_0_d_q.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %bundleIn_0_d_q.io_deq_bits_corrupt: i1) -> ()
    %bundleOut_0_a_q.io_enq_ready, %bundleOut_0_a_q.io_deq_valid, %bundleOut_0_a_q.io_deq_bits_opcode, %bundleOut_0_a_q.io_deq_bits_param, %bundleOut_0_a_q.io_deq_bits_size, %bundleOut_0_a_q.io_deq_bits_source, %bundleOut_0_a_q.io_deq_bits_address, %bundleOut_0_a_q.io_deq_bits_mask, %bundleOut_0_a_q.io_deq_bits_data, %bundleOut_0_a_q.io_deq_bits_corrupt = hw.instance "bundleOut_0_a_q" @Queue_10(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i28, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i28, io_deq_bits_mask: i8, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "bundleOut_0_a_q.io_deq_valid"}
    %bundleIn_0_d_q.io_enq_ready, %bundleIn_0_d_q.io_deq_valid, %bundleIn_0_d_q.io_deq_bits_opcode, %bundleIn_0_d_q.io_deq_bits_param, %bundleIn_0_d_q.io_deq_bits_size, %bundleIn_0_d_q.io_deq_bits_source, %bundleIn_0_d_q.io_deq_bits_sink, %bundleIn_0_d_q.io_deq_bits_denied, %bundleIn_0_d_q.io_deq_bits_data, %bundleIn_0_d_q.io_deq_bits_corrupt = hw.instance "bundleIn_0_d_q" @Queue_11(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_param: %auto_out_d_bits_param: i2, io_enq_bits_size: %auto_out_d_bits_size: i4, io_enq_bits_source: %auto_out_d_bits_source: i2, io_enq_bits_sink: %auto_out_d_bits_sink: i1, io_enq_bits_denied: %auto_out_d_bits_denied: i1, io_enq_bits_data: %auto_out_d_bits_data: i64, io_enq_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_sink: i1, io_deq_bits_denied: i1, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "bundleIn_0_d_q.io_deq_valid"}
    hw.output %bundleOut_0_a_q.io_enq_ready, %bundleIn_0_d_q.io_deq_valid, %bundleIn_0_d_q.io_deq_bits_opcode, %bundleIn_0_d_q.io_deq_bits_param, %bundleIn_0_d_q.io_deq_bits_size, %bundleIn_0_d_q.io_deq_bits_source, %bundleIn_0_d_q.io_deq_bits_sink, %bundleIn_0_d_q.io_deq_bits_denied, %bundleIn_0_d_q.io_deq_bits_data, %bundleIn_0_d_q.io_deq_bits_corrupt, %bundleOut_0_a_q.io_deq_valid, %bundleOut_0_a_q.io_deq_bits_opcode, %bundleOut_0_a_q.io_deq_bits_param, %bundleOut_0_a_q.io_deq_bits_size, %bundleOut_0_a_q.io_deq_bits_source, %bundleOut_0_a_q.io_deq_bits_address, %bundleOut_0_a_q.io_deq_bits_mask, %bundleOut_0_a_q.io_deq_bits_data, %bundleOut_0_a_q.io_deq_bits_corrupt, %bundleIn_0_d_q.io_enq_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_6(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i2 = hw.constant -1 : i2
    %c4_i4 = hw.constant 4 : i4
    %c7_i4 = hw.constant 7 : i4
    %c0_i16 = hw.constant 0 : i16
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i23 = hw.constant 0 : i23
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %7 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %9 = comb.xor bin %8, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %10 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i12
    %11 = comb.and bin %10, %9 : i12
    %12 = comb.icmp bin eq %11, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %59 = comb.extract %io_in_a_bits_address from 14 : (i28) -> i14
    %60 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i2
    %61 = comb.xor %60, %c-1_i2 : i2
    %62 = comb.extract %io_in_a_bits_address from 17 : (i28) -> i11
    %63 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i1
    %64 = comb.xor %63, %true : i1
    %65 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %66 = comb.extract %io_in_a_bits_address from 16 : (i28) -> i10
    %67 = comb.xor %66, %c-512_i10 : i10
    %68 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %69 = comb.xor bin %reset, %true : i1
    %70 = comb.and bin %57, %69 : i1
    %71 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %72 = comb.extract %io_in_a_bits_address from 12 : (i28) -> i16
    %73 = comb.icmp bin eq %72, %c0_i16 : i16
    %74 = comb.concat %59, %61 : i14, i2
    %75 = comb.icmp bin eq %74, %c0_i16 : i16
    %76 = comb.concat %62, %64 : i11, i1
    %77 = comb.icmp bin eq %76, %c0_i12 : i12
    %78 = comb.concat %65, %67 : i2, i10
    %79 = comb.icmp bin eq %78, %c0_i12 : i12
    %80 = comb.icmp eq %68, %c-1_i2 : i2
    %81 = comb.or bin %73, %75 : i1
    %82 = comb.or bin %81, %77, %79, %80 : i1
    %83 = comb.and bin %58, %82 : i1
    %84 = comb.and bin %3, %71, %83 : i1
    %85 = comb.or bin %84, %reset : i1
    %86 = comb.xor bin %85, %true : i1
    %87 = comb.and bin %57, %86 : i1
    %88 = comb.or bin %3, %4, %5, %reset : i1
    %89 = comb.xor bin %88, %true : i1
    %90 = comb.and bin %57, %89 : i1
    %91 = comb.or bin %14, %reset : i1
    %92 = comb.xor bin %91, %true : i1
    %93 = comb.and bin %57, %92 : i1
    %94 = comb.or bin %12, %reset : i1
    %95 = comb.xor bin %94, %true : i1
    %96 = comb.and bin %57, %95 : i1
    %97 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %98 = comb.or bin %97, %reset : i1
    %99 = comb.xor bin %98, %true : i1
    %100 = comb.and bin %57, %99 : i1
    %101 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %102 = comb.or bin %101, %reset : i1
    %103 = comb.xor bin %102, %true : i1
    %104 = comb.and bin %57, %103 : i1
    %105 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %106 = comb.or bin %105, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %57, %107 : i1
    %109 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %110 = comb.and bin %io_in_a_valid, %109 : i1
    %111 = comb.and bin %110, %69 : i1
    %112 = comb.and bin %3, %71, %83 : i1
    %113 = comb.or bin %112, %reset : i1
    %114 = comb.xor bin %113, %true : i1
    %115 = comb.and bin %110, %114 : i1
    %116 = comb.and bin %110, %89 : i1
    %117 = comb.and bin %110, %92 : i1
    %118 = comb.and bin %110, %95 : i1
    %119 = comb.and bin %110, %99 : i1
    %120 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %121 = comb.or bin %120, %reset : i1
    %122 = comb.xor bin %121, %true : i1
    %123 = comb.and bin %110, %122 : i1
    %124 = comb.and bin %110, %103 : i1
    %125 = comb.and bin %110, %107 : i1
    %126 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %127 = comb.and bin %io_in_a_valid, %126 : i1
    %128 = comb.or bin %3, %4, %5 : i1
    %129 = comb.and bin %58, %128 : i1
    %130 = comb.or bin %129, %reset : i1
    %131 = comb.xor bin %130, %true : i1
    %132 = comb.and bin %127, %131 : i1
    %133 = comb.and bin %58, %75 : i1
    %134 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %135 = comb.or bin %73, %77, %79, %80 : i1
    %136 = comb.and bin %134, %135 : i1
    %137 = comb.or bin %133, %136, %reset : i1
    %138 = comb.xor bin %137, %true : i1
    %139 = comb.and bin %127, %138 : i1
    %140 = comb.and bin %127, %89 : i1
    %141 = comb.and bin %127, %95 : i1
    %142 = comb.xor bin %120, %true : i1
    %143 = comb.or bin %142, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.and bin %127, %144 : i1
    %146 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %147 = comb.or bin %146, %reset : i1
    %148 = comb.xor bin %147, %true : i1
    %149 = comb.and bin %127, %148 : i1
    %150 = comb.and bin %127, %107 : i1
    %151 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %152 = comb.and bin %io_in_a_valid, %151 : i1
    %153 = comb.or bin %73, %79, %80 : i1
    %154 = comb.and bin %134, %153 : i1
    %155 = comb.or bin %133, %154 : i1
    %156 = comb.and bin %129, %155 : i1
    %157 = comb.or bin %156, %reset : i1
    %158 = comb.xor bin %157, %true : i1
    %159 = comb.and bin %152, %158 : i1
    %160 = comb.and bin %152, %89 : i1
    %161 = comb.and bin %152, %95 : i1
    %162 = comb.and bin %152, %144 : i1
    %163 = comb.and bin %152, %148 : i1
    %164 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %165 = comb.and bin %io_in_a_valid, %164 : i1
    %166 = comb.and bin %165, %158 : i1
    %167 = comb.and bin %165, %89 : i1
    %168 = comb.and bin %165, %95 : i1
    %169 = comb.and bin %165, %144 : i1
    %170 = comb.xor bin %55, %c-1_i8 : i8
    %171 = comb.and bin %io_in_a_bits_mask, %170 : i8
    %172 = comb.icmp bin eq %171, %c0_i8 : i8
    %173 = comb.or bin %172, %reset : i1
    %174 = comb.xor bin %173, %true : i1
    %175 = comb.and bin %165, %174 : i1
    %176 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %177 = comb.and bin %io_in_a_valid, %176 : i1
    %178 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %179 = comb.or bin %81, %79, %80 : i1
    %180 = comb.and bin %129, %178, %179 : i1
    %181 = comb.or bin %180, %reset : i1
    %182 = comb.xor bin %181, %true : i1
    %183 = comb.and bin %177, %182 : i1
    %184 = comb.and bin %177, %89 : i1
    %185 = comb.and bin %177, %95 : i1
    %186 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %187 = comb.or bin %186, %reset : i1
    %188 = comb.xor bin %187, %true : i1
    %189 = comb.and bin %177, %188 : i1
    %190 = comb.and bin %177, %148 : i1
    %191 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %192 = comb.and bin %io_in_a_valid, %191 : i1
    %193 = comb.and bin %192, %182 : i1
    %194 = comb.and bin %192, %89 : i1
    %195 = comb.and bin %192, %95 : i1
    %196 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %197 = comb.xor bin %196, %true : i1
    %198 = comb.or bin %197, %reset : i1
    %199 = comb.xor bin %198, %true : i1
    %200 = comb.and bin %192, %199 : i1
    %201 = comb.and bin %192, %148 : i1
    %202 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %203 = comb.and bin %io_in_a_valid, %202 : i1
    %204 = comb.and bin %129, %133 : i1
    %205 = comb.or bin %204, %reset : i1
    %206 = comb.xor bin %205, %true : i1
    %207 = comb.and bin %203, %206 : i1
    %208 = comb.and bin %203, %89 : i1
    %209 = comb.and bin %203, %95 : i1
    %210 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %211 = comb.or bin %210, %reset : i1
    %212 = comb.xor bin %211, %true : i1
    %213 = comb.and bin %203, %212 : i1
    %214 = comb.and bin %203, %148 : i1
    %215 = comb.and bin %203, %107 : i1
    %216 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %217 = comb.or bin %216, %reset : i1
    %218 = comb.xor bin %217, %true : i1
    %219 = comb.and bin %io_in_d_valid, %218 : i1
    %220 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %221 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %222 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %223 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %224 = comb.and bin %io_in_d_valid, %223 : i1
    %225 = comb.or bin %220, %221, %222, %reset : i1
    %226 = comb.xor bin %225, %true : i1
    %227 = comb.and bin %224, %226 : i1
    %228 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %229 = comb.or bin %228, %reset : i1
    %230 = comb.xor bin %229, %true : i1
    %231 = comb.and bin %224, %230 : i1
    %232 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %233 = comb.or bin %232, %reset : i1
    %234 = comb.xor bin %233, %true : i1
    %235 = comb.and bin %224, %234 : i1
    %236 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %237 = comb.or bin %236, %reset : i1
    %238 = comb.xor bin %237, %true : i1
    %239 = comb.and bin %224, %238 : i1
    %240 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %241 = comb.or bin %240, %reset : i1
    %242 = comb.xor bin %241, %true : i1
    %243 = comb.and bin %224, %242 : i1
    %244 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %245 = comb.and bin %io_in_d_valid, %244 : i1
    %246 = comb.and bin %245, %226 : i1
    %247 = comb.and bin %245, %69 : i1
    %248 = comb.and bin %245, %230 : i1
    %249 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %250 = comb.or bin %249, %reset : i1
    %251 = comb.xor bin %250, %true : i1
    %252 = comb.and bin %245, %251 : i1
    %253 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %254 = comb.or bin %253, %reset : i1
    %255 = comb.xor bin %254, %true : i1
    %256 = comb.and bin %245, %255 : i1
    %257 = comb.and bin %245, %238 : i1
    %258 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %259 = comb.and bin %io_in_d_valid, %258 : i1
    %260 = comb.and bin %259, %226 : i1
    %261 = comb.and bin %259, %69 : i1
    %262 = comb.and bin %259, %230 : i1
    %263 = comb.and bin %259, %251 : i1
    %264 = comb.and bin %259, %255 : i1
    %265 = comb.or bin %240, %io_in_d_bits_corrupt, %reset : i1
    %266 = comb.xor bin %265, %true : i1
    %267 = comb.and bin %259, %266 : i1
    %268 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %269 = comb.and bin %io_in_d_valid, %268 : i1
    %270 = comb.and bin %269, %226 : i1
    %271 = comb.and bin %269, %234 : i1
    %272 = comb.and bin %269, %238 : i1
    %273 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %274 = comb.and bin %io_in_d_valid, %273 : i1
    %275 = comb.and bin %274, %226 : i1
    %276 = comb.and bin %274, %234 : i1
    %277 = comb.and bin %274, %266 : i1
    %278 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %279 = comb.and bin %io_in_d_valid, %278 : i1
    %280 = comb.and bin %279, %226 : i1
    %281 = comb.and bin %279, %234 : i1
    %282 = comb.and bin %279, %238 : i1
    %283 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %284 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %285 = comb.extract %284 from 3 : (i27) -> i9
    %286 = comb.xor %285, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %287 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %288 = comb.mux bin %287, %c0_i9, %286 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %293 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %289 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %290 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %291 = comb.xor bin %290, %true {sv.namehint = "a_first"} : i1
    %292 = comb.mux bin %290, %289, %288 {sv.namehint = "_a_first_counter_T"} : i9
    %293 = comb.mux bin %283, %292, %a_first_counter : i9
    %opcode = seq.firreg %316 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %317 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %318 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %319 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %320 clock %clock {firrtl.random_init_start = 21 : ui64} : i28
    %294 = comb.and bin %io_in_a_valid, %290 : i1
    %295 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %296 = comb.or bin %295, %reset : i1
    %297 = comb.xor bin %296, %true : i1
    %298 = comb.and bin %294, %297 : i1
    %299 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %300 = comb.or bin %299, %reset : i1
    %301 = comb.xor bin %300, %true : i1
    %302 = comb.and bin %294, %301 : i1
    %303 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %304 = comb.or bin %303, %reset : i1
    %305 = comb.xor bin %304, %true : i1
    %306 = comb.and bin %294, %305 : i1
    %307 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %308 = comb.or bin %307, %reset : i1
    %309 = comb.xor bin %308, %true : i1
    %310 = comb.and bin %294, %309 : i1
    %311 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %312 = comb.or bin %311, %reset : i1
    %313 = comb.xor bin %312, %true : i1
    %314 = comb.and bin %294, %313 : i1
    %315 = comb.and bin %283, %291 : i1
    %316 = comb.mux bin %315, %io_in_a_bits_opcode, %opcode : i3
    %317 = comb.mux bin %315, %io_in_a_bits_param, %param : i3
    %318 = comb.mux bin %315, %io_in_a_bits_size, %size : i4
    %319 = comb.mux bin %315, %io_in_a_bits_source, %source : i2
    %320 = comb.mux bin %315, %io_in_a_bits_address, %address : i28
    %321 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %322 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %323 = comb.shl bin %c4095_i27, %322 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %324 = comb.extract %323 from 3 : (i27) -> i9
    %325 = comb.xor %324, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %326 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %327 = comb.mux bin %326, %325, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %332 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 49 : ui64} : i9
    %328 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %329 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %330 = comb.xor bin %329, %true {sv.namehint = "d_first"} : i1
    %331 = comb.mux bin %329, %328, %327 {sv.namehint = "_d_first_counter_T"} : i9
    %332 = comb.mux bin %321, %331, %d_first_counter : i9
    %opcode_1 = seq.firreg %359 clock %clock {firrtl.random_init_start = 58 : ui64} : i3
    %param_1 = seq.firreg %360 clock %clock {firrtl.random_init_start = 61 : ui64} : i2
    %size_1 = seq.firreg %361 clock %clock {firrtl.random_init_start = 63 : ui64} : i4
    %source_1 = seq.firreg %362 clock %clock {firrtl.random_init_start = 67 : ui64} : i2
    %sink = seq.firreg %363 clock %clock {firrtl.random_init_start = 69 : ui64} : i1
    %denied = seq.firreg %364 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %333 = comb.and bin %io_in_d_valid, %329 : i1
    %334 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %335 = comb.or bin %334, %reset : i1
    %336 = comb.xor bin %335, %true : i1
    %337 = comb.and bin %333, %336 : i1
    %338 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %339 = comb.or bin %338, %reset : i1
    %340 = comb.xor bin %339, %true : i1
    %341 = comb.and bin %333, %340 : i1
    %342 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %343 = comb.or bin %342, %reset : i1
    %344 = comb.xor bin %343, %true : i1
    %345 = comb.and bin %333, %344 : i1
    %346 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %347 = comb.or bin %346, %reset : i1
    %348 = comb.xor bin %347, %true : i1
    %349 = comb.and bin %333, %348 : i1
    %350 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %351 = comb.or bin %350, %reset : i1
    %352 = comb.xor bin %351, %true : i1
    %353 = comb.and bin %333, %352 : i1
    %354 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %355 = comb.or bin %354, %reset : i1
    %356 = comb.xor bin %355, %true : i1
    %357 = comb.and bin %333, %356 : i1
    %358 = comb.and bin %321, %330 : i1
    %359 = comb.mux bin %358, %io_in_d_bits_opcode, %opcode_1 : i3
    %360 = comb.mux bin %358, %io_in_d_bits_param, %param_1 : i2
    %361 = comb.mux bin %358, %io_in_d_bits_size, %size_1 : i4
    %362 = comb.mux bin %358, %io_in_d_bits_source, %source_1 : i2
    %363 = comb.mux bin %358, %io_in_d_bits_sink, %sink : i1
    %364 = comb.mux bin %358, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %487 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %inflight_opcodes = seq.firreg %490 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 74 : ui64} : i12
    %inflight_sizes = seq.firreg %493 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 86 : ui64} : i24
    %365 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %366 = comb.extract %365 from 3 : (i27) -> i9
    %367 = comb.xor %366, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %368 = comb.mux bin %287, %c0_i9, %367 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %372 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %369 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %370 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %371 = comb.mux bin %370, %368, %369 {sv.namehint = "_a_first_counter_T_1"} : i9
    %372 = comb.mux bin %283, %371, %a_first_counter_1 : i9
    %373 = comb.shl bin %c4095_i27, %322 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %374 = comb.extract %373 from 3 : (i27) -> i9
    %375 = comb.xor %374, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %376 = comb.mux bin %326, %375, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %380 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 119 : ui64} : i9
    %377 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %378 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %379 = comb.mux bin %378, %376, %377 {sv.namehint = "_d_first_counter_T_1"} : i9
    %380 = comb.mux bin %321, %379, %d_first_counter_1 : i9
    %381 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %382 = comb.shru bin %inflight_opcodes, %381 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %383 = comb.extract %382 from 1 : (i12) -> i3
    %384 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %385 = comb.shru bin %inflight_sizes, %384 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %386 = comb.extract %385 from 1 : (i24) -> i7
    %387 = comb.concat %false, %386 {sv.namehint = "a_size_lookup"} : i1, i7
    %388 = comb.and bin %io_in_a_valid, %370 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %389 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %390 = comb.shl bin %c1_i4, %389 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %391 = comb.extract %390 from 0 : (i4) -> i3
    %392 = comb.mux bin %388, %391, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %393 = comb.and bin %283, %370 : i1
    %394 = comb.shl bin %c1_i4, %389 {sv.namehint = "_a_set_T"} : i4
    %395 = comb.extract %394 from 0 : (i4) -> i3
    %396 = comb.mux bin %393, %395, %c0_i3 {sv.namehint = "a_set"} : i3
    %397 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %398 = comb.mux bin %393, %397, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %399 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %400 = comb.mux bin %393, %399, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %401 = comb.concat %c0_i31, %398 : i31, i4
    %402 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %403 = comb.shl bin %401, %402 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %404 = comb.extract %403 from 0 : (i35) -> i12
    %405 = comb.mux bin %393, %404, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %406 = comb.concat %c0_i31, %400 : i31, i5
    %407 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %408 = comb.shl bin %406, %407 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %409 = comb.extract %408 from 0 : (i36) -> i24
    %410 = comb.mux bin %393, %409, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %411 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %412 = comb.shru bin %inflight, %411 : i3
    %413 = comb.extract %412 from 0 : (i3) -> i1
    %414 = comb.xor bin %413, %true : i1
    %415 = comb.or bin %414, %reset : i1
    %416 = comb.xor bin %415, %true : i1
    %417 = comb.and bin %393, %416 : i1
    %418 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %419 = comb.and bin %io_in_d_valid, %378 : i1
    %420 = comb.xor bin %418, %true : i1
    %421 = comb.and bin %419, %420 : i1
    %422 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %423 = comb.shl bin %c1_i4, %422 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %424 = comb.extract %423 from 0 : (i4) -> i3
    %425 = comb.mux bin %421, %424, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %426 = comb.and bin %321, %378, %420 : i1
    %427 = comb.shl bin %c1_i4, %422 {sv.namehint = "_d_clr_T"} : i4
    %428 = comb.extract %427 from 0 : (i4) -> i3
    %429 = comb.mux bin %426, %428, %c0_i3 {sv.namehint = "d_clr"} : i3
    %430 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %431 = comb.shl bin %c15_i47, %430 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %432 = comb.extract %431 from 0 : (i47) -> i12
    %433 = comb.mux bin %426, %432, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %434 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %435 = comb.shl bin %c255_i47, %434 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %436 = comb.extract %435 from 0 : (i47) -> i24
    %437 = comb.mux bin %426, %436, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %438 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %439 = comb.and bin %388, %438 {sv.namehint = "same_cycle_resp"} : i1
    %440 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %441 = comb.shru bin %inflight, %440 : i3
    %442 = comb.extract %441 from 0 : (i3) -> i1
    %443 = comb.or bin %442, %439, %reset : i1
    %444 = comb.xor bin %443, %true : i1
    %445 = comb.and bin %421, %444 : i1
    %446 = comb.and bin %421, %439 : i1
    %447 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %448 = comb.icmp bin eq %io_in_d_bits_opcode, %447 : i3
    %449 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %450 = comb.icmp bin eq %io_in_d_bits_opcode, %449 : i3
    %451 = comb.or bin %448, %450, %reset : i1
    %452 = comb.xor bin %451, %true : i1
    %453 = comb.and bin %446, %452 : i1
    %454 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %455 = comb.or bin %454, %reset : i1
    %456 = comb.xor bin %455, %true : i1
    %457 = comb.and bin %446, %456 : i1
    %458 = comb.xor bin %439, %true : i1
    %459 = comb.and bin %421, %458 : i1
    %460 = hw.array_get %1[%383] : !hw.array<8xi3>, i3
    %461 = comb.icmp bin eq %io_in_d_bits_opcode, %460 : i3
    %462 = hw.array_get %0[%383] : !hw.array<8xi3>, i3
    %463 = comb.icmp bin eq %io_in_d_bits_opcode, %462 : i3
    %464 = comb.or bin %461, %463, %reset : i1
    %465 = comb.xor bin %464, %true : i1
    %466 = comb.and bin %459, %465 : i1
    %467 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %468 = comb.icmp bin eq %467, %387 : i8
    %469 = comb.or bin %468, %reset : i1
    %470 = comb.xor bin %469, %true : i1
    %471 = comb.and bin %459, %470 : i1
    %472 = comb.and bin %419, %370 : i1
    %473 = comb.and bin %472, %io_in_a_valid : i1
    %474 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %475 = comb.and bin %473, %474 : i1
    %476 = comb.and bin %475, %420 : i1
    %477 = comb.xor bin %io_in_d_ready, %true : i1
    %478 = comb.or bin %477, %io_in_a_ready, %reset : i1
    %479 = comb.xor bin %478, %true : i1
    %480 = comb.and bin %476, %479 : i1
    %481 = comb.icmp bin ne %392, %425 : i3
    %482 = comb.icmp bin eq %392, %c0_i3 : i3
    %483 = comb.or bin %481, %482, %reset : i1
    %484 = comb.xor bin %483, %true : i1
    %485 = comb.or bin %inflight, %396 {sv.namehint = "_inflight_T"} : i3
    %486 = comb.xor bin %429, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %487 = comb.and bin %485, %486 {sv.namehint = "_inflight_T_2"} : i3
    %488 = comb.or bin %inflight_opcodes, %405 {sv.namehint = "_inflight_opcodes_T"} : i12
    %489 = comb.xor bin %433, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %490 = comb.and bin %488, %489 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %491 = comb.or bin %inflight_sizes, %410 {sv.namehint = "_inflight_sizes_T"} : i24
    %492 = comb.xor bin %437, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %493 = comb.and bin %491, %492 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %501 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 128 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %494 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %495 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %496 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %497 = comb.or bin %494, %495, %496, %reset : i1
    %498 = comb.xor bin %497, %true : i1
    %499 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %500 = comb.or bin %283, %321 : i1
    %501 = comb.mux bin %500, %c0_i32, %499 : i32
    %inflight_1 = seq.firreg %531 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 160 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %533 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 175 : ui64} : i24
    %502 = comb.shl bin %c4095_i27, %322 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %503 = comb.extract %502 from 3 : (i27) -> i9
    %504 = comb.xor %503, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %505 = comb.mux bin %326, %504, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %509 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 208 : ui64} : i9
    %506 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %507 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %508 = comb.mux bin %507, %505, %506 {sv.namehint = "_d_first_counter_T_2"} : i9
    %509 = comb.mux bin %321, %508, %d_first_counter_2 : i9
    %510 = comb.shru bin %inflight_sizes_1, %384 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %511 = comb.extract %510 from 1 : (i24) -> i7
    %512 = comb.concat %false, %511 {sv.namehint = "c_size_lookup"} : i1, i7
    %513 = comb.and bin %321, %507, %418 : i1
    %514 = comb.shl bin %c1_i4, %422 {sv.namehint = "_d_clr_T_1"} : i4
    %515 = comb.extract %514 from 0 : (i4) -> i3
    %516 = comb.mux bin %513, %515, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %517 = comb.shl bin %c255_i47, %434 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %518 = comb.extract %517 from 0 : (i47) -> i24
    %519 = comb.mux bin %513, %518, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %520 = comb.and bin %io_in_d_valid, %507, %418 : i1
    %521 = comb.shru bin %inflight_1, %440 : i3
    %522 = comb.extract %521 from 0 : (i3) -> i1
    %523 = comb.or bin %522, %reset : i1
    %524 = comb.xor bin %523, %true : i1
    %525 = comb.and bin %520, %524 : i1
    %526 = comb.icmp bin eq %467, %512 : i8
    %527 = comb.or bin %526, %reset : i1
    %528 = comb.xor bin %527, %true : i1
    %529 = comb.and bin %520, %528 : i1
    %530 = comb.xor bin %516, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %531 = comb.and bin %inflight_1, %530 {sv.namehint = "_inflight_T_5"} : i3
    %532 = comb.xor bin %519, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %533 = comb.and bin %inflight_sizes_1, %532 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %540 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 217 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %534 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %535 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %536 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %537 = comb.or bin %534, %535, %536, %reset : i1
    %538 = comb.xor bin %537, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %541 = comb.and bin %STOP_COND_, %false : i1
        sv.if %541 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %542 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %542 {
          sv.fatal 1
        }
        %543 = comb.and bin %STOP_COND_, %87 : i1
        sv.if %543 {
          sv.fatal 1
        }
        %544 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %544 {
          sv.fatal 1
        }
        %545 = comb.and bin %STOP_COND_, %93 : i1
        sv.if %545 {
          sv.fatal 1
        }
        %546 = comb.and bin %STOP_COND_, %96 : i1
        sv.if %546 {
          sv.fatal 1
        }
        %547 = comb.and bin %STOP_COND_, %100 : i1
        sv.if %547 {
          sv.fatal 1
        }
        %548 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %548 {
          sv.fatal 1
        }
        %549 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %549 {
          sv.fatal 1
        }
        %550 = comb.and bin %STOP_COND_, %111 : i1
        sv.if %550 {
          sv.fatal 1
        }
        %551 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %551 {
          sv.fatal 1
        }
        %552 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %552 {
          sv.fatal 1
        }
        %553 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %553 {
          sv.fatal 1
        }
        %554 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %554 {
          sv.fatal 1
        }
        %555 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %555 {
          sv.fatal 1
        }
        %556 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %556 {
          sv.fatal 1
        }
        %557 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %557 {
          sv.fatal 1
        }
        %558 = comb.and bin %STOP_COND_, %125 : i1
        sv.if %558 {
          sv.fatal 1
        }
        %559 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %559 {
          sv.fatal 1
        }
        %560 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %560 {
          sv.fatal 1
        }
        %561 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %561 {
          sv.fatal 1
        }
        %562 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %562 {
          sv.fatal 1
        }
        %563 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %563 {
          sv.fatal 1
        }
        %564 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %564 {
          sv.fatal 1
        }
        %565 = comb.and bin %STOP_COND_, %150 : i1
        sv.if %565 {
          sv.fatal 1
        }
        %566 = comb.and bin %STOP_COND_, %159 : i1
        sv.if %566 {
          sv.fatal 1
        }
        %567 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %567 {
          sv.fatal 1
        }
        %568 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %568 {
          sv.fatal 1
        }
        %569 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %569 {
          sv.fatal 1
        }
        %570 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %570 {
          sv.fatal 1
        }
        %571 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %571 {
          sv.fatal 1
        }
        %572 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %572 {
          sv.fatal 1
        }
        %573 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %573 {
          sv.fatal 1
        }
        %574 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %574 {
          sv.fatal 1
        }
        %575 = comb.and bin %STOP_COND_, %175 : i1
        sv.if %575 {
          sv.fatal 1
        }
        %576 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %576 {
          sv.fatal 1
        }
        %577 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %577 {
          sv.fatal 1
        }
        %578 = comb.and bin %STOP_COND_, %185 : i1
        sv.if %578 {
          sv.fatal 1
        }
        %579 = comb.and bin %STOP_COND_, %189 : i1
        sv.if %579 {
          sv.fatal 1
        }
        %580 = comb.and bin %STOP_COND_, %190 : i1
        sv.if %580 {
          sv.fatal 1
        }
        %581 = comb.and bin %STOP_COND_, %193 : i1
        sv.if %581 {
          sv.fatal 1
        }
        %582 = comb.and bin %STOP_COND_, %194 : i1
        sv.if %582 {
          sv.fatal 1
        }
        %583 = comb.and bin %STOP_COND_, %195 : i1
        sv.if %583 {
          sv.fatal 1
        }
        %584 = comb.and bin %STOP_COND_, %200 : i1
        sv.if %584 {
          sv.fatal 1
        }
        %585 = comb.and bin %STOP_COND_, %201 : i1
        sv.if %585 {
          sv.fatal 1
        }
        %586 = comb.and bin %STOP_COND_, %207 : i1
        sv.if %586 {
          sv.fatal 1
        }
        %587 = comb.and bin %STOP_COND_, %208 : i1
        sv.if %587 {
          sv.fatal 1
        }
        %588 = comb.and bin %STOP_COND_, %209 : i1
        sv.if %588 {
          sv.fatal 1
        }
        %589 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %589 {
          sv.fatal 1
        }
        %590 = comb.and bin %STOP_COND_, %214 : i1
        sv.if %590 {
          sv.fatal 1
        }
        %591 = comb.and bin %STOP_COND_, %215 : i1
        sv.if %591 {
          sv.fatal 1
        }
        %592 = comb.and bin %STOP_COND_, %219 : i1
        sv.if %592 {
          sv.fatal 1
        }
        %593 = comb.and bin %STOP_COND_, %227 : i1
        sv.if %593 {
          sv.fatal 1
        }
        %594 = comb.and bin %STOP_COND_, %231 : i1
        sv.if %594 {
          sv.fatal 1
        }
        %595 = comb.and bin %STOP_COND_, %235 : i1
        sv.if %595 {
          sv.fatal 1
        }
        %596 = comb.and bin %STOP_COND_, %239 : i1
        sv.if %596 {
          sv.fatal 1
        }
        %597 = comb.and bin %STOP_COND_, %243 : i1
        sv.if %597 {
          sv.fatal 1
        }
        %598 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %598 {
          sv.fatal 1
        }
        %599 = comb.and bin %STOP_COND_, %247 : i1
        sv.if %599 {
          sv.fatal 1
        }
        %600 = comb.and bin %STOP_COND_, %248 : i1
        sv.if %600 {
          sv.fatal 1
        }
        %601 = comb.and bin %STOP_COND_, %252 : i1
        sv.if %601 {
          sv.fatal 1
        }
        %602 = comb.and bin %STOP_COND_, %256 : i1
        sv.if %602 {
          sv.fatal 1
        }
        %603 = comb.and bin %STOP_COND_, %257 : i1
        sv.if %603 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %604 = comb.and bin %STOP_COND_, %260 : i1
        sv.if %604 {
          sv.fatal 1
        }
        %605 = comb.and bin %STOP_COND_, %261 : i1
        sv.if %605 {
          sv.fatal 1
        }
        %606 = comb.and bin %STOP_COND_, %262 : i1
        sv.if %606 {
          sv.fatal 1
        }
        %607 = comb.and bin %STOP_COND_, %263 : i1
        sv.if %607 {
          sv.fatal 1
        }
        %608 = comb.and bin %STOP_COND_, %264 : i1
        sv.if %608 {
          sv.fatal 1
        }
        %609 = comb.and bin %STOP_COND_, %267 : i1
        sv.if %609 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %610 = comb.and bin %STOP_COND_, %270 : i1
        sv.if %610 {
          sv.fatal 1
        }
        %611 = comb.and bin %STOP_COND_, %271 : i1
        sv.if %611 {
          sv.fatal 1
        }
        %612 = comb.and bin %STOP_COND_, %272 : i1
        sv.if %612 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %613 = comb.and bin %STOP_COND_, %275 : i1
        sv.if %613 {
          sv.fatal 1
        }
        %614 = comb.and bin %STOP_COND_, %276 : i1
        sv.if %614 {
          sv.fatal 1
        }
        %615 = comb.and bin %STOP_COND_, %277 : i1
        sv.if %615 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %616 = comb.and bin %STOP_COND_, %280 : i1
        sv.if %616 {
          sv.fatal 1
        }
        %617 = comb.and bin %STOP_COND_, %281 : i1
        sv.if %617 {
          sv.fatal 1
        }
        %618 = comb.and bin %STOP_COND_, %282 : i1
        sv.if %618 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %619 = comb.and bin %STOP_COND_, %298 : i1
        sv.if %619 {
          sv.fatal 1
        }
        %620 = comb.and bin %STOP_COND_, %302 : i1
        sv.if %620 {
          sv.fatal 1
        }
        %621 = comb.and bin %STOP_COND_, %306 : i1
        sv.if %621 {
          sv.fatal 1
        }
        %622 = comb.and bin %STOP_COND_, %310 : i1
        sv.if %622 {
          sv.fatal 1
        }
        %623 = comb.and bin %STOP_COND_, %314 : i1
        sv.if %623 {
          sv.fatal 1
        }
        %624 = comb.and bin %STOP_COND_, %337 : i1
        sv.if %624 {
          sv.fatal 1
        }
        %625 = comb.and bin %STOP_COND_, %341 : i1
        sv.if %625 {
          sv.fatal 1
        }
        %626 = comb.and bin %STOP_COND_, %345 : i1
        sv.if %626 {
          sv.fatal 1
        }
        %627 = comb.and bin %STOP_COND_, %349 : i1
        sv.if %627 {
          sv.fatal 1
        }
        %628 = comb.and bin %STOP_COND_, %353 : i1
        sv.if %628 {
          sv.fatal 1
        }
        %629 = comb.and bin %STOP_COND_, %357 : i1
        sv.if %629 {
          sv.fatal 1
        }
        %630 = comb.and bin %STOP_COND_, %417 : i1
        sv.if %630 {
          sv.fatal 1
        }
        %631 = comb.and bin %STOP_COND_, %445 : i1
        sv.if %631 {
          sv.fatal 1
        }
        %632 = comb.and bin %STOP_COND_, %453 : i1
        sv.if %632 {
          sv.fatal 1
        }
        %633 = comb.and bin %STOP_COND_, %457 : i1
        sv.if %633 {
          sv.fatal 1
        }
        %634 = comb.and bin %STOP_COND_, %466 : i1
        sv.if %634 {
          sv.fatal 1
        }
        %635 = comb.and bin %STOP_COND_, %471 : i1
        sv.if %635 {
          sv.fatal 1
        }
        %636 = comb.and bin %STOP_COND_, %480 : i1
        sv.if %636 {
          sv.fatal 1
        }
        %637 = comb.and bin %STOP_COND_, %484 : i1
        sv.if %637 {
          sv.fatal 1
        }
        %638 = comb.and bin %STOP_COND_, %498 : i1
        sv.if %638 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %639 = comb.and bin %STOP_COND_, %525 : i1
        sv.if %639 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %640 = comb.and bin %STOP_COND_, %529 : i1
        sv.if %640 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        sv.if %541 {
          sv.fatal 1
        }
        %641 = comb.and bin %STOP_COND_, %538 : i1
        sv.if %641 {
          sv.fatal 1
        }
      }
    }
    %539 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %540 = comb.mux bin %321, %c0_i32, %539 : i32
    hw.output
  }
  hw.module private @TLAtomicAutomata_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    %c-1_i7 = hw.constant -1 : i7
    %0 = hw.aggregate_constant [-4 : i4, -8 : i4, -2 : i4, 6 : i4] : !hw.array<4xi4>
    %c-1_i9 = hw.constant -1 : i9
    %c2_i4 = hw.constant 2 : i4
    %c4_i4 = hw.constant 4 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c2_i3 = hw.constant 2 : i3
    %false = hw.constant false {sv.namehint = "_signext_a_T_18"}
    %c1_i2 = hw.constant 1 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i64 = hw.constant 0 : i64
    %c0_i28 = hw.constant 0 : i28
    %c0_i4 = hw.constant 0 : i4
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c0_i8 = hw.constant 0 : i8
    %true = hw.constant true {sv.namehint = "source_c_bits_a_mask_size_2"}
    %c-1_i2 = hw.constant -1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c0_i23 = hw.constant 0 : i23
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_6(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %446: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %592: i1, io_in_d_bits_opcode: %594: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %auto_out_d_bits_source: i2, io_in_d_bits_sink: %auto_out_d_bits_sink: i1, io_in_d_bits_denied: %599: i1, io_in_d_bits_corrupt: %597: i1) -> ()
    %cam_s_0_state = seq.firreg %588 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 0 : ui64} : i2
    %cam_a_0_bits_opcode = seq.firreg %552 clock %clock {firrtl.random_init_start = 2 : ui64} : i3
    %cam_a_0_bits_param = seq.firreg %553 clock %clock {firrtl.random_init_start = 5 : ui64} : i3
    %cam_a_0_bits_size = seq.firreg %554 clock %clock {firrtl.random_init_start = 8 : ui64, sv.namehint = "out_bits_size"} : i4
    %cam_a_0_bits_source = seq.firreg %555 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "out_bits_source"} : i2
    %cam_a_0_bits_address = seq.firreg %556 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "out_bits_address"} : i28
    %cam_a_0_bits_mask = seq.firreg %557 clock %clock {firrtl.random_init_start = 42 : ui64} : i8
    %cam_a_0_bits_data = seq.firreg %558 clock %clock {firrtl.random_init_start = 50 : ui64} : i64
    %cam_a_0_bits_corrupt = seq.firreg %559 clock %clock {firrtl.random_init_start = 114 : ui64} : i1
    %cam_a_0_lut = seq.firreg %562 clock %clock {firrtl.random_init_start = 116 : ui64} : i4
    %cam_d_0_data = seq.firreg %583 clock %clock {firrtl.random_init_start = 120 : ui64} : i64
    %cam_d_0_denied = seq.firreg %584 clock %clock {firrtl.random_init_start = 184 : ui64} : i1
    %cam_d_0_corrupt = seq.firreg %585 clock %clock {firrtl.random_init_start = 185 : ui64} : i1
    %2 = comb.icmp bin eq %cam_s_0_state, %c0_i2 {sv.namehint = "cam_free_0"} : i2
    %3 = comb.icmp bin eq %cam_s_0_state, %c-2_i2 {sv.namehint = "prefixOR_1"} : i2
    %4 = comb.icmp bin eq %cam_s_0_state, %c-1_i2 {sv.namehint = "_cam_abusy_T"} : i2
    %5 = comb.or bin %4, %3 {sv.namehint = "cam_abusy_0"} : i1
    %6 = comb.icmp bin ne %cam_s_0_state, %c0_i2 {sv.namehint = "cam_dmatch_0"} : i2
    %7 = comb.icmp bin ult %auto_in_a_bits_size, %c4_i4 {sv.namehint = "_a_canArithmetic_T_3"} : i4
    %8 = comb.extract %auto_in_a_bits_address from 13 : (i28) -> i1
    %9 = comb.xor %8, %true : i1
    %10 = comb.extract %auto_in_a_bits_address from 27 : (i28) -> i1
    %11 = comb.extract %auto_in_a_bits_address from 25 : (i28) -> i1
    %12 = comb.extract %auto_in_a_bits_address from 16 : (i28) -> i1
    %13 = comb.concat %10, %11, %12, %9 : i1, i1, i1, i1
    %14 = comb.icmp bin ne %13, %c0_i4 : i4
    %15 = comb.xor bin %14, %true {sv.namehint = "_a_canLogical_T_8"} : i1
    %16 = comb.and bin %7, %15 {sv.namehint = "a_canLogical"} : i1
    %17 = comb.xor bin %14, %true {sv.namehint = "_a_canArithmetic_T_8"} : i1
    %18 = comb.and bin %7, %17 {sv.namehint = "a_canArithmetic"} : i1
    %19 = comb.icmp bin eq %auto_in_a_bits_opcode, %c3_i3 {sv.namehint = "a_isLogical"} : i3
    %20 = comb.icmp bin ne %auto_in_a_bits_opcode, %c2_i3 : i3
    %21 = comb.or %20, %18 {sv.namehint = "_a_isSupported_T"} : i1
    %22 = comb.mux bin %19, %16, %21 {sv.namehint = "a_isSupported"} : i1
    %23 = comb.extract %cam_a_0_bits_data from 0 {sv.namehint = "indexes_hi"} : (i64) -> i1
    %24 = comb.extract %cam_d_0_data from 0 {sv.namehint = "indexes_lo"} : (i64) -> i1
    %25 = comb.extract %cam_a_0_bits_data from 1 {sv.namehint = "indexes_hi_1"} : (i64) -> i1
    %26 = comb.extract %cam_d_0_data from 1 {sv.namehint = "indexes_lo_1"} : (i64) -> i1
    %27 = comb.extract %cam_a_0_bits_data from 2 {sv.namehint = "indexes_hi_2"} : (i64) -> i1
    %28 = comb.extract %cam_d_0_data from 2 {sv.namehint = "indexes_lo_2"} : (i64) -> i1
    %29 = comb.extract %cam_a_0_bits_data from 3 {sv.namehint = "indexes_hi_3"} : (i64) -> i1
    %30 = comb.extract %cam_d_0_data from 3 {sv.namehint = "indexes_lo_3"} : (i64) -> i1
    %31 = comb.extract %cam_a_0_bits_data from 4 {sv.namehint = "indexes_hi_4"} : (i64) -> i1
    %32 = comb.extract %cam_d_0_data from 4 {sv.namehint = "indexes_lo_4"} : (i64) -> i1
    %33 = comb.extract %cam_a_0_bits_data from 5 {sv.namehint = "indexes_hi_5"} : (i64) -> i1
    %34 = comb.extract %cam_d_0_data from 5 {sv.namehint = "indexes_lo_5"} : (i64) -> i1
    %35 = comb.extract %cam_a_0_bits_data from 6 {sv.namehint = "indexes_hi_6"} : (i64) -> i1
    %36 = comb.extract %cam_d_0_data from 6 {sv.namehint = "indexes_lo_6"} : (i64) -> i1
    %37 = comb.extract %cam_a_0_bits_data from 7 {sv.namehint = "indexes_hi_7"} : (i64) -> i1
    %38 = comb.extract %cam_d_0_data from 7 {sv.namehint = "indexes_lo_7"} : (i64) -> i1
    %39 = comb.extract %cam_a_0_bits_data from 8 {sv.namehint = "indexes_hi_8"} : (i64) -> i1
    %40 = comb.extract %cam_d_0_data from 8 {sv.namehint = "indexes_lo_8"} : (i64) -> i1
    %41 = comb.extract %cam_a_0_bits_data from 9 {sv.namehint = "indexes_hi_9"} : (i64) -> i1
    %42 = comb.extract %cam_d_0_data from 9 {sv.namehint = "indexes_lo_9"} : (i64) -> i1
    %43 = comb.extract %cam_a_0_bits_data from 10 {sv.namehint = "indexes_hi_10"} : (i64) -> i1
    %44 = comb.extract %cam_d_0_data from 10 {sv.namehint = "indexes_lo_10"} : (i64) -> i1
    %45 = comb.extract %cam_a_0_bits_data from 11 {sv.namehint = "indexes_hi_11"} : (i64) -> i1
    %46 = comb.extract %cam_d_0_data from 11 {sv.namehint = "indexes_lo_11"} : (i64) -> i1
    %47 = comb.extract %cam_a_0_bits_data from 12 {sv.namehint = "indexes_hi_12"} : (i64) -> i1
    %48 = comb.extract %cam_d_0_data from 12 {sv.namehint = "indexes_lo_12"} : (i64) -> i1
    %49 = comb.extract %cam_a_0_bits_data from 13 {sv.namehint = "indexes_hi_13"} : (i64) -> i1
    %50 = comb.extract %cam_d_0_data from 13 {sv.namehint = "indexes_lo_13"} : (i64) -> i1
    %51 = comb.extract %cam_a_0_bits_data from 14 {sv.namehint = "indexes_hi_14"} : (i64) -> i1
    %52 = comb.extract %cam_d_0_data from 14 {sv.namehint = "indexes_lo_14"} : (i64) -> i1
    %53 = comb.extract %cam_a_0_bits_data from 15 {sv.namehint = "indexes_hi_15"} : (i64) -> i1
    %54 = comb.extract %cam_d_0_data from 15 {sv.namehint = "indexes_lo_15"} : (i64) -> i1
    %55 = comb.extract %cam_a_0_bits_data from 16 {sv.namehint = "indexes_hi_16"} : (i64) -> i1
    %56 = comb.extract %cam_d_0_data from 16 {sv.namehint = "indexes_lo_16"} : (i64) -> i1
    %57 = comb.extract %cam_a_0_bits_data from 17 {sv.namehint = "indexes_hi_17"} : (i64) -> i1
    %58 = comb.extract %cam_d_0_data from 17 {sv.namehint = "indexes_lo_17"} : (i64) -> i1
    %59 = comb.extract %cam_a_0_bits_data from 18 {sv.namehint = "indexes_hi_18"} : (i64) -> i1
    %60 = comb.extract %cam_d_0_data from 18 {sv.namehint = "indexes_lo_18"} : (i64) -> i1
    %61 = comb.extract %cam_a_0_bits_data from 19 {sv.namehint = "indexes_hi_19"} : (i64) -> i1
    %62 = comb.extract %cam_d_0_data from 19 {sv.namehint = "indexes_lo_19"} : (i64) -> i1
    %63 = comb.extract %cam_a_0_bits_data from 20 {sv.namehint = "indexes_hi_20"} : (i64) -> i1
    %64 = comb.extract %cam_d_0_data from 20 {sv.namehint = "indexes_lo_20"} : (i64) -> i1
    %65 = comb.extract %cam_a_0_bits_data from 21 {sv.namehint = "indexes_hi_21"} : (i64) -> i1
    %66 = comb.extract %cam_d_0_data from 21 {sv.namehint = "indexes_lo_21"} : (i64) -> i1
    %67 = comb.extract %cam_a_0_bits_data from 22 {sv.namehint = "indexes_hi_22"} : (i64) -> i1
    %68 = comb.extract %cam_d_0_data from 22 {sv.namehint = "indexes_lo_22"} : (i64) -> i1
    %69 = comb.extract %cam_a_0_bits_data from 23 {sv.namehint = "indexes_hi_23"} : (i64) -> i1
    %70 = comb.extract %cam_d_0_data from 23 {sv.namehint = "indexes_lo_23"} : (i64) -> i1
    %71 = comb.extract %cam_a_0_bits_data from 24 {sv.namehint = "indexes_hi_24"} : (i64) -> i1
    %72 = comb.extract %cam_d_0_data from 24 {sv.namehint = "indexes_lo_24"} : (i64) -> i1
    %73 = comb.extract %cam_a_0_bits_data from 25 {sv.namehint = "indexes_hi_25"} : (i64) -> i1
    %74 = comb.extract %cam_d_0_data from 25 {sv.namehint = "indexes_lo_25"} : (i64) -> i1
    %75 = comb.extract %cam_a_0_bits_data from 26 {sv.namehint = "indexes_hi_26"} : (i64) -> i1
    %76 = comb.extract %cam_d_0_data from 26 {sv.namehint = "indexes_lo_26"} : (i64) -> i1
    %77 = comb.extract %cam_a_0_bits_data from 27 {sv.namehint = "indexes_hi_27"} : (i64) -> i1
    %78 = comb.extract %cam_d_0_data from 27 {sv.namehint = "indexes_lo_27"} : (i64) -> i1
    %79 = comb.extract %cam_a_0_bits_data from 28 {sv.namehint = "indexes_hi_28"} : (i64) -> i1
    %80 = comb.extract %cam_d_0_data from 28 {sv.namehint = "indexes_lo_28"} : (i64) -> i1
    %81 = comb.extract %cam_a_0_bits_data from 29 {sv.namehint = "indexes_hi_29"} : (i64) -> i1
    %82 = comb.extract %cam_d_0_data from 29 {sv.namehint = "indexes_lo_29"} : (i64) -> i1
    %83 = comb.extract %cam_a_0_bits_data from 30 {sv.namehint = "indexes_hi_30"} : (i64) -> i1
    %84 = comb.extract %cam_d_0_data from 30 {sv.namehint = "indexes_lo_30"} : (i64) -> i1
    %85 = comb.extract %cam_a_0_bits_data from 31 {sv.namehint = "indexes_hi_31"} : (i64) -> i1
    %86 = comb.extract %cam_d_0_data from 31 {sv.namehint = "indexes_lo_31"} : (i64) -> i1
    %87 = comb.extract %cam_a_0_bits_data from 32 {sv.namehint = "indexes_hi_32"} : (i64) -> i1
    %88 = comb.extract %cam_d_0_data from 32 {sv.namehint = "indexes_lo_32"} : (i64) -> i1
    %89 = comb.extract %cam_a_0_bits_data from 33 {sv.namehint = "indexes_hi_33"} : (i64) -> i1
    %90 = comb.extract %cam_d_0_data from 33 {sv.namehint = "indexes_lo_33"} : (i64) -> i1
    %91 = comb.extract %cam_a_0_bits_data from 34 {sv.namehint = "indexes_hi_34"} : (i64) -> i1
    %92 = comb.extract %cam_d_0_data from 34 {sv.namehint = "indexes_lo_34"} : (i64) -> i1
    %93 = comb.extract %cam_a_0_bits_data from 35 {sv.namehint = "indexes_hi_35"} : (i64) -> i1
    %94 = comb.extract %cam_d_0_data from 35 {sv.namehint = "indexes_lo_35"} : (i64) -> i1
    %95 = comb.extract %cam_a_0_bits_data from 36 {sv.namehint = "indexes_hi_36"} : (i64) -> i1
    %96 = comb.extract %cam_d_0_data from 36 {sv.namehint = "indexes_lo_36"} : (i64) -> i1
    %97 = comb.extract %cam_a_0_bits_data from 37 {sv.namehint = "indexes_hi_37"} : (i64) -> i1
    %98 = comb.extract %cam_d_0_data from 37 {sv.namehint = "indexes_lo_37"} : (i64) -> i1
    %99 = comb.extract %cam_a_0_bits_data from 38 {sv.namehint = "indexes_hi_38"} : (i64) -> i1
    %100 = comb.extract %cam_d_0_data from 38 {sv.namehint = "indexes_lo_38"} : (i64) -> i1
    %101 = comb.extract %cam_a_0_bits_data from 39 {sv.namehint = "indexes_hi_39"} : (i64) -> i1
    %102 = comb.extract %cam_d_0_data from 39 {sv.namehint = "indexes_lo_39"} : (i64) -> i1
    %103 = comb.extract %cam_a_0_bits_data from 40 {sv.namehint = "indexes_hi_40"} : (i64) -> i1
    %104 = comb.extract %cam_d_0_data from 40 {sv.namehint = "indexes_lo_40"} : (i64) -> i1
    %105 = comb.extract %cam_a_0_bits_data from 41 {sv.namehint = "indexes_hi_41"} : (i64) -> i1
    %106 = comb.extract %cam_d_0_data from 41 {sv.namehint = "indexes_lo_41"} : (i64) -> i1
    %107 = comb.extract %cam_a_0_bits_data from 42 {sv.namehint = "indexes_hi_42"} : (i64) -> i1
    %108 = comb.extract %cam_d_0_data from 42 {sv.namehint = "indexes_lo_42"} : (i64) -> i1
    %109 = comb.extract %cam_a_0_bits_data from 43 {sv.namehint = "indexes_hi_43"} : (i64) -> i1
    %110 = comb.extract %cam_d_0_data from 43 {sv.namehint = "indexes_lo_43"} : (i64) -> i1
    %111 = comb.extract %cam_a_0_bits_data from 44 {sv.namehint = "indexes_hi_44"} : (i64) -> i1
    %112 = comb.extract %cam_d_0_data from 44 {sv.namehint = "indexes_lo_44"} : (i64) -> i1
    %113 = comb.extract %cam_a_0_bits_data from 45 {sv.namehint = "indexes_hi_45"} : (i64) -> i1
    %114 = comb.extract %cam_d_0_data from 45 {sv.namehint = "indexes_lo_45"} : (i64) -> i1
    %115 = comb.extract %cam_a_0_bits_data from 46 {sv.namehint = "indexes_hi_46"} : (i64) -> i1
    %116 = comb.extract %cam_d_0_data from 46 {sv.namehint = "indexes_lo_46"} : (i64) -> i1
    %117 = comb.extract %cam_a_0_bits_data from 47 {sv.namehint = "indexes_hi_47"} : (i64) -> i1
    %118 = comb.extract %cam_d_0_data from 47 {sv.namehint = "indexes_lo_47"} : (i64) -> i1
    %119 = comb.extract %cam_a_0_bits_data from 48 {sv.namehint = "indexes_hi_48"} : (i64) -> i1
    %120 = comb.extract %cam_d_0_data from 48 {sv.namehint = "indexes_lo_48"} : (i64) -> i1
    %121 = comb.extract %cam_a_0_bits_data from 49 {sv.namehint = "indexes_hi_49"} : (i64) -> i1
    %122 = comb.extract %cam_d_0_data from 49 {sv.namehint = "indexes_lo_49"} : (i64) -> i1
    %123 = comb.extract %cam_a_0_bits_data from 50 {sv.namehint = "indexes_hi_50"} : (i64) -> i1
    %124 = comb.extract %cam_d_0_data from 50 {sv.namehint = "indexes_lo_50"} : (i64) -> i1
    %125 = comb.extract %cam_a_0_bits_data from 51 {sv.namehint = "indexes_hi_51"} : (i64) -> i1
    %126 = comb.extract %cam_d_0_data from 51 {sv.namehint = "indexes_lo_51"} : (i64) -> i1
    %127 = comb.extract %cam_a_0_bits_data from 52 {sv.namehint = "indexes_hi_52"} : (i64) -> i1
    %128 = comb.extract %cam_d_0_data from 52 {sv.namehint = "indexes_lo_52"} : (i64) -> i1
    %129 = comb.extract %cam_a_0_bits_data from 53 {sv.namehint = "indexes_hi_53"} : (i64) -> i1
    %130 = comb.extract %cam_d_0_data from 53 {sv.namehint = "indexes_lo_53"} : (i64) -> i1
    %131 = comb.extract %cam_a_0_bits_data from 54 {sv.namehint = "indexes_hi_54"} : (i64) -> i1
    %132 = comb.extract %cam_d_0_data from 54 {sv.namehint = "indexes_lo_54"} : (i64) -> i1
    %133 = comb.extract %cam_a_0_bits_data from 55 {sv.namehint = "indexes_hi_55"} : (i64) -> i1
    %134 = comb.extract %cam_d_0_data from 55 {sv.namehint = "indexes_lo_55"} : (i64) -> i1
    %135 = comb.extract %cam_a_0_bits_data from 56 {sv.namehint = "indexes_hi_56"} : (i64) -> i1
    %136 = comb.extract %cam_d_0_data from 56 {sv.namehint = "indexes_lo_56"} : (i64) -> i1
    %137 = comb.extract %cam_a_0_bits_data from 57 {sv.namehint = "indexes_hi_57"} : (i64) -> i1
    %138 = comb.extract %cam_d_0_data from 57 {sv.namehint = "indexes_lo_57"} : (i64) -> i1
    %139 = comb.extract %cam_a_0_bits_data from 58 {sv.namehint = "indexes_hi_58"} : (i64) -> i1
    %140 = comb.extract %cam_d_0_data from 58 {sv.namehint = "indexes_lo_58"} : (i64) -> i1
    %141 = comb.extract %cam_a_0_bits_data from 59 {sv.namehint = "indexes_hi_59"} : (i64) -> i1
    %142 = comb.extract %cam_d_0_data from 59 {sv.namehint = "indexes_lo_59"} : (i64) -> i1
    %143 = comb.extract %cam_a_0_bits_data from 60 {sv.namehint = "indexes_hi_60"} : (i64) -> i1
    %144 = comb.extract %cam_d_0_data from 60 {sv.namehint = "indexes_lo_60"} : (i64) -> i1
    %145 = comb.extract %cam_a_0_bits_data from 61 {sv.namehint = "indexes_hi_61"} : (i64) -> i1
    %146 = comb.extract %cam_d_0_data from 61 {sv.namehint = "indexes_lo_61"} : (i64) -> i1
    %147 = comb.extract %cam_a_0_bits_data from 62 {sv.namehint = "indexes_hi_62"} : (i64) -> i1
    %148 = comb.extract %cam_d_0_data from 62 {sv.namehint = "indexes_lo_62"} : (i64) -> i1
    %149 = comb.extract %cam_a_0_bits_data from 63 {sv.namehint = "indexes_hi_63"} : (i64) -> i1
    %150 = comb.extract %cam_d_0_data from 63 {sv.namehint = "indexes_lo_63"} : (i64) -> i1
    %151 = comb.concat %c0_i2, %23, %24 : i2, i1, i1
    %152 = comb.shru bin %cam_a_0_lut, %151 {sv.namehint = "_logic_out_T"} : i4
    %153 = comb.extract %152 from 0 {sv.namehint = "logic_out_lo_lo_lo_lo_lo_lo"} : (i4) -> i1
    %154 = comb.concat %c0_i2, %25, %26 : i2, i1, i1
    %155 = comb.shru bin %cam_a_0_lut, %154 {sv.namehint = "_logic_out_T_1"} : i4
    %156 = comb.extract %155 from 0 {sv.namehint = "logic_out_lo_lo_lo_lo_lo_hi"} : (i4) -> i1
    %157 = comb.concat %c0_i2, %27, %28 : i2, i1, i1
    %158 = comb.shru bin %cam_a_0_lut, %157 {sv.namehint = "_logic_out_T_2"} : i4
    %159 = comb.extract %158 from 0 {sv.namehint = "logic_out_lo_lo_lo_lo_hi_lo"} : (i4) -> i1
    %160 = comb.concat %c0_i2, %29, %30 : i2, i1, i1
    %161 = comb.shru bin %cam_a_0_lut, %160 {sv.namehint = "_logic_out_T_3"} : i4
    %162 = comb.extract %161 from 0 {sv.namehint = "logic_out_lo_lo_lo_lo_hi_hi"} : (i4) -> i1
    %163 = comb.concat %c0_i2, %31, %32 : i2, i1, i1
    %164 = comb.shru bin %cam_a_0_lut, %163 {sv.namehint = "_logic_out_T_4"} : i4
    %165 = comb.extract %164 from 0 {sv.namehint = "logic_out_lo_lo_lo_hi_lo_lo"} : (i4) -> i1
    %166 = comb.concat %c0_i2, %33, %34 : i2, i1, i1
    %167 = comb.shru bin %cam_a_0_lut, %166 {sv.namehint = "_logic_out_T_5"} : i4
    %168 = comb.extract %167 from 0 {sv.namehint = "logic_out_lo_lo_lo_hi_lo_hi"} : (i4) -> i1
    %169 = comb.concat %c0_i2, %35, %36 : i2, i1, i1
    %170 = comb.shru bin %cam_a_0_lut, %169 {sv.namehint = "_logic_out_T_6"} : i4
    %171 = comb.extract %170 from 0 {sv.namehint = "logic_out_lo_lo_lo_hi_hi_lo"} : (i4) -> i1
    %172 = comb.concat %c0_i2, %37, %38 : i2, i1, i1
    %173 = comb.shru bin %cam_a_0_lut, %172 {sv.namehint = "_logic_out_T_7"} : i4
    %174 = comb.extract %173 from 0 {sv.namehint = "logic_out_lo_lo_lo_hi_hi_hi"} : (i4) -> i1
    %175 = comb.concat %c0_i2, %39, %40 : i2, i1, i1
    %176 = comb.shru bin %cam_a_0_lut, %175 {sv.namehint = "_logic_out_T_8"} : i4
    %177 = comb.extract %176 from 0 {sv.namehint = "logic_out_lo_lo_hi_lo_lo_lo"} : (i4) -> i1
    %178 = comb.concat %c0_i2, %41, %42 : i2, i1, i1
    %179 = comb.shru bin %cam_a_0_lut, %178 {sv.namehint = "_logic_out_T_9"} : i4
    %180 = comb.extract %179 from 0 {sv.namehint = "logic_out_lo_lo_hi_lo_lo_hi"} : (i4) -> i1
    %181 = comb.concat %c0_i2, %43, %44 : i2, i1, i1
    %182 = comb.shru bin %cam_a_0_lut, %181 {sv.namehint = "_logic_out_T_10"} : i4
    %183 = comb.extract %182 from 0 {sv.namehint = "logic_out_lo_lo_hi_lo_hi_lo"} : (i4) -> i1
    %184 = comb.concat %c0_i2, %45, %46 : i2, i1, i1
    %185 = comb.shru bin %cam_a_0_lut, %184 {sv.namehint = "_logic_out_T_11"} : i4
    %186 = comb.extract %185 from 0 {sv.namehint = "logic_out_lo_lo_hi_lo_hi_hi"} : (i4) -> i1
    %187 = comb.concat %c0_i2, %47, %48 : i2, i1, i1
    %188 = comb.shru bin %cam_a_0_lut, %187 {sv.namehint = "_logic_out_T_12"} : i4
    %189 = comb.extract %188 from 0 {sv.namehint = "logic_out_lo_lo_hi_hi_lo_lo"} : (i4) -> i1
    %190 = comb.concat %c0_i2, %49, %50 : i2, i1, i1
    %191 = comb.shru bin %cam_a_0_lut, %190 {sv.namehint = "_logic_out_T_13"} : i4
    %192 = comb.extract %191 from 0 {sv.namehint = "logic_out_lo_lo_hi_hi_lo_hi"} : (i4) -> i1
    %193 = comb.concat %c0_i2, %51, %52 : i2, i1, i1
    %194 = comb.shru bin %cam_a_0_lut, %193 {sv.namehint = "_logic_out_T_14"} : i4
    %195 = comb.extract %194 from 0 {sv.namehint = "logic_out_lo_lo_hi_hi_hi_lo"} : (i4) -> i1
    %196 = comb.concat %c0_i2, %53, %54 : i2, i1, i1
    %197 = comb.shru bin %cam_a_0_lut, %196 {sv.namehint = "_logic_out_T_15"} : i4
    %198 = comb.extract %197 from 0 {sv.namehint = "logic_out_lo_lo_hi_hi_hi_hi"} : (i4) -> i1
    %199 = comb.concat %c0_i2, %55, %56 : i2, i1, i1
    %200 = comb.shru bin %cam_a_0_lut, %199 {sv.namehint = "_logic_out_T_16"} : i4
    %201 = comb.extract %200 from 0 {sv.namehint = "logic_out_lo_hi_lo_lo_lo_lo"} : (i4) -> i1
    %202 = comb.concat %c0_i2, %57, %58 : i2, i1, i1
    %203 = comb.shru bin %cam_a_0_lut, %202 {sv.namehint = "_logic_out_T_17"} : i4
    %204 = comb.extract %203 from 0 {sv.namehint = "logic_out_lo_hi_lo_lo_lo_hi"} : (i4) -> i1
    %205 = comb.concat %c0_i2, %59, %60 : i2, i1, i1
    %206 = comb.shru bin %cam_a_0_lut, %205 {sv.namehint = "_logic_out_T_18"} : i4
    %207 = comb.extract %206 from 0 {sv.namehint = "logic_out_lo_hi_lo_lo_hi_lo"} : (i4) -> i1
    %208 = comb.concat %c0_i2, %61, %62 : i2, i1, i1
    %209 = comb.shru bin %cam_a_0_lut, %208 {sv.namehint = "_logic_out_T_19"} : i4
    %210 = comb.extract %209 from 0 {sv.namehint = "logic_out_lo_hi_lo_lo_hi_hi"} : (i4) -> i1
    %211 = comb.concat %c0_i2, %63, %64 : i2, i1, i1
    %212 = comb.shru bin %cam_a_0_lut, %211 {sv.namehint = "_logic_out_T_20"} : i4
    %213 = comb.extract %212 from 0 {sv.namehint = "logic_out_lo_hi_lo_hi_lo_lo"} : (i4) -> i1
    %214 = comb.concat %c0_i2, %65, %66 : i2, i1, i1
    %215 = comb.shru bin %cam_a_0_lut, %214 {sv.namehint = "_logic_out_T_21"} : i4
    %216 = comb.extract %215 from 0 {sv.namehint = "logic_out_lo_hi_lo_hi_lo_hi"} : (i4) -> i1
    %217 = comb.concat %c0_i2, %67, %68 : i2, i1, i1
    %218 = comb.shru bin %cam_a_0_lut, %217 {sv.namehint = "_logic_out_T_22"} : i4
    %219 = comb.extract %218 from 0 {sv.namehint = "logic_out_lo_hi_lo_hi_hi_lo"} : (i4) -> i1
    %220 = comb.concat %c0_i2, %69, %70 : i2, i1, i1
    %221 = comb.shru bin %cam_a_0_lut, %220 {sv.namehint = "_logic_out_T_23"} : i4
    %222 = comb.extract %221 from 0 {sv.namehint = "logic_out_lo_hi_lo_hi_hi_hi"} : (i4) -> i1
    %223 = comb.concat %c0_i2, %71, %72 : i2, i1, i1
    %224 = comb.shru bin %cam_a_0_lut, %223 {sv.namehint = "_logic_out_T_24"} : i4
    %225 = comb.extract %224 from 0 {sv.namehint = "logic_out_lo_hi_hi_lo_lo_lo"} : (i4) -> i1
    %226 = comb.concat %c0_i2, %73, %74 : i2, i1, i1
    %227 = comb.shru bin %cam_a_0_lut, %226 {sv.namehint = "_logic_out_T_25"} : i4
    %228 = comb.extract %227 from 0 {sv.namehint = "logic_out_lo_hi_hi_lo_lo_hi"} : (i4) -> i1
    %229 = comb.concat %c0_i2, %75, %76 : i2, i1, i1
    %230 = comb.shru bin %cam_a_0_lut, %229 {sv.namehint = "_logic_out_T_26"} : i4
    %231 = comb.extract %230 from 0 {sv.namehint = "logic_out_lo_hi_hi_lo_hi_lo"} : (i4) -> i1
    %232 = comb.concat %c0_i2, %77, %78 : i2, i1, i1
    %233 = comb.shru bin %cam_a_0_lut, %232 {sv.namehint = "_logic_out_T_27"} : i4
    %234 = comb.extract %233 from 0 {sv.namehint = "logic_out_lo_hi_hi_lo_hi_hi"} : (i4) -> i1
    %235 = comb.concat %c0_i2, %79, %80 : i2, i1, i1
    %236 = comb.shru bin %cam_a_0_lut, %235 {sv.namehint = "_logic_out_T_28"} : i4
    %237 = comb.extract %236 from 0 {sv.namehint = "logic_out_lo_hi_hi_hi_lo_lo"} : (i4) -> i1
    %238 = comb.concat %c0_i2, %81, %82 : i2, i1, i1
    %239 = comb.shru bin %cam_a_0_lut, %238 {sv.namehint = "_logic_out_T_29"} : i4
    %240 = comb.extract %239 from 0 {sv.namehint = "logic_out_lo_hi_hi_hi_lo_hi"} : (i4) -> i1
    %241 = comb.concat %c0_i2, %83, %84 : i2, i1, i1
    %242 = comb.shru bin %cam_a_0_lut, %241 {sv.namehint = "_logic_out_T_30"} : i4
    %243 = comb.extract %242 from 0 {sv.namehint = "logic_out_lo_hi_hi_hi_hi_lo"} : (i4) -> i1
    %244 = comb.concat %c0_i2, %85, %86 : i2, i1, i1
    %245 = comb.shru bin %cam_a_0_lut, %244 {sv.namehint = "_logic_out_T_31"} : i4
    %246 = comb.extract %245 from 0 {sv.namehint = "logic_out_lo_hi_hi_hi_hi_hi"} : (i4) -> i1
    %247 = comb.concat %c0_i2, %87, %88 : i2, i1, i1
    %248 = comb.shru bin %cam_a_0_lut, %247 {sv.namehint = "_logic_out_T_32"} : i4
    %249 = comb.extract %248 from 0 {sv.namehint = "logic_out_hi_lo_lo_lo_lo_lo"} : (i4) -> i1
    %250 = comb.concat %c0_i2, %89, %90 : i2, i1, i1
    %251 = comb.shru bin %cam_a_0_lut, %250 {sv.namehint = "_logic_out_T_33"} : i4
    %252 = comb.extract %251 from 0 {sv.namehint = "logic_out_hi_lo_lo_lo_lo_hi"} : (i4) -> i1
    %253 = comb.concat %c0_i2, %91, %92 : i2, i1, i1
    %254 = comb.shru bin %cam_a_0_lut, %253 {sv.namehint = "_logic_out_T_34"} : i4
    %255 = comb.extract %254 from 0 {sv.namehint = "logic_out_hi_lo_lo_lo_hi_lo"} : (i4) -> i1
    %256 = comb.concat %c0_i2, %93, %94 : i2, i1, i1
    %257 = comb.shru bin %cam_a_0_lut, %256 {sv.namehint = "_logic_out_T_35"} : i4
    %258 = comb.extract %257 from 0 {sv.namehint = "logic_out_hi_lo_lo_lo_hi_hi"} : (i4) -> i1
    %259 = comb.concat %c0_i2, %95, %96 : i2, i1, i1
    %260 = comb.shru bin %cam_a_0_lut, %259 {sv.namehint = "_logic_out_T_36"} : i4
    %261 = comb.extract %260 from 0 {sv.namehint = "logic_out_hi_lo_lo_hi_lo_lo"} : (i4) -> i1
    %262 = comb.concat %c0_i2, %97, %98 : i2, i1, i1
    %263 = comb.shru bin %cam_a_0_lut, %262 {sv.namehint = "_logic_out_T_37"} : i4
    %264 = comb.extract %263 from 0 {sv.namehint = "logic_out_hi_lo_lo_hi_lo_hi"} : (i4) -> i1
    %265 = comb.concat %c0_i2, %99, %100 : i2, i1, i1
    %266 = comb.shru bin %cam_a_0_lut, %265 {sv.namehint = "_logic_out_T_38"} : i4
    %267 = comb.extract %266 from 0 {sv.namehint = "logic_out_hi_lo_lo_hi_hi_lo"} : (i4) -> i1
    %268 = comb.concat %c0_i2, %101, %102 : i2, i1, i1
    %269 = comb.shru bin %cam_a_0_lut, %268 {sv.namehint = "_logic_out_T_39"} : i4
    %270 = comb.extract %269 from 0 {sv.namehint = "logic_out_hi_lo_lo_hi_hi_hi"} : (i4) -> i1
    %271 = comb.concat %c0_i2, %103, %104 : i2, i1, i1
    %272 = comb.shru bin %cam_a_0_lut, %271 {sv.namehint = "_logic_out_T_40"} : i4
    %273 = comb.extract %272 from 0 {sv.namehint = "logic_out_hi_lo_hi_lo_lo_lo"} : (i4) -> i1
    %274 = comb.concat %c0_i2, %105, %106 : i2, i1, i1
    %275 = comb.shru bin %cam_a_0_lut, %274 {sv.namehint = "_logic_out_T_41"} : i4
    %276 = comb.extract %275 from 0 {sv.namehint = "logic_out_hi_lo_hi_lo_lo_hi"} : (i4) -> i1
    %277 = comb.concat %c0_i2, %107, %108 : i2, i1, i1
    %278 = comb.shru bin %cam_a_0_lut, %277 {sv.namehint = "_logic_out_T_42"} : i4
    %279 = comb.extract %278 from 0 {sv.namehint = "logic_out_hi_lo_hi_lo_hi_lo"} : (i4) -> i1
    %280 = comb.concat %c0_i2, %109, %110 : i2, i1, i1
    %281 = comb.shru bin %cam_a_0_lut, %280 {sv.namehint = "_logic_out_T_43"} : i4
    %282 = comb.extract %281 from 0 {sv.namehint = "logic_out_hi_lo_hi_lo_hi_hi"} : (i4) -> i1
    %283 = comb.concat %c0_i2, %111, %112 : i2, i1, i1
    %284 = comb.shru bin %cam_a_0_lut, %283 {sv.namehint = "_logic_out_T_44"} : i4
    %285 = comb.extract %284 from 0 {sv.namehint = "logic_out_hi_lo_hi_hi_lo_lo"} : (i4) -> i1
    %286 = comb.concat %c0_i2, %113, %114 : i2, i1, i1
    %287 = comb.shru bin %cam_a_0_lut, %286 {sv.namehint = "_logic_out_T_45"} : i4
    %288 = comb.extract %287 from 0 {sv.namehint = "logic_out_hi_lo_hi_hi_lo_hi"} : (i4) -> i1
    %289 = comb.concat %c0_i2, %115, %116 : i2, i1, i1
    %290 = comb.shru bin %cam_a_0_lut, %289 {sv.namehint = "_logic_out_T_46"} : i4
    %291 = comb.extract %290 from 0 {sv.namehint = "logic_out_hi_lo_hi_hi_hi_lo"} : (i4) -> i1
    %292 = comb.concat %c0_i2, %117, %118 : i2, i1, i1
    %293 = comb.shru bin %cam_a_0_lut, %292 {sv.namehint = "_logic_out_T_47"} : i4
    %294 = comb.extract %293 from 0 {sv.namehint = "logic_out_hi_lo_hi_hi_hi_hi"} : (i4) -> i1
    %295 = comb.concat %c0_i2, %119, %120 : i2, i1, i1
    %296 = comb.shru bin %cam_a_0_lut, %295 {sv.namehint = "_logic_out_T_48"} : i4
    %297 = comb.extract %296 from 0 {sv.namehint = "logic_out_hi_hi_lo_lo_lo_lo"} : (i4) -> i1
    %298 = comb.concat %c0_i2, %121, %122 : i2, i1, i1
    %299 = comb.shru bin %cam_a_0_lut, %298 {sv.namehint = "_logic_out_T_49"} : i4
    %300 = comb.extract %299 from 0 {sv.namehint = "logic_out_hi_hi_lo_lo_lo_hi"} : (i4) -> i1
    %301 = comb.concat %c0_i2, %123, %124 : i2, i1, i1
    %302 = comb.shru bin %cam_a_0_lut, %301 {sv.namehint = "_logic_out_T_50"} : i4
    %303 = comb.extract %302 from 0 {sv.namehint = "logic_out_hi_hi_lo_lo_hi_lo"} : (i4) -> i1
    %304 = comb.concat %c0_i2, %125, %126 : i2, i1, i1
    %305 = comb.shru bin %cam_a_0_lut, %304 {sv.namehint = "_logic_out_T_51"} : i4
    %306 = comb.extract %305 from 0 {sv.namehint = "logic_out_hi_hi_lo_lo_hi_hi"} : (i4) -> i1
    %307 = comb.concat %c0_i2, %127, %128 : i2, i1, i1
    %308 = comb.shru bin %cam_a_0_lut, %307 {sv.namehint = "_logic_out_T_52"} : i4
    %309 = comb.extract %308 from 0 {sv.namehint = "logic_out_hi_hi_lo_hi_lo_lo"} : (i4) -> i1
    %310 = comb.concat %c0_i2, %129, %130 : i2, i1, i1
    %311 = comb.shru bin %cam_a_0_lut, %310 {sv.namehint = "_logic_out_T_53"} : i4
    %312 = comb.extract %311 from 0 {sv.namehint = "logic_out_hi_hi_lo_hi_lo_hi"} : (i4) -> i1
    %313 = comb.concat %c0_i2, %131, %132 : i2, i1, i1
    %314 = comb.shru bin %cam_a_0_lut, %313 {sv.namehint = "_logic_out_T_54"} : i4
    %315 = comb.extract %314 from 0 {sv.namehint = "logic_out_hi_hi_lo_hi_hi_lo"} : (i4) -> i1
    %316 = comb.concat %c0_i2, %133, %134 : i2, i1, i1
    %317 = comb.shru bin %cam_a_0_lut, %316 {sv.namehint = "_logic_out_T_55"} : i4
    %318 = comb.extract %317 from 0 {sv.namehint = "logic_out_hi_hi_lo_hi_hi_hi"} : (i4) -> i1
    %319 = comb.concat %c0_i2, %135, %136 : i2, i1, i1
    %320 = comb.shru bin %cam_a_0_lut, %319 {sv.namehint = "_logic_out_T_56"} : i4
    %321 = comb.extract %320 from 0 {sv.namehint = "logic_out_hi_hi_hi_lo_lo_lo"} : (i4) -> i1
    %322 = comb.concat %c0_i2, %137, %138 : i2, i1, i1
    %323 = comb.shru bin %cam_a_0_lut, %322 {sv.namehint = "_logic_out_T_57"} : i4
    %324 = comb.extract %323 from 0 {sv.namehint = "logic_out_hi_hi_hi_lo_lo_hi"} : (i4) -> i1
    %325 = comb.concat %c0_i2, %139, %140 : i2, i1, i1
    %326 = comb.shru bin %cam_a_0_lut, %325 {sv.namehint = "_logic_out_T_58"} : i4
    %327 = comb.extract %326 from 0 {sv.namehint = "logic_out_hi_hi_hi_lo_hi_lo"} : (i4) -> i1
    %328 = comb.concat %c0_i2, %141, %142 : i2, i1, i1
    %329 = comb.shru bin %cam_a_0_lut, %328 {sv.namehint = "_logic_out_T_59"} : i4
    %330 = comb.extract %329 from 0 {sv.namehint = "logic_out_hi_hi_hi_lo_hi_hi"} : (i4) -> i1
    %331 = comb.concat %c0_i2, %143, %144 : i2, i1, i1
    %332 = comb.shru bin %cam_a_0_lut, %331 {sv.namehint = "_logic_out_T_60"} : i4
    %333 = comb.extract %332 from 0 {sv.namehint = "logic_out_hi_hi_hi_hi_lo_lo"} : (i4) -> i1
    %334 = comb.concat %c0_i2, %145, %146 : i2, i1, i1
    %335 = comb.shru bin %cam_a_0_lut, %334 {sv.namehint = "_logic_out_T_61"} : i4
    %336 = comb.extract %335 from 0 {sv.namehint = "logic_out_hi_hi_hi_hi_lo_hi"} : (i4) -> i1
    %337 = comb.concat %c0_i2, %147, %148 : i2, i1, i1
    %338 = comb.shru bin %cam_a_0_lut, %337 {sv.namehint = "_logic_out_T_62"} : i4
    %339 = comb.extract %338 from 0 {sv.namehint = "logic_out_hi_hi_hi_hi_hi_lo"} : (i4) -> i1
    %340 = comb.concat %c0_i2, %149, %150 : i2, i1, i1
    %341 = comb.shru bin %cam_a_0_lut, %340 {sv.namehint = "_logic_out_T_63"} : i4
    %342 = comb.extract %341 from 0 {sv.namehint = "logic_out_hi_hi_hi_hi_hi_hi"} : (i4) -> i1
    %343 = comb.concat %342, %339, %336, %333, %330, %327, %324, %321, %318, %315, %312, %309, %306, %303, %300, %297, %294, %291, %288, %285, %282, %279, %276, %273, %270, %267, %264, %261, %258, %255, %252, %249, %246, %243, %240, %237, %234, %231, %228, %225, %222, %219, %216, %213, %210, %207, %204, %201, %198, %195, %192, %189, %186, %183, %180, %177, %174, %171, %168, %165, %162, %159, %156, %153 {sv.namehint = "logic_out"} : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
    %344 = comb.extract %cam_a_0_bits_param from 1 {sv.namehint = "unsigned"} : (i3) -> i1
    %345 = comb.extract %cam_a_0_bits_param from 0 {sv.namehint = "take_max"} : (i3) -> i1
    %346 = comb.extract %cam_a_0_bits_param from 2 {sv.namehint = "adder"} : (i3) -> i1
    %347 = comb.extract %cam_a_0_bits_mask from 0 : (i8) -> i7
    %348 = comb.xor %347, %c-1_i7 {sv.namehint = "_signSel_T"} : i7
    %349 = comb.extract %cam_a_0_bits_mask from 1 {sv.namehint = "_signSel_T_1"} : (i8) -> i7
    %350 = comb.or bin %348, %349 : i7
    %351 = comb.xor %350, %c-1_i7 {sv.namehint = "signSel"} : i7
    %352 = comb.concat %133, %117, %101, %85, %69, %53, %37 : i1, i1, i1, i1, i1, i1, i1
    %353 = comb.and %352, %351 {sv.namehint = "_signbit_a_T"} : i7
    %354 = comb.concat %134, %118, %102, %86, %70, %54, %38 : i1, i1, i1, i1, i1, i1, i1
    %355 = comb.and %354, %351 {sv.namehint = "_signbit_d_T"} : i7
    %356 = comb.extract %353 from 0 : (i7) -> i6
    %357 = comb.extract %353 from 1 : (i7) -> i6
    %358 = comb.or %357, %356 : i6
    %359 = comb.extract %353 from 0 {sv.namehint = "_signext_a_T_19"} : (i7) -> i1
    %360 = comb.extract %358 from 0 : (i6) -> i4
    %361 = comb.extract %358 from 2 : (i6) -> i4
    %362 = comb.or %361, %360 : i4
    %363 = comb.extract %358 from 1 : (i6) -> i1
    %364 = comb.or %363, %359 {sv.namehint = "_signext_a_T_21"} : i1
    %365 = comb.extract %358 from 0 {sv.namehint = "_signext_a_T_20"} : (i6) -> i1
    %366 = comb.extract %362 from 3 : (i4) -> i1
    %367 = comb.or %366, %364 {sv.namehint = "_signext_a_T_25"} : i1
    %368 = comb.extract %362 from 2 : (i4) -> i1
    %369 = comb.or %368, %365 {sv.namehint = "_signext_a_T_24"} : i1
    %370 = comb.extract %362 from 1 : (i4) -> i1
    %371 = comb.or %370, %359 {sv.namehint = "_signext_a_T_23"} : i1
    %372 = comb.extract %362 from 0 {sv.namehint = "_signext_a_T_22"} : (i4) -> i1
    %373 = comb.replicate %359 {sv.namehint = "signext_a_lo_lo_hi"} : (i1) -> i8
    %374 = comb.replicate %365 {sv.namehint = "signext_a_lo_hi_lo"} : (i1) -> i8
    %375 = comb.replicate %364 {sv.namehint = "signext_a_lo_hi_hi"} : (i1) -> i8
    %376 = comb.replicate %372 {sv.namehint = "signext_a_hi_lo_lo"} : (i1) -> i8
    %377 = comb.replicate %371 {sv.namehint = "signext_a_hi_lo_hi"} : (i1) -> i8
    %378 = comb.replicate %369 {sv.namehint = "signext_a_hi_hi_lo"} : (i1) -> i8
    %379 = comb.replicate %367 {sv.namehint = "signext_a_hi_hi_hi"} : (i1) -> i8
    %380 = comb.concat %379, %378, %377, %376, %375, %374, %373, %c0_i8 {sv.namehint = "signext_a"} : i8, i8, i8, i8, i8, i8, i8, i8
    %381 = comb.extract %355 from 0 : (i7) -> i6
    %382 = comb.extract %355 from 1 : (i7) -> i6
    %383 = comb.or %382, %381 : i6
    %384 = comb.extract %355 from 0 {sv.namehint = "_signext_d_T_19"} : (i7) -> i1
    %385 = comb.extract %383 from 0 : (i6) -> i4
    %386 = comb.extract %383 from 2 : (i6) -> i4
    %387 = comb.or %386, %385 : i4
    %388 = comb.extract %383 from 1 : (i6) -> i1
    %389 = comb.or %388, %384 {sv.namehint = "_signext_d_T_21"} : i1
    %390 = comb.extract %383 from 0 {sv.namehint = "_signext_d_T_20"} : (i6) -> i1
    %391 = comb.extract %387 from 3 : (i4) -> i1
    %392 = comb.or %391, %389 {sv.namehint = "_signext_d_T_25"} : i1
    %393 = comb.extract %387 from 2 : (i4) -> i1
    %394 = comb.or %393, %390 {sv.namehint = "_signext_d_T_24"} : i1
    %395 = comb.extract %387 from 1 : (i4) -> i1
    %396 = comb.or %395, %384 {sv.namehint = "_signext_d_T_23"} : i1
    %397 = comb.extract %387 from 0 {sv.namehint = "_signext_d_T_22"} : (i4) -> i1
    %398 = comb.replicate %384 {sv.namehint = "signext_d_lo_lo_hi"} : (i1) -> i8
    %399 = comb.replicate %390 {sv.namehint = "signext_d_lo_hi_lo"} : (i1) -> i8
    %400 = comb.replicate %389 {sv.namehint = "signext_d_lo_hi_hi"} : (i1) -> i8
    %401 = comb.replicate %397 {sv.namehint = "signext_d_hi_lo_lo"} : (i1) -> i8
    %402 = comb.replicate %396 {sv.namehint = "signext_d_hi_lo_hi"} : (i1) -> i8
    %403 = comb.replicate %394 {sv.namehint = "signext_d_hi_hi_lo"} : (i1) -> i8
    %404 = comb.replicate %392 {sv.namehint = "signext_d_hi_hi_hi"} : (i1) -> i8
    %405 = comb.concat %404, %403, %402, %401, %400, %399, %398, %c0_i8 {sv.namehint = "signext_d"} : i8, i8, i8, i8, i8, i8, i8, i8
    %406 = comb.extract %cam_a_0_bits_mask from 0 {sv.namehint = "_wide_mask_T_8"} : (i8) -> i1
    %407 = comb.extract %cam_a_0_bits_mask from 1 {sv.namehint = "_wide_mask_T_9"} : (i8) -> i1
    %408 = comb.extract %cam_a_0_bits_mask from 2 {sv.namehint = "_wide_mask_T_10"} : (i8) -> i1
    %409 = comb.extract %cam_a_0_bits_mask from 3 {sv.namehint = "_wide_mask_T_11"} : (i8) -> i1
    %410 = comb.extract %cam_a_0_bits_mask from 4 {sv.namehint = "_wide_mask_T_12"} : (i8) -> i1
    %411 = comb.extract %cam_a_0_bits_mask from 5 {sv.namehint = "_wide_mask_T_13"} : (i8) -> i1
    %412 = comb.extract %cam_a_0_bits_mask from 6 {sv.namehint = "_wide_mask_T_14"} : (i8) -> i1
    %413 = comb.extract %cam_a_0_bits_mask from 7 {sv.namehint = "_wide_mask_T_15"} : (i8) -> i1
    %414 = comb.replicate %406 {sv.namehint = "wide_mask_lo_lo_lo"} : (i1) -> i8
    %415 = comb.replicate %407 {sv.namehint = "wide_mask_lo_lo_hi"} : (i1) -> i8
    %416 = comb.replicate %408 {sv.namehint = "wide_mask_lo_hi_lo"} : (i1) -> i8
    %417 = comb.replicate %409 {sv.namehint = "wide_mask_lo_hi_hi"} : (i1) -> i8
    %418 = comb.replicate %410 {sv.namehint = "wide_mask_hi_lo_lo"} : (i1) -> i8
    %419 = comb.replicate %411 {sv.namehint = "wide_mask_hi_lo_hi"} : (i1) -> i8
    %420 = comb.replicate %412 {sv.namehint = "wide_mask_hi_hi_lo"} : (i1) -> i8
    %421 = comb.replicate %413 {sv.namehint = "wide_mask_hi_hi_hi"} : (i1) -> i8
    %422 = comb.concat %421, %420, %419, %418, %417, %416, %415, %414 {sv.namehint = "wide_mask"} : i8, i8, i8, i8, i8, i8, i8, i8
    %423 = comb.and bin %cam_a_0_bits_data, %422 {sv.namehint = "_a_a_ext_T"} : i64
    %424 = comb.or bin %423, %380 {sv.namehint = "a_a_ext"} : i64
    %425 = comb.and bin %cam_d_0_data, %422 {sv.namehint = "_a_d_ext_T"} : i64
    %426 = comb.or bin %425, %405 {sv.namehint = "a_d_ext"} : i64
    %427 = comb.xor %346, %true : i1
    %428 = comb.replicate %427 : (i1) -> i64
    %429 = comb.xor %428, %426 {sv.namehint = "a_d_inv"} : i64
    %430 = comb.add %424, %429 {sv.namehint = "_adder_out_T"} : i64
    %431 = comb.extract %424 from 63 {sv.namehint = "_a_bigger_T"} : (i64) -> i1
    %432 = comb.icmp bin eq %344, %431 {sv.namehint = "a_bigger_uneq"} : i1
    %433 = comb.extract %426 from 63 {sv.namehint = "_a_bigger_T_1"} : (i64) -> i1
    %434 = comb.icmp bin eq %431, %433 {sv.namehint = "_a_bigger_T_2"} : i1
    %435 = comb.extract %430 from 63 {sv.namehint = "_a_bigger_T_3"} : (i64) -> i1
    %436 = comb.xor bin %435, %true {sv.namehint = "_a_bigger_T_4"} : i1
    %437 = comb.mux bin %434, %436, %432 {sv.namehint = "a_bigger"} : i1
    %438 = comb.icmp bin eq %345, %437 {sv.namehint = "pick_a"} : i1
    %439 = comb.mux bin %438, %cam_a_0_bits_data, %cam_d_0_data {sv.namehint = "_arith_out_T"} : i64
    %440 = comb.mux bin %346, %430, %439 {sv.namehint = "arith_out"} : i64
    %441 = comb.extract %cam_a_0_bits_opcode from 0 {sv.namehint = "_amo_data_T"} : (i3) -> i1
    %442 = comb.mux bin %441, %343, %440 {sv.namehint = "amo_data"} : i64
    %443 = comb.xor bin %5, %true {sv.namehint = "_a_allow_T"} : i1
    %444 = comb.or bin %22, %2 {sv.namehint = "_a_allow_T_1"} : i1
    %445 = comb.and bin %443, %444 {sv.namehint = "a_allow"} : i1
    %446 = comb.and bin %525, %445 {sv.namehint = "bundleIn_0_a_ready"} : i1
    %447 = comb.and bin %auto_in_a_valid, %445 {sv.namehint = "validQuals_1"} : i1
    %448 = comb.xor bin %22, %true : i1
    %449 = comb.mux bin %22, %auto_in_a_bits_opcode, %c-4_i3 {sv.namehint = "out_1_bits_opcode"} : i3
    %450 = comb.or bin %cam_a_0_bits_corrupt, %cam_d_0_corrupt {sv.namehint = "out_bits_corrupt"} : i1
    %451 = comb.extract %cam_a_0_bits_size from 0 {sv.namehint = "source_c_bits_a_mask_sizeOH_shiftAmount"} : (i4) -> i2
    %452 = comb.icmp bin ugt %cam_a_0_bits_size, %c2_i4 {sv.namehint = "_source_c_bits_a_mask_T"} : i4
    %453 = comb.icmp eq %451, %c-2_i2 {sv.namehint = "source_c_bits_a_mask_size"} : i2
    %454 = comb.extract %cam_a_0_bits_address from 2 {sv.namehint = "source_c_bits_a_mask_bit"} : (i28) -> i1
    %455 = comb.xor bin %454, %true {sv.namehint = "source_c_bits_a_mask_eq"} : i1
    %456 = comb.and bin %453, %455 {sv.namehint = "_source_c_bits_a_mask_acc_T"} : i1
    %457 = comb.or bin %452, %456 {sv.namehint = "source_c_bits_a_mask_acc"} : i1
    %458 = comb.and bin %453, %454 {sv.namehint = "_source_c_bits_a_mask_acc_T_1"} : i1
    %459 = comb.or bin %452, %458 {sv.namehint = "source_c_bits_a_mask_acc_1"} : i1
    %460 = comb.icmp eq %451, %c1_i2 {sv.namehint = "source_c_bits_a_mask_size_1"} : i2
    %461 = comb.extract %cam_a_0_bits_address from 1 {sv.namehint = "source_c_bits_a_mask_bit_1"} : (i28) -> i1
    %462 = comb.xor bin %461, %true {sv.namehint = "source_c_bits_a_mask_nbit_1"} : i1
    %463 = comb.and bin %455, %462 {sv.namehint = "source_c_bits_a_mask_eq_2"} : i1
    %464 = comb.and bin %460, %463 {sv.namehint = "_source_c_bits_a_mask_acc_T_2"} : i1
    %465 = comb.or bin %457, %464 {sv.namehint = "source_c_bits_a_mask_acc_2"} : i1
    %466 = comb.and bin %455, %461 {sv.namehint = "source_c_bits_a_mask_eq_3"} : i1
    %467 = comb.and bin %460, %466 {sv.namehint = "_source_c_bits_a_mask_acc_T_3"} : i1
    %468 = comb.or bin %457, %467 {sv.namehint = "source_c_bits_a_mask_acc_3"} : i1
    %469 = comb.and bin %454, %462 {sv.namehint = "source_c_bits_a_mask_eq_4"} : i1
    %470 = comb.and bin %460, %469 {sv.namehint = "_source_c_bits_a_mask_acc_T_4"} : i1
    %471 = comb.or bin %459, %470 {sv.namehint = "source_c_bits_a_mask_acc_4"} : i1
    %472 = comb.and bin %454, %461 {sv.namehint = "source_c_bits_a_mask_eq_5"} : i1
    %473 = comb.and bin %460, %472 {sv.namehint = "_source_c_bits_a_mask_acc_T_5"} : i1
    %474 = comb.or bin %459, %473 {sv.namehint = "source_c_bits_a_mask_acc_5"} : i1
    %475 = comb.extract %cam_a_0_bits_address from 0 {sv.namehint = "source_c_bits_a_mask_bit_2"} : (i28) -> i1
    %476 = comb.xor bin %475, %true {sv.namehint = "source_c_bits_a_mask_nbit_2"} : i1
    %477 = comb.and bin %463, %476 {sv.namehint = "source_c_bits_a_mask_eq_6"} : i1
    %478 = comb.or bin %465, %477 {sv.namehint = "source_c_bits_a_mask_lo_lo_lo"} : i1
    %479 = comb.and bin %463, %475 {sv.namehint = "source_c_bits_a_mask_eq_7"} : i1
    %480 = comb.or bin %465, %479 {sv.namehint = "source_c_bits_a_mask_lo_lo_hi"} : i1
    %481 = comb.and bin %466, %476 {sv.namehint = "source_c_bits_a_mask_eq_8"} : i1
    %482 = comb.or bin %468, %481 {sv.namehint = "source_c_bits_a_mask_lo_hi_lo"} : i1
    %483 = comb.and bin %466, %475 {sv.namehint = "source_c_bits_a_mask_eq_9"} : i1
    %484 = comb.or bin %468, %483 {sv.namehint = "source_c_bits_a_mask_lo_hi_hi"} : i1
    %485 = comb.and bin %469, %476 {sv.namehint = "source_c_bits_a_mask_eq_10"} : i1
    %486 = comb.or bin %471, %485 {sv.namehint = "source_c_bits_a_mask_hi_lo_lo"} : i1
    %487 = comb.and bin %469, %475 {sv.namehint = "source_c_bits_a_mask_eq_11"} : i1
    %488 = comb.or bin %471, %487 {sv.namehint = "source_c_bits_a_mask_hi_lo_hi"} : i1
    %489 = comb.and bin %472, %476 {sv.namehint = "source_c_bits_a_mask_eq_12"} : i1
    %490 = comb.or bin %474, %489 {sv.namehint = "source_c_bits_a_mask_hi_hi_lo"} : i1
    %491 = comb.and bin %472, %475 {sv.namehint = "source_c_bits_a_mask_eq_13"} : i1
    %492 = comb.or bin %474, %491 {sv.namehint = "source_c_bits_a_mask_hi_hi_hi"} : i1
    %493 = comb.concat %492, %490, %488, %486, %484, %482, %480, %478 {sv.namehint = "out_bits_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %494 = comb.concat %c0_i23, %auto_in_a_bits_size : i23, i4
    %495 = comb.shl bin %c4095_i27, %494 {sv.namehint = "_decode_T_1"} : i27
    %496 = comb.extract %495 from 3 : (i27) -> i9
    %497 = comb.xor %496, %c-1_i9 {sv.namehint = "_decode_T_3"} : i9
    %498 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_opdata_T"} : (i3) -> i1
    %499 = comb.xor bin %498, %true {sv.namehint = "opdata"} : i1
    %beatsLeft = seq.firreg %518 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 186 : ui64} : i9
    %500 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %501 = comb.and bin %500, %auto_out_a_ready {sv.namehint = "latch"} : i1
    %502 = comb.xor %3, %true {sv.namehint = "readys_1"} : i1
    %503 = comb.and bin %502, %447 {sv.namehint = "earlyWinner_1"} : i1
    %504 = comb.and bin %502, %447 {sv.namehint = "winnerQual_1"} : i1
    %505 = comb.xor bin %3, %true : i1
    %506 = comb.xor bin %503, %true : i1
    %507 = comb.or bin %505, %506, %reset : i1
    %508 = comb.xor bin %507, %true : i1
    %509 = comb.or bin %3, %447 {sv.namehint = "_sink_ACancel_earlyValid_T"} : i1
    %510 = comb.xor bin %509, %true : i1
    %511 = comb.or bin %510, %3, %503, %reset : i1
    %512 = comb.xor bin %511, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %1 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %600 = comb.and bin %STOP_COND_, %508 : i1
        sv.if %600 {
          sv.fatal 1
        }
        %601 = comb.and bin %STOP_COND_, %512 : i1
        sv.if %601 {
          sv.fatal 1
        }
        %602 = comb.and bin %STOP_COND_, %false : i1
        sv.if %602 {
          sv.fatal 1
        }
      }
    }
    %513 = comb.and bin %504, %499 : i1
    %514 = comb.mux bin %513, %497, %c0_i9 {sv.namehint = "initBeats"} : i9
    %515 = comb.and bin %auto_out_a_ready, %529 {sv.namehint = "_beatsLeft_T_2"} : i1
    %516 = comb.concat %c0_i8, %515 : i8, i1
    %517 = comb.sub %beatsLeft, %516 {sv.namehint = "_beatsLeft_T_3"} : i9
    %518 = comb.mux bin %501, %514, %517 {sv.namehint = "_beatsLeft_T_5"} : i9
    %state_0 = seq.firreg %521 clock %clock reset sync %reset, %false {firrtl.random_init_start = 195 : ui64} : i1
    %state_1 = seq.firreg %522 clock %clock reset sync %reset, %false {firrtl.random_init_start = 196 : ui64} : i1
    %519 = comb.mux bin %500, %3, %state_0 {sv.namehint = "muxStateEarly_0"} : i1
    %520 = comb.mux bin %500, %503, %state_1 {sv.namehint = "muxStateEarly_1"} : i1
    %521 = comb.mux bin %500, %3, %state_0 {sv.namehint = "muxStateQual_0"} : i1
    %522 = comb.mux bin %500, %504, %state_1 {sv.namehint = "muxStateQual_1"} : i1
    %523 = comb.or %500, %state_0 {sv.namehint = "allowed_0"} : i1
    %524 = comb.mux bin %500, %502, %state_1 {sv.namehint = "allowed_1"} : i1
    %525 = comb.and bin %auto_out_a_ready, %524 {sv.namehint = "out_1_ready"} : i1
    %526 = comb.and %state_0, %3 {sv.namehint = "_sink_ACancel_earlyValid_T_1"} : i1
    %527 = comb.and %state_1, %447 {sv.namehint = "_sink_ACancel_earlyValid_T_2"} : i1
    %528 = comb.or bin %526, %527 {sv.namehint = "_sink_ACancel_earlyValid_T_3"} : i1
    %529 = comb.mux bin %500, %509, %528 {sv.namehint = "out_2_valid"} : i1
    %530 = comb.and %519, %450 : i1
    %531 = comb.and %520, %auto_in_a_bits_corrupt : i1
    %532 = comb.or bin %530, %531 {sv.namehint = "out_2_bits_corrupt"} : i1
    %533 = comb.mux bin %519, %442, %c0_i64 : i64
    %534 = comb.mux bin %520, %auto_in_a_bits_data, %c0_i64 : i64
    %535 = comb.or bin %533, %534 {sv.namehint = "out_2_bits_data"} : i64
    %536 = comb.mux bin %519, %493, %c0_i8 : i8
    %537 = comb.mux bin %520, %auto_in_a_bits_mask, %c0_i8 : i8
    %538 = comb.or bin %536, %537 {sv.namehint = "out_2_bits_mask"} : i8
    %539 = comb.mux bin %519, %cam_a_0_bits_address, %c0_i28 : i28
    %540 = comb.mux bin %520, %auto_in_a_bits_address, %c0_i28 : i28
    %541 = comb.or bin %539, %540 {sv.namehint = "out_2_bits_address"} : i28
    %542 = comb.mux bin %519, %cam_a_0_bits_source, %c0_i2 : i2
    %543 = comb.mux bin %520, %auto_in_a_bits_source, %c0_i2 : i2
    %544 = comb.or bin %542, %543 {sv.namehint = "out_2_bits_source"} : i2
    %545 = comb.mux bin %519, %cam_a_0_bits_size, %c0_i4 : i4
    %546 = comb.mux bin %520, %auto_in_a_bits_size, %c0_i4 : i4
    %547 = comb.or bin %545, %546 {sv.namehint = "out_2_bits_size"} : i4
    %548 = comb.and %520, %22 : i1
    %549 = comb.mux bin %548, %auto_in_a_bits_param, %c0_i3 {sv.namehint = "out_2_bits_param"} : i3
    %550 = comb.mux bin %520, %449, %c0_i3 {sv.namehint = "out_2_bits_opcode"} : i3
    %551 = comb.and bin %525, %447, %448, %2 : i1
    %552 = comb.mux bin %551, %auto_in_a_bits_opcode, %cam_a_0_bits_opcode : i3
    %553 = comb.mux bin %551, %auto_in_a_bits_param, %cam_a_0_bits_param : i3
    %554 = comb.mux bin %551, %auto_in_a_bits_size, %cam_a_0_bits_size : i4
    %555 = comb.mux bin %551, %auto_in_a_bits_source, %cam_a_0_bits_source : i2
    %556 = comb.mux bin %551, %auto_in_a_bits_address, %cam_a_0_bits_address : i28
    %557 = comb.mux bin %551, %auto_in_a_bits_mask, %cam_a_0_bits_mask : i8
    %558 = comb.mux bin %551, %auto_in_a_bits_data, %cam_a_0_bits_data : i64
    %559 = comb.mux bin %551, %auto_in_a_bits_corrupt, %cam_a_0_bits_corrupt : i1
    %560 = comb.extract %auto_in_a_bits_param from 0 {sv.namehint = "_cam_a_0_lut_T"} : (i3) -> i2
    %561 = hw.array_get %0[%560] {sv.namehint = "_cam_a_0_lut_T_6"} : !hw.array<4xi4>, i2
    %562 = comb.mux bin %551, %561, %cam_a_0_lut : i4
    %563 = comb.mux bin %551, %c-1_i2, %cam_s_0_state : i2
    %564 = comb.and %auto_out_a_ready, %523, %3 : i1
    %565 = comb.mux bin %564, %c1_i2, %563 : i2
    %566 = comb.and bin %593, %auto_out_d_valid {sv.namehint = "_d_first_T"} : i1
    %567 = comb.concat %c0_i23, %auto_out_d_bits_size : i23, i4
    %568 = comb.shl bin %c4095_i27, %567 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %569 = comb.extract %568 from 3 : (i27) -> i9
    %570 = comb.xor %569, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %571 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %572 = comb.mux bin %571, %570, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %576 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 197 : ui64} : i9
    %573 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %574 = comb.icmp bin eq %d_first_counter, %c0_i9 {sv.namehint = "d_first"} : i9
    %575 = comb.mux bin %574, %572, %573 {sv.namehint = "_d_first_counter_T"} : i9
    %576 = comb.mux bin %566, %575, %d_first_counter : i9
    %577 = comb.icmp bin eq %cam_a_0_bits_source, %auto_out_d_bits_source {sv.namehint = "d_cam_sel_raw_0"} : i2
    %578 = comb.and bin %577, %6 {sv.namehint = "d_cam_sel_0"} : i1
    %579 = comb.icmp bin eq %auto_out_d_bits_opcode, %c1_i3 {sv.namehint = "d_ackd"} : i3
    %580 = comb.icmp bin eq %auto_out_d_bits_opcode, %c0_i3 {sv.namehint = "d_ack"} : i3
    %581 = comb.and bin %566, %574 : i1
    %582 = comb.and bin %581, %578, %579 : i1
    %583 = comb.mux bin %582, %auto_out_d_bits_data, %cam_d_0_data : i64
    %584 = comb.mux bin %582, %auto_out_d_bits_denied, %cam_d_0_denied : i1
    %585 = comb.mux bin %582, %auto_out_d_bits_corrupt, %cam_d_0_corrupt : i1
    %586 = comb.concat %579, %false {sv.namehint = "_cam_s_0_state_T"} : i1, i1
    %587 = comb.and bin %581, %578 : i1
    %588 = comb.mux bin %587, %586, %565 : i2
    %589 = comb.and bin %574, %579, %578 {sv.namehint = "d_drop"} : i1
    %590 = comb.and bin %574, %580, %578 {sv.namehint = "d_replace"} : i1
    %591 = comb.xor bin %589, %true {sv.namehint = "_bundleIn_0_d_valid_T"} : i1
    %592 = comb.and bin %auto_out_d_valid, %591 {sv.namehint = "bundleIn_0_d_valid"} : i1
    %593 = comb.or bin %auto_in_d_ready, %589 {sv.namehint = "bundleOut_0_d_ready"} : i1
    %594 = comb.mux bin %590, %c1_i3, %auto_out_d_bits_opcode {sv.namehint = "bundleIn_0_d_bits_opcode"} : i3
    %595 = comb.mux bin %590, %cam_d_0_data, %auto_out_d_bits_data {sv.namehint = "bundleIn_0_d_bits_data"} : i64
    %596 = comb.or bin %cam_d_0_corrupt, %auto_out_d_bits_denied {sv.namehint = "_bundleIn_0_d_bits_corrupt_T"} : i1
    %597 = comb.mux bin %590, %596, %auto_out_d_bits_corrupt {sv.namehint = "bundleIn_0_d_bits_corrupt"} : i1
    %598 = comb.and %590, %cam_d_0_denied : i1
    %599 = comb.or %598, %auto_out_d_bits_denied {sv.namehint = "bundleIn_0_d_bits_denied"} : i1
    hw.output %446, %592, %594, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %599, %595, %597, %529, %550, %549, %547, %544, %541, %538, %535, %532, %593 : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_7(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i14, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i2 = hw.constant -1 : i2
    %c4_i4 = hw.constant 4 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i47 = hw.constant 255 : i47
    %c15_i47 = hw.constant 15 : i47
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %c1_i2 = hw.constant 1 : i2
    %c-1_i12 = hw.constant -1 : i12
    %false = hw.constant false
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i24 = hw.constant 0 : i24
    %c0_i12 = hw.constant 0 : i12
    %c0_i5 = hw.constant 0 : i5
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i24 = hw.constant -1 : i24
    %c0_i42 = hw.constant 0 : i42
    %c0_i31 = hw.constant 0 : i31
    %c0_i19 = hw.constant 0 : i19
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i23 = hw.constant 0 : i23
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %7 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %9 = comb.xor bin %8, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %10 = comb.extract %io_in_a_bits_address from 0 : (i14) -> i12
    %11 = comb.and bin %10, %9 : i12
    %12 = comb.icmp bin eq %11, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i14) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i14) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i14) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %59 = comb.extract %io_in_a_bits_address from 12 : (i14) -> i2
    %60 = comb.xor bin %reset, %true : i1
    %61 = comb.and bin %57, %60 : i1
    %62 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %63 = comb.icmp eq %59, %c-1_i2 : i2
    %64 = comb.and bin %58, %63 : i1
    %65 = comb.and bin %3, %62, %64 : i1
    %66 = comb.or bin %65, %reset : i1
    %67 = comb.xor bin %66, %true : i1
    %68 = comb.and bin %57, %67 : i1
    %69 = comb.or bin %3, %4, %5, %reset : i1
    %70 = comb.xor bin %69, %true : i1
    %71 = comb.and bin %57, %70 : i1
    %72 = comb.or bin %14, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %57, %73 : i1
    %75 = comb.or bin %12, %reset : i1
    %76 = comb.xor bin %75, %true : i1
    %77 = comb.and bin %57, %76 : i1
    %78 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %79 = comb.or bin %78, %reset : i1
    %80 = comb.xor bin %79, %true : i1
    %81 = comb.and bin %57, %80 : i1
    %82 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %83 = comb.or bin %82, %reset : i1
    %84 = comb.xor bin %83, %true : i1
    %85 = comb.and bin %57, %84 : i1
    %86 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %87 = comb.or bin %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %57, %88 : i1
    %90 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %91 = comb.and bin %io_in_a_valid, %90 : i1
    %92 = comb.and bin %91, %60 : i1
    %93 = comb.and bin %3, %62, %64 : i1
    %94 = comb.or bin %93, %reset : i1
    %95 = comb.xor bin %94, %true : i1
    %96 = comb.and bin %91, %95 : i1
    %97 = comb.and bin %91, %70 : i1
    %98 = comb.and bin %91, %73 : i1
    %99 = comb.and bin %91, %76 : i1
    %100 = comb.and bin %91, %80 : i1
    %101 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %102 = comb.or bin %101, %reset : i1
    %103 = comb.xor bin %102, %true : i1
    %104 = comb.and bin %91, %103 : i1
    %105 = comb.and bin %91, %84 : i1
    %106 = comb.and bin %91, %88 : i1
    %107 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %108 = comb.and bin %io_in_a_valid, %107 : i1
    %109 = comb.or bin %3, %4, %5 : i1
    %110 = comb.and bin %58, %109 : i1
    %111 = comb.or bin %110, %reset : i1
    %112 = comb.xor bin %111, %true : i1
    %113 = comb.and bin %108, %112 : i1
    %114 = comb.or bin %64, %reset : i1
    %115 = comb.xor bin %114, %true : i1
    %116 = comb.and bin %108, %115 : i1
    %117 = comb.and bin %108, %70 : i1
    %118 = comb.and bin %108, %76 : i1
    %119 = comb.xor bin %101, %true : i1
    %120 = comb.or bin %119, %reset : i1
    %121 = comb.xor bin %120, %true : i1
    %122 = comb.and bin %108, %121 : i1
    %123 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %124 = comb.or bin %123, %reset : i1
    %125 = comb.xor bin %124, %true : i1
    %126 = comb.and bin %108, %125 : i1
    %127 = comb.and bin %108, %88 : i1
    %128 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %129 = comb.and bin %io_in_a_valid, %128 : i1
    %130 = comb.and bin %110, %64 : i1
    %131 = comb.or bin %130, %reset : i1
    %132 = comb.xor bin %131, %true : i1
    %133 = comb.and bin %129, %132 : i1
    %134 = comb.and bin %129, %70 : i1
    %135 = comb.and bin %129, %76 : i1
    %136 = comb.and bin %129, %121 : i1
    %137 = comb.and bin %129, %125 : i1
    %138 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %139 = comb.and bin %io_in_a_valid, %138 : i1
    %140 = comb.and bin %139, %132 : i1
    %141 = comb.and bin %139, %70 : i1
    %142 = comb.and bin %139, %76 : i1
    %143 = comb.and bin %139, %121 : i1
    %144 = comb.xor bin %55, %c-1_i8 : i8
    %145 = comb.and bin %io_in_a_bits_mask, %144 : i8
    %146 = comb.icmp bin eq %145, %c0_i8 : i8
    %147 = comb.or bin %146, %reset : i1
    %148 = comb.xor bin %147, %true : i1
    %149 = comb.and bin %139, %148 : i1
    %150 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %151 = comb.and bin %io_in_a_valid, %150 : i1
    %152 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %153 = comb.and bin %110, %152, %63 : i1
    %154 = comb.or bin %153, %reset : i1
    %155 = comb.xor bin %154, %true : i1
    %156 = comb.and bin %151, %155 : i1
    %157 = comb.and bin %151, %70 : i1
    %158 = comb.and bin %151, %76 : i1
    %159 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %160 = comb.or bin %159, %reset : i1
    %161 = comb.xor bin %160, %true : i1
    %162 = comb.and bin %151, %161 : i1
    %163 = comb.and bin %151, %125 : i1
    %164 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %165 = comb.and bin %io_in_a_valid, %164 : i1
    %166 = comb.and bin %165, %155 : i1
    %167 = comb.and bin %165, %70 : i1
    %168 = comb.and bin %165, %76 : i1
    %169 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %170 = comb.xor bin %169, %true : i1
    %171 = comb.or bin %170, %reset : i1
    %172 = comb.xor bin %171, %true : i1
    %173 = comb.and bin %165, %172 : i1
    %174 = comb.and bin %165, %125 : i1
    %175 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %176 = comb.and bin %io_in_a_valid, %175 : i1
    %177 = comb.and bin %176, %132 : i1
    %178 = comb.and bin %176, %70 : i1
    %179 = comb.and bin %176, %76 : i1
    %180 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %181 = comb.or bin %180, %reset : i1
    %182 = comb.xor bin %181, %true : i1
    %183 = comb.and bin %176, %182 : i1
    %184 = comb.and bin %176, %125 : i1
    %185 = comb.and bin %176, %88 : i1
    %186 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %187 = comb.or bin %186, %reset : i1
    %188 = comb.xor bin %187, %true : i1
    %189 = comb.and bin %io_in_d_valid, %188 : i1
    %190 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %191 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %192 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %193 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %194 = comb.and bin %io_in_d_valid, %193 : i1
    %195 = comb.or bin %190, %191, %192, %reset : i1
    %196 = comb.xor bin %195, %true : i1
    %197 = comb.and bin %194, %196 : i1
    %198 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %199 = comb.or bin %198, %reset : i1
    %200 = comb.xor bin %199, %true : i1
    %201 = comb.and bin %194, %200 : i1
    %202 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %203 = comb.or bin %202, %reset : i1
    %204 = comb.xor bin %203, %true : i1
    %205 = comb.and bin %194, %204 : i1
    %206 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %207 = comb.or bin %206, %reset : i1
    %208 = comb.xor bin %207, %true : i1
    %209 = comb.and bin %194, %208 : i1
    %210 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %211 = comb.or bin %210, %reset : i1
    %212 = comb.xor bin %211, %true : i1
    %213 = comb.and bin %194, %212 : i1
    %214 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %215 = comb.and bin %io_in_d_valid, %214 : i1
    %216 = comb.and bin %215, %196 : i1
    %217 = comb.and bin %215, %60 : i1
    %218 = comb.and bin %215, %200 : i1
    %219 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %220 = comb.or bin %219, %reset : i1
    %221 = comb.xor bin %220, %true : i1
    %222 = comb.and bin %215, %221 : i1
    %223 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %224 = comb.or bin %223, %reset : i1
    %225 = comb.xor bin %224, %true : i1
    %226 = comb.and bin %215, %225 : i1
    %227 = comb.and bin %215, %208 : i1
    %228 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %229 = comb.and bin %io_in_d_valid, %228 : i1
    %230 = comb.and bin %229, %196 : i1
    %231 = comb.and bin %229, %60 : i1
    %232 = comb.and bin %229, %200 : i1
    %233 = comb.and bin %229, %221 : i1
    %234 = comb.and bin %229, %225 : i1
    %235 = comb.or bin %210, %io_in_d_bits_corrupt, %reset : i1
    %236 = comb.xor bin %235, %true : i1
    %237 = comb.and bin %229, %236 : i1
    %238 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %239 = comb.and bin %io_in_d_valid, %238 : i1
    %240 = comb.and bin %239, %196 : i1
    %241 = comb.and bin %239, %204 : i1
    %242 = comb.and bin %239, %208 : i1
    %243 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %244 = comb.and bin %io_in_d_valid, %243 : i1
    %245 = comb.and bin %244, %196 : i1
    %246 = comb.and bin %244, %204 : i1
    %247 = comb.and bin %244, %236 : i1
    %248 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %249 = comb.and bin %io_in_d_valid, %248 : i1
    %250 = comb.and bin %249, %196 : i1
    %251 = comb.and bin %249, %204 : i1
    %252 = comb.and bin %249, %208 : i1
    %253 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %254 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %255 = comb.extract %254 from 3 : (i27) -> i9
    %256 = comb.xor %255, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %257 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %258 = comb.mux bin %257, %c0_i9, %256 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %263 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %259 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %260 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %261 = comb.xor bin %260, %true {sv.namehint = "a_first"} : i1
    %262 = comb.mux bin %260, %259, %258 {sv.namehint = "_a_first_counter_T"} : i9
    %263 = comb.mux bin %253, %262, %a_first_counter : i9
    %opcode = seq.firreg %286 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %287 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %288 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %289 clock %clock {firrtl.random_init_start = 19 : ui64} : i2
    %address = seq.firreg %290 clock %clock {firrtl.random_init_start = 21 : ui64} : i14
    %264 = comb.and bin %io_in_a_valid, %260 : i1
    %265 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %266 = comb.or bin %265, %reset : i1
    %267 = comb.xor bin %266, %true : i1
    %268 = comb.and bin %264, %267 : i1
    %269 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %270 = comb.or bin %269, %reset : i1
    %271 = comb.xor bin %270, %true : i1
    %272 = comb.and bin %264, %271 : i1
    %273 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %274 = comb.or bin %273, %reset : i1
    %275 = comb.xor bin %274, %true : i1
    %276 = comb.and bin %264, %275 : i1
    %277 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %278 = comb.or bin %277, %reset : i1
    %279 = comb.xor bin %278, %true : i1
    %280 = comb.and bin %264, %279 : i1
    %281 = comb.icmp bin eq %io_in_a_bits_address, %address : i14
    %282 = comb.or bin %281, %reset : i1
    %283 = comb.xor bin %282, %true : i1
    %284 = comb.and bin %264, %283 : i1
    %285 = comb.and bin %253, %261 : i1
    %286 = comb.mux bin %285, %io_in_a_bits_opcode, %opcode : i3
    %287 = comb.mux bin %285, %io_in_a_bits_param, %param : i3
    %288 = comb.mux bin %285, %io_in_a_bits_size, %size : i4
    %289 = comb.mux bin %285, %io_in_a_bits_source, %source : i2
    %290 = comb.mux bin %285, %io_in_a_bits_address, %address : i14
    %291 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %292 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %293 = comb.shl bin %c4095_i27, %292 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %294 = comb.extract %293 from 3 : (i27) -> i9
    %295 = comb.xor %294, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %296 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %297 = comb.mux bin %296, %295, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %302 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 35 : ui64} : i9
    %298 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %299 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %300 = comb.xor bin %299, %true {sv.namehint = "d_first"} : i1
    %301 = comb.mux bin %299, %298, %297 {sv.namehint = "_d_first_counter_T"} : i9
    %302 = comb.mux bin %291, %301, %d_first_counter : i9
    %opcode_1 = seq.firreg %329 clock %clock {firrtl.random_init_start = 44 : ui64} : i3
    %param_1 = seq.firreg %330 clock %clock {firrtl.random_init_start = 47 : ui64} : i2
    %size_1 = seq.firreg %331 clock %clock {firrtl.random_init_start = 49 : ui64} : i4
    %source_1 = seq.firreg %332 clock %clock {firrtl.random_init_start = 53 : ui64} : i2
    %sink = seq.firreg %333 clock %clock {firrtl.random_init_start = 55 : ui64} : i1
    %denied = seq.firreg %334 clock %clock {firrtl.random_init_start = 56 : ui64} : i1
    %303 = comb.and bin %io_in_d_valid, %299 : i1
    %304 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %305 = comb.or bin %304, %reset : i1
    %306 = comb.xor bin %305, %true : i1
    %307 = comb.and bin %303, %306 : i1
    %308 = comb.icmp bin eq %param_1, %io_in_d_bits_param : i2
    %309 = comb.or bin %308, %reset : i1
    %310 = comb.xor bin %309, %true : i1
    %311 = comb.and bin %303, %310 : i1
    %312 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %313 = comb.or bin %312, %reset : i1
    %314 = comb.xor bin %313, %true : i1
    %315 = comb.and bin %303, %314 : i1
    %316 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %317 = comb.or bin %316, %reset : i1
    %318 = comb.xor bin %317, %true : i1
    %319 = comb.and bin %303, %318 : i1
    %320 = comb.icmp bin eq %sink, %io_in_d_bits_sink : i1
    %321 = comb.or bin %320, %reset : i1
    %322 = comb.xor bin %321, %true : i1
    %323 = comb.and bin %303, %322 : i1
    %324 = comb.icmp bin eq %denied, %io_in_d_bits_denied : i1
    %325 = comb.or bin %324, %reset : i1
    %326 = comb.xor bin %325, %true : i1
    %327 = comb.and bin %303, %326 : i1
    %328 = comb.and bin %291, %300 : i1
    %329 = comb.mux bin %328, %io_in_d_bits_opcode, %opcode_1 : i3
    %330 = comb.mux bin %328, %io_in_d_bits_param, %param_1 : i2
    %331 = comb.mux bin %328, %io_in_d_bits_size, %size_1 : i4
    %332 = comb.mux bin %328, %io_in_d_bits_source, %source_1 : i2
    %333 = comb.mux bin %328, %io_in_d_bits_sink, %sink : i1
    %334 = comb.mux bin %328, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %457 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 57 : ui64} : i3
    %inflight_opcodes = seq.firreg %460 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 60 : ui64} : i12
    %inflight_sizes = seq.firreg %463 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 72 : ui64} : i24
    %335 = comb.shl bin %c4095_i27, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %336 = comb.extract %335 from 3 : (i27) -> i9
    %337 = comb.xor %336, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %338 = comb.mux bin %257, %c0_i9, %337 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %342 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 96 : ui64} : i9
    %339 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %340 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %341 = comb.mux bin %340, %338, %339 {sv.namehint = "_a_first_counter_T_1"} : i9
    %342 = comb.mux bin %253, %341, %a_first_counter_1 : i9
    %343 = comb.shl bin %c4095_i27, %292 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %344 = comb.extract %343 from 3 : (i27) -> i9
    %345 = comb.xor %344, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %346 = comb.mux bin %296, %345, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %350 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 105 : ui64} : i9
    %347 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %348 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %349 = comb.mux bin %348, %346, %347 {sv.namehint = "_d_first_counter_T_1"} : i9
    %350 = comb.mux bin %291, %349, %d_first_counter_1 : i9
    %351 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %352 = comb.shru bin %inflight_opcodes, %351 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %353 = comb.extract %352 from 1 : (i12) -> i3
    %354 = comb.concat %c0_i19, %io_in_d_bits_source, %c0_i3 : i19, i2, i3
    %355 = comb.shru bin %inflight_sizes, %354 {sv.namehint = "_a_size_lookup_T_1"} : i24
    %356 = comb.extract %355 from 1 : (i24) -> i7
    %357 = comb.concat %false, %356 {sv.namehint = "a_size_lookup"} : i1, i7
    %358 = comb.and bin %io_in_a_valid, %340 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %359 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %360 = comb.shl bin %c1_i4, %359 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %361 = comb.extract %360 from 0 : (i4) -> i3
    %362 = comb.mux bin %358, %361, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %363 = comb.and bin %253, %340 : i1
    %364 = comb.shl bin %c1_i4, %359 {sv.namehint = "_a_set_T"} : i4
    %365 = comb.extract %364 from 0 : (i4) -> i3
    %366 = comb.mux bin %363, %365, %c0_i3 {sv.namehint = "a_set"} : i3
    %367 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %368 = comb.mux bin %363, %367, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %369 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %370 = comb.mux bin %363, %369, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %371 = comb.concat %c0_i31, %368 : i31, i4
    %372 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %373 = comb.shl bin %371, %372 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %374 = comb.extract %373 from 0 : (i35) -> i12
    %375 = comb.mux bin %363, %374, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %376 = comb.concat %c0_i31, %370 : i31, i5
    %377 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i3 : i31, i2, i3
    %378 = comb.shl bin %376, %377 {sv.namehint = "_a_sizes_set_T_1"} : i36
    %379 = comb.extract %378 from 0 : (i36) -> i24
    %380 = comb.mux bin %363, %379, %c0_i24 {sv.namehint = "a_sizes_set"} : i24
    %381 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %382 = comb.shru bin %inflight, %381 : i3
    %383 = comb.extract %382 from 0 : (i3) -> i1
    %384 = comb.xor bin %383, %true : i1
    %385 = comb.or bin %384, %reset : i1
    %386 = comb.xor bin %385, %true : i1
    %387 = comb.and bin %363, %386 : i1
    %388 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %389 = comb.and bin %io_in_d_valid, %348 : i1
    %390 = comb.xor bin %388, %true : i1
    %391 = comb.and bin %389, %390 : i1
    %392 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %393 = comb.shl bin %c1_i4, %392 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %394 = comb.extract %393 from 0 : (i4) -> i3
    %395 = comb.mux bin %391, %394, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %396 = comb.and bin %291, %348, %390 : i1
    %397 = comb.shl bin %c1_i4, %392 {sv.namehint = "_d_clr_T"} : i4
    %398 = comb.extract %397 from 0 : (i4) -> i3
    %399 = comb.mux bin %396, %398, %c0_i3 {sv.namehint = "d_clr"} : i3
    %400 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %401 = comb.shl bin %c15_i47, %400 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %402 = comb.extract %401 from 0 : (i47) -> i12
    %403 = comb.mux bin %396, %402, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %404 = comb.concat %c0_i42, %io_in_d_bits_source, %c0_i3 : i42, i2, i3
    %405 = comb.shl bin %c255_i47, %404 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %406 = comb.extract %405 from 0 : (i47) -> i24
    %407 = comb.mux bin %396, %406, %c0_i24 {sv.namehint = "d_sizes_clr"} : i24
    %408 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %409 = comb.and bin %358, %408 {sv.namehint = "same_cycle_resp"} : i1
    %410 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %411 = comb.shru bin %inflight, %410 : i3
    %412 = comb.extract %411 from 0 : (i3) -> i1
    %413 = comb.or bin %412, %409, %reset : i1
    %414 = comb.xor bin %413, %true : i1
    %415 = comb.and bin %391, %414 : i1
    %416 = comb.and bin %391, %409 : i1
    %417 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %418 = comb.icmp bin eq %io_in_d_bits_opcode, %417 : i3
    %419 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %420 = comb.icmp bin eq %io_in_d_bits_opcode, %419 : i3
    %421 = comb.or bin %418, %420, %reset : i1
    %422 = comb.xor bin %421, %true : i1
    %423 = comb.and bin %416, %422 : i1
    %424 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %425 = comb.or bin %424, %reset : i1
    %426 = comb.xor bin %425, %true : i1
    %427 = comb.and bin %416, %426 : i1
    %428 = comb.xor bin %409, %true : i1
    %429 = comb.and bin %391, %428 : i1
    %430 = hw.array_get %1[%353] : !hw.array<8xi3>, i3
    %431 = comb.icmp bin eq %io_in_d_bits_opcode, %430 : i3
    %432 = hw.array_get %0[%353] : !hw.array<8xi3>, i3
    %433 = comb.icmp bin eq %io_in_d_bits_opcode, %432 : i3
    %434 = comb.or bin %431, %433, %reset : i1
    %435 = comb.xor bin %434, %true : i1
    %436 = comb.and bin %429, %435 : i1
    %437 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %438 = comb.icmp bin eq %437, %357 : i8
    %439 = comb.or bin %438, %reset : i1
    %440 = comb.xor bin %439, %true : i1
    %441 = comb.and bin %429, %440 : i1
    %442 = comb.and bin %389, %340 : i1
    %443 = comb.and bin %442, %io_in_a_valid : i1
    %444 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %445 = comb.and bin %443, %444 : i1
    %446 = comb.and bin %445, %390 : i1
    %447 = comb.xor bin %io_in_d_ready, %true : i1
    %448 = comb.or bin %447, %io_in_a_ready, %reset : i1
    %449 = comb.xor bin %448, %true : i1
    %450 = comb.and bin %446, %449 : i1
    %451 = comb.icmp bin ne %362, %395 : i3
    %452 = comb.icmp bin eq %362, %c0_i3 : i3
    %453 = comb.or bin %451, %452, %reset : i1
    %454 = comb.xor bin %453, %true : i1
    %455 = comb.or bin %inflight, %366 {sv.namehint = "_inflight_T"} : i3
    %456 = comb.xor bin %399, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %457 = comb.and bin %455, %456 {sv.namehint = "_inflight_T_2"} : i3
    %458 = comb.or bin %inflight_opcodes, %375 {sv.namehint = "_inflight_opcodes_T"} : i12
    %459 = comb.xor bin %403, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %460 = comb.and bin %458, %459 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %461 = comb.or bin %inflight_sizes, %380 {sv.namehint = "_inflight_sizes_T"} : i24
    %462 = comb.xor bin %407, %c-1_i24 {sv.namehint = "_inflight_sizes_T_1"} : i24
    %463 = comb.and bin %461, %462 {sv.namehint = "_inflight_sizes_T_2"} : i24
    %watchdog = seq.firreg %471 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 114 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %464 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %465 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %466 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %467 = comb.or bin %464, %465, %466, %reset : i1
    %468 = comb.xor bin %467, %true : i1
    %469 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %470 = comb.or bin %253, %291 : i1
    %471 = comb.mux bin %470, %c0_i32, %469 : i32
    %inflight_1 = seq.firreg %501 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 146 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %503 clock %clock reset sync %reset, %c0_i24 {firrtl.random_init_start = 161 : ui64} : i24
    %472 = comb.shl bin %c4095_i27, %292 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %473 = comb.extract %472 from 3 : (i27) -> i9
    %474 = comb.xor %473, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %475 = comb.mux bin %296, %474, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %479 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 194 : ui64} : i9
    %476 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %477 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %478 = comb.mux bin %477, %475, %476 {sv.namehint = "_d_first_counter_T_2"} : i9
    %479 = comb.mux bin %291, %478, %d_first_counter_2 : i9
    %480 = comb.shru bin %inflight_sizes_1, %354 {sv.namehint = "_c_size_lookup_T_1"} : i24
    %481 = comb.extract %480 from 1 : (i24) -> i7
    %482 = comb.concat %false, %481 {sv.namehint = "c_size_lookup"} : i1, i7
    %483 = comb.and bin %291, %477, %388 : i1
    %484 = comb.shl bin %c1_i4, %392 {sv.namehint = "_d_clr_T_1"} : i4
    %485 = comb.extract %484 from 0 : (i4) -> i3
    %486 = comb.mux bin %483, %485, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %487 = comb.shl bin %c255_i47, %404 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %488 = comb.extract %487 from 0 : (i47) -> i24
    %489 = comb.mux bin %483, %488, %c0_i24 {sv.namehint = "d_sizes_clr_1"} : i24
    %490 = comb.and bin %io_in_d_valid, %477, %388 : i1
    %491 = comb.shru bin %inflight_1, %410 : i3
    %492 = comb.extract %491 from 0 : (i3) -> i1
    %493 = comb.or bin %492, %reset : i1
    %494 = comb.xor bin %493, %true : i1
    %495 = comb.and bin %490, %494 : i1
    %496 = comb.icmp bin eq %437, %482 : i8
    %497 = comb.or bin %496, %reset : i1
    %498 = comb.xor bin %497, %true : i1
    %499 = comb.and bin %490, %498 : i1
    %500 = comb.xor bin %486, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %501 = comb.and bin %inflight_1, %500 {sv.namehint = "_inflight_T_5"} : i3
    %502 = comb.xor bin %489, %c-1_i24 {sv.namehint = "_inflight_sizes_T_4"} : i24
    %503 = comb.and bin %inflight_sizes_1, %502 {sv.namehint = "_inflight_sizes_T_5"} : i24
    %watchdog_1 = seq.firreg %510 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 203 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %504 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %505 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %506 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %507 = comb.or bin %504, %505, %506, %reset : i1
    %508 = comb.xor bin %507, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %511 = comb.and bin %STOP_COND_, %false : i1
        sv.if %511 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %512 = comb.and bin %STOP_COND_, %61 : i1
        sv.if %512 {
          sv.fatal 1
        }
        %513 = comb.and bin %STOP_COND_, %68 : i1
        sv.if %513 {
          sv.fatal 1
        }
        %514 = comb.and bin %STOP_COND_, %71 : i1
        sv.if %514 {
          sv.fatal 1
        }
        %515 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %515 {
          sv.fatal 1
        }
        %516 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %516 {
          sv.fatal 1
        }
        %517 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %517 {
          sv.fatal 1
        }
        %518 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %518 {
          sv.fatal 1
        }
        %519 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %519 {
          sv.fatal 1
        }
        %520 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %520 {
          sv.fatal 1
        }
        %521 = comb.and bin %STOP_COND_, %96 : i1
        sv.if %521 {
          sv.fatal 1
        }
        %522 = comb.and bin %STOP_COND_, %97 : i1
        sv.if %522 {
          sv.fatal 1
        }
        %523 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %523 {
          sv.fatal 1
        }
        %524 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %524 {
          sv.fatal 1
        }
        %525 = comb.and bin %STOP_COND_, %100 : i1
        sv.if %525 {
          sv.fatal 1
        }
        %526 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %526 {
          sv.fatal 1
        }
        %527 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %527 {
          sv.fatal 1
        }
        %528 = comb.and bin %STOP_COND_, %106 : i1
        sv.if %528 {
          sv.fatal 1
        }
        %529 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %529 {
          sv.fatal 1
        }
        %530 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %530 {
          sv.fatal 1
        }
        %531 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %531 {
          sv.fatal 1
        }
        %532 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %532 {
          sv.fatal 1
        }
        %533 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %533 {
          sv.fatal 1
        }
        %534 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %534 {
          sv.fatal 1
        }
        %535 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %535 {
          sv.fatal 1
        }
        %536 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %536 {
          sv.fatal 1
        }
        %537 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %537 {
          sv.fatal 1
        }
        %538 = comb.and bin %STOP_COND_, %135 : i1
        sv.if %538 {
          sv.fatal 1
        }
        %539 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %539 {
          sv.fatal 1
        }
        %540 = comb.and bin %STOP_COND_, %137 : i1
        sv.if %540 {
          sv.fatal 1
        }
        %541 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %541 {
          sv.fatal 1
        }
        %542 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %542 {
          sv.fatal 1
        }
        %543 = comb.and bin %STOP_COND_, %142 : i1
        sv.if %543 {
          sv.fatal 1
        }
        %544 = comb.and bin %STOP_COND_, %143 : i1
        sv.if %544 {
          sv.fatal 1
        }
        %545 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %545 {
          sv.fatal 1
        }
        %546 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %546 {
          sv.fatal 1
        }
        %547 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %547 {
          sv.fatal 1
        }
        %548 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %548 {
          sv.fatal 1
        }
        %549 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %549 {
          sv.fatal 1
        }
        %550 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %550 {
          sv.fatal 1
        }
        %551 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %551 {
          sv.fatal 1
        }
        %552 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %552 {
          sv.fatal 1
        }
        %553 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %553 {
          sv.fatal 1
        }
        %554 = comb.and bin %STOP_COND_, %173 : i1
        sv.if %554 {
          sv.fatal 1
        }
        %555 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %555 {
          sv.fatal 1
        }
        %556 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %556 {
          sv.fatal 1
        }
        %557 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %557 {
          sv.fatal 1
        }
        %558 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %558 {
          sv.fatal 1
        }
        %559 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %559 {
          sv.fatal 1
        }
        %560 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %560 {
          sv.fatal 1
        }
        %561 = comb.and bin %STOP_COND_, %185 : i1
        sv.if %561 {
          sv.fatal 1
        }
        %562 = comb.and bin %STOP_COND_, %189 : i1
        sv.if %562 {
          sv.fatal 1
        }
        %563 = comb.and bin %STOP_COND_, %197 : i1
        sv.if %563 {
          sv.fatal 1
        }
        %564 = comb.and bin %STOP_COND_, %201 : i1
        sv.if %564 {
          sv.fatal 1
        }
        %565 = comb.and bin %STOP_COND_, %205 : i1
        sv.if %565 {
          sv.fatal 1
        }
        %566 = comb.and bin %STOP_COND_, %209 : i1
        sv.if %566 {
          sv.fatal 1
        }
        %567 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %567 {
          sv.fatal 1
        }
        %568 = comb.and bin %STOP_COND_, %216 : i1
        sv.if %568 {
          sv.fatal 1
        }
        %569 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %569 {
          sv.fatal 1
        }
        %570 = comb.and bin %STOP_COND_, %218 : i1
        sv.if %570 {
          sv.fatal 1
        }
        %571 = comb.and bin %STOP_COND_, %222 : i1
        sv.if %571 {
          sv.fatal 1
        }
        %572 = comb.and bin %STOP_COND_, %226 : i1
        sv.if %572 {
          sv.fatal 1
        }
        %573 = comb.and bin %STOP_COND_, %227 : i1
        sv.if %573 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %574 = comb.and bin %STOP_COND_, %230 : i1
        sv.if %574 {
          sv.fatal 1
        }
        %575 = comb.and bin %STOP_COND_, %231 : i1
        sv.if %575 {
          sv.fatal 1
        }
        %576 = comb.and bin %STOP_COND_, %232 : i1
        sv.if %576 {
          sv.fatal 1
        }
        %577 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %577 {
          sv.fatal 1
        }
        %578 = comb.and bin %STOP_COND_, %234 : i1
        sv.if %578 {
          sv.fatal 1
        }
        %579 = comb.and bin %STOP_COND_, %237 : i1
        sv.if %579 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %580 = comb.and bin %STOP_COND_, %240 : i1
        sv.if %580 {
          sv.fatal 1
        }
        %581 = comb.and bin %STOP_COND_, %241 : i1
        sv.if %581 {
          sv.fatal 1
        }
        %582 = comb.and bin %STOP_COND_, %242 : i1
        sv.if %582 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %583 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %583 {
          sv.fatal 1
        }
        %584 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %584 {
          sv.fatal 1
        }
        %585 = comb.and bin %STOP_COND_, %247 : i1
        sv.if %585 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %586 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %586 {
          sv.fatal 1
        }
        %587 = comb.and bin %STOP_COND_, %251 : i1
        sv.if %587 {
          sv.fatal 1
        }
        %588 = comb.and bin %STOP_COND_, %252 : i1
        sv.if %588 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %589 = comb.and bin %STOP_COND_, %268 : i1
        sv.if %589 {
          sv.fatal 1
        }
        %590 = comb.and bin %STOP_COND_, %272 : i1
        sv.if %590 {
          sv.fatal 1
        }
        %591 = comb.and bin %STOP_COND_, %276 : i1
        sv.if %591 {
          sv.fatal 1
        }
        %592 = comb.and bin %STOP_COND_, %280 : i1
        sv.if %592 {
          sv.fatal 1
        }
        %593 = comb.and bin %STOP_COND_, %284 : i1
        sv.if %593 {
          sv.fatal 1
        }
        %594 = comb.and bin %STOP_COND_, %307 : i1
        sv.if %594 {
          sv.fatal 1
        }
        %595 = comb.and bin %STOP_COND_, %311 : i1
        sv.if %595 {
          sv.fatal 1
        }
        %596 = comb.and bin %STOP_COND_, %315 : i1
        sv.if %596 {
          sv.fatal 1
        }
        %597 = comb.and bin %STOP_COND_, %319 : i1
        sv.if %597 {
          sv.fatal 1
        }
        %598 = comb.and bin %STOP_COND_, %323 : i1
        sv.if %598 {
          sv.fatal 1
        }
        %599 = comb.and bin %STOP_COND_, %327 : i1
        sv.if %599 {
          sv.fatal 1
        }
        %600 = comb.and bin %STOP_COND_, %387 : i1
        sv.if %600 {
          sv.fatal 1
        }
        %601 = comb.and bin %STOP_COND_, %415 : i1
        sv.if %601 {
          sv.fatal 1
        }
        %602 = comb.and bin %STOP_COND_, %423 : i1
        sv.if %602 {
          sv.fatal 1
        }
        %603 = comb.and bin %STOP_COND_, %427 : i1
        sv.if %603 {
          sv.fatal 1
        }
        %604 = comb.and bin %STOP_COND_, %436 : i1
        sv.if %604 {
          sv.fatal 1
        }
        %605 = comb.and bin %STOP_COND_, %441 : i1
        sv.if %605 {
          sv.fatal 1
        }
        %606 = comb.and bin %STOP_COND_, %450 : i1
        sv.if %606 {
          sv.fatal 1
        }
        %607 = comb.and bin %STOP_COND_, %454 : i1
        sv.if %607 {
          sv.fatal 1
        }
        %608 = comb.and bin %STOP_COND_, %468 : i1
        sv.if %608 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %609 = comb.and bin %STOP_COND_, %495 : i1
        sv.if %609 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %610 = comb.and bin %STOP_COND_, %499 : i1
        sv.if %610 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        sv.if %511 {
          sv.fatal 1
        }
        %611 = comb.and bin %STOP_COND_, %508 : i1
        sv.if %611 {
          sv.fatal 1
        }
      }
    }
    %509 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %510 = comb.mux bin %291, %c0_i32, %509 : i32
    hw.output
  }
  hw.module private @Queue_12(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i14, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firreg %9 clock %clock : i99
    %0 = comb.concat %io_enq_bits_corrupt, %io_enq_bits_data, %io_enq_bits_mask, %io_enq_bits_address, %io_enq_bits_source, %io_enq_bits_size, %io_enq_bits_param, %io_enq_bits_opcode : i1, i64, i8, i14, i2, i4, i3, i3
    %1 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i99) -> i3
    %2 = comb.extract %ram from 6 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i99) -> i4
    %3 = comb.extract %ram from 10 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i99) -> i2
    %full = seq.firreg %7 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %4 = comb.and bin %8, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %5 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %6 = comb.icmp bin eq %4, %5 : i1
    %7 = comb.mux bin %6, %full, %4 : i1
    %8 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %9 = comb.mux bin %4, %0, %ram : i99
    hw.output %8, %full, %1, %2, %3 : i1, i1, i3, i4, i2
  }
  hw.module private @TLError(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i14, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_corrupt : i1) {
    %0 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c-1_i9 = hw.constant -1 : i9
    %c1_i9 = hw.constant 1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %false = hw.constant false
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i9 = hw.constant 0 : i9
    %c0_i23 = hw.constant 0 : i23
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_7(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %a.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i14, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %33: i1, io_in_d_bits_opcode: %34: i3, io_in_d_bits_param: %c0_i2: i2, io_in_d_bits_size: %a.io_deq_bits_size: i4, io_in_d_bits_source: %a.io_deq_bits_source: i2, io_in_d_bits_sink: %false: i1, io_in_d_bits_denied: %true: i1, io_in_d_bits_corrupt: %21: i1) -> ()
    %a.io_enq_ready, %a.io_deq_valid, %a.io_deq_bits_opcode, %a.io_deq_bits_size, %a.io_deq_bits_source = hw.instance "a" @Queue_12(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i14, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %32: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_size: i4, io_deq_bits_source: i2) {sv.namehint = "da_bits_size"}
    %2 = comb.and bin %32, %a.io_deq_valid {sv.namehint = "_a_last_T"} : i1
    %3 = comb.concat %c0_i23, %a.io_deq_bits_size : i23, i4
    %4 = comb.shl bin %c4095_i27, %3 {sv.namehint = "_a_last_beats1_decode_T_1"} : i27
    %5 = comb.extract %4 from 3 : (i27) -> i9
    %6 = comb.xor %5, %c-1_i9 {sv.namehint = "_a_last_beats1_decode_T_3"} : i9
    %7 = comb.extract %a.io_deq_bits_opcode from 2 {sv.namehint = "_a_last_beats1_opdata_T"} : (i3) -> i1
    %8 = comb.mux bin %7, %c0_i9, %6 {sv.namehint = "a_last_beats1"} : i9
    %a_last_counter = seq.firreg %15 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1 : ui64} : i9
    %9 = comb.add %a_last_counter, %c-1_i9 {sv.namehint = "_a_last_counter1_T"} : i9
    %10 = comb.icmp bin eq %a_last_counter, %c0_i9 {sv.namehint = "a_last_first"} : i9
    %11 = comb.icmp bin eq %a_last_counter, %c1_i9 {sv.namehint = "_a_last_last_T"} : i9
    %12 = comb.icmp bin eq %8, %c0_i9 {sv.namehint = "_a_last_last_T_1"} : i9
    %13 = comb.or bin %11, %12 {sv.namehint = "a_last"} : i1
    %14 = comb.mux bin %10, %8, %9 {sv.namehint = "_a_last_counter_T"} : i9
    %15 = comb.mux bin %2, %14, %a_last_counter : i9
    %16 = comb.and bin %auto_in_d_ready, %33 : i1
    %17 = comb.concat %c0_i23, %a.io_deq_bits_size : i23, i4
    %18 = comb.shl bin %c4095_i27, %17 {sv.namehint = "_beats1_decode_T_1"} : i27
    %19 = comb.extract %18 from 3 : (i27) -> i9
    %20 = comb.xor %19, %c-1_i9 {sv.namehint = "_beats1_decode_T_3"} : i9
    %21 = comb.extract %34 from 0 {sv.namehint = "beats1_opdata"} : (i3) -> i1
    %22 = comb.mux bin %21, %20, %c0_i9 {sv.namehint = "beats1"} : i9
    %counter = seq.firreg %29 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 10 : ui64} : i9
    %23 = comb.add %counter, %c-1_i9 {sv.namehint = "_counter1_T"} : i9
    %24 = comb.icmp bin eq %counter, %c0_i9 {sv.namehint = "da_first"} : i9
    %25 = comb.icmp bin eq %counter, %c1_i9 {sv.namehint = "_last_T"} : i9
    %26 = comb.icmp bin eq %22, %c0_i9 {sv.namehint = "_last_T_1"} : i9
    %27 = comb.or bin %25, %26 {sv.namehint = "da_last"} : i1
    %28 = comb.mux bin %24, %22, %23 {sv.namehint = "_counter_T"} : i9
    %29 = comb.mux bin %16, %28, %counter : i9
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %1 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %35 = comb.and bin %STOP_COND_, %false : i1
        sv.if %35 {
          sv.fatal 1
        }
      }
    }
    %30 = comb.and bin %auto_in_d_ready, %27 {sv.namehint = "_a_io_deq_ready_T"} : i1
    %31 = comb.xor bin %13, %true {sv.namehint = "_a_io_deq_ready_T_2"} : i1
    %32 = comb.or bin %30, %31 {sv.namehint = "a.io_deq_ready"} : i1
    %33 = comb.and bin %a.io_deq_valid, %13 {sv.namehint = "da_valid"} : i1
    %34 = hw.array_get %0[%a.io_deq_bits_opcode] {sv.namehint = "da_bits_opcode"} : !hw.array<8xi3>, i3
    hw.output %a.io_enq_ready, %33, %34, %a.io_deq_bits_size, %a.io_deq_bits_source, %21 : i1, i1, i3, i4, i2, i1
  }
  hw.module private @Queue_13(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i14, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i14, out io_deq_bits_mask : i8, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 99>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 99>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 99>
    %1 = comb.concat %io_enq_bits_corrupt, %io_enq_bits_data, %io_enq_bits_mask, %io_enq_bits_address, %io_enq_bits_source, %io_enq_bits_size, %io_enq_bits_param, %io_enq_bits_opcode : i1, i64, i8, i14, i2, i4, i3, i3
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i99) -> i3
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i99) -> i3
    %4 = comb.extract %0 from 6 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i99) -> i4
    %5 = comb.extract %0 from 10 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i99) -> i2
    %6 = comb.extract %0 from 12 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i99) -> i14
    %7 = comb.extract %0 from 26 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i99) -> i8
    %8 = comb.extract %0 from 34 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i99) -> i64
    %9 = comb.extract %0 from 98 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i99) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i3, i4, i2, i14, i8, i64, i1
  }
  hw.module private @TLBuffer_4(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i14, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i14, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_corrupt : i1) {
    %c0_i64 = hw.constant 0 : i64
    %true = hw.constant true
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    hw.instance "monitor" @TLMonitor_7(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %bundleOut_0_a_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i14, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %bundleIn_0_d_q.io_deq_valid: i1, io_in_d_bits_opcode: %bundleIn_0_d_q.io_deq_bits_opcode: i3, io_in_d_bits_param: %bundleIn_0_d_q.io_deq_bits_param: i2, io_in_d_bits_size: %bundleIn_0_d_q.io_deq_bits_size: i4, io_in_d_bits_source: %bundleIn_0_d_q.io_deq_bits_source: i2, io_in_d_bits_sink: %bundleIn_0_d_q.io_deq_bits_sink: i1, io_in_d_bits_denied: %bundleIn_0_d_q.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %bundleIn_0_d_q.io_deq_bits_corrupt: i1) -> ()
    %bundleOut_0_a_q.io_enq_ready, %bundleOut_0_a_q.io_deq_valid, %bundleOut_0_a_q.io_deq_bits_opcode, %bundleOut_0_a_q.io_deq_bits_param, %bundleOut_0_a_q.io_deq_bits_size, %bundleOut_0_a_q.io_deq_bits_source, %bundleOut_0_a_q.io_deq_bits_address, %bundleOut_0_a_q.io_deq_bits_mask, %bundleOut_0_a_q.io_deq_bits_data, %bundleOut_0_a_q.io_deq_bits_corrupt = hw.instance "bundleOut_0_a_q" @Queue_13(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i14, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i14, io_deq_bits_mask: i8, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "bundleOut_0_a_q.io_deq_valid"}
    %bundleIn_0_d_q.io_enq_ready, %bundleIn_0_d_q.io_deq_valid, %bundleIn_0_d_q.io_deq_bits_opcode, %bundleIn_0_d_q.io_deq_bits_param, %bundleIn_0_d_q.io_deq_bits_size, %bundleIn_0_d_q.io_deq_bits_source, %bundleIn_0_d_q.io_deq_bits_sink, %bundleIn_0_d_q.io_deq_bits_denied, %bundleIn_0_d_q.io_deq_bits_data, %bundleIn_0_d_q.io_deq_bits_corrupt = hw.instance "bundleIn_0_d_q" @Queue_11(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_param: %c0_i2: i2, io_enq_bits_size: %auto_out_d_bits_size: i4, io_enq_bits_source: %auto_out_d_bits_source: i2, io_enq_bits_sink: %false: i1, io_enq_bits_denied: %true: i1, io_enq_bits_data: %c0_i64: i64, io_enq_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_sink: i1, io_deq_bits_denied: i1, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "bundleIn_0_d_q.io_deq_valid"}
    hw.output %bundleOut_0_a_q.io_enq_ready, %bundleIn_0_d_q.io_deq_valid, %bundleIn_0_d_q.io_deq_bits_opcode, %bundleIn_0_d_q.io_deq_bits_param, %bundleIn_0_d_q.io_deq_bits_size, %bundleIn_0_d_q.io_deq_bits_source, %bundleIn_0_d_q.io_deq_bits_sink, %bundleIn_0_d_q.io_deq_bits_denied, %bundleIn_0_d_q.io_deq_bits_data, %bundleIn_0_d_q.io_deq_bits_corrupt, %bundleOut_0_a_q.io_deq_valid, %bundleOut_0_a_q.io_deq_bits_opcode, %bundleOut_0_a_q.io_deq_bits_param, %bundleOut_0_a_q.io_deq_bits_size, %bundleOut_0_a_q.io_deq_bits_source, %bundleOut_0_a_q.io_deq_bits_address, %bundleOut_0_a_q.io_deq_bits_mask, %bundleOut_0_a_q.io_deq_bits_data, %bundleOut_0_a_q.io_deq_bits_corrupt, %bundleIn_0_d_q.io_enq_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i14, i8, i64, i1, i1
  }
  hw.module private @ErrorDeviceWrapper(in %clock : !seq.clock, in %reset : i1, out auto_buffer_in_a_ready : i1, in %auto_buffer_in_a_valid : i1, in %auto_buffer_in_a_bits_opcode : i3, in %auto_buffer_in_a_bits_param : i3, in %auto_buffer_in_a_bits_size : i4, in %auto_buffer_in_a_bits_source : i2, in %auto_buffer_in_a_bits_address : i14, in %auto_buffer_in_a_bits_mask : i8, in %auto_buffer_in_a_bits_data : i64, in %auto_buffer_in_a_bits_corrupt : i1, in %auto_buffer_in_d_ready : i1, out auto_buffer_in_d_valid : i1, out auto_buffer_in_d_bits_opcode : i3, out auto_buffer_in_d_bits_param : i2, out auto_buffer_in_d_bits_size : i4, out auto_buffer_in_d_bits_source : i2, out auto_buffer_in_d_bits_sink : i1, out auto_buffer_in_d_bits_denied : i1, out auto_buffer_in_d_bits_data : i64, out auto_buffer_in_d_bits_corrupt : i1) {
    %error.auto_in_a_ready, %error.auto_in_d_valid, %error.auto_in_d_bits_opcode, %error.auto_in_d_bits_size, %error.auto_in_d_bits_source, %error.auto_in_d_bits_corrupt = hw.instance "error" @TLError(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %buffer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %buffer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %buffer.auto_out_a_bits_address: i14, auto_in_a_bits_mask: %buffer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %buffer.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %buffer.auto_out_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_corrupt: i1) {sv.namehint = "error.auto_in_d_valid"}
    %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_a_bits_corrupt, %buffer.auto_out_d_ready = hw.instance "buffer" @TLBuffer_4(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_buffer_in_a_valid: i1, auto_in_a_bits_opcode: %auto_buffer_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_buffer_in_a_bits_param: i3, auto_in_a_bits_size: %auto_buffer_in_a_bits_size: i4, auto_in_a_bits_source: %auto_buffer_in_a_bits_source: i2, auto_in_a_bits_address: %auto_buffer_in_a_bits_address: i14, auto_in_a_bits_mask: %auto_buffer_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_buffer_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_buffer_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_buffer_in_d_ready: i1, auto_out_a_ready: %error.auto_in_a_ready: i1, auto_out_d_valid: %error.auto_in_d_valid: i1, auto_out_d_bits_opcode: %error.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %error.auto_in_d_bits_size: i4, auto_out_d_bits_source: %error.auto_in_d_bits_source: i2, auto_out_d_bits_corrupt: %error.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i14, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "buffer.auto_in_d_valid"}
    hw.output %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1
  }
  hw.module private @TLBuffer_5(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, i1, i3, i3, i4, i2, i28, i8, i64, i1, i1
  }
  hw.module private @TLMonitor_9(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c-1_i2 = hw.constant -1 : i2
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i6 = hw.constant 0 : i6
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %7 = comb.shl bin %c63_i13, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %9 = comb.xor bin %8, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %10 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i6
    %11 = comb.and bin %10, %9 : i6
    %12 = comb.icmp bin eq %11, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %59 = comb.xor bin %reset, %true : i1
    %60 = comb.and bin %57, %59 : i1
    %61 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %62 = comb.icmp eq %58, %c-1_i2 : i2
    %63 = comb.and bin %3, %61, %62 : i1
    %64 = comb.or bin %63, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %57, %65 : i1
    %67 = comb.or bin %3, %4, %5, %reset : i1
    %68 = comb.xor bin %67, %true : i1
    %69 = comb.and bin %57, %68 : i1
    %70 = comb.or bin %14, %reset : i1
    %71 = comb.xor bin %70, %true : i1
    %72 = comb.and bin %57, %71 : i1
    %73 = comb.or bin %12, %reset : i1
    %74 = comb.xor bin %73, %true : i1
    %75 = comb.and bin %57, %74 : i1
    %76 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %77 = comb.or bin %76, %reset : i1
    %78 = comb.xor bin %77, %true : i1
    %79 = comb.and bin %57, %78 : i1
    %80 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %81 = comb.or bin %80, %reset : i1
    %82 = comb.xor bin %81, %true : i1
    %83 = comb.and bin %57, %82 : i1
    %84 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %85 = comb.or bin %84, %reset : i1
    %86 = comb.xor bin %85, %true : i1
    %87 = comb.and bin %57, %86 : i1
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88 : i1
    %90 = comb.and bin %89, %59 : i1
    %91 = comb.and bin %3, %61, %62 : i1
    %92 = comb.or bin %91, %reset : i1
    %93 = comb.xor bin %92, %true : i1
    %94 = comb.and bin %89, %93 : i1
    %95 = comb.and bin %89, %68 : i1
    %96 = comb.and bin %89, %71 : i1
    %97 = comb.and bin %89, %74 : i1
    %98 = comb.and bin %89, %78 : i1
    %99 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %100 = comb.or bin %99, %reset : i1
    %101 = comb.xor bin %100, %true : i1
    %102 = comb.and bin %89, %101 : i1
    %103 = comb.and bin %89, %82 : i1
    %104 = comb.and bin %89, %86 : i1
    %105 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %106 = comb.and bin %io_in_a_valid, %105 : i1
    %107 = comb.or bin %3, %4, %5 : i1
    %108 = comb.or bin %107, %reset : i1
    %109 = comb.xor bin %108, %true : i1
    %110 = comb.and bin %106, %109 : i1
    %111 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %112 = comb.and bin %111, %62 : i1
    %113 = comb.or bin %112, %reset : i1
    %114 = comb.xor bin %113, %true : i1
    %115 = comb.and bin %106, %114 : i1
    %116 = comb.and bin %106, %68 : i1
    %117 = comb.and bin %106, %74 : i1
    %118 = comb.xor bin %99, %true : i1
    %119 = comb.or bin %118, %reset : i1
    %120 = comb.xor bin %119, %true : i1
    %121 = comb.and bin %106, %120 : i1
    %122 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %123 = comb.or bin %122, %reset : i1
    %124 = comb.xor bin %123, %true : i1
    %125 = comb.and bin %106, %124 : i1
    %126 = comb.and bin %106, %86 : i1
    %127 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %128 = comb.and bin %io_in_a_valid, %127 : i1
    %129 = comb.and bin %107, %112 : i1
    %130 = comb.or bin %129, %reset : i1
    %131 = comb.xor bin %130, %true : i1
    %132 = comb.and bin %128, %131 : i1
    %133 = comb.and bin %128, %68 : i1
    %134 = comb.and bin %128, %74 : i1
    %135 = comb.and bin %128, %120 : i1
    %136 = comb.and bin %128, %124 : i1
    %137 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %138 = comb.and bin %io_in_a_valid, %137 : i1
    %139 = comb.and bin %138, %131 : i1
    %140 = comb.and bin %138, %68 : i1
    %141 = comb.and bin %138, %74 : i1
    %142 = comb.and bin %138, %120 : i1
    %143 = comb.xor bin %55, %c-1_i8 : i8
    %144 = comb.and bin %io_in_a_bits_mask, %143 : i8
    %145 = comb.icmp bin eq %144, %c0_i8 : i8
    %146 = comb.or bin %145, %reset : i1
    %147 = comb.xor bin %146, %true : i1
    %148 = comb.and bin %138, %147 : i1
    %149 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %150 = comb.and bin %io_in_a_valid, %149 : i1
    %151 = comb.and bin %150, %59 : i1
    %152 = comb.and bin %150, %68 : i1
    %153 = comb.and bin %150, %74 : i1
    %154 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %155 = comb.or bin %154, %reset : i1
    %156 = comb.xor bin %155, %true : i1
    %157 = comb.and bin %150, %156 : i1
    %158 = comb.and bin %150, %124 : i1
    %159 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %160 = comb.and bin %io_in_a_valid, %159 : i1
    %161 = comb.and bin %160, %59 : i1
    %162 = comb.and bin %160, %68 : i1
    %163 = comb.and bin %160, %74 : i1
    %164 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %165 = comb.xor bin %164, %true : i1
    %166 = comb.or bin %165, %reset : i1
    %167 = comb.xor bin %166, %true : i1
    %168 = comb.and bin %160, %167 : i1
    %169 = comb.and bin %160, %124 : i1
    %170 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %171 = comb.and bin %io_in_a_valid, %170 : i1
    %172 = comb.and bin %171, %59 : i1
    %173 = comb.and bin %171, %68 : i1
    %174 = comb.and bin %171, %74 : i1
    %175 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %176 = comb.or bin %175, %reset : i1
    %177 = comb.xor bin %176, %true : i1
    %178 = comb.and bin %171, %177 : i1
    %179 = comb.and bin %171, %124 : i1
    %180 = comb.and bin %171, %86 : i1
    %181 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %182 = comb.or bin %181, %reset : i1
    %183 = comb.xor bin %182, %true : i1
    %184 = comb.and bin %io_in_d_valid, %183 : i1
    %185 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %186 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %187 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %188 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %189 = comb.and bin %io_in_d_valid, %188 : i1
    %190 = comb.or bin %185, %186, %187, %reset : i1
    %191 = comb.xor bin %190, %true : i1
    %192 = comb.and bin %189, %191 : i1
    %193 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %194 = comb.or bin %193, %reset : i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.and bin %189, %195 : i1
    %197 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %198 = comb.and bin %io_in_d_valid, %197 : i1
    %199 = comb.and bin %198, %191 : i1
    %200 = comb.and bin %198, %59 : i1
    %201 = comb.and bin %198, %195 : i1
    %202 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %203 = comb.and bin %io_in_d_valid, %202 : i1
    %204 = comb.and bin %203, %191 : i1
    %205 = comb.and bin %203, %59 : i1
    %206 = comb.and bin %203, %195 : i1
    %207 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %208 = comb.and bin %io_in_d_valid, %207 : i1
    %209 = comb.and bin %208, %191 : i1
    %210 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %211 = comb.and bin %io_in_d_valid, %210 : i1
    %212 = comb.and bin %211, %191 : i1
    %213 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %214 = comb.and bin %io_in_d_valid, %213 : i1
    %215 = comb.and bin %214, %191 : i1
    %216 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %217 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %218 = comb.extract %217 from 3 : (i13) -> i3
    %219 = comb.xor %218, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %220 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %221 = comb.mux bin %220, %c0_i3, %219 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %226 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %222 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %223 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %224 = comb.xor bin %223, %true {sv.namehint = "a_first"} : i1
    %225 = comb.mux bin %223, %222, %221 {sv.namehint = "_a_first_counter_T"} : i3
    %226 = comb.mux bin %216, %225, %a_first_counter : i3
    %opcode = seq.firreg %249 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %250 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %251 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %252 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %253 clock %clock {firrtl.random_init_start = 14 : ui64} : i28
    %227 = comb.and bin %io_in_a_valid, %223 : i1
    %228 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %229 = comb.or bin %228, %reset : i1
    %230 = comb.xor bin %229, %true : i1
    %231 = comb.and bin %227, %230 : i1
    %232 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %233 = comb.or bin %232, %reset : i1
    %234 = comb.xor bin %233, %true : i1
    %235 = comb.and bin %227, %234 : i1
    %236 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %237 = comb.or bin %236, %reset : i1
    %238 = comb.xor bin %237, %true : i1
    %239 = comb.and bin %227, %238 : i1
    %240 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %241 = comb.or bin %240, %reset : i1
    %242 = comb.xor bin %241, %true : i1
    %243 = comb.and bin %227, %242 : i1
    %244 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %245 = comb.or bin %244, %reset : i1
    %246 = comb.xor bin %245, %true : i1
    %247 = comb.and bin %227, %246 : i1
    %248 = comb.and bin %216, %224 : i1
    %249 = comb.mux bin %248, %io_in_a_bits_opcode, %opcode : i3
    %250 = comb.mux bin %248, %io_in_a_bits_param, %param : i3
    %251 = comb.mux bin %248, %io_in_a_bits_size, %size : i3
    %252 = comb.mux bin %248, %io_in_a_bits_source, %source : i2
    %253 = comb.mux bin %248, %io_in_a_bits_address, %address : i28
    %254 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %255 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %256 = comb.shl bin %c63_i13, %255 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %257 = comb.extract %256 from 3 : (i13) -> i3
    %258 = comb.xor %257, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %259 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %260 = comb.mux bin %259, %258, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %265 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 42 : ui64} : i3
    %261 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %262 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %263 = comb.xor bin %262, %true {sv.namehint = "d_first"} : i1
    %264 = comb.mux bin %262, %261, %260 {sv.namehint = "_d_first_counter_T"} : i3
    %265 = comb.mux bin %254, %264, %d_first_counter : i3
    %opcode_1 = seq.firreg %280 clock %clock {firrtl.random_init_start = 45 : ui64} : i3
    %size_1 = seq.firreg %281 clock %clock {firrtl.random_init_start = 50 : ui64} : i3
    %source_1 = seq.firreg %282 clock %clock {firrtl.random_init_start = 53 : ui64} : i2
    %266 = comb.and bin %io_in_d_valid, %262 : i1
    %267 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %268 = comb.or bin %267, %reset : i1
    %269 = comb.xor bin %268, %true : i1
    %270 = comb.and bin %266, %269 : i1
    %271 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %272 = comb.or bin %271, %reset : i1
    %273 = comb.xor bin %272, %true : i1
    %274 = comb.and bin %266, %273 : i1
    %275 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %276 = comb.or bin %275, %reset : i1
    %277 = comb.xor bin %276, %true : i1
    %278 = comb.and bin %266, %277 : i1
    %279 = comb.and bin %254, %263 : i1
    %280 = comb.mux bin %279, %io_in_d_bits_opcode, %opcode_1 : i3
    %281 = comb.mux bin %279, %io_in_d_bits_size, %size_1 : i3
    %282 = comb.mux bin %279, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %400 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 57 : ui64} : i3
    %inflight_opcodes = seq.firreg %403 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 60 : ui64} : i12
    %inflight_sizes = seq.firreg %406 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 72 : ui64} : i12
    %283 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %284 = comb.extract %283 from 3 : (i13) -> i3
    %285 = comb.xor %284, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %286 = comb.mux bin %220, %c0_i3, %285 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %290 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 84 : ui64} : i3
    %287 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %288 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %289 = comb.mux bin %288, %286, %287 {sv.namehint = "_a_first_counter_T_1"} : i3
    %290 = comb.mux bin %216, %289, %a_first_counter_1 : i3
    %291 = comb.shl bin %c63_i13, %255 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %292 = comb.extract %291 from 3 : (i13) -> i3
    %293 = comb.xor %292, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %294 = comb.mux bin %259, %293, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %298 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 87 : ui64} : i3
    %295 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %296 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %297 = comb.mux bin %296, %294, %295 {sv.namehint = "_d_first_counter_T_1"} : i3
    %298 = comb.mux bin %254, %297, %d_first_counter_1 : i3
    %299 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %300 = comb.shru bin %inflight_opcodes, %299 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %301 = comb.extract %300 from 1 : (i12) -> i3
    %302 = comb.shru bin %inflight_sizes, %299 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %303 = comb.extract %302 from 1 : (i12) -> i3
    %304 = comb.and bin %io_in_a_valid, %288 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %305 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %306 = comb.shl bin %c1_i4, %305 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %307 = comb.extract %306 from 0 : (i4) -> i3
    %308 = comb.mux bin %304, %307, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %309 = comb.and bin %216, %288 : i1
    %310 = comb.shl bin %c1_i4, %305 {sv.namehint = "_a_set_T"} : i4
    %311 = comb.extract %310 from 0 : (i4) -> i3
    %312 = comb.mux bin %309, %311, %c0_i3 {sv.namehint = "a_set"} : i3
    %313 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %314 = comb.mux bin %309, %313, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %315 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %316 = comb.mux bin %309, %315, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %317 = comb.concat %c0_i31, %314 : i31, i4
    %318 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %319 = comb.shl bin %317, %318 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %320 = comb.extract %319 from 0 : (i35) -> i12
    %321 = comb.mux bin %309, %320, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %322 = comb.concat %c0_i31, %316 : i31, i4
    %323 = comb.shl bin %322, %318 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %324 = comb.extract %323 from 0 : (i35) -> i12
    %325 = comb.mux bin %309, %324, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %326 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %327 = comb.shru bin %inflight, %326 : i3
    %328 = comb.extract %327 from 0 : (i3) -> i1
    %329 = comb.xor bin %328, %true : i1
    %330 = comb.or bin %329, %reset : i1
    %331 = comb.xor bin %330, %true : i1
    %332 = comb.and bin %309, %331 : i1
    %333 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %334 = comb.and bin %io_in_d_valid, %296 : i1
    %335 = comb.xor bin %333, %true : i1
    %336 = comb.and bin %334, %335 : i1
    %337 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %338 = comb.shl bin %c1_i4, %337 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %339 = comb.extract %338 from 0 : (i4) -> i3
    %340 = comb.mux bin %336, %339, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %341 = comb.and bin %254, %296, %335 : i1
    %342 = comb.shl bin %c1_i4, %337 {sv.namehint = "_d_clr_T"} : i4
    %343 = comb.extract %342 from 0 : (i4) -> i3
    %344 = comb.mux bin %341, %343, %c0_i3 {sv.namehint = "d_clr"} : i3
    %345 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %346 = comb.shl bin %c15_i47, %345 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %347 = comb.extract %346 from 0 : (i47) -> i12
    %348 = comb.mux bin %341, %347, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %349 = comb.shl bin %c15_i47, %345 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %350 = comb.extract %349 from 0 : (i47) -> i12
    %351 = comb.mux bin %341, %350, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %352 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %353 = comb.and bin %304, %352 {sv.namehint = "same_cycle_resp"} : i1
    %354 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %355 = comb.shru bin %inflight, %354 : i3
    %356 = comb.extract %355 from 0 : (i3) -> i1
    %357 = comb.or bin %356, %353, %reset : i1
    %358 = comb.xor bin %357, %true : i1
    %359 = comb.and bin %336, %358 : i1
    %360 = comb.and bin %336, %353 : i1
    %361 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %362 = comb.icmp bin eq %io_in_d_bits_opcode, %361 : i3
    %363 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %364 = comb.icmp bin eq %io_in_d_bits_opcode, %363 : i3
    %365 = comb.or bin %362, %364, %reset : i1
    %366 = comb.xor bin %365, %true : i1
    %367 = comb.and bin %360, %366 : i1
    %368 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %369 = comb.or bin %368, %reset : i1
    %370 = comb.xor bin %369, %true : i1
    %371 = comb.and bin %360, %370 : i1
    %372 = comb.xor bin %353, %true : i1
    %373 = comb.and bin %336, %372 : i1
    %374 = hw.array_get %1[%301] : !hw.array<8xi3>, i3
    %375 = comb.icmp bin eq %io_in_d_bits_opcode, %374 : i3
    %376 = hw.array_get %0[%301] : !hw.array<8xi3>, i3
    %377 = comb.icmp bin eq %io_in_d_bits_opcode, %376 : i3
    %378 = comb.or bin %375, %377, %reset : i1
    %379 = comb.xor bin %378, %true : i1
    %380 = comb.and bin %373, %379 : i1
    %381 = comb.icmp bin eq %io_in_d_bits_size, %303 : i3
    %382 = comb.or bin %381, %reset : i1
    %383 = comb.xor bin %382, %true : i1
    %384 = comb.and bin %373, %383 : i1
    %385 = comb.and bin %334, %288 : i1
    %386 = comb.and bin %385, %io_in_a_valid : i1
    %387 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %388 = comb.and bin %386, %387 : i1
    %389 = comb.and bin %388, %335 : i1
    %390 = comb.xor bin %io_in_d_ready, %true : i1
    %391 = comb.or bin %390, %io_in_a_ready, %reset : i1
    %392 = comb.xor bin %391, %true : i1
    %393 = comb.and bin %389, %392 : i1
    %394 = comb.icmp bin ne %308, %340 : i3
    %395 = comb.icmp bin eq %308, %c0_i3 : i3
    %396 = comb.or bin %394, %395, %reset : i1
    %397 = comb.xor bin %396, %true : i1
    %398 = comb.or bin %inflight, %312 {sv.namehint = "_inflight_T"} : i3
    %399 = comb.xor bin %344, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %400 = comb.and bin %398, %399 {sv.namehint = "_inflight_T_2"} : i3
    %401 = comb.or bin %inflight_opcodes, %321 {sv.namehint = "_inflight_opcodes_T"} : i12
    %402 = comb.xor bin %348, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %403 = comb.and bin %401, %402 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %404 = comb.or bin %inflight_sizes, %325 {sv.namehint = "_inflight_sizes_T"} : i12
    %405 = comb.xor bin %351, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %406 = comb.and bin %404, %405 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %414 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 90 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %407 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %408 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %409 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %410 = comb.or bin %407, %408, %409, %reset : i1
    %411 = comb.xor bin %410, %true : i1
    %412 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %413 = comb.or bin %216, %254 : i1
    %414 = comb.mux bin %413, %c0_i32, %412 : i32
    %inflight_1 = seq.firreg %443 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 122 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %445 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 137 : ui64} : i12
    %415 = comb.shl bin %c63_i13, %255 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %416 = comb.extract %415 from 3 : (i13) -> i3
    %417 = comb.xor %416, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %418 = comb.mux bin %259, %417, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %422 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 152 : ui64} : i3
    %419 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %420 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %421 = comb.mux bin %420, %418, %419 {sv.namehint = "_d_first_counter_T_2"} : i3
    %422 = comb.mux bin %254, %421, %d_first_counter_2 : i3
    %423 = comb.shru bin %inflight_sizes_1, %299 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %424 = comb.extract %423 from 1 : (i12) -> i3
    %425 = comb.and bin %254, %420, %333 : i1
    %426 = comb.shl bin %c1_i4, %337 {sv.namehint = "_d_clr_T_1"} : i4
    %427 = comb.extract %426 from 0 : (i4) -> i3
    %428 = comb.mux bin %425, %427, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %429 = comb.shl bin %c15_i47, %345 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %430 = comb.extract %429 from 0 : (i47) -> i12
    %431 = comb.mux bin %425, %430, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %432 = comb.and bin %io_in_d_valid, %420, %333 : i1
    %433 = comb.shru bin %inflight_1, %354 : i3
    %434 = comb.extract %433 from 0 : (i3) -> i1
    %435 = comb.or bin %434, %reset : i1
    %436 = comb.xor bin %435, %true : i1
    %437 = comb.and bin %432, %436 : i1
    %438 = comb.icmp bin eq %io_in_d_bits_size, %424 : i3
    %439 = comb.or bin %438, %reset : i1
    %440 = comb.xor bin %439, %true : i1
    %441 = comb.and bin %432, %440 : i1
    %442 = comb.xor bin %428, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %443 = comb.and bin %inflight_1, %442 {sv.namehint = "_inflight_T_5"} : i3
    %444 = comb.xor bin %431, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %445 = comb.and bin %inflight_sizes_1, %444 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %452 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 155 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %446 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %447 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %448 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %449 = comb.or bin %446, %447, %448, %reset : i1
    %450 = comb.xor bin %449, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %453 = comb.and bin %STOP_COND_, %false : i1
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %454 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %455 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %69 : i1
        sv.if %456 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %72 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %75 : i1
        sv.if %458 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %79 : i1
        sv.if %459 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %83 : i1
        sv.if %460 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %87 : i1
        sv.if %461 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %462 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %463 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %464 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %96 : i1
        sv.if %465 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %97 : i1
        sv.if %466 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %467 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %468 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %470 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %110 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %472 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %473 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %475 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %125 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %478 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %479 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %480 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %135 : i1
        sv.if %481 {
          sv.fatal 1
        }
        %482 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %482 {
          sv.fatal 1
        }
        %483 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %483 {
          sv.fatal 1
        }
        %484 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %484 {
          sv.fatal 1
        }
        %485 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %485 {
          sv.fatal 1
        }
        %486 = comb.and bin %STOP_COND_, %142 : i1
        sv.if %486 {
          sv.fatal 1
        }
        %487 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %487 {
          sv.fatal 1
        }
        %488 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %488 {
          sv.fatal 1
        }
        %489 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %489 {
          sv.fatal 1
        }
        %490 = comb.and bin %STOP_COND_, %153 : i1
        sv.if %490 {
          sv.fatal 1
        }
        %491 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %491 {
          sv.fatal 1
        }
        %492 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %492 {
          sv.fatal 1
        }
        %493 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %493 {
          sv.fatal 1
        }
        %494 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %494 {
          sv.fatal 1
        }
        %495 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %495 {
          sv.fatal 1
        }
        %496 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %496 {
          sv.fatal 1
        }
        %497 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %497 {
          sv.fatal 1
        }
        %498 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %498 {
          sv.fatal 1
        }
        %499 = comb.and bin %STOP_COND_, %173 : i1
        sv.if %499 {
          sv.fatal 1
        }
        %500 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %500 {
          sv.fatal 1
        }
        %501 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %501 {
          sv.fatal 1
        }
        %502 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %502 {
          sv.fatal 1
        }
        %503 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %503 {
          sv.fatal 1
        }
        %504 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %504 {
          sv.fatal 1
        }
        %505 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %505 {
          sv.fatal 1
        }
        %506 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %506 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %507 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %507 {
          sv.fatal 1
        }
        %508 = comb.and bin %STOP_COND_, %200 : i1
        sv.if %508 {
          sv.fatal 1
        }
        %509 = comb.and bin %STOP_COND_, %201 : i1
        sv.if %509 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %510 = comb.and bin %STOP_COND_, %204 : i1
        sv.if %510 {
          sv.fatal 1
        }
        %511 = comb.and bin %STOP_COND_, %205 : i1
        sv.if %511 {
          sv.fatal 1
        }
        %512 = comb.and bin %STOP_COND_, %206 : i1
        sv.if %512 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %513 = comb.and bin %STOP_COND_, %209 : i1
        sv.if %513 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %514 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %514 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %515 = comb.and bin %STOP_COND_, %215 : i1
        sv.if %515 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %516 = comb.and bin %STOP_COND_, %231 : i1
        sv.if %516 {
          sv.fatal 1
        }
        %517 = comb.and bin %STOP_COND_, %235 : i1
        sv.if %517 {
          sv.fatal 1
        }
        %518 = comb.and bin %STOP_COND_, %239 : i1
        sv.if %518 {
          sv.fatal 1
        }
        %519 = comb.and bin %STOP_COND_, %243 : i1
        sv.if %519 {
          sv.fatal 1
        }
        %520 = comb.and bin %STOP_COND_, %247 : i1
        sv.if %520 {
          sv.fatal 1
        }
        %521 = comb.and bin %STOP_COND_, %270 : i1
        sv.if %521 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %522 = comb.and bin %STOP_COND_, %274 : i1
        sv.if %522 {
          sv.fatal 1
        }
        %523 = comb.and bin %STOP_COND_, %278 : i1
        sv.if %523 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %524 = comb.and bin %STOP_COND_, %332 : i1
        sv.if %524 {
          sv.fatal 1
        }
        %525 = comb.and bin %STOP_COND_, %359 : i1
        sv.if %525 {
          sv.fatal 1
        }
        %526 = comb.and bin %STOP_COND_, %367 : i1
        sv.if %526 {
          sv.fatal 1
        }
        %527 = comb.and bin %STOP_COND_, %371 : i1
        sv.if %527 {
          sv.fatal 1
        }
        %528 = comb.and bin %STOP_COND_, %380 : i1
        sv.if %528 {
          sv.fatal 1
        }
        %529 = comb.and bin %STOP_COND_, %384 : i1
        sv.if %529 {
          sv.fatal 1
        }
        %530 = comb.and bin %STOP_COND_, %393 : i1
        sv.if %530 {
          sv.fatal 1
        }
        %531 = comb.and bin %STOP_COND_, %397 : i1
        sv.if %531 {
          sv.fatal 1
        }
        %532 = comb.and bin %STOP_COND_, %411 : i1
        sv.if %532 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %533 = comb.and bin %STOP_COND_, %437 : i1
        sv.if %533 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %534 = comb.and bin %STOP_COND_, %441 : i1
        sv.if %534 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %453 {
          sv.fatal 1
        }
        %535 = comb.and bin %STOP_COND_, %450 : i1
        sv.if %535 {
          sv.fatal 1
        }
      }
    }
    %451 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %452 = comb.mux bin %254, %c0_i32, %451 : i32
    hw.output
  }
  hw.module private @Repeater(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i28, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i28, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %18 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %17 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %16 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %14 clock %clock {firrtl.random_init_start = 12 : ui64} : i28
    %saved_mask = seq.firreg %13 clock %clock {firrtl.random_init_start = 40 : ui64} : i8
    %saved_corrupt = seq.firreg %12 clock %clock {firrtl.random_init_start = 112 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i28
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %13 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %14 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i28
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %17 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %18 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i28, i8, i1
  }
  hw.module private @TLFragmenter(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i28, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i10 = hw.constant 0 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_9(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %44: i3, io_in_d_bits_source: %43: i2) -> ()
    %acknum = seq.firreg %33 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %35 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.icmp bin ne %1, %c0_i3 {sv.namehint = "_drop_T_2"} : i3
    %4 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %5 = comb.shl bin %c7_i6, %4 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %6 = comb.extract %5 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %7 = comb.xor bin %6, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %8 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "dHasData"} : (i3) -> i1
    %9 = comb.icmp eq %auto_out_d_bits_size, %c-1_i2 {sv.namehint = "_ack_decrement_T"} : i2
    %10 = comb.or %8, %9 {sv.namehint = "ack_decrement"} : i1
    %11 = comb.xor %1, %c-1_i3 : i3
    %12 = comb.extract %11 from 1 : (i3) -> i2
    %13 = comb.concat %true, %12 : i1, i2
    %14 = comb.and bin %1, %13 {sv.namehint = "dFirst_size_hi"} : i3
    %15 = comb.extract %11 from 0 : (i3) -> i1
    %16 = comb.extract %5 from 1 : (i6) -> i2
    %17 = comb.concat %15, %16 : i1, i2
    %18 = comb.and %7, %17 {sv.namehint = "dFirst_size_lo_1"} : i3
    %19 = comb.icmp bin ne %14, %c0_i3 {sv.namehint = "dFirst_size_hi_1"} : i3
    %20 = comb.extract %14 from 1 : (i3) -> i2
    %21 = comb.concat %false, %20 : i1, i2
    %22 = comb.or %21, %18 {sv.namehint = "_dFirst_size_T_6"} : i3
    %23 = comb.extract %22 from 1 {sv.namehint = "dFirst_size_hi_2"} : (i3) -> i2
    %24 = comb.icmp bin ne %23, %c0_i2 {sv.namehint = "dFirst_size_hi_3"} : i2
    %25 = comb.extract %22 from 2 : (i3) -> i1
    %26 = comb.extract %22 from 0 : (i3) -> i1
    %27 = comb.or %25, %26 {sv.namehint = "_dFirst_size_T_7"} : i1
    %28 = comb.concat %19, %24, %27 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %29 = comb.and bin %40, %auto_out_d_valid : i1
    %30 = comb.concat %c0_i2, %10 : i2, i1
    %31 = comb.sub %acknum, %30 {sv.namehint = "_acknum_T"} : i3
    %32 = comb.mux bin %2, %1, %31 {sv.namehint = "_acknum_T_2"} : i3
    %33 = comb.mux bin %29, %32, %acknum : i3
    %34 = comb.and bin %29, %2 : i1
    %35 = comb.mux bin %34, %28, %dOrig : i3
    %36 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %37 = comb.mux bin %34, %36, %dToggle : i1
    %38 = comb.xor bin %8, %true {sv.namehint = "_drop_T"} : i1
    %39 = comb.and bin %38, %3 {sv.namehint = "drop"} : i1
    %40 = comb.or bin %auto_in_d_ready, %39 {sv.namehint = "bundleOut_0_d_ready"} : i1
    %41 = comb.xor bin %39, %true {sv.namehint = "_bundleIn_0_d_valid_T"} : i1
    %42 = comb.and bin %auto_out_d_valid, %41 {sv.namehint = "bundleIn_0_d_valid"} : i1
    %43 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "bundleIn_0_d_bits_source"} : (i6) -> i2
    %44 = comb.mux bin %2, %28, %dOrig {sv.namehint = "bundleIn_0_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %62: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i28, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i28, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %45 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %46 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %47 = comb.mux %45, %c-1_i2, %46 {sv.namehint = "aFrag"} : i2
    %48 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %49 = comb.shl bin %c63_i13, %48 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %50 = comb.extract %49 from 3 : (i13) -> i3
    %51 = comb.xor %50, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %52 = comb.extract %repeater.io_deq_bits_opcode from 2 {sv.namehint = "_repeater_io_repeat_T"} : (i3) -> i1
    %gennum = seq.firreg %60 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %53 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %54 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %55 = comb.mux bin %53, %51, %54 {sv.namehint = "new_gennum"} : i3
    %aToggle_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %56 = comb.mux bin %53, %dToggle, %aToggle_r : i1
    %57 = comb.mux bin %53, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %58 = comb.xor bin %57, %true {sv.namehint = "bundleOut_0_a_bits_source_hi_lo"} : i1
    %59 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %60 = comb.mux bin %59, %55, %gennum : i3
    %61 = comb.icmp bin ne %55, %c0_i3 {sv.namehint = "_repeater_io_repeat_T_1"} : i3
    %62 = comb.and bin %52, %61 {sv.namehint = "repeater.io_repeat"} : i1
    %63 = comb.extract %49 from 3 : (i13) -> i3
    %64 = comb.or %55, %63 {sv.namehint = "_bundleOut_0_a_bits_address_T_2"} : i3
    %65 = comb.xor %64, %c-1_i3 : i3
    %66 = comb.concat %65, %c0_i3 {sv.namehint = "_bundleOut_0_a_bits_address_T_5"} : i3, i3
    %67 = comb.extract %repeater.io_deq_bits_address from 6 : (i28) -> i22
    %68 = comb.extract %repeater.io_deq_bits_address from 0 : (i28) -> i6
    %69 = comb.or bin %68, %66 : i6
    %70 = comb.concat %67, %69 {sv.namehint = "bundleOut_0_a_bits_address"} : i22, i6
    %71 = comb.concat %repeater.io_deq_bits_source, %58, %55 {sv.namehint = "bundleOut_0_a_bits_source"} : i2, i1, i3
    %72 = comb.xor bin %repeater.io_full, %true : i1
    %73 = comb.or bin %72, %52, %reset : i1
    %74 = comb.xor bin %73, %true : i1
    %75 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %76 = comb.or bin %72, %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %79 = comb.and bin %STOP_COND_, %false : i1
        sv.if %79 {
          sv.fatal 1
        }
        %80 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %80 {
          sv.fatal 1
        }
        %81 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %81 {
          sv.fatal 1
        }
      }
    }
    %78 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "bundleOut_0_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %42, %auto_out_d_bits_opcode, %44, %43, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %47, %71, %70, %78, %auto_in_a_bits_data, %repeater.io_deq_bits_corrupt, %40 : i1, i1, i3, i3, i2, i64, i1, i3, i3, i2, i6, i28, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_6(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i28, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_data : i64, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_opcode : i3, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i28, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_opcode: %auto_fragmenter_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i28, i8, i64, i1, i1, i1, i1, i3, i3, i2, i64
  }
  hw.module private @TLMonitor_10(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i26, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i6 = hw.constant 0 : i6
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %7 = comb.shl bin %c63_i13, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %9 = comb.xor bin %8, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %10 = comb.extract %io_in_a_bits_address from 0 : (i26) -> i6
    %11 = comb.and bin %10, %9 : i6
    %12 = comb.icmp bin eq %11, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i26) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i26) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i26) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.extract %io_in_a_bits_address from 16 : (i26) -> i10
    %59 = comb.xor bin %reset, %true : i1
    %60 = comb.and bin %57, %59 : i1
    %61 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %62 = comb.icmp eq %58, %c-512_i10 : i10
    %63 = comb.and bin %3, %61, %62 : i1
    %64 = comb.or bin %63, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %57, %65 : i1
    %67 = comb.or bin %3, %4, %5, %reset : i1
    %68 = comb.xor bin %67, %true : i1
    %69 = comb.and bin %57, %68 : i1
    %70 = comb.or bin %14, %reset : i1
    %71 = comb.xor bin %70, %true : i1
    %72 = comb.and bin %57, %71 : i1
    %73 = comb.or bin %12, %reset : i1
    %74 = comb.xor bin %73, %true : i1
    %75 = comb.and bin %57, %74 : i1
    %76 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %77 = comb.or bin %76, %reset : i1
    %78 = comb.xor bin %77, %true : i1
    %79 = comb.and bin %57, %78 : i1
    %80 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %81 = comb.or bin %80, %reset : i1
    %82 = comb.xor bin %81, %true : i1
    %83 = comb.and bin %57, %82 : i1
    %84 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %85 = comb.or bin %84, %reset : i1
    %86 = comb.xor bin %85, %true : i1
    %87 = comb.and bin %57, %86 : i1
    %88 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %89 = comb.and bin %io_in_a_valid, %88 : i1
    %90 = comb.and bin %89, %59 : i1
    %91 = comb.and bin %3, %61, %62 : i1
    %92 = comb.or bin %91, %reset : i1
    %93 = comb.xor bin %92, %true : i1
    %94 = comb.and bin %89, %93 : i1
    %95 = comb.and bin %89, %68 : i1
    %96 = comb.and bin %89, %71 : i1
    %97 = comb.and bin %89, %74 : i1
    %98 = comb.and bin %89, %78 : i1
    %99 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %100 = comb.or bin %99, %reset : i1
    %101 = comb.xor bin %100, %true : i1
    %102 = comb.and bin %89, %101 : i1
    %103 = comb.and bin %89, %82 : i1
    %104 = comb.and bin %89, %86 : i1
    %105 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %106 = comb.and bin %io_in_a_valid, %105 : i1
    %107 = comb.or bin %3, %4, %5 : i1
    %108 = comb.or bin %107, %reset : i1
    %109 = comb.xor bin %108, %true : i1
    %110 = comb.and bin %106, %109 : i1
    %111 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %112 = comb.and bin %111, %62 : i1
    %113 = comb.or bin %112, %reset : i1
    %114 = comb.xor bin %113, %true : i1
    %115 = comb.and bin %106, %114 : i1
    %116 = comb.and bin %106, %68 : i1
    %117 = comb.and bin %106, %74 : i1
    %118 = comb.xor bin %99, %true : i1
    %119 = comb.or bin %118, %reset : i1
    %120 = comb.xor bin %119, %true : i1
    %121 = comb.and bin %106, %120 : i1
    %122 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %123 = comb.or bin %122, %reset : i1
    %124 = comb.xor bin %123, %true : i1
    %125 = comb.and bin %106, %124 : i1
    %126 = comb.and bin %106, %86 : i1
    %127 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %128 = comb.and bin %io_in_a_valid, %127 : i1
    %129 = comb.and bin %107, %112 : i1
    %130 = comb.or bin %129, %reset : i1
    %131 = comb.xor bin %130, %true : i1
    %132 = comb.and bin %128, %131 : i1
    %133 = comb.and bin %128, %68 : i1
    %134 = comb.and bin %128, %74 : i1
    %135 = comb.and bin %128, %120 : i1
    %136 = comb.and bin %128, %124 : i1
    %137 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %138 = comb.and bin %io_in_a_valid, %137 : i1
    %139 = comb.and bin %138, %131 : i1
    %140 = comb.and bin %138, %68 : i1
    %141 = comb.and bin %138, %74 : i1
    %142 = comb.and bin %138, %120 : i1
    %143 = comb.xor bin %55, %c-1_i8 : i8
    %144 = comb.and bin %io_in_a_bits_mask, %143 : i8
    %145 = comb.icmp bin eq %144, %c0_i8 : i8
    %146 = comb.or bin %145, %reset : i1
    %147 = comb.xor bin %146, %true : i1
    %148 = comb.and bin %138, %147 : i1
    %149 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %150 = comb.and bin %io_in_a_valid, %149 : i1
    %151 = comb.and bin %150, %59 : i1
    %152 = comb.and bin %150, %68 : i1
    %153 = comb.and bin %150, %74 : i1
    %154 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %155 = comb.or bin %154, %reset : i1
    %156 = comb.xor bin %155, %true : i1
    %157 = comb.and bin %150, %156 : i1
    %158 = comb.and bin %150, %124 : i1
    %159 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %160 = comb.and bin %io_in_a_valid, %159 : i1
    %161 = comb.and bin %160, %59 : i1
    %162 = comb.and bin %160, %68 : i1
    %163 = comb.and bin %160, %74 : i1
    %164 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %165 = comb.xor bin %164, %true : i1
    %166 = comb.or bin %165, %reset : i1
    %167 = comb.xor bin %166, %true : i1
    %168 = comb.and bin %160, %167 : i1
    %169 = comb.and bin %160, %124 : i1
    %170 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %171 = comb.and bin %io_in_a_valid, %170 : i1
    %172 = comb.and bin %171, %59 : i1
    %173 = comb.and bin %171, %68 : i1
    %174 = comb.and bin %171, %74 : i1
    %175 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %176 = comb.or bin %175, %reset : i1
    %177 = comb.xor bin %176, %true : i1
    %178 = comb.and bin %171, %177 : i1
    %179 = comb.and bin %171, %124 : i1
    %180 = comb.and bin %171, %86 : i1
    %181 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %182 = comb.or bin %181, %reset : i1
    %183 = comb.xor bin %182, %true : i1
    %184 = comb.and bin %io_in_d_valid, %183 : i1
    %185 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %186 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %187 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %188 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %189 = comb.and bin %io_in_d_valid, %188 : i1
    %190 = comb.or bin %185, %186, %187, %reset : i1
    %191 = comb.xor bin %190, %true : i1
    %192 = comb.and bin %189, %191 : i1
    %193 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %194 = comb.or bin %193, %reset : i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.and bin %189, %195 : i1
    %197 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %198 = comb.and bin %io_in_d_valid, %197 : i1
    %199 = comb.and bin %198, %191 : i1
    %200 = comb.and bin %198, %59 : i1
    %201 = comb.and bin %198, %195 : i1
    %202 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %203 = comb.and bin %io_in_d_valid, %202 : i1
    %204 = comb.and bin %203, %191 : i1
    %205 = comb.and bin %203, %59 : i1
    %206 = comb.and bin %203, %195 : i1
    %207 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %208 = comb.and bin %io_in_d_valid, %207 : i1
    %209 = comb.and bin %208, %191 : i1
    %210 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %211 = comb.and bin %io_in_d_valid, %210 : i1
    %212 = comb.and bin %211, %191 : i1
    %213 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %214 = comb.and bin %io_in_d_valid, %213 : i1
    %215 = comb.and bin %214, %191 : i1
    %216 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %217 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %218 = comb.extract %217 from 3 : (i13) -> i3
    %219 = comb.xor %218, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %220 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %221 = comb.mux bin %220, %c0_i3, %219 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %226 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %222 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %223 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %224 = comb.xor bin %223, %true {sv.namehint = "a_first"} : i1
    %225 = comb.mux bin %223, %222, %221 {sv.namehint = "_a_first_counter_T"} : i3
    %226 = comb.mux bin %216, %225, %a_first_counter : i3
    %opcode = seq.firreg %249 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %250 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %251 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %252 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %253 clock %clock {firrtl.random_init_start = 14 : ui64} : i26
    %227 = comb.and bin %io_in_a_valid, %223 : i1
    %228 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %229 = comb.or bin %228, %reset : i1
    %230 = comb.xor bin %229, %true : i1
    %231 = comb.and bin %227, %230 : i1
    %232 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %233 = comb.or bin %232, %reset : i1
    %234 = comb.xor bin %233, %true : i1
    %235 = comb.and bin %227, %234 : i1
    %236 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %237 = comb.or bin %236, %reset : i1
    %238 = comb.xor bin %237, %true : i1
    %239 = comb.and bin %227, %238 : i1
    %240 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %241 = comb.or bin %240, %reset : i1
    %242 = comb.xor bin %241, %true : i1
    %243 = comb.and bin %227, %242 : i1
    %244 = comb.icmp bin eq %io_in_a_bits_address, %address : i26
    %245 = comb.or bin %244, %reset : i1
    %246 = comb.xor bin %245, %true : i1
    %247 = comb.and bin %227, %246 : i1
    %248 = comb.and bin %216, %224 : i1
    %249 = comb.mux bin %248, %io_in_a_bits_opcode, %opcode : i3
    %250 = comb.mux bin %248, %io_in_a_bits_param, %param : i3
    %251 = comb.mux bin %248, %io_in_a_bits_size, %size : i3
    %252 = comb.mux bin %248, %io_in_a_bits_source, %source : i2
    %253 = comb.mux bin %248, %io_in_a_bits_address, %address : i26
    %254 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %255 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %256 = comb.shl bin %c63_i13, %255 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %257 = comb.extract %256 from 3 : (i13) -> i3
    %258 = comb.xor %257, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %259 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %260 = comb.mux bin %259, %258, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %265 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 40 : ui64} : i3
    %261 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %262 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %263 = comb.xor bin %262, %true {sv.namehint = "d_first"} : i1
    %264 = comb.mux bin %262, %261, %260 {sv.namehint = "_d_first_counter_T"} : i3
    %265 = comb.mux bin %254, %264, %d_first_counter : i3
    %opcode_1 = seq.firreg %280 clock %clock {firrtl.random_init_start = 43 : ui64} : i3
    %size_1 = seq.firreg %281 clock %clock {firrtl.random_init_start = 48 : ui64} : i3
    %source_1 = seq.firreg %282 clock %clock {firrtl.random_init_start = 51 : ui64} : i2
    %266 = comb.and bin %io_in_d_valid, %262 : i1
    %267 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %268 = comb.or bin %267, %reset : i1
    %269 = comb.xor bin %268, %true : i1
    %270 = comb.and bin %266, %269 : i1
    %271 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %272 = comb.or bin %271, %reset : i1
    %273 = comb.xor bin %272, %true : i1
    %274 = comb.and bin %266, %273 : i1
    %275 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %276 = comb.or bin %275, %reset : i1
    %277 = comb.xor bin %276, %true : i1
    %278 = comb.and bin %266, %277 : i1
    %279 = comb.and bin %254, %263 : i1
    %280 = comb.mux bin %279, %io_in_d_bits_opcode, %opcode_1 : i3
    %281 = comb.mux bin %279, %io_in_d_bits_size, %size_1 : i3
    %282 = comb.mux bin %279, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %389 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 55 : ui64} : i3
    %inflight_opcodes = seq.firreg %392 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 58 : ui64} : i12
    %inflight_sizes = seq.firreg %395 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 70 : ui64} : i12
    %283 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %284 = comb.extract %283 from 3 : (i13) -> i3
    %285 = comb.xor %284, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %286 = comb.mux bin %220, %c0_i3, %285 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %290 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 82 : ui64} : i3
    %287 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %288 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %289 = comb.mux bin %288, %286, %287 {sv.namehint = "_a_first_counter_T_1"} : i3
    %290 = comb.mux bin %216, %289, %a_first_counter_1 : i3
    %291 = comb.shl bin %c63_i13, %255 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %292 = comb.extract %291 from 3 : (i13) -> i3
    %293 = comb.xor %292, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %294 = comb.mux bin %259, %293, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %298 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 85 : ui64} : i3
    %295 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %296 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %297 = comb.mux bin %296, %294, %295 {sv.namehint = "_d_first_counter_T_1"} : i3
    %298 = comb.mux bin %254, %297, %d_first_counter_1 : i3
    %299 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %300 = comb.shru bin %inflight_opcodes, %299 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %301 = comb.extract %300 from 1 : (i12) -> i3
    %302 = comb.shru bin %inflight_sizes, %299 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %303 = comb.extract %302 from 1 : (i12) -> i3
    %304 = comb.and bin %216, %288 : i1
    %305 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %306 = comb.shl bin %c1_i4, %305 {sv.namehint = "_a_set_T"} : i4
    %307 = comb.extract %306 from 0 : (i4) -> i3
    %308 = comb.mux bin %304, %307, %c0_i3 {sv.namehint = "a_set"} : i3
    %309 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %310 = comb.mux bin %304, %309, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %311 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %312 = comb.mux bin %304, %311, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %313 = comb.concat %c0_i31, %310 : i31, i4
    %314 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %315 = comb.shl bin %313, %314 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %316 = comb.extract %315 from 0 : (i35) -> i12
    %317 = comb.mux bin %304, %316, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %318 = comb.concat %c0_i31, %312 : i31, i4
    %319 = comb.shl bin %318, %314 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %320 = comb.extract %319 from 0 : (i35) -> i12
    %321 = comb.mux bin %304, %320, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %322 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %323 = comb.shru bin %inflight, %322 : i3
    %324 = comb.extract %323 from 0 : (i3) -> i1
    %325 = comb.xor bin %324, %true : i1
    %326 = comb.or bin %325, %reset : i1
    %327 = comb.xor bin %326, %true : i1
    %328 = comb.and bin %304, %327 : i1
    %329 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %330 = comb.and bin %io_in_d_valid, %296 : i1
    %331 = comb.xor bin %329, %true : i1
    %332 = comb.and bin %254, %296, %331 : i1
    %333 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %334 = comb.shl bin %c1_i4, %333 {sv.namehint = "_d_clr_T"} : i4
    %335 = comb.extract %334 from 0 : (i4) -> i3
    %336 = comb.mux bin %332, %335, %c0_i3 {sv.namehint = "d_clr"} : i3
    %337 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %338 = comb.shl bin %c15_i47, %337 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %339 = comb.extract %338 from 0 : (i47) -> i12
    %340 = comb.mux bin %332, %339, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %341 = comb.shl bin %c15_i47, %337 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %342 = comb.extract %341 from 0 : (i47) -> i12
    %343 = comb.mux bin %332, %342, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %344 = comb.and bin %330, %331 : i1
    %345 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %346 = comb.and bin %io_in_a_valid, %288, %345 {sv.namehint = "same_cycle_resp"} : i1
    %347 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %348 = comb.shru bin %inflight, %347 : i3
    %349 = comb.extract %348 from 0 : (i3) -> i1
    %350 = comb.or bin %349, %346, %reset : i1
    %351 = comb.xor bin %350, %true : i1
    %352 = comb.and bin %344, %351 : i1
    %353 = comb.and bin %344, %346 : i1
    %354 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %355 = comb.icmp bin eq %io_in_d_bits_opcode, %354 : i3
    %356 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %357 = comb.icmp bin eq %io_in_d_bits_opcode, %356 : i3
    %358 = comb.or bin %355, %357, %reset : i1
    %359 = comb.xor bin %358, %true : i1
    %360 = comb.and bin %353, %359 : i1
    %361 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %362 = comb.or bin %361, %reset : i1
    %363 = comb.xor bin %362, %true : i1
    %364 = comb.and bin %353, %363 : i1
    %365 = comb.xor bin %346, %true : i1
    %366 = comb.and bin %344, %365 : i1
    %367 = hw.array_get %1[%301] : !hw.array<8xi3>, i3
    %368 = comb.icmp bin eq %io_in_d_bits_opcode, %367 : i3
    %369 = hw.array_get %0[%301] : !hw.array<8xi3>, i3
    %370 = comb.icmp bin eq %io_in_d_bits_opcode, %369 : i3
    %371 = comb.or bin %368, %370, %reset : i1
    %372 = comb.xor bin %371, %true : i1
    %373 = comb.and bin %366, %372 : i1
    %374 = comb.icmp bin eq %io_in_d_bits_size, %303 : i3
    %375 = comb.or bin %374, %reset : i1
    %376 = comb.xor bin %375, %true : i1
    %377 = comb.and bin %366, %376 : i1
    %378 = comb.and bin %330, %288 : i1
    %379 = comb.and bin %378, %io_in_a_valid : i1
    %380 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %381 = comb.and bin %379, %380 : i1
    %382 = comb.and bin %381, %331 : i1
    %383 = comb.xor bin %io_in_d_ready, %true : i1
    %384 = comb.or bin %383, %io_in_a_ready, %reset : i1
    %385 = comb.xor bin %384, %true : i1
    %386 = comb.and bin %382, %385 : i1
    %387 = comb.or bin %inflight, %308 {sv.namehint = "_inflight_T"} : i3
    %388 = comb.xor bin %336, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %389 = comb.and bin %387, %388 {sv.namehint = "_inflight_T_2"} : i3
    %390 = comb.or bin %inflight_opcodes, %317 {sv.namehint = "_inflight_opcodes_T"} : i12
    %391 = comb.xor bin %340, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %392 = comb.and bin %390, %391 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %393 = comb.or bin %inflight_sizes, %321 {sv.namehint = "_inflight_sizes_T"} : i12
    %394 = comb.xor bin %343, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %395 = comb.and bin %393, %394 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %403 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 88 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %396 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %397 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %398 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %399 = comb.or bin %396, %397, %398, %reset : i1
    %400 = comb.xor bin %399, %true : i1
    %401 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %402 = comb.or bin %216, %254 : i1
    %403 = comb.mux bin %402, %c0_i32, %401 : i32
    %inflight_1 = seq.firreg %432 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 120 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %434 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 135 : ui64} : i12
    %404 = comb.shl bin %c63_i13, %255 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %405 = comb.extract %404 from 3 : (i13) -> i3
    %406 = comb.xor %405, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %407 = comb.mux bin %259, %406, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %411 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 150 : ui64} : i3
    %408 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %409 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %410 = comb.mux bin %409, %407, %408 {sv.namehint = "_d_first_counter_T_2"} : i3
    %411 = comb.mux bin %254, %410, %d_first_counter_2 : i3
    %412 = comb.shru bin %inflight_sizes_1, %299 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %413 = comb.extract %412 from 1 : (i12) -> i3
    %414 = comb.and bin %254, %409, %329 : i1
    %415 = comb.shl bin %c1_i4, %333 {sv.namehint = "_d_clr_T_1"} : i4
    %416 = comb.extract %415 from 0 : (i4) -> i3
    %417 = comb.mux bin %414, %416, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %418 = comb.shl bin %c15_i47, %337 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %419 = comb.extract %418 from 0 : (i47) -> i12
    %420 = comb.mux bin %414, %419, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %421 = comb.and bin %io_in_d_valid, %409, %329 : i1
    %422 = comb.shru bin %inflight_1, %347 : i3
    %423 = comb.extract %422 from 0 : (i3) -> i1
    %424 = comb.or bin %423, %reset : i1
    %425 = comb.xor bin %424, %true : i1
    %426 = comb.and bin %421, %425 : i1
    %427 = comb.icmp bin eq %io_in_d_bits_size, %413 : i3
    %428 = comb.or bin %427, %reset : i1
    %429 = comb.xor bin %428, %true : i1
    %430 = comb.and bin %421, %429 : i1
    %431 = comb.xor bin %417, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %432 = comb.and bin %inflight_1, %431 {sv.namehint = "_inflight_T_5"} : i3
    %433 = comb.xor bin %420, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %434 = comb.and bin %inflight_sizes_1, %433 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %441 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 153 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %435 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %436 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %437 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %438 = comb.or bin %435, %436, %437, %reset : i1
    %439 = comb.xor bin %438, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %442 = comb.and bin %STOP_COND_, %false : i1
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %443 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %443 {
          sv.fatal 1
        }
        %444 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %444 {
          sv.fatal 1
        }
        %445 = comb.and bin %STOP_COND_, %69 : i1
        sv.if %445 {
          sv.fatal 1
        }
        %446 = comb.and bin %STOP_COND_, %72 : i1
        sv.if %446 {
          sv.fatal 1
        }
        %447 = comb.and bin %STOP_COND_, %75 : i1
        sv.if %447 {
          sv.fatal 1
        }
        %448 = comb.and bin %STOP_COND_, %79 : i1
        sv.if %448 {
          sv.fatal 1
        }
        %449 = comb.and bin %STOP_COND_, %83 : i1
        sv.if %449 {
          sv.fatal 1
        }
        %450 = comb.and bin %STOP_COND_, %87 : i1
        sv.if %450 {
          sv.fatal 1
        }
        %451 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %451 {
          sv.fatal 1
        }
        %452 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %452 {
          sv.fatal 1
        }
        %453 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %453 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %96 : i1
        sv.if %454 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %97 : i1
        sv.if %455 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %456 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %458 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %459 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %110 : i1
        sv.if %460 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %461 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %462 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %463 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %464 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %125 : i1
        sv.if %465 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %466 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %467 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %468 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %135 : i1
        sv.if %470 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %472 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %473 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %142 : i1
        sv.if %475 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %478 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %153 : i1
        sv.if %479 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %480 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %481 {
          sv.fatal 1
        }
        %482 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %482 {
          sv.fatal 1
        }
        %483 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %483 {
          sv.fatal 1
        }
        %484 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %484 {
          sv.fatal 1
        }
        %485 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %485 {
          sv.fatal 1
        }
        %486 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %486 {
          sv.fatal 1
        }
        %487 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %487 {
          sv.fatal 1
        }
        %488 = comb.and bin %STOP_COND_, %173 : i1
        sv.if %488 {
          sv.fatal 1
        }
        %489 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %489 {
          sv.fatal 1
        }
        %490 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %490 {
          sv.fatal 1
        }
        %491 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %491 {
          sv.fatal 1
        }
        %492 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %492 {
          sv.fatal 1
        }
        %493 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %493 {
          sv.fatal 1
        }
        %494 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %494 {
          sv.fatal 1
        }
        %495 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %495 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %496 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %496 {
          sv.fatal 1
        }
        %497 = comb.and bin %STOP_COND_, %200 : i1
        sv.if %497 {
          sv.fatal 1
        }
        %498 = comb.and bin %STOP_COND_, %201 : i1
        sv.if %498 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %499 = comb.and bin %STOP_COND_, %204 : i1
        sv.if %499 {
          sv.fatal 1
        }
        %500 = comb.and bin %STOP_COND_, %205 : i1
        sv.if %500 {
          sv.fatal 1
        }
        %501 = comb.and bin %STOP_COND_, %206 : i1
        sv.if %501 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %502 = comb.and bin %STOP_COND_, %209 : i1
        sv.if %502 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %503 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %503 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %504 = comb.and bin %STOP_COND_, %215 : i1
        sv.if %504 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %505 = comb.and bin %STOP_COND_, %231 : i1
        sv.if %505 {
          sv.fatal 1
        }
        %506 = comb.and bin %STOP_COND_, %235 : i1
        sv.if %506 {
          sv.fatal 1
        }
        %507 = comb.and bin %STOP_COND_, %239 : i1
        sv.if %507 {
          sv.fatal 1
        }
        %508 = comb.and bin %STOP_COND_, %243 : i1
        sv.if %508 {
          sv.fatal 1
        }
        %509 = comb.and bin %STOP_COND_, %247 : i1
        sv.if %509 {
          sv.fatal 1
        }
        %510 = comb.and bin %STOP_COND_, %270 : i1
        sv.if %510 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %511 = comb.and bin %STOP_COND_, %274 : i1
        sv.if %511 {
          sv.fatal 1
        }
        %512 = comb.and bin %STOP_COND_, %278 : i1
        sv.if %512 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %513 = comb.and bin %STOP_COND_, %328 : i1
        sv.if %513 {
          sv.fatal 1
        }
        %514 = comb.and bin %STOP_COND_, %352 : i1
        sv.if %514 {
          sv.fatal 1
        }
        %515 = comb.and bin %STOP_COND_, %360 : i1
        sv.if %515 {
          sv.fatal 1
        }
        %516 = comb.and bin %STOP_COND_, %364 : i1
        sv.if %516 {
          sv.fatal 1
        }
        %517 = comb.and bin %STOP_COND_, %373 : i1
        sv.if %517 {
          sv.fatal 1
        }
        %518 = comb.and bin %STOP_COND_, %377 : i1
        sv.if %518 {
          sv.fatal 1
        }
        %519 = comb.and bin %STOP_COND_, %386 : i1
        sv.if %519 {
          sv.fatal 1
        }
        %520 = comb.and bin %STOP_COND_, %400 : i1
        sv.if %520 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %521 = comb.and bin %STOP_COND_, %426 : i1
        sv.if %521 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %522 = comb.and bin %STOP_COND_, %430 : i1
        sv.if %522 {
          sv.fatal 1
        }
        sv.if %442 {
          sv.fatal 1
        }
        %523 = comb.and bin %STOP_COND_, %439 : i1
        sv.if %523 {
          sv.fatal 1
        }
      }
    }
    %440 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %441 = comb.mux bin %254, %c0_i32, %440 : i32
    hw.output
  }
  hw.module private @Repeater_1(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i26, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i26, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %18 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %17 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %16 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %14 clock %clock {firrtl.random_init_start = 12 : ui64} : i26
    %saved_mask = seq.firreg %13 clock %clock {firrtl.random_init_start = 38 : ui64} : i8
    %saved_corrupt = seq.firreg %12 clock %clock {firrtl.random_init_start = 110 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i26
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %13 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %14 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i26
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %17 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %18 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i26, i8, i1
  }
  hw.module private @TLFragmenter_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i26, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i26, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i10 = hw.constant 0 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_10(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i26, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %44: i3, io_in_d_bits_source: %43: i2) -> ()
    %acknum = seq.firreg %33 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %35 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.icmp bin ne %1, %c0_i3 {sv.namehint = "_drop_T_2"} : i3
    %4 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %5 = comb.shl bin %c7_i6, %4 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %6 = comb.extract %5 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %7 = comb.xor bin %6, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %8 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "dHasData"} : (i3) -> i1
    %9 = comb.icmp eq %auto_out_d_bits_size, %c-1_i2 {sv.namehint = "_ack_decrement_T"} : i2
    %10 = comb.or %8, %9 {sv.namehint = "ack_decrement"} : i1
    %11 = comb.xor %1, %c-1_i3 : i3
    %12 = comb.extract %11 from 1 : (i3) -> i2
    %13 = comb.concat %true, %12 : i1, i2
    %14 = comb.and bin %1, %13 {sv.namehint = "dFirst_size_hi"} : i3
    %15 = comb.extract %11 from 0 : (i3) -> i1
    %16 = comb.extract %5 from 1 : (i6) -> i2
    %17 = comb.concat %15, %16 : i1, i2
    %18 = comb.and %7, %17 {sv.namehint = "dFirst_size_lo_1"} : i3
    %19 = comb.icmp bin ne %14, %c0_i3 {sv.namehint = "dFirst_size_hi_1"} : i3
    %20 = comb.extract %14 from 1 : (i3) -> i2
    %21 = comb.concat %false, %20 : i1, i2
    %22 = comb.or %21, %18 {sv.namehint = "_dFirst_size_T_6"} : i3
    %23 = comb.extract %22 from 1 {sv.namehint = "dFirst_size_hi_2"} : (i3) -> i2
    %24 = comb.icmp bin ne %23, %c0_i2 {sv.namehint = "dFirst_size_hi_3"} : i2
    %25 = comb.extract %22 from 2 : (i3) -> i1
    %26 = comb.extract %22 from 0 : (i3) -> i1
    %27 = comb.or %25, %26 {sv.namehint = "_dFirst_size_T_7"} : i1
    %28 = comb.concat %19, %24, %27 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %29 = comb.and bin %40, %auto_out_d_valid : i1
    %30 = comb.concat %c0_i2, %10 : i2, i1
    %31 = comb.sub %acknum, %30 {sv.namehint = "_acknum_T"} : i3
    %32 = comb.mux bin %2, %1, %31 {sv.namehint = "_acknum_T_2"} : i3
    %33 = comb.mux bin %29, %32, %acknum : i3
    %34 = comb.and bin %29, %2 : i1
    %35 = comb.mux bin %34, %28, %dOrig : i3
    %36 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %37 = comb.mux bin %34, %36, %dToggle : i1
    %38 = comb.xor bin %8, %true {sv.namehint = "_drop_T"} : i1
    %39 = comb.and bin %38, %3 {sv.namehint = "drop"} : i1
    %40 = comb.or bin %auto_in_d_ready, %39 {sv.namehint = "bundleOut_0_d_ready"} : i1
    %41 = comb.xor bin %39, %true {sv.namehint = "_bundleIn_0_d_valid_T"} : i1
    %42 = comb.and bin %auto_out_d_valid, %41 {sv.namehint = "bundleIn_0_d_valid"} : i1
    %43 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "bundleIn_0_d_bits_source"} : (i6) -> i2
    %44 = comb.mux bin %2, %28, %dOrig {sv.namehint = "bundleIn_0_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater_1(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %62: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i26, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i26, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %45 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %46 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %47 = comb.mux %45, %c-1_i2, %46 {sv.namehint = "aFrag"} : i2
    %48 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %49 = comb.shl bin %c63_i13, %48 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %50 = comb.extract %49 from 3 : (i13) -> i3
    %51 = comb.xor %50, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %52 = comb.extract %repeater.io_deq_bits_opcode from 2 {sv.namehint = "_repeater_io_repeat_T"} : (i3) -> i1
    %gennum = seq.firreg %60 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %53 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %54 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %55 = comb.mux bin %53, %51, %54 {sv.namehint = "new_gennum"} : i3
    %aToggle_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %56 = comb.mux bin %53, %dToggle, %aToggle_r : i1
    %57 = comb.mux bin %53, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %58 = comb.xor bin %57, %true {sv.namehint = "bundleOut_0_a_bits_source_hi_lo"} : i1
    %59 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %60 = comb.mux bin %59, %55, %gennum : i3
    %61 = comb.icmp bin ne %55, %c0_i3 {sv.namehint = "_repeater_io_repeat_T_1"} : i3
    %62 = comb.and bin %52, %61 {sv.namehint = "repeater.io_repeat"} : i1
    %63 = comb.extract %49 from 3 : (i13) -> i3
    %64 = comb.or %55, %63 {sv.namehint = "_bundleOut_0_a_bits_address_T_2"} : i3
    %65 = comb.xor %64, %c-1_i3 : i3
    %66 = comb.concat %65, %c0_i3 {sv.namehint = "_bundleOut_0_a_bits_address_T_5"} : i3, i3
    %67 = comb.extract %repeater.io_deq_bits_address from 6 : (i26) -> i20
    %68 = comb.extract %repeater.io_deq_bits_address from 0 : (i26) -> i6
    %69 = comb.or bin %68, %66 : i6
    %70 = comb.concat %67, %69 {sv.namehint = "bundleOut_0_a_bits_address"} : i20, i6
    %71 = comb.concat %repeater.io_deq_bits_source, %58, %55 {sv.namehint = "bundleOut_0_a_bits_source"} : i2, i1, i3
    %72 = comb.xor bin %repeater.io_full, %true : i1
    %73 = comb.or bin %72, %52, %reset : i1
    %74 = comb.xor bin %73, %true : i1
    %75 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %76 = comb.or bin %72, %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %79 = comb.and bin %STOP_COND_, %false : i1
        sv.if %79 {
          sv.fatal 1
        }
        %80 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %80 {
          sv.fatal 1
        }
        %81 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %81 {
          sv.fatal 1
        }
      }
    }
    %78 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "bundleOut_0_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %42, %auto_out_d_bits_opcode, %44, %43, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %47, %71, %70, %78, %auto_in_a_bits_data, %repeater.io_deq_bits_corrupt, %40 : i1, i1, i3, i3, i2, i64, i1, i3, i3, i2, i6, i26, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_7(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i26, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_data : i64, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_opcode : i3, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i26, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i26, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_opcode: %auto_fragmenter_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i26, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i26, i8, i64, i1, i1, i1, i1, i3, i3, i2, i64
  }
  hw.module private @TLMonitor_11(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i12, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i6 = hw.constant 0 : i6
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %7 = comb.shl bin %c63_i13, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %9 = comb.xor bin %8, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %10 = comb.extract %io_in_a_bits_address from 0 : (i12) -> i6
    %11 = comb.and bin %10, %9 : i6
    %12 = comb.icmp bin eq %11, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i12) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i12) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i12) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.xor bin %reset, %true : i1
    %59 = comb.and bin %57, %58 : i1
    %60 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %61 = comb.and %3, %60 : i1
    %62 = comb.or bin %61, %reset : i1
    %63 = comb.xor bin %62, %true : i1
    %64 = comb.and bin %57, %63 : i1
    %65 = comb.or bin %3, %4, %5, %reset : i1
    %66 = comb.xor bin %65, %true : i1
    %67 = comb.and bin %57, %66 : i1
    %68 = comb.or bin %14, %reset : i1
    %69 = comb.xor bin %68, %true : i1
    %70 = comb.and bin %57, %69 : i1
    %71 = comb.or bin %12, %reset : i1
    %72 = comb.xor bin %71, %true : i1
    %73 = comb.and bin %57, %72 : i1
    %74 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %75 = comb.or bin %74, %reset : i1
    %76 = comb.xor bin %75, %true : i1
    %77 = comb.and bin %57, %76 : i1
    %78 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %79 = comb.or bin %78, %reset : i1
    %80 = comb.xor bin %79, %true : i1
    %81 = comb.and bin %57, %80 : i1
    %82 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %83 = comb.or bin %82, %reset : i1
    %84 = comb.xor bin %83, %true : i1
    %85 = comb.and bin %57, %84 : i1
    %86 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %87 = comb.and bin %io_in_a_valid, %86 : i1
    %88 = comb.and bin %87, %58 : i1
    %89 = comb.and %3, %60 : i1
    %90 = comb.or bin %89, %reset : i1
    %91 = comb.xor bin %90, %true : i1
    %92 = comb.and bin %87, %91 : i1
    %93 = comb.and bin %87, %66 : i1
    %94 = comb.and bin %87, %69 : i1
    %95 = comb.and bin %87, %72 : i1
    %96 = comb.and bin %87, %76 : i1
    %97 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %98 = comb.or bin %97, %reset : i1
    %99 = comb.xor bin %98, %true : i1
    %100 = comb.and bin %87, %99 : i1
    %101 = comb.and bin %87, %80 : i1
    %102 = comb.and bin %87, %84 : i1
    %103 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %104 = comb.and bin %io_in_a_valid, %103 : i1
    %105 = comb.or bin %3, %4, %5 : i1
    %106 = comb.or bin %105, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %104, %107 : i1
    %109 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %110 = comb.or bin %109, %reset : i1
    %111 = comb.xor bin %110, %true : i1
    %112 = comb.and bin %104, %111 : i1
    %113 = comb.and bin %104, %66 : i1
    %114 = comb.and bin %104, %72 : i1
    %115 = comb.xor bin %97, %true : i1
    %116 = comb.or bin %115, %reset : i1
    %117 = comb.xor bin %116, %true : i1
    %118 = comb.and bin %104, %117 : i1
    %119 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %120 = comb.or bin %119, %reset : i1
    %121 = comb.xor bin %120, %true : i1
    %122 = comb.and bin %104, %121 : i1
    %123 = comb.and bin %104, %84 : i1
    %124 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %125 = comb.and bin %io_in_a_valid, %124 : i1
    %126 = comb.and bin %105, %109 : i1
    %127 = comb.or bin %126, %reset : i1
    %128 = comb.xor bin %127, %true : i1
    %129 = comb.and bin %125, %128 : i1
    %130 = comb.and bin %125, %66 : i1
    %131 = comb.and bin %125, %72 : i1
    %132 = comb.and bin %125, %117 : i1
    %133 = comb.and bin %125, %121 : i1
    %134 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %135 = comb.and bin %io_in_a_valid, %134 : i1
    %136 = comb.and bin %135, %128 : i1
    %137 = comb.and bin %135, %66 : i1
    %138 = comb.and bin %135, %72 : i1
    %139 = comb.and bin %135, %117 : i1
    %140 = comb.xor bin %55, %c-1_i8 : i8
    %141 = comb.and bin %io_in_a_bits_mask, %140 : i8
    %142 = comb.icmp bin eq %141, %c0_i8 : i8
    %143 = comb.or bin %142, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.and bin %135, %144 : i1
    %146 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %147 = comb.and bin %io_in_a_valid, %146 : i1
    %148 = comb.and bin %147, %58 : i1
    %149 = comb.and bin %147, %66 : i1
    %150 = comb.and bin %147, %72 : i1
    %151 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %152 = comb.or bin %151, %reset : i1
    %153 = comb.xor bin %152, %true : i1
    %154 = comb.and bin %147, %153 : i1
    %155 = comb.and bin %147, %121 : i1
    %156 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %157 = comb.and bin %io_in_a_valid, %156 : i1
    %158 = comb.and bin %157, %58 : i1
    %159 = comb.and bin %157, %66 : i1
    %160 = comb.and bin %157, %72 : i1
    %161 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %162 = comb.xor bin %161, %true : i1
    %163 = comb.or bin %162, %reset : i1
    %164 = comb.xor bin %163, %true : i1
    %165 = comb.and bin %157, %164 : i1
    %166 = comb.and bin %157, %121 : i1
    %167 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %168 = comb.and bin %io_in_a_valid, %167 : i1
    %169 = comb.and bin %168, %58 : i1
    %170 = comb.and bin %168, %66 : i1
    %171 = comb.and bin %168, %72 : i1
    %172 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %173 = comb.or bin %172, %reset : i1
    %174 = comb.xor bin %173, %true : i1
    %175 = comb.and bin %168, %174 : i1
    %176 = comb.and bin %168, %121 : i1
    %177 = comb.and bin %168, %84 : i1
    %178 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %179 = comb.or bin %178, %reset : i1
    %180 = comb.xor bin %179, %true : i1
    %181 = comb.and bin %io_in_d_valid, %180 : i1
    %182 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %183 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %184 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %185 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %186 = comb.and bin %io_in_d_valid, %185 : i1
    %187 = comb.or bin %182, %183, %184, %reset : i1
    %188 = comb.xor bin %187, %true : i1
    %189 = comb.and bin %186, %188 : i1
    %190 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %191 = comb.or bin %190, %reset : i1
    %192 = comb.xor bin %191, %true : i1
    %193 = comb.and bin %186, %192 : i1
    %194 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %195 = comb.and bin %io_in_d_valid, %194 : i1
    %196 = comb.and bin %195, %188 : i1
    %197 = comb.and bin %195, %58 : i1
    %198 = comb.and bin %195, %192 : i1
    %199 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %200 = comb.and bin %io_in_d_valid, %199 : i1
    %201 = comb.and bin %200, %188 : i1
    %202 = comb.and bin %200, %58 : i1
    %203 = comb.and bin %200, %192 : i1
    %204 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %205 = comb.and bin %io_in_d_valid, %204 : i1
    %206 = comb.and bin %205, %188 : i1
    %207 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %208 = comb.and bin %io_in_d_valid, %207 : i1
    %209 = comb.and bin %208, %188 : i1
    %210 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %211 = comb.and bin %io_in_d_valid, %210 : i1
    %212 = comb.and bin %211, %188 : i1
    %213 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %214 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %215 = comb.extract %214 from 3 : (i13) -> i3
    %216 = comb.xor %215, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %217 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %218 = comb.mux bin %217, %c0_i3, %216 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %223 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %219 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %220 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %221 = comb.xor bin %220, %true {sv.namehint = "a_first"} : i1
    %222 = comb.mux bin %220, %219, %218 {sv.namehint = "_a_first_counter_T"} : i3
    %223 = comb.mux bin %213, %222, %a_first_counter : i3
    %opcode = seq.firreg %246 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %247 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %248 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %249 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %250 clock %clock {firrtl.random_init_start = 14 : ui64} : i12
    %224 = comb.and bin %io_in_a_valid, %220 : i1
    %225 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %226 = comb.or bin %225, %reset : i1
    %227 = comb.xor bin %226, %true : i1
    %228 = comb.and bin %224, %227 : i1
    %229 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %230 = comb.or bin %229, %reset : i1
    %231 = comb.xor bin %230, %true : i1
    %232 = comb.and bin %224, %231 : i1
    %233 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %234 = comb.or bin %233, %reset : i1
    %235 = comb.xor bin %234, %true : i1
    %236 = comb.and bin %224, %235 : i1
    %237 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %238 = comb.or bin %237, %reset : i1
    %239 = comb.xor bin %238, %true : i1
    %240 = comb.and bin %224, %239 : i1
    %241 = comb.icmp bin eq %io_in_a_bits_address, %address : i12
    %242 = comb.or bin %241, %reset : i1
    %243 = comb.xor bin %242, %true : i1
    %244 = comb.and bin %224, %243 : i1
    %245 = comb.and bin %213, %221 : i1
    %246 = comb.mux bin %245, %io_in_a_bits_opcode, %opcode : i3
    %247 = comb.mux bin %245, %io_in_a_bits_param, %param : i3
    %248 = comb.mux bin %245, %io_in_a_bits_size, %size : i3
    %249 = comb.mux bin %245, %io_in_a_bits_source, %source : i2
    %250 = comb.mux bin %245, %io_in_a_bits_address, %address : i12
    %251 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %252 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %253 = comb.shl bin %c63_i13, %252 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %254 = comb.extract %253 from 3 : (i13) -> i3
    %255 = comb.xor %254, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %256 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %257 = comb.mux bin %256, %255, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %262 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 26 : ui64} : i3
    %258 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %259 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %260 = comb.xor bin %259, %true {sv.namehint = "d_first"} : i1
    %261 = comb.mux bin %259, %258, %257 {sv.namehint = "_d_first_counter_T"} : i3
    %262 = comb.mux bin %251, %261, %d_first_counter : i3
    %opcode_1 = seq.firreg %277 clock %clock {firrtl.random_init_start = 29 : ui64} : i3
    %size_1 = seq.firreg %278 clock %clock {firrtl.random_init_start = 34 : ui64} : i3
    %source_1 = seq.firreg %279 clock %clock {firrtl.random_init_start = 37 : ui64} : i2
    %263 = comb.and bin %io_in_d_valid, %259 : i1
    %264 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %265 = comb.or bin %264, %reset : i1
    %266 = comb.xor bin %265, %true : i1
    %267 = comb.and bin %263, %266 : i1
    %268 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %269 = comb.or bin %268, %reset : i1
    %270 = comb.xor bin %269, %true : i1
    %271 = comb.and bin %263, %270 : i1
    %272 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %273 = comb.or bin %272, %reset : i1
    %274 = comb.xor bin %273, %true : i1
    %275 = comb.and bin %263, %274 : i1
    %276 = comb.and bin %251, %260 : i1
    %277 = comb.mux bin %276, %io_in_d_bits_opcode, %opcode_1 : i3
    %278 = comb.mux bin %276, %io_in_d_bits_size, %size_1 : i3
    %279 = comb.mux bin %276, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %386 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 41 : ui64} : i3
    %inflight_opcodes = seq.firreg %389 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 44 : ui64} : i12
    %inflight_sizes = seq.firreg %392 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 56 : ui64} : i12
    %280 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %281 = comb.extract %280 from 3 : (i13) -> i3
    %282 = comb.xor %281, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %283 = comb.mux bin %217, %c0_i3, %282 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %287 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 68 : ui64} : i3
    %284 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %285 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %286 = comb.mux bin %285, %283, %284 {sv.namehint = "_a_first_counter_T_1"} : i3
    %287 = comb.mux bin %213, %286, %a_first_counter_1 : i3
    %288 = comb.shl bin %c63_i13, %252 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %289 = comb.extract %288 from 3 : (i13) -> i3
    %290 = comb.xor %289, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %291 = comb.mux bin %256, %290, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %295 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 71 : ui64} : i3
    %292 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %293 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %294 = comb.mux bin %293, %291, %292 {sv.namehint = "_d_first_counter_T_1"} : i3
    %295 = comb.mux bin %251, %294, %d_first_counter_1 : i3
    %296 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %297 = comb.shru bin %inflight_opcodes, %296 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %298 = comb.extract %297 from 1 : (i12) -> i3
    %299 = comb.shru bin %inflight_sizes, %296 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %300 = comb.extract %299 from 1 : (i12) -> i3
    %301 = comb.and bin %213, %285 : i1
    %302 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %303 = comb.shl bin %c1_i4, %302 {sv.namehint = "_a_set_T"} : i4
    %304 = comb.extract %303 from 0 : (i4) -> i3
    %305 = comb.mux bin %301, %304, %c0_i3 {sv.namehint = "a_set"} : i3
    %306 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %307 = comb.mux bin %301, %306, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %308 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %309 = comb.mux bin %301, %308, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %310 = comb.concat %c0_i31, %307 : i31, i4
    %311 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %312 = comb.shl bin %310, %311 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %313 = comb.extract %312 from 0 : (i35) -> i12
    %314 = comb.mux bin %301, %313, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %315 = comb.concat %c0_i31, %309 : i31, i4
    %316 = comb.shl bin %315, %311 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %317 = comb.extract %316 from 0 : (i35) -> i12
    %318 = comb.mux bin %301, %317, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %319 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %320 = comb.shru bin %inflight, %319 : i3
    %321 = comb.extract %320 from 0 : (i3) -> i1
    %322 = comb.xor bin %321, %true : i1
    %323 = comb.or bin %322, %reset : i1
    %324 = comb.xor bin %323, %true : i1
    %325 = comb.and bin %301, %324 : i1
    %326 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %327 = comb.and bin %io_in_d_valid, %293 : i1
    %328 = comb.xor bin %326, %true : i1
    %329 = comb.and bin %251, %293, %328 : i1
    %330 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %331 = comb.shl bin %c1_i4, %330 {sv.namehint = "_d_clr_T"} : i4
    %332 = comb.extract %331 from 0 : (i4) -> i3
    %333 = comb.mux bin %329, %332, %c0_i3 {sv.namehint = "d_clr"} : i3
    %334 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %335 = comb.shl bin %c15_i47, %334 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %336 = comb.extract %335 from 0 : (i47) -> i12
    %337 = comb.mux bin %329, %336, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %338 = comb.shl bin %c15_i47, %334 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %339 = comb.extract %338 from 0 : (i47) -> i12
    %340 = comb.mux bin %329, %339, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %341 = comb.and bin %327, %328 : i1
    %342 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %343 = comb.and bin %io_in_a_valid, %285, %342 {sv.namehint = "same_cycle_resp"} : i1
    %344 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %345 = comb.shru bin %inflight, %344 : i3
    %346 = comb.extract %345 from 0 : (i3) -> i1
    %347 = comb.or bin %346, %343, %reset : i1
    %348 = comb.xor bin %347, %true : i1
    %349 = comb.and bin %341, %348 : i1
    %350 = comb.and bin %341, %343 : i1
    %351 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %352 = comb.icmp bin eq %io_in_d_bits_opcode, %351 : i3
    %353 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %354 = comb.icmp bin eq %io_in_d_bits_opcode, %353 : i3
    %355 = comb.or bin %352, %354, %reset : i1
    %356 = comb.xor bin %355, %true : i1
    %357 = comb.and bin %350, %356 : i1
    %358 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %359 = comb.or bin %358, %reset : i1
    %360 = comb.xor bin %359, %true : i1
    %361 = comb.and bin %350, %360 : i1
    %362 = comb.xor bin %343, %true : i1
    %363 = comb.and bin %341, %362 : i1
    %364 = hw.array_get %1[%298] : !hw.array<8xi3>, i3
    %365 = comb.icmp bin eq %io_in_d_bits_opcode, %364 : i3
    %366 = hw.array_get %0[%298] : !hw.array<8xi3>, i3
    %367 = comb.icmp bin eq %io_in_d_bits_opcode, %366 : i3
    %368 = comb.or bin %365, %367, %reset : i1
    %369 = comb.xor bin %368, %true : i1
    %370 = comb.and bin %363, %369 : i1
    %371 = comb.icmp bin eq %io_in_d_bits_size, %300 : i3
    %372 = comb.or bin %371, %reset : i1
    %373 = comb.xor bin %372, %true : i1
    %374 = comb.and bin %363, %373 : i1
    %375 = comb.and bin %327, %285 : i1
    %376 = comb.and bin %375, %io_in_a_valid : i1
    %377 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %378 = comb.and bin %376, %377 : i1
    %379 = comb.and bin %378, %328 : i1
    %380 = comb.xor bin %io_in_d_ready, %true : i1
    %381 = comb.or bin %380, %io_in_a_ready, %reset : i1
    %382 = comb.xor bin %381, %true : i1
    %383 = comb.and bin %379, %382 : i1
    %384 = comb.or bin %inflight, %305 {sv.namehint = "_inflight_T"} : i3
    %385 = comb.xor bin %333, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %386 = comb.and bin %384, %385 {sv.namehint = "_inflight_T_2"} : i3
    %387 = comb.or bin %inflight_opcodes, %314 {sv.namehint = "_inflight_opcodes_T"} : i12
    %388 = comb.xor bin %337, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %389 = comb.and bin %387, %388 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %390 = comb.or bin %inflight_sizes, %318 {sv.namehint = "_inflight_sizes_T"} : i12
    %391 = comb.xor bin %340, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %392 = comb.and bin %390, %391 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %400 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 74 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %393 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %394 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %395 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %396 = comb.or bin %393, %394, %395, %reset : i1
    %397 = comb.xor bin %396, %true : i1
    %398 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %399 = comb.or bin %213, %251 : i1
    %400 = comb.mux bin %399, %c0_i32, %398 : i32
    %inflight_1 = seq.firreg %429 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 106 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %431 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 121 : ui64} : i12
    %401 = comb.shl bin %c63_i13, %252 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %402 = comb.extract %401 from 3 : (i13) -> i3
    %403 = comb.xor %402, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %404 = comb.mux bin %256, %403, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %408 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 136 : ui64} : i3
    %405 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %406 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %407 = comb.mux bin %406, %404, %405 {sv.namehint = "_d_first_counter_T_2"} : i3
    %408 = comb.mux bin %251, %407, %d_first_counter_2 : i3
    %409 = comb.shru bin %inflight_sizes_1, %296 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %410 = comb.extract %409 from 1 : (i12) -> i3
    %411 = comb.and bin %251, %406, %326 : i1
    %412 = comb.shl bin %c1_i4, %330 {sv.namehint = "_d_clr_T_1"} : i4
    %413 = comb.extract %412 from 0 : (i4) -> i3
    %414 = comb.mux bin %411, %413, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %415 = comb.shl bin %c15_i47, %334 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %416 = comb.extract %415 from 0 : (i47) -> i12
    %417 = comb.mux bin %411, %416, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %418 = comb.and bin %io_in_d_valid, %406, %326 : i1
    %419 = comb.shru bin %inflight_1, %344 : i3
    %420 = comb.extract %419 from 0 : (i3) -> i1
    %421 = comb.or bin %420, %reset : i1
    %422 = comb.xor bin %421, %true : i1
    %423 = comb.and bin %418, %422 : i1
    %424 = comb.icmp bin eq %io_in_d_bits_size, %410 : i3
    %425 = comb.or bin %424, %reset : i1
    %426 = comb.xor bin %425, %true : i1
    %427 = comb.and bin %418, %426 : i1
    %428 = comb.xor bin %414, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %429 = comb.and bin %inflight_1, %428 {sv.namehint = "_inflight_T_5"} : i3
    %430 = comb.xor bin %417, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %431 = comb.and bin %inflight_sizes_1, %430 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %438 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 139 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %432 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %433 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %434 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %435 = comb.or bin %432, %433, %434, %reset : i1
    %436 = comb.xor bin %435, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %439 = comb.and bin %STOP_COND_, %false : i1
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %440 = comb.and bin %STOP_COND_, %59 : i1
        sv.if %440 {
          sv.fatal 1
        }
        %441 = comb.and bin %STOP_COND_, %64 : i1
        sv.if %441 {
          sv.fatal 1
        }
        %442 = comb.and bin %STOP_COND_, %67 : i1
        sv.if %442 {
          sv.fatal 1
        }
        %443 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %443 {
          sv.fatal 1
        }
        %444 = comb.and bin %STOP_COND_, %73 : i1
        sv.if %444 {
          sv.fatal 1
        }
        %445 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %445 {
          sv.fatal 1
        }
        %446 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %446 {
          sv.fatal 1
        }
        %447 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %447 {
          sv.fatal 1
        }
        %448 = comb.and bin %STOP_COND_, %88 : i1
        sv.if %448 {
          sv.fatal 1
        }
        %449 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %449 {
          sv.fatal 1
        }
        %450 = comb.and bin %STOP_COND_, %93 : i1
        sv.if %450 {
          sv.fatal 1
        }
        %451 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %451 {
          sv.fatal 1
        }
        %452 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %452 {
          sv.fatal 1
        }
        %453 = comb.and bin %STOP_COND_, %96 : i1
        sv.if %453 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %100 : i1
        sv.if %454 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %101 : i1
        sv.if %455 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %456 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %112 : i1
        sv.if %458 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %459 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %460 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %461 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %462 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %463 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %464 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %465 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %466 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %467 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %468 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %137 : i1
        sv.if %470 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %472 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %473 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %475 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %150 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %154 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %155 : i1
        sv.if %478 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %479 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %159 : i1
        sv.if %480 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %481 {
          sv.fatal 1
        }
        %482 = comb.and bin %STOP_COND_, %165 : i1
        sv.if %482 {
          sv.fatal 1
        }
        %483 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %483 {
          sv.fatal 1
        }
        %484 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %484 {
          sv.fatal 1
        }
        %485 = comb.and bin %STOP_COND_, %170 : i1
        sv.if %485 {
          sv.fatal 1
        }
        %486 = comb.and bin %STOP_COND_, %171 : i1
        sv.if %486 {
          sv.fatal 1
        }
        %487 = comb.and bin %STOP_COND_, %175 : i1
        sv.if %487 {
          sv.fatal 1
        }
        %488 = comb.and bin %STOP_COND_, %176 : i1
        sv.if %488 {
          sv.fatal 1
        }
        %489 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %489 {
          sv.fatal 1
        }
        %490 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %490 {
          sv.fatal 1
        }
        %491 = comb.and bin %STOP_COND_, %189 : i1
        sv.if %491 {
          sv.fatal 1
        }
        %492 = comb.and bin %STOP_COND_, %193 : i1
        sv.if %492 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %493 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %493 {
          sv.fatal 1
        }
        %494 = comb.and bin %STOP_COND_, %197 : i1
        sv.if %494 {
          sv.fatal 1
        }
        %495 = comb.and bin %STOP_COND_, %198 : i1
        sv.if %495 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %496 = comb.and bin %STOP_COND_, %201 : i1
        sv.if %496 {
          sv.fatal 1
        }
        %497 = comb.and bin %STOP_COND_, %202 : i1
        sv.if %497 {
          sv.fatal 1
        }
        %498 = comb.and bin %STOP_COND_, %203 : i1
        sv.if %498 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %499 = comb.and bin %STOP_COND_, %206 : i1
        sv.if %499 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %500 = comb.and bin %STOP_COND_, %209 : i1
        sv.if %500 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %501 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %501 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %502 = comb.and bin %STOP_COND_, %228 : i1
        sv.if %502 {
          sv.fatal 1
        }
        %503 = comb.and bin %STOP_COND_, %232 : i1
        sv.if %503 {
          sv.fatal 1
        }
        %504 = comb.and bin %STOP_COND_, %236 : i1
        sv.if %504 {
          sv.fatal 1
        }
        %505 = comb.and bin %STOP_COND_, %240 : i1
        sv.if %505 {
          sv.fatal 1
        }
        %506 = comb.and bin %STOP_COND_, %244 : i1
        sv.if %506 {
          sv.fatal 1
        }
        %507 = comb.and bin %STOP_COND_, %267 : i1
        sv.if %507 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %508 = comb.and bin %STOP_COND_, %271 : i1
        sv.if %508 {
          sv.fatal 1
        }
        %509 = comb.and bin %STOP_COND_, %275 : i1
        sv.if %509 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %510 = comb.and bin %STOP_COND_, %325 : i1
        sv.if %510 {
          sv.fatal 1
        }
        %511 = comb.and bin %STOP_COND_, %349 : i1
        sv.if %511 {
          sv.fatal 1
        }
        %512 = comb.and bin %STOP_COND_, %357 : i1
        sv.if %512 {
          sv.fatal 1
        }
        %513 = comb.and bin %STOP_COND_, %361 : i1
        sv.if %513 {
          sv.fatal 1
        }
        %514 = comb.and bin %STOP_COND_, %370 : i1
        sv.if %514 {
          sv.fatal 1
        }
        %515 = comb.and bin %STOP_COND_, %374 : i1
        sv.if %515 {
          sv.fatal 1
        }
        %516 = comb.and bin %STOP_COND_, %383 : i1
        sv.if %516 {
          sv.fatal 1
        }
        %517 = comb.and bin %STOP_COND_, %397 : i1
        sv.if %517 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %518 = comb.and bin %STOP_COND_, %423 : i1
        sv.if %518 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %519 = comb.and bin %STOP_COND_, %427 : i1
        sv.if %519 {
          sv.fatal 1
        }
        sv.if %439 {
          sv.fatal 1
        }
        %520 = comb.and bin %STOP_COND_, %436 : i1
        sv.if %520 {
          sv.fatal 1
        }
      }
    }
    %437 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %438 = comb.mux bin %251, %c0_i32, %437 : i32
    hw.output
  }
  hw.module private @Repeater_2(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i12, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i12, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %18 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %17 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %16 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %14 clock %clock {firrtl.random_init_start = 12 : ui64} : i12
    %saved_mask = seq.firreg %13 clock %clock {firrtl.random_init_start = 24 : ui64} : i8
    %saved_corrupt = seq.firreg %12 clock %clock {firrtl.random_init_start = 96 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i12
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %13 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %14 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i12
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %17 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %18 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i12, i8, i1
  }
  hw.module private @TLFragmenter_2(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i12, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i12, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i10 = hw.constant 0 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_11(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i12, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %44: i3, io_in_d_bits_source: %43: i2) -> ()
    %acknum = seq.firreg %33 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %35 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.icmp bin ne %1, %c0_i3 {sv.namehint = "_drop_T_2"} : i3
    %4 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %5 = comb.shl bin %c7_i6, %4 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %6 = comb.extract %5 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %7 = comb.xor bin %6, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %8 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "dHasData"} : (i3) -> i1
    %9 = comb.icmp eq %auto_out_d_bits_size, %c-1_i2 {sv.namehint = "_ack_decrement_T"} : i2
    %10 = comb.or %8, %9 {sv.namehint = "ack_decrement"} : i1
    %11 = comb.xor %1, %c-1_i3 : i3
    %12 = comb.extract %11 from 1 : (i3) -> i2
    %13 = comb.concat %true, %12 : i1, i2
    %14 = comb.and bin %1, %13 {sv.namehint = "dFirst_size_hi"} : i3
    %15 = comb.extract %11 from 0 : (i3) -> i1
    %16 = comb.extract %5 from 1 : (i6) -> i2
    %17 = comb.concat %15, %16 : i1, i2
    %18 = comb.and %7, %17 {sv.namehint = "dFirst_size_lo_1"} : i3
    %19 = comb.icmp bin ne %14, %c0_i3 {sv.namehint = "dFirst_size_hi_1"} : i3
    %20 = comb.extract %14 from 1 : (i3) -> i2
    %21 = comb.concat %false, %20 : i1, i2
    %22 = comb.or %21, %18 {sv.namehint = "_dFirst_size_T_6"} : i3
    %23 = comb.extract %22 from 1 {sv.namehint = "dFirst_size_hi_2"} : (i3) -> i2
    %24 = comb.icmp bin ne %23, %c0_i2 {sv.namehint = "dFirst_size_hi_3"} : i2
    %25 = comb.extract %22 from 2 : (i3) -> i1
    %26 = comb.extract %22 from 0 : (i3) -> i1
    %27 = comb.or %25, %26 {sv.namehint = "_dFirst_size_T_7"} : i1
    %28 = comb.concat %19, %24, %27 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %29 = comb.and bin %40, %auto_out_d_valid : i1
    %30 = comb.concat %c0_i2, %10 : i2, i1
    %31 = comb.sub %acknum, %30 {sv.namehint = "_acknum_T"} : i3
    %32 = comb.mux bin %2, %1, %31 {sv.namehint = "_acknum_T_2"} : i3
    %33 = comb.mux bin %29, %32, %acknum : i3
    %34 = comb.and bin %29, %2 : i1
    %35 = comb.mux bin %34, %28, %dOrig : i3
    %36 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %37 = comb.mux bin %34, %36, %dToggle : i1
    %38 = comb.xor bin %8, %true {sv.namehint = "_drop_T"} : i1
    %39 = comb.and bin %38, %3 {sv.namehint = "drop"} : i1
    %40 = comb.or bin %auto_in_d_ready, %39 {sv.namehint = "bundleOut_0_d_ready"} : i1
    %41 = comb.xor bin %39, %true {sv.namehint = "_bundleIn_0_d_valid_T"} : i1
    %42 = comb.and bin %auto_out_d_valid, %41 {sv.namehint = "bundleIn_0_d_valid"} : i1
    %43 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "bundleIn_0_d_bits_source"} : (i6) -> i2
    %44 = comb.mux bin %2, %28, %dOrig {sv.namehint = "bundleIn_0_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater_2(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %62: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i12, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i12, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %45 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %46 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %47 = comb.mux %45, %c-1_i2, %46 {sv.namehint = "aFrag"} : i2
    %48 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %49 = comb.shl bin %c63_i13, %48 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %50 = comb.extract %49 from 3 : (i13) -> i3
    %51 = comb.xor %50, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %52 = comb.extract %repeater.io_deq_bits_opcode from 2 {sv.namehint = "_repeater_io_repeat_T"} : (i3) -> i1
    %gennum = seq.firreg %60 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %53 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %54 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %55 = comb.mux bin %53, %51, %54 {sv.namehint = "new_gennum"} : i3
    %aToggle_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %56 = comb.mux bin %53, %dToggle, %aToggle_r : i1
    %57 = comb.mux bin %53, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %58 = comb.xor bin %57, %true {sv.namehint = "bundleOut_0_a_bits_source_hi_lo"} : i1
    %59 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %60 = comb.mux bin %59, %55, %gennum : i3
    %61 = comb.icmp bin ne %55, %c0_i3 {sv.namehint = "_repeater_io_repeat_T_1"} : i3
    %62 = comb.and bin %52, %61 {sv.namehint = "repeater.io_repeat"} : i1
    %63 = comb.extract %49 from 3 : (i13) -> i3
    %64 = comb.or %55, %63 {sv.namehint = "_bundleOut_0_a_bits_address_T_2"} : i3
    %65 = comb.xor %64, %c-1_i3 : i3
    %66 = comb.concat %65, %c0_i3 {sv.namehint = "_bundleOut_0_a_bits_address_T_5"} : i3, i3
    %67 = comb.extract %repeater.io_deq_bits_address from 6 : (i12) -> i6
    %68 = comb.extract %repeater.io_deq_bits_address from 0 : (i12) -> i6
    %69 = comb.or bin %68, %66 : i6
    %70 = comb.concat %67, %69 {sv.namehint = "bundleOut_0_a_bits_address"} : i6, i6
    %71 = comb.concat %repeater.io_deq_bits_source, %58, %55 {sv.namehint = "bundleOut_0_a_bits_source"} : i2, i1, i3
    %72 = comb.xor bin %repeater.io_full, %true : i1
    %73 = comb.or bin %72, %52, %reset : i1
    %74 = comb.xor bin %73, %true : i1
    %75 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %76 = comb.or bin %72, %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %79 = comb.and bin %STOP_COND_, %false : i1
        sv.if %79 {
          sv.fatal 1
        }
        %80 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %80 {
          sv.fatal 1
        }
        %81 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %81 {
          sv.fatal 1
        }
      }
    }
    %78 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "bundleOut_0_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %42, %auto_out_d_bits_opcode, %44, %43, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %47, %71, %70, %78, %auto_in_a_bits_data, %repeater.io_deq_bits_corrupt, %40 : i1, i1, i3, i3, i2, i64, i1, i3, i3, i2, i6, i12, i8, i64, i1, i1
  }
  hw.module private @TLInterconnectCoupler_8(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i12, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_data : i64, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_opcode : i3, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i12, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter_2(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i12, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_opcode: %auto_fragmenter_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i12, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_data, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_opcode, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i12, i8, i64, i1, i1, i1, i1, i3, i3, i2, i64
  }
  hw.module private @TLMonitor_12(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i17, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %c1_i3 = hw.constant 1 : i3
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i6 = hw.constant -1 : i6
    %c0_i3 = hw.constant 0 : i3
    %c0_i12 = hw.constant 0 : i12
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i6 = hw.constant 0 : i6
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %7 = comb.shl bin %c63_i13, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %9 = comb.xor bin %8, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %10 = comb.extract %io_in_a_bits_address from 0 : (i17) -> i6
    %11 = comb.and bin %10, %9 : i6
    %12 = comb.icmp bin eq %11, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i17) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i17) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i17) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.extract %io_in_a_bits_address from 16 : (i17) -> i1
    %59 = comb.xor bin %reset, %true : i1
    %60 = comb.and bin %57, %59 : i1
    %61 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %62 = comb.and bin %3, %61, %58 : i1
    %63 = comb.or bin %62, %reset : i1
    %64 = comb.xor bin %63, %true : i1
    %65 = comb.and bin %57, %64 : i1
    %66 = comb.or bin %3, %4, %5, %reset : i1
    %67 = comb.xor bin %66, %true : i1
    %68 = comb.and bin %57, %67 : i1
    %69 = comb.or bin %14, %reset : i1
    %70 = comb.xor bin %69, %true : i1
    %71 = comb.and bin %57, %70 : i1
    %72 = comb.or bin %12, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %57, %73 : i1
    %75 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %57, %77 : i1
    %79 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %80 = comb.or bin %79, %reset : i1
    %81 = comb.xor bin %80, %true : i1
    %82 = comb.and bin %57, %81 : i1
    %83 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %84 = comb.or bin %83, %reset : i1
    %85 = comb.xor bin %84, %true : i1
    %86 = comb.and bin %57, %85 : i1
    %87 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %88 = comb.and bin %io_in_a_valid, %87 : i1
    %89 = comb.and bin %88, %59 : i1
    %90 = comb.and bin %3, %61, %58 : i1
    %91 = comb.or bin %90, %reset : i1
    %92 = comb.xor bin %91, %true : i1
    %93 = comb.and bin %88, %92 : i1
    %94 = comb.and bin %88, %67 : i1
    %95 = comb.and bin %88, %70 : i1
    %96 = comb.and bin %88, %73 : i1
    %97 = comb.and bin %88, %77 : i1
    %98 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %99 = comb.or bin %98, %reset : i1
    %100 = comb.xor bin %99, %true : i1
    %101 = comb.and bin %88, %100 : i1
    %102 = comb.and bin %88, %81 : i1
    %103 = comb.and bin %88, %85 : i1
    %104 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %105 = comb.and bin %io_in_a_valid, %104 : i1
    %106 = comb.or bin %3, %4, %5, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %105, %107 : i1
    %109 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %110 = comb.and bin %109, %58 : i1
    %111 = comb.or bin %110, %reset : i1
    %112 = comb.xor bin %111, %true : i1
    %113 = comb.and bin %105, %112 : i1
    %114 = comb.and bin %105, %67 : i1
    %115 = comb.and bin %105, %73 : i1
    %116 = comb.xor bin %98, %true : i1
    %117 = comb.or bin %116, %reset : i1
    %118 = comb.xor bin %117, %true : i1
    %119 = comb.and bin %105, %118 : i1
    %120 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %121 = comb.or bin %120, %reset : i1
    %122 = comb.xor bin %121, %true : i1
    %123 = comb.and bin %105, %122 : i1
    %124 = comb.and bin %105, %85 : i1
    %125 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %126 = comb.and bin %io_in_a_valid, %125 : i1
    %127 = comb.and bin %126, %59 : i1
    %128 = comb.and bin %126, %67 : i1
    %129 = comb.and bin %126, %73 : i1
    %130 = comb.and bin %126, %118 : i1
    %131 = comb.and bin %126, %122 : i1
    %132 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %133 = comb.and bin %io_in_a_valid, %132 : i1
    %134 = comb.and bin %133, %59 : i1
    %135 = comb.and bin %133, %67 : i1
    %136 = comb.and bin %133, %73 : i1
    %137 = comb.and bin %133, %118 : i1
    %138 = comb.xor bin %55, %c-1_i8 : i8
    %139 = comb.and bin %io_in_a_bits_mask, %138 : i8
    %140 = comb.icmp bin eq %139, %c0_i8 : i8
    %141 = comb.or bin %140, %reset : i1
    %142 = comb.xor bin %141, %true : i1
    %143 = comb.and bin %133, %142 : i1
    %144 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %145 = comb.and bin %io_in_a_valid, %144 : i1
    %146 = comb.and bin %145, %59 : i1
    %147 = comb.and bin %145, %67 : i1
    %148 = comb.and bin %145, %73 : i1
    %149 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %150 = comb.or bin %149, %reset : i1
    %151 = comb.xor bin %150, %true : i1
    %152 = comb.and bin %145, %151 : i1
    %153 = comb.and bin %145, %122 : i1
    %154 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %155 = comb.and bin %io_in_a_valid, %154 : i1
    %156 = comb.and bin %155, %59 : i1
    %157 = comb.and bin %155, %67 : i1
    %158 = comb.and bin %155, %73 : i1
    %159 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %160 = comb.xor bin %159, %true : i1
    %161 = comb.or bin %160, %reset : i1
    %162 = comb.xor bin %161, %true : i1
    %163 = comb.and bin %155, %162 : i1
    %164 = comb.and bin %155, %122 : i1
    %165 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %166 = comb.and bin %io_in_a_valid, %165 : i1
    %167 = comb.and bin %166, %59 : i1
    %168 = comb.and bin %166, %67 : i1
    %169 = comb.and bin %166, %73 : i1
    %170 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %171 = comb.or bin %170, %reset : i1
    %172 = comb.xor bin %171, %true : i1
    %173 = comb.and bin %166, %172 : i1
    %174 = comb.and bin %166, %122 : i1
    %175 = comb.and bin %166, %85 : i1
    %176 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %177 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %178 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %179 = comb.or bin %176, %177, %178, %reset : i1
    %180 = comb.xor bin %179, %true : i1
    %181 = comb.and bin %io_in_d_valid, %180 : i1
    %182 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %187 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %183 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %184 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %185 = comb.xor bin %184, %true {sv.namehint = "a_first"} : i1
    %186 = comb.mux bin %184, %183, %c0_i3 {sv.namehint = "_a_first_counter_T"} : i3
    %187 = comb.mux bin %182, %186, %a_first_counter : i3
    %opcode = seq.firreg %210 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %211 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %212 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %213 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %214 clock %clock {firrtl.random_init_start = 14 : ui64} : i17
    %188 = comb.and bin %io_in_a_valid, %184 : i1
    %189 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %190 = comb.or bin %189, %reset : i1
    %191 = comb.xor bin %190, %true : i1
    %192 = comb.and bin %188, %191 : i1
    %193 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %194 = comb.or bin %193, %reset : i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.and bin %188, %195 : i1
    %197 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %198 = comb.or bin %197, %reset : i1
    %199 = comb.xor bin %198, %true : i1
    %200 = comb.and bin %188, %199 : i1
    %201 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %202 = comb.or bin %201, %reset : i1
    %203 = comb.xor bin %202, %true : i1
    %204 = comb.and bin %188, %203 : i1
    %205 = comb.icmp bin eq %io_in_a_bits_address, %address : i17
    %206 = comb.or bin %205, %reset : i1
    %207 = comb.xor bin %206, %true : i1
    %208 = comb.and bin %188, %207 : i1
    %209 = comb.and bin %182, %185 : i1
    %210 = comb.mux bin %209, %io_in_a_bits_opcode, %opcode : i3
    %211 = comb.mux bin %209, %io_in_a_bits_param, %param : i3
    %212 = comb.mux bin %209, %io_in_a_bits_size, %size : i3
    %213 = comb.mux bin %209, %io_in_a_bits_source, %source : i2
    %214 = comb.mux bin %209, %io_in_a_bits_address, %address : i17
    %215 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %216 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %217 = comb.shl bin %c63_i13, %216 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %218 = comb.extract %217 from 3 : (i13) -> i3
    %219 = comb.xor %218, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %d_first_counter = seq.firreg %224 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 31 : ui64} : i3
    %220 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %221 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %222 = comb.xor bin %221, %true {sv.namehint = "d_first"} : i1
    %223 = comb.mux bin %221, %220, %219 {sv.namehint = "_d_first_counter_T"} : i3
    %224 = comb.mux bin %215, %223, %d_first_counter : i3
    %size_1 = seq.firreg %235 clock %clock {firrtl.random_init_start = 39 : ui64} : i3
    %source_1 = seq.firreg %236 clock %clock {firrtl.random_init_start = 42 : ui64} : i2
    %225 = comb.and bin %io_in_d_valid, %221 : i1
    %226 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %227 = comb.or bin %226, %reset : i1
    %228 = comb.xor bin %227, %true : i1
    %229 = comb.and bin %225, %228 : i1
    %230 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %231 = comb.or bin %230, %reset : i1
    %232 = comb.xor bin %231, %true : i1
    %233 = comb.and bin %225, %232 : i1
    %234 = comb.and bin %215, %222 : i1
    %235 = comb.mux bin %234, %io_in_d_bits_size, %size_1 : i3
    %236 = comb.mux bin %234, %io_in_d_bits_source, %source_1 : i2
    %inflight = seq.firreg %334 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 46 : ui64} : i3
    %inflight_opcodes = seq.firreg %337 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 49 : ui64} : i12
    %inflight_sizes = seq.firreg %340 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 61 : ui64} : i12
    %a_first_counter_1 = seq.firreg %240 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 73 : ui64} : i3
    %237 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %238 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %239 = comb.mux bin %238, %c0_i3, %237 {sv.namehint = "_a_first_counter_T_1"} : i3
    %240 = comb.mux bin %182, %239, %a_first_counter_1 : i3
    %241 = comb.shl bin %c63_i13, %216 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %242 = comb.extract %241 from 3 : (i13) -> i3
    %243 = comb.xor %242, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %d_first_counter_1 = seq.firreg %247 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 76 : ui64} : i3
    %244 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %245 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %246 = comb.mux bin %245, %243, %244 {sv.namehint = "_d_first_counter_T_1"} : i3
    %247 = comb.mux bin %215, %246, %d_first_counter_1 : i3
    %248 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %249 = comb.shru bin %inflight_opcodes, %248 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %250 = comb.extract %249 from 1 : (i12) -> i3
    %251 = comb.shru bin %inflight_sizes, %248 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %252 = comb.extract %251 from 1 : (i12) -> i3
    %253 = comb.and bin %182, %238 : i1
    %254 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %255 = comb.shl bin %c1_i4, %254 {sv.namehint = "_a_set_T"} : i4
    %256 = comb.extract %255 from 0 : (i4) -> i3
    %257 = comb.mux bin %253, %256, %c0_i3 {sv.namehint = "a_set"} : i3
    %258 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %259 = comb.mux bin %253, %258, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %260 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %261 = comb.mux bin %253, %260, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %262 = comb.concat %c0_i31, %259 : i31, i4
    %263 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %264 = comb.shl bin %262, %263 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %265 = comb.extract %264 from 0 : (i35) -> i12
    %266 = comb.mux bin %253, %265, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %267 = comb.concat %c0_i31, %261 : i31, i4
    %268 = comb.shl bin %267, %263 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %269 = comb.extract %268 from 0 : (i35) -> i12
    %270 = comb.mux bin %253, %269, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %271 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %272 = comb.shru bin %inflight, %271 : i3
    %273 = comb.extract %272 from 0 : (i3) -> i1
    %274 = comb.xor bin %273, %true : i1
    %275 = comb.or bin %274, %reset : i1
    %276 = comb.xor bin %275, %true : i1
    %277 = comb.and bin %253, %276 : i1
    %278 = comb.and bin %io_in_d_valid, %245 : i1
    %279 = comb.and bin %215, %245 : i1
    %280 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %281 = comb.shl bin %c1_i4, %280 {sv.namehint = "_d_clr_T"} : i4
    %282 = comb.extract %281 from 0 : (i4) -> i3
    %283 = comb.mux bin %279, %282, %c0_i3 {sv.namehint = "d_clr"} : i3
    %284 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %285 = comb.shl bin %c15_i47, %284 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %286 = comb.extract %285 from 0 : (i47) -> i12
    %287 = comb.mux bin %279, %286, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %288 = comb.shl bin %c15_i47, %284 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %289 = comb.extract %288 from 0 : (i47) -> i12
    %290 = comb.mux bin %279, %289, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %291 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %292 = comb.and bin %io_in_a_valid, %238, %291 {sv.namehint = "same_cycle_resp"} : i1
    %293 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %294 = comb.shru bin %inflight, %293 : i3
    %295 = comb.extract %294 from 0 : (i3) -> i1
    %296 = comb.or bin %295, %292, %reset : i1
    %297 = comb.xor bin %296, %true : i1
    %298 = comb.and bin %278, %297 : i1
    %299 = comb.and bin %278, %292 : i1
    %300 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %301 = comb.icmp bin eq %300, %c1_i3 : i3
    %302 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %303 = comb.icmp bin eq %302, %c1_i3 : i3
    %304 = comb.or bin %301, %303, %reset : i1
    %305 = comb.xor bin %304, %true : i1
    %306 = comb.and bin %299, %305 : i1
    %307 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %308 = comb.or bin %307, %reset : i1
    %309 = comb.xor bin %308, %true : i1
    %310 = comb.and bin %299, %309 : i1
    %311 = comb.xor bin %292, %true : i1
    %312 = comb.and bin %278, %311 : i1
    %313 = hw.array_get %1[%250] : !hw.array<8xi3>, i3
    %314 = comb.icmp bin eq %313, %c1_i3 : i3
    %315 = hw.array_get %0[%250] : !hw.array<8xi3>, i3
    %316 = comb.icmp bin eq %315, %c1_i3 : i3
    %317 = comb.or bin %314, %316, %reset : i1
    %318 = comb.xor bin %317, %true : i1
    %319 = comb.and bin %312, %318 : i1
    %320 = comb.icmp bin eq %io_in_d_bits_size, %252 : i3
    %321 = comb.or bin %320, %reset : i1
    %322 = comb.xor bin %321, %true : i1
    %323 = comb.and bin %312, %322 : i1
    %324 = comb.and bin %278, %238 : i1
    %325 = comb.and bin %324, %io_in_a_valid : i1
    %326 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %327 = comb.and bin %325, %326 : i1
    %328 = comb.xor bin %io_in_d_ready, %true : i1
    %329 = comb.or bin %328, %io_in_a_ready, %reset : i1
    %330 = comb.xor bin %329, %true : i1
    %331 = comb.and bin %327, %330 : i1
    %332 = comb.or bin %inflight, %257 {sv.namehint = "_inflight_T"} : i3
    %333 = comb.xor bin %283, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %334 = comb.and bin %332, %333 {sv.namehint = "_inflight_T_2"} : i3
    %335 = comb.or bin %inflight_opcodes, %266 {sv.namehint = "_inflight_opcodes_T"} : i12
    %336 = comb.xor bin %287, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %337 = comb.and bin %335, %336 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %338 = comb.or bin %inflight_sizes, %270 {sv.namehint = "_inflight_sizes_T"} : i12
    %339 = comb.xor bin %290, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %340 = comb.and bin %338, %339 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %348 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 79 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %341 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %342 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %343 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %344 = comb.or bin %341, %342, %343, %reset : i1
    %345 = comb.xor bin %344, %true : i1
    %346 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %347 = comb.or bin %182, %215 : i1
    %348 = comb.mux bin %347, %c0_i32, %346 : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %349 = comb.and bin %STOP_COND_, %false : i1
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        %350 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %350 {
          sv.fatal 1
        }
        %351 = comb.and bin %STOP_COND_, %65 : i1
        sv.if %351 {
          sv.fatal 1
        }
        %352 = comb.and bin %STOP_COND_, %68 : i1
        sv.if %352 {
          sv.fatal 1
        }
        %353 = comb.and bin %STOP_COND_, %71 : i1
        sv.if %353 {
          sv.fatal 1
        }
        %354 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %354 {
          sv.fatal 1
        }
        %355 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %355 {
          sv.fatal 1
        }
        %356 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %356 {
          sv.fatal 1
        }
        %357 = comb.and bin %STOP_COND_, %86 : i1
        sv.if %357 {
          sv.fatal 1
        }
        %358 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %358 {
          sv.fatal 1
        }
        %359 = comb.and bin %STOP_COND_, %93 : i1
        sv.if %359 {
          sv.fatal 1
        }
        %360 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %360 {
          sv.fatal 1
        }
        %361 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %361 {
          sv.fatal 1
        }
        %362 = comb.and bin %STOP_COND_, %96 : i1
        sv.if %362 {
          sv.fatal 1
        }
        %363 = comb.and bin %STOP_COND_, %97 : i1
        sv.if %363 {
          sv.fatal 1
        }
        %364 = comb.and bin %STOP_COND_, %101 : i1
        sv.if %364 {
          sv.fatal 1
        }
        %365 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %365 {
          sv.fatal 1
        }
        %366 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %366 {
          sv.fatal 1
        }
        %367 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %367 {
          sv.fatal 1
        }
        %368 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %368 {
          sv.fatal 1
        }
        %369 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %369 {
          sv.fatal 1
        }
        %370 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %370 {
          sv.fatal 1
        }
        %371 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %371 {
          sv.fatal 1
        }
        %372 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %372 {
          sv.fatal 1
        }
        %373 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %373 {
          sv.fatal 1
        }
        %374 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %374 {
          sv.fatal 1
        }
        %375 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %375 {
          sv.fatal 1
        }
        %376 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %376 {
          sv.fatal 1
        }
        %377 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %377 {
          sv.fatal 1
        }
        %378 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %378 {
          sv.fatal 1
        }
        %379 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %379 {
          sv.fatal 1
        }
        %380 = comb.and bin %STOP_COND_, %135 : i1
        sv.if %380 {
          sv.fatal 1
        }
        %381 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %381 {
          sv.fatal 1
        }
        %382 = comb.and bin %STOP_COND_, %137 : i1
        sv.if %382 {
          sv.fatal 1
        }
        %383 = comb.and bin %STOP_COND_, %143 : i1
        sv.if %383 {
          sv.fatal 1
        }
        %384 = comb.and bin %STOP_COND_, %146 : i1
        sv.if %384 {
          sv.fatal 1
        }
        %385 = comb.and bin %STOP_COND_, %147 : i1
        sv.if %385 {
          sv.fatal 1
        }
        %386 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %386 {
          sv.fatal 1
        }
        %387 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %387 {
          sv.fatal 1
        }
        %388 = comb.and bin %STOP_COND_, %153 : i1
        sv.if %388 {
          sv.fatal 1
        }
        %389 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %389 {
          sv.fatal 1
        }
        %390 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %390 {
          sv.fatal 1
        }
        %391 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %391 {
          sv.fatal 1
        }
        %392 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %392 {
          sv.fatal 1
        }
        %393 = comb.and bin %STOP_COND_, %164 : i1
        sv.if %393 {
          sv.fatal 1
        }
        %394 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %394 {
          sv.fatal 1
        }
        %395 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %395 {
          sv.fatal 1
        }
        %396 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %396 {
          sv.fatal 1
        }
        %397 = comb.and bin %STOP_COND_, %173 : i1
        sv.if %397 {
          sv.fatal 1
        }
        %398 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %398 {
          sv.fatal 1
        }
        %399 = comb.and bin %STOP_COND_, %175 : i1
        sv.if %399 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        %400 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %400 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        %401 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %401 {
          sv.fatal 1
        }
        %402 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %402 {
          sv.fatal 1
        }
        %403 = comb.and bin %STOP_COND_, %200 : i1
        sv.if %403 {
          sv.fatal 1
        }
        %404 = comb.and bin %STOP_COND_, %204 : i1
        sv.if %404 {
          sv.fatal 1
        }
        %405 = comb.and bin %STOP_COND_, %208 : i1
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        %406 = comb.and bin %STOP_COND_, %229 : i1
        sv.if %406 {
          sv.fatal 1
        }
        %407 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %407 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        %408 = comb.and bin %STOP_COND_, %277 : i1
        sv.if %408 {
          sv.fatal 1
        }
        %409 = comb.and bin %STOP_COND_, %298 : i1
        sv.if %409 {
          sv.fatal 1
        }
        %410 = comb.and bin %STOP_COND_, %306 : i1
        sv.if %410 {
          sv.fatal 1
        }
        %411 = comb.and bin %STOP_COND_, %310 : i1
        sv.if %411 {
          sv.fatal 1
        }
        %412 = comb.and bin %STOP_COND_, %319 : i1
        sv.if %412 {
          sv.fatal 1
        }
        %413 = comb.and bin %STOP_COND_, %323 : i1
        sv.if %413 {
          sv.fatal 1
        }
        %414 = comb.and bin %STOP_COND_, %331 : i1
        sv.if %414 {
          sv.fatal 1
        }
        %415 = comb.and bin %STOP_COND_, %345 : i1
        sv.if %415 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
        sv.if %349 {
          sv.fatal 1
        }
      }
    }
    hw.output
  }
  hw.module private @Repeater_3(in %clock : !seq.clock, in %reset : i1, in %io_repeat : i1, out io_full : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i3, in %io_enq_bits_source : i2, in %io_enq_bits_address : i17, in %io_enq_bits_mask : i8, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i3, out io_deq_bits_source : i2, out io_deq_bits_address : i17, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %full = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %saved_opcode = seq.firreg %18 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %saved_param = seq.firreg %17 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %saved_size = seq.firreg %16 clock %clock {firrtl.random_init_start = 7 : ui64} : i3
    %saved_source = seq.firreg %15 clock %clock {firrtl.random_init_start = 10 : ui64} : i2
    %saved_address = seq.firreg %14 clock %clock {firrtl.random_init_start = 12 : ui64} : i17
    %saved_mask = seq.firreg %13 clock %clock {firrtl.random_init_start = 29 : ui64} : i8
    %saved_corrupt = seq.firreg %12 clock %clock {firrtl.random_init_start = 101 : ui64} : i1
    %0 = comb.or bin %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %1 = comb.xor bin %full, %true {sv.namehint = "_io_enq_ready_T"} : i1
    %2 = comb.and bin %io_deq_ready, %1 {sv.namehint = "io_enq_ready"} : i1
    %3 = comb.mux bin %full, %saved_opcode, %io_enq_bits_opcode {sv.namehint = "io_deq_bits_opcode"} : i3
    %4 = comb.mux bin %full, %saved_param, %io_enq_bits_param {sv.namehint = "io_deq_bits_param"} : i3
    %5 = comb.mux bin %full, %saved_size, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %6 = comb.mux bin %full, %saved_source, %io_enq_bits_source {sv.namehint = "io_deq_bits_source"} : i2
    %7 = comb.mux bin %full, %saved_address, %io_enq_bits_address {sv.namehint = "io_deq_bits_address"} : i17
    %8 = comb.mux bin %full, %saved_mask, %io_enq_bits_mask {sv.namehint = "io_deq_bits_mask"} : i8
    %9 = comb.mux bin %full, %saved_corrupt, %io_enq_bits_corrupt {sv.namehint = "io_deq_bits_corrupt"} : i1
    %10 = comb.and bin %2, %io_enq_valid, %io_repeat : i1
    %11 = comb.or %10, %full : i1
    %12 = comb.mux bin %10, %io_enq_bits_corrupt, %saved_corrupt : i1
    %13 = comb.mux bin %10, %io_enq_bits_mask, %saved_mask : i8
    %14 = comb.mux bin %10, %io_enq_bits_address, %saved_address : i17
    %15 = comb.mux bin %10, %io_enq_bits_source, %saved_source : i2
    %16 = comb.mux bin %10, %io_enq_bits_size, %saved_size : i3
    %17 = comb.mux bin %10, %io_enq_bits_param, %saved_param : i3
    %18 = comb.mux bin %10, %io_enq_bits_opcode, %saved_opcode : i3
    %19 = comb.xor bin %io_repeat, %true : i1
    %20 = comb.and bin %io_deq_ready, %0, %19 : i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.and %21, %11 : i1
    hw.output %full, %2, %0, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i1, i3, i3, i3, i2, i17, i8, i1
  }
  hw.module private @TLFragmenter_3(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i17, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_data : i64, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i6, out auto_out_a_bits_address : i17, out auto_out_a_bits_mask : i8, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i6, in %auto_out_d_bits_data : i64) {
    %c-1_i2 = hw.constant -1 : i2
    %c63_i13 = hw.constant 63 : i13
    %c7_i6 = hw.constant 7 : i6
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i3 = hw.constant -1 : i3
    %true = hw.constant true
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_12(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %repeater.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i17, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_size: %34: i3, io_in_d_bits_source: %33: i2) -> ()
    %acknum = seq.firreg %28 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %dOrig = seq.firreg %30 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %dToggle = seq.firreg %32 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %1 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "dFragnum"} : (i6) -> i3
    %2 = comb.icmp bin eq %acknum, %c0_i3 {sv.namehint = "dFirst"} : i3
    %3 = comb.concat %c0_i4, %auto_out_d_bits_size : i4, i2
    %4 = comb.shl bin %c7_i6, %3 {sv.namehint = "_dsizeOH1_T_1"} : i6
    %5 = comb.extract %4 from 0 {sv.namehint = "_dsizeOH1_T_2"} : (i6) -> i3
    %6 = comb.xor bin %5, %c-1_i3 {sv.namehint = "dsizeOH1"} : i3
    %7 = comb.xor %1, %c-1_i3 : i3
    %8 = comb.extract %7 from 1 : (i3) -> i2
    %9 = comb.concat %true, %8 : i1, i2
    %10 = comb.and bin %1, %9 {sv.namehint = "dFirst_size_hi"} : i3
    %11 = comb.extract %7 from 0 : (i3) -> i1
    %12 = comb.extract %4 from 1 : (i6) -> i2
    %13 = comb.concat %11, %12 : i1, i2
    %14 = comb.and %6, %13 {sv.namehint = "dFirst_size_lo_1"} : i3
    %15 = comb.icmp bin ne %10, %c0_i3 {sv.namehint = "dFirst_size_hi_1"} : i3
    %16 = comb.extract %10 from 1 : (i3) -> i2
    %17 = comb.concat %false, %16 : i1, i2
    %18 = comb.or %17, %14 {sv.namehint = "_dFirst_size_T_6"} : i3
    %19 = comb.extract %18 from 1 {sv.namehint = "dFirst_size_hi_2"} : (i3) -> i2
    %20 = comb.icmp bin ne %19, %c0_i2 {sv.namehint = "dFirst_size_hi_3"} : i2
    %21 = comb.extract %18 from 2 : (i3) -> i1
    %22 = comb.extract %18 from 0 : (i3) -> i1
    %23 = comb.or %21, %22 {sv.namehint = "_dFirst_size_T_7"} : i1
    %24 = comb.concat %15, %20, %23 {sv.namehint = "dFirst_size"} : i1, i1, i1
    %25 = comb.and bin %auto_in_d_ready, %auto_out_d_valid : i1
    %26 = comb.add %acknum, %c-1_i3 {sv.namehint = "_acknum_T"} : i3
    %27 = comb.mux bin %2, %1, %26 {sv.namehint = "_acknum_T_2"} : i3
    %28 = comb.mux bin %25, %27, %acknum : i3
    %29 = comb.and bin %25, %2 : i1
    %30 = comb.mux bin %29, %24, %dOrig : i3
    %31 = comb.extract %auto_out_d_bits_source from 3 {sv.namehint = "_dToggle_T"} : (i6) -> i1
    %32 = comb.mux bin %29, %31, %dToggle : i1
    %33 = comb.extract %auto_out_d_bits_source from 4 {sv.namehint = "bundleIn_0_d_bits_source"} : (i6) -> i2
    %34 = comb.mux bin %2, %24, %dOrig {sv.namehint = "bundleIn_0_d_bits_size"} : i3
    %repeater.io_full, %repeater.io_enq_ready, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %repeater.io_deq_bits_size, %repeater.io_deq_bits_source, %repeater.io_deq_bits_address, %repeater.io_deq_bits_mask, %repeater.io_deq_bits_corrupt = hw.instance "repeater" @Repeater_3(clock: %clock: !seq.clock, reset: %reset: i1, io_repeat: %50: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i3, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i17, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_deq_ready: %auto_out_a_ready: i1) -> (io_full: i1, io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i3, io_deq_bits_source: i2, io_deq_bits_address: i17, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "repeater.io_full"}
    %35 = comb.extract %repeater.io_deq_bits_size from 2 {sv.namehint = "_aFrag_T"} : (i3) -> i1
    %36 = comb.extract %repeater.io_deq_bits_size from 0 : (i3) -> i2
    %37 = comb.mux %35, %c-1_i2, %36 {sv.namehint = "aFrag"} : i2
    %38 = comb.concat %c0_i10, %repeater.io_deq_bits_size : i10, i3
    %39 = comb.shl bin %c63_i13, %38 {sv.namehint = "_aOrigOH1_T_1"} : i13
    %40 = comb.extract %39 from 3 : (i13) -> i3
    %41 = comb.xor %40, %c-1_i3 {sv.namehint = "aOrigOH1"} : i3
    %gennum = seq.firreg %49 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 7 : ui64} : i3
    %42 = comb.icmp bin eq %gennum, %c0_i3 {sv.namehint = "aFirst"} : i3
    %43 = comb.add %gennum, %c-1_i3 {sv.namehint = "_old_gennum1_T_1"} : i3
    %44 = comb.mux bin %42, %41, %43 {sv.namehint = "new_gennum"} : i3
    %aToggle_r = seq.firreg %45 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %45 = comb.mux bin %42, %dToggle, %aToggle_r : i1
    %46 = comb.mux bin %42, %dToggle, %aToggle_r {sv.namehint = "_aToggle_T"} : i1
    %47 = comb.xor bin %46, %true {sv.namehint = "bundleOut_0_a_bits_source_hi_lo"} : i1
    %48 = comb.and bin %auto_out_a_ready, %repeater.io_deq_valid : i1
    %49 = comb.mux bin %48, %44, %gennum : i3
    %50 = comb.icmp bin ne %44, %c0_i3 {sv.namehint = "repeater.io_repeat"} : i3
    %51 = comb.extract %39 from 3 : (i13) -> i3
    %52 = comb.or %44, %51 {sv.namehint = "_bundleOut_0_a_bits_address_T_2"} : i3
    %53 = comb.xor %52, %c-1_i3 : i3
    %54 = comb.concat %53, %c0_i3 {sv.namehint = "_bundleOut_0_a_bits_address_T_5"} : i3, i3
    %55 = comb.extract %repeater.io_deq_bits_address from 6 : (i17) -> i11
    %56 = comb.extract %repeater.io_deq_bits_address from 0 : (i17) -> i6
    %57 = comb.or bin %56, %54 : i6
    %58 = comb.concat %55, %57 {sv.namehint = "bundleOut_0_a_bits_address"} : i11, i6
    %59 = comb.concat %repeater.io_deq_bits_source, %47, %44 {sv.namehint = "bundleOut_0_a_bits_source"} : i2, i1, i3
    %60 = comb.xor bin %repeater.io_full, %true : i1
    %61 = comb.icmp bin eq %repeater.io_deq_bits_mask, %c-1_i8 : i8
    %62 = comb.or bin %60, %61, %reset : i1
    %63 = comb.xor bin %62, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %65 = comb.and bin %STOP_COND_, %false : i1
        sv.if %65 {
          sv.fatal 1
        }
        sv.if %65 {
          sv.fatal 1
        }
        %66 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %66 {
          sv.fatal 1
        }
      }
    }
    %64 = comb.mux bin %repeater.io_full, %c-1_i8, %auto_in_a_bits_mask {sv.namehint = "bundleOut_0_a_bits_mask"} : i8
    hw.output %repeater.io_enq_ready, %auto_out_d_valid, %34, %33, %auto_out_d_bits_data, %repeater.io_deq_valid, %repeater.io_deq_bits_opcode, %repeater.io_deq_bits_param, %37, %59, %58, %64, %repeater.io_deq_bits_corrupt, %auto_in_d_ready : i1, i1, i3, i2, i64, i1, i3, i3, i2, i6, i17, i8, i1, i1
  }
  hw.module private @TLInterconnectCoupler_10(in %clock : !seq.clock, in %reset : i1, in %auto_fragmenter_out_a_ready : i1, out auto_fragmenter_out_a_valid : i1, out auto_fragmenter_out_a_bits_opcode : i3, out auto_fragmenter_out_a_bits_param : i3, out auto_fragmenter_out_a_bits_size : i2, out auto_fragmenter_out_a_bits_source : i6, out auto_fragmenter_out_a_bits_address : i17, out auto_fragmenter_out_a_bits_mask : i8, out auto_fragmenter_out_a_bits_corrupt : i1, out auto_fragmenter_out_d_ready : i1, in %auto_fragmenter_out_d_valid : i1, in %auto_fragmenter_out_d_bits_size : i2, in %auto_fragmenter_out_d_bits_source : i6, in %auto_fragmenter_out_d_bits_data : i64, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i2, in %auto_tl_in_a_bits_address : i17, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i2, out auto_tl_in_d_bits_data : i64) {
    %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data, %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready = hw.instance "fragmenter" @TLFragmenter_3(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i2, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i17, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %auto_fragmenter_out_a_ready: i1, auto_out_d_valid: %auto_fragmenter_out_d_valid: i1, auto_out_d_bits_size: %auto_fragmenter_out_d_bits_size: i2, auto_out_d_bits_source: %auto_fragmenter_out_d_bits_source: i6, auto_out_d_bits_data: %auto_fragmenter_out_d_bits_data: i64) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_data: i64, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i6, auto_out_a_bits_address: i17, auto_out_a_bits_mask: i8, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_valid"}
    hw.output %fragmenter.auto_out_a_valid, %fragmenter.auto_out_a_bits_opcode, %fragmenter.auto_out_a_bits_param, %fragmenter.auto_out_a_bits_size, %fragmenter.auto_out_a_bits_source, %fragmenter.auto_out_a_bits_address, %fragmenter.auto_out_a_bits_mask, %fragmenter.auto_out_a_bits_corrupt, %fragmenter.auto_out_d_ready, %fragmenter.auto_in_a_ready, %fragmenter.auto_in_d_valid, %fragmenter.auto_in_d_bits_size, %fragmenter.auto_in_d_bits_source, %fragmenter.auto_in_d_bits_data : i1, i3, i3, i2, i6, i17, i8, i1, i1, i1, i1, i3, i2, i64
  }
  hw.module private @PeripheryBus_1(in %auto_coupler_to_bootrom_fragmenter_out_a_ready : i1, out auto_coupler_to_bootrom_fragmenter_out_a_valid : i1, out auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_bootrom_fragmenter_out_a_bits_param : i3, out auto_coupler_to_bootrom_fragmenter_out_a_bits_size : i2, out auto_coupler_to_bootrom_fragmenter_out_a_bits_source : i6, out auto_coupler_to_bootrom_fragmenter_out_a_bits_address : i17, out auto_coupler_to_bootrom_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_bootrom_fragmenter_out_d_ready : i1, in %auto_coupler_to_bootrom_fragmenter_out_d_valid : i1, in %auto_coupler_to_bootrom_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_bootrom_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_bootrom_fragmenter_out_d_bits_data : i64, in %auto_coupler_to_debug_fragmenter_out_a_ready : i1, out auto_coupler_to_debug_fragmenter_out_a_valid : i1, out auto_coupler_to_debug_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_debug_fragmenter_out_a_bits_param : i3, out auto_coupler_to_debug_fragmenter_out_a_bits_size : i2, out auto_coupler_to_debug_fragmenter_out_a_bits_source : i6, out auto_coupler_to_debug_fragmenter_out_a_bits_address : i12, out auto_coupler_to_debug_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_debug_fragmenter_out_a_bits_data : i64, out auto_coupler_to_debug_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_debug_fragmenter_out_d_ready : i1, in %auto_coupler_to_debug_fragmenter_out_d_valid : i1, in %auto_coupler_to_debug_fragmenter_out_d_bits_opcode : i3, in %auto_coupler_to_debug_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_debug_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_debug_fragmenter_out_d_bits_data : i64, in %auto_coupler_to_clint_fragmenter_out_a_ready : i1, out auto_coupler_to_clint_fragmenter_out_a_valid : i1, out auto_coupler_to_clint_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_clint_fragmenter_out_a_bits_param : i3, out auto_coupler_to_clint_fragmenter_out_a_bits_size : i2, out auto_coupler_to_clint_fragmenter_out_a_bits_source : i6, out auto_coupler_to_clint_fragmenter_out_a_bits_address : i26, out auto_coupler_to_clint_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_clint_fragmenter_out_a_bits_data : i64, out auto_coupler_to_clint_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_clint_fragmenter_out_d_ready : i1, in %auto_coupler_to_clint_fragmenter_out_d_valid : i1, in %auto_coupler_to_clint_fragmenter_out_d_bits_opcode : i3, in %auto_coupler_to_clint_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_clint_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_clint_fragmenter_out_d_bits_data : i64, in %auto_coupler_to_plic_fragmenter_out_a_ready : i1, out auto_coupler_to_plic_fragmenter_out_a_valid : i1, out auto_coupler_to_plic_fragmenter_out_a_bits_opcode : i3, out auto_coupler_to_plic_fragmenter_out_a_bits_param : i3, out auto_coupler_to_plic_fragmenter_out_a_bits_size : i2, out auto_coupler_to_plic_fragmenter_out_a_bits_source : i6, out auto_coupler_to_plic_fragmenter_out_a_bits_address : i28, out auto_coupler_to_plic_fragmenter_out_a_bits_mask : i8, out auto_coupler_to_plic_fragmenter_out_a_bits_data : i64, out auto_coupler_to_plic_fragmenter_out_a_bits_corrupt : i1, out auto_coupler_to_plic_fragmenter_out_d_ready : i1, in %auto_coupler_to_plic_fragmenter_out_d_valid : i1, in %auto_coupler_to_plic_fragmenter_out_d_bits_opcode : i3, in %auto_coupler_to_plic_fragmenter_out_d_bits_size : i2, in %auto_coupler_to_plic_fragmenter_out_d_bits_source : i6, in %auto_coupler_to_plic_fragmenter_out_d_bits_data : i64, out auto_fixedClockNode_out_2_clock : !seq.clock, out auto_fixedClockNode_out_2_reset : i1, out auto_fixedClockNode_out_0_clock : !seq.clock, out auto_fixedClockNode_out_0_reset : i1, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock : !seq.clock, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset : i1, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock : !seq.clock, in %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset : i1, out auto_bus_xing_in_a_ready : i1, in %auto_bus_xing_in_a_valid : i1, in %auto_bus_xing_in_a_bits_opcode : i3, in %auto_bus_xing_in_a_bits_param : i3, in %auto_bus_xing_in_a_bits_size : i4, in %auto_bus_xing_in_a_bits_source : i2, in %auto_bus_xing_in_a_bits_address : i28, in %auto_bus_xing_in_a_bits_mask : i8, in %auto_bus_xing_in_a_bits_data : i64, in %auto_bus_xing_in_a_bits_corrupt : i1, in %auto_bus_xing_in_d_ready : i1, out auto_bus_xing_in_d_valid : i1, out auto_bus_xing_in_d_bits_opcode : i3, out auto_bus_xing_in_d_bits_param : i2, out auto_bus_xing_in_d_bits_size : i4, out auto_bus_xing_in_d_bits_source : i2, out auto_bus_xing_in_d_bits_sink : i1, out auto_bus_xing_in_d_bits_denied : i1, out auto_bus_xing_in_d_bits_data : i64, out auto_bus_xing_in_d_bits_corrupt : i1, out clock : !seq.clock, out reset : i1) {
    %subsystem_cbus_clock_groups.auto_out_1_member_subsystem_pbus_0_clock, %subsystem_cbus_clock_groups.auto_out_1_member_subsystem_pbus_0_reset, %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_clock, %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_reset = hw.instance "subsystem_cbus_clock_groups" @ClockGroupAggregator_3(auto_in_member_subsystem_cbus_1_clock: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock: !seq.clock, auto_in_member_subsystem_cbus_1_reset: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset: i1, auto_in_member_subsystem_cbus_0_clock: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock: !seq.clock, auto_in_member_subsystem_cbus_0_reset: %auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset: i1) -> (auto_out_1_member_subsystem_pbus_0_clock: !seq.clock, auto_out_1_member_subsystem_pbus_0_reset: i1, auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_out_0_member_subsystem_cbus_0_reset: i1) {sv.namehint = "clockGroup.auto_in_member_subsystem_cbus_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_cbus_clock_groups.auto_out_0_member_subsystem_cbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_3_clock, %fixedClockNode.auto_out_3_reset, %fixedClockNode.auto_out_1_clock, %fixedClockNode.auto_out_1_reset, %fixedClockNode.auto_out_0_clock, %fixedClockNode.auto_out_0_reset = hw.instance "fixedClockNode" @FixedClockBroadcast_3(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_3_clock: !seq.clock, auto_out_3_reset: i1, auto_out_1_clock: !seq.clock, auto_out_1_reset: i1, auto_out_0_clock: !seq.clock, auto_out_0_reset: i1) {sv.namehint = "bundleIn_0_reset"}
    %fixer.auto_in_a_ready, %fixer.auto_in_d_valid, %fixer.auto_in_d_bits_opcode, %fixer.auto_in_d_bits_param, %fixer.auto_in_d_bits_size, %fixer.auto_in_d_bits_source, %fixer.auto_in_d_bits_sink, %fixer.auto_in_d_bits_denied, %fixer.auto_in_d_bits_data, %fixer.auto_in_d_bits_corrupt, %fixer.auto_out_a_valid, %fixer.auto_out_a_bits_opcode, %fixer.auto_out_a_bits_param, %fixer.auto_out_a_bits_size, %fixer.auto_out_a_bits_source, %fixer.auto_out_a_bits_address, %fixer.auto_out_a_bits_mask, %fixer.auto_out_a_bits_data, %fixer.auto_out_a_bits_corrupt, %fixer.auto_out_d_ready = hw.instance "fixer" @TLFIFOFixer_2(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %buffer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %buffer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %buffer.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %buffer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %buffer.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %buffer.auto_out_d_ready: i1, auto_out_a_ready: %out_xbar.auto_in_a_ready: i1, auto_out_d_valid: %out_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %out_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %out_xbar.auto_in_d_bits_param: i2, auto_out_d_bits_size: %out_xbar.auto_in_d_bits_size: i4, auto_out_d_bits_source: %out_xbar.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %out_xbar.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %out_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %out_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %out_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "fixer.auto_in_d_valid"}
    %in_xbar.auto_in_a_ready, %in_xbar.auto_in_d_valid, %in_xbar.auto_in_d_bits_opcode, %in_xbar.auto_in_d_bits_param, %in_xbar.auto_in_d_bits_size, %in_xbar.auto_in_d_bits_source, %in_xbar.auto_in_d_bits_sink, %in_xbar.auto_in_d_bits_denied, %in_xbar.auto_in_d_bits_data, %in_xbar.auto_in_d_bits_corrupt, %in_xbar.auto_out_a_valid, %in_xbar.auto_out_a_bits_opcode, %in_xbar.auto_out_a_bits_param, %in_xbar.auto_out_a_bits_size, %in_xbar.auto_out_a_bits_source, %in_xbar.auto_out_a_bits_address, %in_xbar.auto_out_a_bits_mask, %in_xbar.auto_out_a_bits_data, %in_xbar.auto_out_a_bits_corrupt, %in_xbar.auto_out_d_ready = hw.instance "in_xbar" @TLXbar_4(auto_in_a_valid: %buffer_1.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer_1.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer_1.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer_1.auto_out_a_bits_size: i4, auto_in_a_bits_source: %buffer_1.auto_out_a_bits_source: i2, auto_in_a_bits_address: %buffer_1.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %buffer_1.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer_1.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %buffer_1.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %buffer_1.auto_out_d_ready: i1, auto_out_a_ready: %atomics.auto_in_a_ready: i1, auto_out_d_valid: %atomics.auto_in_d_valid: i1, auto_out_d_bits_opcode: %atomics.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %atomics.auto_in_d_bits_param: i2, auto_out_d_bits_size: %atomics.auto_in_d_bits_size: i4, auto_out_d_bits_source: %atomics.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %atomics.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %atomics.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %atomics.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %atomics.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "atomics.auto_in_d_ready"}
    %out_xbar.auto_in_a_ready, %out_xbar.auto_in_d_valid, %out_xbar.auto_in_d_bits_opcode, %out_xbar.auto_in_d_bits_param, %out_xbar.auto_in_d_bits_size, %out_xbar.auto_in_d_bits_source, %out_xbar.auto_in_d_bits_sink, %out_xbar.auto_in_d_bits_denied, %out_xbar.auto_in_d_bits_data, %out_xbar.auto_in_d_bits_corrupt, %out_xbar.auto_out_4_a_valid, %out_xbar.auto_out_4_a_bits_opcode, %out_xbar.auto_out_4_a_bits_param, %out_xbar.auto_out_4_a_bits_size, %out_xbar.auto_out_4_a_bits_source, %out_xbar.auto_out_4_a_bits_address, %out_xbar.auto_out_4_a_bits_mask, %out_xbar.auto_out_4_a_bits_corrupt, %out_xbar.auto_out_4_d_ready, %out_xbar.auto_out_3_a_valid, %out_xbar.auto_out_3_a_bits_opcode, %out_xbar.auto_out_3_a_bits_param, %out_xbar.auto_out_3_a_bits_size, %out_xbar.auto_out_3_a_bits_source, %out_xbar.auto_out_3_a_bits_address, %out_xbar.auto_out_3_a_bits_mask, %out_xbar.auto_out_3_a_bits_data, %out_xbar.auto_out_3_a_bits_corrupt, %out_xbar.auto_out_3_d_ready, %out_xbar.auto_out_2_a_valid, %out_xbar.auto_out_2_a_bits_opcode, %out_xbar.auto_out_2_a_bits_param, %out_xbar.auto_out_2_a_bits_size, %out_xbar.auto_out_2_a_bits_source, %out_xbar.auto_out_2_a_bits_address, %out_xbar.auto_out_2_a_bits_mask, %out_xbar.auto_out_2_a_bits_data, %out_xbar.auto_out_2_a_bits_corrupt, %out_xbar.auto_out_2_d_ready, %out_xbar.auto_out_1_a_valid, %out_xbar.auto_out_1_a_bits_opcode, %out_xbar.auto_out_1_a_bits_param, %out_xbar.auto_out_1_a_bits_size, %out_xbar.auto_out_1_a_bits_source, %out_xbar.auto_out_1_a_bits_address, %out_xbar.auto_out_1_a_bits_mask, %out_xbar.auto_out_1_a_bits_data, %out_xbar.auto_out_1_a_bits_corrupt, %out_xbar.auto_out_1_d_ready, %out_xbar.auto_out_0_a_valid, %out_xbar.auto_out_0_a_bits_opcode, %out_xbar.auto_out_0_a_bits_param, %out_xbar.auto_out_0_a_bits_size, %out_xbar.auto_out_0_a_bits_source, %out_xbar.auto_out_0_a_bits_address, %out_xbar.auto_out_0_a_bits_mask, %out_xbar.auto_out_0_a_bits_data, %out_xbar.auto_out_0_a_bits_corrupt, %out_xbar.auto_out_0_d_ready = hw.instance "out_xbar" @TLXbar_5(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %fixer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %fixer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %fixer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %fixer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %fixer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %fixer.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %fixer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %fixer.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %fixer.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %fixer.auto_out_d_ready: i1, auto_out_4_a_ready: %coupler_to_bootrom.auto_tl_in_a_ready: i1, auto_out_4_d_valid: %coupler_to_bootrom.auto_tl_in_d_valid: i1, auto_out_4_d_bits_size: %coupler_to_bootrom.auto_tl_in_d_bits_size: i3, auto_out_4_d_bits_source: %coupler_to_bootrom.auto_tl_in_d_bits_source: i2, auto_out_4_d_bits_data: %coupler_to_bootrom.auto_tl_in_d_bits_data: i64, auto_out_3_a_ready: %coupler_to_debug.auto_tl_in_a_ready: i1, auto_out_3_d_valid: %coupler_to_debug.auto_tl_in_d_valid: i1, auto_out_3_d_bits_opcode: %coupler_to_debug.auto_tl_in_d_bits_opcode: i3, auto_out_3_d_bits_size: %coupler_to_debug.auto_tl_in_d_bits_size: i3, auto_out_3_d_bits_source: %coupler_to_debug.auto_tl_in_d_bits_source: i2, auto_out_3_d_bits_data: %coupler_to_debug.auto_tl_in_d_bits_data: i64, auto_out_2_a_ready: %coupler_to_clint.auto_tl_in_a_ready: i1, auto_out_2_d_valid: %coupler_to_clint.auto_tl_in_d_valid: i1, auto_out_2_d_bits_opcode: %coupler_to_clint.auto_tl_in_d_bits_opcode: i3, auto_out_2_d_bits_size: %coupler_to_clint.auto_tl_in_d_bits_size: i3, auto_out_2_d_bits_source: %coupler_to_clint.auto_tl_in_d_bits_source: i2, auto_out_2_d_bits_data: %coupler_to_clint.auto_tl_in_d_bits_data: i64, auto_out_1_a_ready: %coupler_to_plic.auto_tl_in_a_ready: i1, auto_out_1_d_valid: %coupler_to_plic.auto_tl_in_d_valid: i1, auto_out_1_d_bits_opcode: %coupler_to_plic.auto_tl_in_d_bits_opcode: i3, auto_out_1_d_bits_size: %coupler_to_plic.auto_tl_in_d_bits_size: i3, auto_out_1_d_bits_source: %coupler_to_plic.auto_tl_in_d_bits_source: i2, auto_out_1_d_bits_data: %coupler_to_plic.auto_tl_in_d_bits_data: i64, auto_out_0_a_ready: %wrapped_error_device.auto_buffer_in_a_ready: i1, auto_out_0_d_valid: %wrapped_error_device.auto_buffer_in_d_valid: i1, auto_out_0_d_bits_opcode: %wrapped_error_device.auto_buffer_in_d_bits_opcode: i3, auto_out_0_d_bits_param: %wrapped_error_device.auto_buffer_in_d_bits_param: i2, auto_out_0_d_bits_size: %wrapped_error_device.auto_buffer_in_d_bits_size: i4, auto_out_0_d_bits_source: %wrapped_error_device.auto_buffer_in_d_bits_source: i2, auto_out_0_d_bits_sink: %wrapped_error_device.auto_buffer_in_d_bits_sink: i1, auto_out_0_d_bits_denied: %wrapped_error_device.auto_buffer_in_d_bits_denied: i1, auto_out_0_d_bits_data: %wrapped_error_device.auto_buffer_in_d_bits_data: i64, auto_out_0_d_bits_corrupt: %wrapped_error_device.auto_buffer_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_4_a_valid: i1, auto_out_4_a_bits_opcode: i3, auto_out_4_a_bits_param: i3, auto_out_4_a_bits_size: i3, auto_out_4_a_bits_source: i2, auto_out_4_a_bits_address: i17, auto_out_4_a_bits_mask: i8, auto_out_4_a_bits_corrupt: i1, auto_out_4_d_ready: i1, auto_out_3_a_valid: i1, auto_out_3_a_bits_opcode: i3, auto_out_3_a_bits_param: i3, auto_out_3_a_bits_size: i3, auto_out_3_a_bits_source: i2, auto_out_3_a_bits_address: i12, auto_out_3_a_bits_mask: i8, auto_out_3_a_bits_data: i64, auto_out_3_a_bits_corrupt: i1, auto_out_3_d_ready: i1, auto_out_2_a_valid: i1, auto_out_2_a_bits_opcode: i3, auto_out_2_a_bits_param: i3, auto_out_2_a_bits_size: i3, auto_out_2_a_bits_source: i2, auto_out_2_a_bits_address: i26, auto_out_2_a_bits_mask: i8, auto_out_2_a_bits_data: i64, auto_out_2_a_bits_corrupt: i1, auto_out_2_d_ready: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_param: i3, auto_out_1_a_bits_size: i3, auto_out_1_a_bits_source: i2, auto_out_1_a_bits_address: i28, auto_out_1_a_bits_mask: i8, auto_out_1_a_bits_data: i64, auto_out_1_a_bits_corrupt: i1, auto_out_1_d_ready: i1, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_param: i3, auto_out_0_a_bits_size: i4, auto_out_0_a_bits_source: i2, auto_out_0_a_bits_address: i14, auto_out_0_a_bits_mask: i8, auto_out_0_a_bits_data: i64, auto_out_0_a_bits_corrupt: i1, auto_out_0_d_ready: i1) {sv.namehint = "out_xbar.auto_in_d_valid"}
    %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_a_bits_corrupt, %buffer.auto_out_d_ready = hw.instance "buffer" @TLBuffer_3(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %atomics.auto_out_a_valid: i1, auto_in_a_bits_opcode: %atomics.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %atomics.auto_out_a_bits_param: i3, auto_in_a_bits_size: %atomics.auto_out_a_bits_size: i4, auto_in_a_bits_source: %atomics.auto_out_a_bits_source: i2, auto_in_a_bits_address: %atomics.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %atomics.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %atomics.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %atomics.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %atomics.auto_out_d_ready: i1, auto_out_a_ready: %fixer.auto_in_a_ready: i1, auto_out_d_valid: %fixer.auto_in_d_valid: i1, auto_out_d_bits_opcode: %fixer.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %fixer.auto_in_d_bits_param: i2, auto_out_d_bits_size: %fixer.auto_in_d_bits_size: i4, auto_out_d_bits_source: %fixer.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %fixer.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %fixer.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %fixer.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %fixer.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "buffer.auto_in_d_valid"}
    %atomics.auto_in_a_ready, %atomics.auto_in_d_valid, %atomics.auto_in_d_bits_opcode, %atomics.auto_in_d_bits_param, %atomics.auto_in_d_bits_size, %atomics.auto_in_d_bits_source, %atomics.auto_in_d_bits_sink, %atomics.auto_in_d_bits_denied, %atomics.auto_in_d_bits_data, %atomics.auto_in_d_bits_corrupt, %atomics.auto_out_a_valid, %atomics.auto_out_a_bits_opcode, %atomics.auto_out_a_bits_param, %atomics.auto_out_a_bits_size, %atomics.auto_out_a_bits_source, %atomics.auto_out_a_bits_address, %atomics.auto_out_a_bits_mask, %atomics.auto_out_a_bits_data, %atomics.auto_out_a_bits_corrupt, %atomics.auto_out_d_ready = hw.instance "atomics" @TLAtomicAutomata_1(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_in_a_valid: %in_xbar.auto_out_a_valid: i1, auto_in_a_bits_opcode: %in_xbar.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %in_xbar.auto_out_a_bits_param: i3, auto_in_a_bits_size: %in_xbar.auto_out_a_bits_size: i4, auto_in_a_bits_source: %in_xbar.auto_out_a_bits_source: i2, auto_in_a_bits_address: %in_xbar.auto_out_a_bits_address: i28, auto_in_a_bits_mask: %in_xbar.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %in_xbar.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %in_xbar.auto_out_a_bits_corrupt: i1, auto_in_d_ready: %in_xbar.auto_out_d_ready: i1, auto_out_a_ready: %buffer.auto_in_a_ready: i1, auto_out_d_valid: %buffer.auto_in_d_valid: i1, auto_out_d_bits_opcode: %buffer.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %buffer.auto_in_d_bits_param: i2, auto_out_d_bits_size: %buffer.auto_in_d_bits_size: i4, auto_out_d_bits_source: %buffer.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %buffer.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %buffer.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %buffer.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %buffer.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "atomics.auto_in_d_valid"}
    %wrapped_error_device.auto_buffer_in_a_ready, %wrapped_error_device.auto_buffer_in_d_valid, %wrapped_error_device.auto_buffer_in_d_bits_opcode, %wrapped_error_device.auto_buffer_in_d_bits_param, %wrapped_error_device.auto_buffer_in_d_bits_size, %wrapped_error_device.auto_buffer_in_d_bits_source, %wrapped_error_device.auto_buffer_in_d_bits_sink, %wrapped_error_device.auto_buffer_in_d_bits_denied, %wrapped_error_device.auto_buffer_in_d_bits_data, %wrapped_error_device.auto_buffer_in_d_bits_corrupt = hw.instance "wrapped_error_device" @ErrorDeviceWrapper(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_buffer_in_a_valid: %out_xbar.auto_out_0_a_valid: i1, auto_buffer_in_a_bits_opcode: %out_xbar.auto_out_0_a_bits_opcode: i3, auto_buffer_in_a_bits_param: %out_xbar.auto_out_0_a_bits_param: i3, auto_buffer_in_a_bits_size: %out_xbar.auto_out_0_a_bits_size: i4, auto_buffer_in_a_bits_source: %out_xbar.auto_out_0_a_bits_source: i2, auto_buffer_in_a_bits_address: %out_xbar.auto_out_0_a_bits_address: i14, auto_buffer_in_a_bits_mask: %out_xbar.auto_out_0_a_bits_mask: i8, auto_buffer_in_a_bits_data: %out_xbar.auto_out_0_a_bits_data: i64, auto_buffer_in_a_bits_corrupt: %out_xbar.auto_out_0_a_bits_corrupt: i1, auto_buffer_in_d_ready: %out_xbar.auto_out_0_d_ready: i1) -> (auto_buffer_in_a_ready: i1, auto_buffer_in_d_valid: i1, auto_buffer_in_d_bits_opcode: i3, auto_buffer_in_d_bits_param: i2, auto_buffer_in_d_bits_size: i4, auto_buffer_in_d_bits_source: i2, auto_buffer_in_d_bits_sink: i1, auto_buffer_in_d_bits_denied: i1, auto_buffer_in_d_bits_data: i64, auto_buffer_in_d_bits_corrupt: i1) {sv.namehint = "wrapped_error_device.auto_buffer_in_d_valid"}
    %buffer_1.auto_in_a_ready, %buffer_1.auto_in_d_valid, %buffer_1.auto_in_d_bits_opcode, %buffer_1.auto_in_d_bits_param, %buffer_1.auto_in_d_bits_size, %buffer_1.auto_in_d_bits_source, %buffer_1.auto_in_d_bits_sink, %buffer_1.auto_in_d_bits_denied, %buffer_1.auto_in_d_bits_data, %buffer_1.auto_in_d_bits_corrupt, %buffer_1.auto_out_a_valid, %buffer_1.auto_out_a_bits_opcode, %buffer_1.auto_out_a_bits_param, %buffer_1.auto_out_a_bits_size, %buffer_1.auto_out_a_bits_source, %buffer_1.auto_out_a_bits_address, %buffer_1.auto_out_a_bits_mask, %buffer_1.auto_out_a_bits_data, %buffer_1.auto_out_a_bits_corrupt, %buffer_1.auto_out_d_ready = hw.instance "buffer_1" @TLBuffer_5(auto_in_a_valid: %auto_bus_xing_in_a_valid: i1, auto_in_a_bits_opcode: %auto_bus_xing_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_bus_xing_in_a_bits_param: i3, auto_in_a_bits_size: %auto_bus_xing_in_a_bits_size: i4, auto_in_a_bits_source: %auto_bus_xing_in_a_bits_source: i2, auto_in_a_bits_address: %auto_bus_xing_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_bus_xing_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_bus_xing_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_bus_xing_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_bus_xing_in_d_ready: i1, auto_out_a_ready: %in_xbar.auto_in_a_ready: i1, auto_out_d_valid: %in_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %in_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %in_xbar.auto_in_d_bits_param: i2, auto_out_d_bits_size: %in_xbar.auto_in_d_bits_size: i4, auto_out_d_bits_source: %in_xbar.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %in_xbar.auto_in_d_bits_sink: i1, auto_out_d_bits_denied: %in_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %in_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %in_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i28, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "bundleOut_0_d_valid"}
    %coupler_to_plic.auto_fragmenter_out_a_valid, %coupler_to_plic.auto_fragmenter_out_a_bits_opcode, %coupler_to_plic.auto_fragmenter_out_a_bits_param, %coupler_to_plic.auto_fragmenter_out_a_bits_size, %coupler_to_plic.auto_fragmenter_out_a_bits_source, %coupler_to_plic.auto_fragmenter_out_a_bits_address, %coupler_to_plic.auto_fragmenter_out_a_bits_mask, %coupler_to_plic.auto_fragmenter_out_a_bits_data, %coupler_to_plic.auto_fragmenter_out_a_bits_corrupt, %coupler_to_plic.auto_fragmenter_out_d_ready, %coupler_to_plic.auto_tl_in_a_ready, %coupler_to_plic.auto_tl_in_d_valid, %coupler_to_plic.auto_tl_in_d_bits_opcode, %coupler_to_plic.auto_tl_in_d_bits_size, %coupler_to_plic.auto_tl_in_d_bits_source, %coupler_to_plic.auto_tl_in_d_bits_data = hw.instance "coupler_to_plic" @TLInterconnectCoupler_6(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_plic_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_plic_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_opcode: %auto_coupler_to_plic_fragmenter_out_d_bits_opcode: i3, auto_fragmenter_out_d_bits_size: %auto_coupler_to_plic_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_plic_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_plic_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_1_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_1_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_1_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_1_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_1_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_1_a_bits_address: i28, auto_tl_in_a_bits_mask: %out_xbar.auto_out_1_a_bits_mask: i8, auto_tl_in_a_bits_data: %out_xbar.auto_out_1_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_1_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_1_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i28, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_data: i64, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_plic.auto_tl_in_d_valid"}
    %coupler_to_clint.auto_fragmenter_out_a_valid, %coupler_to_clint.auto_fragmenter_out_a_bits_opcode, %coupler_to_clint.auto_fragmenter_out_a_bits_param, %coupler_to_clint.auto_fragmenter_out_a_bits_size, %coupler_to_clint.auto_fragmenter_out_a_bits_source, %coupler_to_clint.auto_fragmenter_out_a_bits_address, %coupler_to_clint.auto_fragmenter_out_a_bits_mask, %coupler_to_clint.auto_fragmenter_out_a_bits_data, %coupler_to_clint.auto_fragmenter_out_a_bits_corrupt, %coupler_to_clint.auto_fragmenter_out_d_ready, %coupler_to_clint.auto_tl_in_a_ready, %coupler_to_clint.auto_tl_in_d_valid, %coupler_to_clint.auto_tl_in_d_bits_opcode, %coupler_to_clint.auto_tl_in_d_bits_size, %coupler_to_clint.auto_tl_in_d_bits_source, %coupler_to_clint.auto_tl_in_d_bits_data = hw.instance "coupler_to_clint" @TLInterconnectCoupler_7(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_clint_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_clint_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_opcode: %auto_coupler_to_clint_fragmenter_out_d_bits_opcode: i3, auto_fragmenter_out_d_bits_size: %auto_coupler_to_clint_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_clint_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_clint_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_2_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_2_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_2_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_2_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_2_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_2_a_bits_address: i26, auto_tl_in_a_bits_mask: %out_xbar.auto_out_2_a_bits_mask: i8, auto_tl_in_a_bits_data: %out_xbar.auto_out_2_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_2_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_2_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i26, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_data: i64, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_clint.auto_tl_in_d_valid"}
    %coupler_to_debug.auto_fragmenter_out_a_valid, %coupler_to_debug.auto_fragmenter_out_a_bits_opcode, %coupler_to_debug.auto_fragmenter_out_a_bits_param, %coupler_to_debug.auto_fragmenter_out_a_bits_size, %coupler_to_debug.auto_fragmenter_out_a_bits_source, %coupler_to_debug.auto_fragmenter_out_a_bits_address, %coupler_to_debug.auto_fragmenter_out_a_bits_mask, %coupler_to_debug.auto_fragmenter_out_a_bits_data, %coupler_to_debug.auto_fragmenter_out_a_bits_corrupt, %coupler_to_debug.auto_fragmenter_out_d_ready, %coupler_to_debug.auto_tl_in_a_ready, %coupler_to_debug.auto_tl_in_d_valid, %coupler_to_debug.auto_tl_in_d_bits_opcode, %coupler_to_debug.auto_tl_in_d_bits_size, %coupler_to_debug.auto_tl_in_d_bits_source, %coupler_to_debug.auto_tl_in_d_bits_data = hw.instance "coupler_to_debug" @TLInterconnectCoupler_8(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_debug_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_debug_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_opcode: %auto_coupler_to_debug_fragmenter_out_d_bits_opcode: i3, auto_fragmenter_out_d_bits_size: %auto_coupler_to_debug_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_debug_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_debug_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_3_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_3_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_3_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_3_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_3_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_3_a_bits_address: i12, auto_tl_in_a_bits_mask: %out_xbar.auto_out_3_a_bits_mask: i8, auto_tl_in_a_bits_data: %out_xbar.auto_out_3_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_3_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_3_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i12, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_data: i64, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_debug.auto_tl_in_d_valid"}
    %coupler_to_bootrom.auto_fragmenter_out_a_valid, %coupler_to_bootrom.auto_fragmenter_out_a_bits_opcode, %coupler_to_bootrom.auto_fragmenter_out_a_bits_param, %coupler_to_bootrom.auto_fragmenter_out_a_bits_size, %coupler_to_bootrom.auto_fragmenter_out_a_bits_source, %coupler_to_bootrom.auto_fragmenter_out_a_bits_address, %coupler_to_bootrom.auto_fragmenter_out_a_bits_mask, %coupler_to_bootrom.auto_fragmenter_out_a_bits_corrupt, %coupler_to_bootrom.auto_fragmenter_out_d_ready, %coupler_to_bootrom.auto_tl_in_a_ready, %coupler_to_bootrom.auto_tl_in_d_valid, %coupler_to_bootrom.auto_tl_in_d_bits_size, %coupler_to_bootrom.auto_tl_in_d_bits_source, %coupler_to_bootrom.auto_tl_in_d_bits_data = hw.instance "coupler_to_bootrom" @TLInterconnectCoupler_10(clock: %fixedClockNode.auto_out_0_clock: !seq.clock, reset: %fixedClockNode.auto_out_0_reset: i1, auto_fragmenter_out_a_ready: %auto_coupler_to_bootrom_fragmenter_out_a_ready: i1, auto_fragmenter_out_d_valid: %auto_coupler_to_bootrom_fragmenter_out_d_valid: i1, auto_fragmenter_out_d_bits_size: %auto_coupler_to_bootrom_fragmenter_out_d_bits_size: i2, auto_fragmenter_out_d_bits_source: %auto_coupler_to_bootrom_fragmenter_out_d_bits_source: i6, auto_fragmenter_out_d_bits_data: %auto_coupler_to_bootrom_fragmenter_out_d_bits_data: i64, auto_tl_in_a_valid: %out_xbar.auto_out_4_a_valid: i1, auto_tl_in_a_bits_opcode: %out_xbar.auto_out_4_a_bits_opcode: i3, auto_tl_in_a_bits_param: %out_xbar.auto_out_4_a_bits_param: i3, auto_tl_in_a_bits_size: %out_xbar.auto_out_4_a_bits_size: i3, auto_tl_in_a_bits_source: %out_xbar.auto_out_4_a_bits_source: i2, auto_tl_in_a_bits_address: %out_xbar.auto_out_4_a_bits_address: i17, auto_tl_in_a_bits_mask: %out_xbar.auto_out_4_a_bits_mask: i8, auto_tl_in_a_bits_corrupt: %out_xbar.auto_out_4_a_bits_corrupt: i1, auto_tl_in_d_ready: %out_xbar.auto_out_4_d_ready: i1) -> (auto_fragmenter_out_a_valid: i1, auto_fragmenter_out_a_bits_opcode: i3, auto_fragmenter_out_a_bits_param: i3, auto_fragmenter_out_a_bits_size: i2, auto_fragmenter_out_a_bits_source: i6, auto_fragmenter_out_a_bits_address: i17, auto_fragmenter_out_a_bits_mask: i8, auto_fragmenter_out_a_bits_corrupt: i1, auto_fragmenter_out_d_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i2, auto_tl_in_d_bits_data: i64) {sv.namehint = "coupler_to_bootrom.auto_tl_in_d_valid"}
    hw.output %coupler_to_bootrom.auto_fragmenter_out_a_valid, %coupler_to_bootrom.auto_fragmenter_out_a_bits_opcode, %coupler_to_bootrom.auto_fragmenter_out_a_bits_param, %coupler_to_bootrom.auto_fragmenter_out_a_bits_size, %coupler_to_bootrom.auto_fragmenter_out_a_bits_source, %coupler_to_bootrom.auto_fragmenter_out_a_bits_address, %coupler_to_bootrom.auto_fragmenter_out_a_bits_mask, %coupler_to_bootrom.auto_fragmenter_out_a_bits_corrupt, %coupler_to_bootrom.auto_fragmenter_out_d_ready, %coupler_to_debug.auto_fragmenter_out_a_valid, %coupler_to_debug.auto_fragmenter_out_a_bits_opcode, %coupler_to_debug.auto_fragmenter_out_a_bits_param, %coupler_to_debug.auto_fragmenter_out_a_bits_size, %coupler_to_debug.auto_fragmenter_out_a_bits_source, %coupler_to_debug.auto_fragmenter_out_a_bits_address, %coupler_to_debug.auto_fragmenter_out_a_bits_mask, %coupler_to_debug.auto_fragmenter_out_a_bits_data, %coupler_to_debug.auto_fragmenter_out_a_bits_corrupt, %coupler_to_debug.auto_fragmenter_out_d_ready, %coupler_to_clint.auto_fragmenter_out_a_valid, %coupler_to_clint.auto_fragmenter_out_a_bits_opcode, %coupler_to_clint.auto_fragmenter_out_a_bits_param, %coupler_to_clint.auto_fragmenter_out_a_bits_size, %coupler_to_clint.auto_fragmenter_out_a_bits_source, %coupler_to_clint.auto_fragmenter_out_a_bits_address, %coupler_to_clint.auto_fragmenter_out_a_bits_mask, %coupler_to_clint.auto_fragmenter_out_a_bits_data, %coupler_to_clint.auto_fragmenter_out_a_bits_corrupt, %coupler_to_clint.auto_fragmenter_out_d_ready, %coupler_to_plic.auto_fragmenter_out_a_valid, %coupler_to_plic.auto_fragmenter_out_a_bits_opcode, %coupler_to_plic.auto_fragmenter_out_a_bits_param, %coupler_to_plic.auto_fragmenter_out_a_bits_size, %coupler_to_plic.auto_fragmenter_out_a_bits_source, %coupler_to_plic.auto_fragmenter_out_a_bits_address, %coupler_to_plic.auto_fragmenter_out_a_bits_mask, %coupler_to_plic.auto_fragmenter_out_a_bits_data, %coupler_to_plic.auto_fragmenter_out_a_bits_corrupt, %coupler_to_plic.auto_fragmenter_out_d_ready, %fixedClockNode.auto_out_3_clock, %fixedClockNode.auto_out_3_reset, %fixedClockNode.auto_out_1_clock, %fixedClockNode.auto_out_1_reset, %buffer_1.auto_in_a_ready, %buffer_1.auto_in_d_valid, %buffer_1.auto_in_d_bits_opcode, %buffer_1.auto_in_d_bits_param, %buffer_1.auto_in_d_bits_size, %buffer_1.auto_in_d_bits_source, %buffer_1.auto_in_d_bits_sink, %buffer_1.auto_in_d_bits_denied, %buffer_1.auto_in_d_bits_data, %buffer_1.auto_in_d_bits_corrupt, %fixedClockNode.auto_out_0_clock, %fixedClockNode.auto_out_0_reset : i1, i3, i3, i2, i6, i17, i8, i1, i1, i1, i3, i3, i2, i6, i12, i8, i64, i1, i1, i1, i3, i3, i2, i6, i26, i8, i64, i1, i1, i1, i3, i3, i2, i6, i28, i8, i64, i1, i1, !seq.clock, i1, !seq.clock, i1, i1, i1, i3, i2, i4, i2, i1, i1, i64, i1, !seq.clock, i1
  }
  hw.module private @TLXbar_6(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @TLMonitor_13(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i4, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i4, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-8_i4 = hw.constant -8 : i4
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i137 = hw.constant 0 : i137
    %c0_i125 = hw.constant 0 : i125
    %c0_i58 = hw.constant 0 : i58
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c15_i143 = hw.constant 15 : i143
    %c1_i16 = hw.constant 1 : i16
    %c63_i13 = hw.constant 63 : i13
    %false = hw.constant false
    %c-1_i6 = hw.constant -1 : i6
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i64 = hw.constant 0 : i64
    %c0_i16 = hw.constant 0 : i16
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i64 = hw.constant -1 : i64
    %c-1_i16 = hw.constant -1 : i16
    %c0_i127 = hw.constant 0 : i127
    %c0_i12 = hw.constant 0 : i12
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i2 = hw.constant 0 : i2
    %c0_i6 = hw.constant 0 : i6
    %c0_i10 = hw.constant 0 : i10
    %2 = seq.from_clock %clock
    %3 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %4 = comb.shl bin %c63_i13, %3 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %5 = comb.extract %4 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %6 = comb.xor bin %5, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %7 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i6
    %8 = comb.and bin %7, %6 : i6
    %9 = comb.icmp bin eq %8, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %10 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %11 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %12 = comb.icmp eq %10, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %13 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %14 = comb.xor bin %13, %true {sv.namehint = "mask_eq"} : i1
    %15 = comb.and bin %12, %14 {sv.namehint = "_mask_acc_T"} : i1
    %16 = comb.or bin %11, %15 {sv.namehint = "mask_acc"} : i1
    %17 = comb.and bin %12, %13 {sv.namehint = "_mask_acc_T_1"} : i1
    %18 = comb.or bin %11, %17 {sv.namehint = "mask_acc_1"} : i1
    %19 = comb.icmp eq %10, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %20 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %21 = comb.xor bin %20, %true {sv.namehint = "mask_nbit_1"} : i1
    %22 = comb.and bin %14, %21 {sv.namehint = "mask_eq_2"} : i1
    %23 = comb.and bin %19, %22 {sv.namehint = "_mask_acc_T_2"} : i1
    %24 = comb.or bin %16, %23 {sv.namehint = "mask_acc_2"} : i1
    %25 = comb.and bin %14, %20 {sv.namehint = "mask_eq_3"} : i1
    %26 = comb.and bin %19, %25 {sv.namehint = "_mask_acc_T_3"} : i1
    %27 = comb.or bin %16, %26 {sv.namehint = "mask_acc_3"} : i1
    %28 = comb.and bin %13, %21 {sv.namehint = "mask_eq_4"} : i1
    %29 = comb.and bin %19, %28 {sv.namehint = "_mask_acc_T_4"} : i1
    %30 = comb.or bin %18, %29 {sv.namehint = "mask_acc_4"} : i1
    %31 = comb.and bin %13, %20 {sv.namehint = "mask_eq_5"} : i1
    %32 = comb.and bin %19, %31 {sv.namehint = "_mask_acc_T_5"} : i1
    %33 = comb.or bin %18, %32 {sv.namehint = "mask_acc_5"} : i1
    %34 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %35 = comb.xor bin %34, %true {sv.namehint = "mask_nbit_2"} : i1
    %36 = comb.and bin %22, %35 {sv.namehint = "mask_eq_6"} : i1
    %37 = comb.or bin %24, %36 {sv.namehint = "mask_lo_lo_lo"} : i1
    %38 = comb.and bin %22, %34 {sv.namehint = "mask_eq_7"} : i1
    %39 = comb.or bin %24, %38 {sv.namehint = "mask_lo_lo_hi"} : i1
    %40 = comb.and bin %25, %35 {sv.namehint = "mask_eq_8"} : i1
    %41 = comb.or bin %27, %40 {sv.namehint = "mask_lo_hi_lo"} : i1
    %42 = comb.and bin %25, %34 {sv.namehint = "mask_eq_9"} : i1
    %43 = comb.or bin %27, %42 {sv.namehint = "mask_lo_hi_hi"} : i1
    %44 = comb.and bin %28, %35 {sv.namehint = "mask_eq_10"} : i1
    %45 = comb.or bin %30, %44 {sv.namehint = "mask_hi_lo_lo"} : i1
    %46 = comb.and bin %28, %34 {sv.namehint = "mask_eq_11"} : i1
    %47 = comb.or bin %30, %46 {sv.namehint = "mask_hi_lo_hi"} : i1
    %48 = comb.and bin %31, %35 {sv.namehint = "mask_eq_12"} : i1
    %49 = comb.or bin %33, %48 {sv.namehint = "mask_hi_hi_lo"} : i1
    %50 = comb.and bin %31, %34 {sv.namehint = "mask_eq_13"} : i1
    %51 = comb.or bin %33, %50 {sv.namehint = "mask_hi_hi_hi"} : i1
    %52 = comb.concat %51, %49, %47, %45, %43, %41, %39, %37 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %53 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %54 = comb.and bin %io_in_a_valid, %53 : i1
    %55 = comb.xor bin %reset, %true : i1
    %56 = comb.and bin %54, %55 : i1
    %57 = comb.or bin %11, %reset : i1
    %58 = comb.xor bin %57, %true : i1
    %59 = comb.and bin %54, %58 : i1
    %60 = comb.or bin %9, %reset : i1
    %61 = comb.xor bin %60, %true : i1
    %62 = comb.and bin %54, %61 : i1
    %63 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %64 = comb.or bin %63, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %54, %65 : i1
    %67 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %68 = comb.or bin %67, %reset : i1
    %69 = comb.xor bin %68, %true : i1
    %70 = comb.and bin %54, %69 : i1
    %71 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %72 = comb.and bin %io_in_a_valid, %71 : i1
    %73 = comb.and bin %72, %55 : i1
    %74 = comb.and bin %72, %58 : i1
    %75 = comb.and bin %72, %61 : i1
    %76 = comb.and bin %72, %65 : i1
    %77 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %78 = comb.or bin %77, %reset : i1
    %79 = comb.xor bin %78, %true : i1
    %80 = comb.and bin %72, %79 : i1
    %81 = comb.and bin %72, %69 : i1
    %82 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %83 = comb.and bin %io_in_a_valid, %82 : i1
    %84 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %85 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %86 = comb.icmp eq %85, %c-8_i4 : i4
    %87 = comb.and bin %84, %86 : i1
    %88 = comb.or bin %87, %reset : i1
    %89 = comb.xor bin %88, %true : i1
    %90 = comb.and bin %83, %89 : i1
    %91 = comb.and bin %83, %61 : i1
    %92 = comb.xor bin %77, %true : i1
    %93 = comb.or bin %92, %reset : i1
    %94 = comb.xor bin %93, %true : i1
    %95 = comb.and bin %83, %94 : i1
    %96 = comb.icmp bin eq %io_in_a_bits_mask, %52 : i8
    %97 = comb.or bin %96, %reset : i1
    %98 = comb.xor bin %97, %true : i1
    %99 = comb.and bin %83, %98 : i1
    %100 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %101 = comb.and bin %io_in_a_valid, %100 : i1
    %102 = comb.and bin %101, %89 : i1
    %103 = comb.and bin %101, %61 : i1
    %104 = comb.and bin %101, %94 : i1
    %105 = comb.and bin %101, %98 : i1
    %106 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %107 = comb.and bin %io_in_a_valid, %106 : i1
    %108 = comb.and bin %107, %89 : i1
    %109 = comb.and bin %107, %61 : i1
    %110 = comb.and bin %107, %94 : i1
    %111 = comb.xor bin %52, %c-1_i8 : i8
    %112 = comb.and bin %io_in_a_bits_mask, %111 : i8
    %113 = comb.icmp bin eq %112, %c0_i8 : i8
    %114 = comb.or bin %113, %reset : i1
    %115 = comb.xor bin %114, %true : i1
    %116 = comb.and bin %107, %115 : i1
    %117 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %118 = comb.and bin %io_in_a_valid, %117 : i1
    %119 = comb.and bin %118, %55 : i1
    %120 = comb.and bin %118, %61 : i1
    %121 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %122 = comb.or bin %121, %reset : i1
    %123 = comb.xor bin %122, %true : i1
    %124 = comb.and bin %118, %123 : i1
    %125 = comb.and bin %118, %98 : i1
    %126 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %127 = comb.and bin %io_in_a_valid, %126 : i1
    %128 = comb.and bin %127, %55 : i1
    %129 = comb.and bin %127, %61 : i1
    %130 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %131 = comb.xor bin %130, %true : i1
    %132 = comb.or bin %131, %reset : i1
    %133 = comb.xor bin %132, %true : i1
    %134 = comb.and bin %127, %133 : i1
    %135 = comb.and bin %127, %98 : i1
    %136 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %137 = comb.and bin %io_in_a_valid, %136 : i1
    %138 = comb.and bin %137, %55 : i1
    %139 = comb.and bin %137, %61 : i1
    %140 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %141 = comb.or bin %140, %reset : i1
    %142 = comb.xor bin %141, %true : i1
    %143 = comb.and bin %137, %142 : i1
    %144 = comb.and bin %137, %98 : i1
    %145 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %146 = comb.or bin %145, %reset : i1
    %147 = comb.xor bin %146, %true : i1
    %148 = comb.and bin %io_in_d_valid, %147 : i1
    %149 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %150 = comb.and bin %io_in_d_valid, %149 : i1
    %151 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %152 = comb.or bin %151, %reset : i1
    %153 = comb.xor bin %152, %true : i1
    %154 = comb.and bin %150, %153 : i1
    %155 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %156 = comb.or bin %155, %reset : i1
    %157 = comb.xor bin %156, %true : i1
    %158 = comb.and bin %150, %157 : i1
    %159 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %160 = comb.or bin %159, %reset : i1
    %161 = comb.xor bin %160, %true : i1
    %162 = comb.and bin %150, %161 : i1
    %163 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %164 = comb.and bin %io_in_d_valid, %163 : i1
    %165 = comb.and bin %164, %55 : i1
    %166 = comb.and bin %164, %153 : i1
    %167 = comb.and bin %164, %157 : i1
    %168 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %169 = comb.and bin %io_in_d_valid, %168 : i1
    %170 = comb.and bin %169, %55 : i1
    %171 = comb.and bin %169, %153 : i1
    %172 = comb.or bin %159, %io_in_d_bits_corrupt, %reset : i1
    %173 = comb.xor bin %172, %true : i1
    %174 = comb.and bin %169, %173 : i1
    %175 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %176 = comb.and bin %io_in_d_valid, %175 : i1
    %177 = comb.and bin %176, %157 : i1
    %178 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %179 = comb.and bin %io_in_d_valid, %178 : i1
    %180 = comb.and bin %179, %173 : i1
    %181 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %182 = comb.and bin %io_in_d_valid, %181 : i1
    %183 = comb.and bin %182, %157 : i1
    %184 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %185 = comb.shl bin %c63_i13, %3 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %186 = comb.extract %185 from 3 : (i13) -> i3
    %187 = comb.xor %186, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %188 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %189 = comb.mux bin %188, %c0_i3, %187 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %194 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %190 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %191 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %192 = comb.xor bin %191, %true {sv.namehint = "a_first"} : i1
    %193 = comb.mux bin %191, %190, %189 {sv.namehint = "_a_first_counter_T"} : i3
    %194 = comb.mux bin %184, %193, %a_first_counter : i3
    %opcode = seq.firreg %217 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %218 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %219 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %220 clock %clock {firrtl.random_init_start = 12 : ui64} : i4
    %address = seq.firreg %221 clock %clock {firrtl.random_init_start = 16 : ui64} : i32
    %195 = comb.and bin %io_in_a_valid, %191 : i1
    %196 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %197 = comb.or bin %196, %reset : i1
    %198 = comb.xor bin %197, %true : i1
    %199 = comb.and bin %195, %198 : i1
    %200 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %201 = comb.or bin %200, %reset : i1
    %202 = comb.xor bin %201, %true : i1
    %203 = comb.and bin %195, %202 : i1
    %204 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %205 = comb.or bin %204, %reset : i1
    %206 = comb.xor bin %205, %true : i1
    %207 = comb.and bin %195, %206 : i1
    %208 = comb.icmp bin eq %io_in_a_bits_source, %source : i4
    %209 = comb.or bin %208, %reset : i1
    %210 = comb.xor bin %209, %true : i1
    %211 = comb.and bin %195, %210 : i1
    %212 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %213 = comb.or bin %212, %reset : i1
    %214 = comb.xor bin %213, %true : i1
    %215 = comb.and bin %195, %214 : i1
    %216 = comb.and bin %184, %192 : i1
    %217 = comb.mux bin %216, %io_in_a_bits_opcode, %opcode : i3
    %218 = comb.mux bin %216, %io_in_a_bits_param, %param : i3
    %219 = comb.mux bin %216, %io_in_a_bits_size, %size : i3
    %220 = comb.mux bin %216, %io_in_a_bits_source, %source : i4
    %221 = comb.mux bin %216, %io_in_a_bits_address, %address : i32
    %222 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_2"} : i1
    %223 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %224 = comb.shl bin %c63_i13, %223 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %225 = comb.extract %224 from 3 : (i13) -> i3
    %226 = comb.xor %225, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %227 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %228 = comb.mux bin %227, %226, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %233 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 48 : ui64} : i3
    %229 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %230 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %231 = comb.xor bin %230, %true {sv.namehint = "d_first"} : i1
    %232 = comb.mux bin %230, %229, %228 {sv.namehint = "_d_first_counter_T"} : i3
    %233 = comb.mux bin %222, %232, %d_first_counter : i3
    %opcode_1 = seq.firreg %252 clock %clock {firrtl.random_init_start = 51 : ui64} : i3
    %size_1 = seq.firreg %253 clock %clock {firrtl.random_init_start = 56 : ui64} : i3
    %source_1 = seq.firreg %254 clock %clock {firrtl.random_init_start = 59 : ui64} : i4
    %denied = seq.firreg %255 clock %clock {firrtl.random_init_start = 64 : ui64} : i1
    %234 = comb.and bin %io_in_d_valid, %230 : i1
    %235 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %236 = comb.or bin %235, %reset : i1
    %237 = comb.xor bin %236, %true : i1
    %238 = comb.and bin %234, %237 : i1
    %239 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %240 = comb.or bin %239, %reset : i1
    %241 = comb.xor bin %240, %true : i1
    %242 = comb.and bin %234, %241 : i1
    %243 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i4
    %244 = comb.or bin %243, %reset : i1
    %245 = comb.xor bin %244, %true : i1
    %246 = comb.and bin %234, %245 : i1
    %247 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %248 = comb.or bin %247, %reset : i1
    %249 = comb.xor bin %248, %true : i1
    %250 = comb.and bin %234, %249 : i1
    %251 = comb.and bin %222, %231 : i1
    %252 = comb.mux bin %251, %io_in_d_bits_opcode, %opcode_1 : i3
    %253 = comb.mux bin %251, %io_in_d_bits_size, %size_1 : i3
    %254 = comb.mux bin %251, %io_in_d_bits_source, %source_1 : i4
    %255 = comb.mux bin %251, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %367 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 65 : ui64} : i16
    %inflight_opcodes = seq.firreg %370 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 81 : ui64} : i64
    %inflight_sizes = seq.firreg %373 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 145 : ui64} : i64
    %256 = comb.shl bin %c63_i13, %3 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %257 = comb.extract %256 from 3 : (i13) -> i3
    %258 = comb.xor %257, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %259 = comb.mux bin %188, %c0_i3, %258 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %263 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 209 : ui64} : i3
    %260 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %261 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %262 = comb.mux bin %261, %259, %260 {sv.namehint = "_a_first_counter_T_1"} : i3
    %263 = comb.mux bin %184, %262, %a_first_counter_1 : i3
    %264 = comb.shl bin %c63_i13, %223 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %265 = comb.extract %264 from 3 : (i13) -> i3
    %266 = comb.xor %265, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %267 = comb.mux bin %227, %266, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %271 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 212 : ui64} : i3
    %268 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %269 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %270 = comb.mux bin %269, %267, %268 {sv.namehint = "_d_first_counter_T_1"} : i3
    %271 = comb.mux bin %222, %270, %d_first_counter_1 : i3
    %272 = comb.concat %c0_i58, %io_in_d_bits_source, %c0_i2 : i58, i4, i2
    %273 = comb.shru bin %inflight_opcodes, %272 {sv.namehint = "_a_opcode_lookup_T_1"} : i64
    %274 = comb.extract %273 from 1 : (i64) -> i3
    %275 = comb.shru bin %inflight_sizes, %272 {sv.namehint = "_a_size_lookup_T_1"} : i64
    %276 = comb.extract %275 from 1 : (i64) -> i3
    %277 = comb.and bin %io_in_a_valid, %261 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %278 = comb.concat %c0_i12, %io_in_a_bits_source : i12, i4
    %279 = comb.shl bin %c1_i16, %278 {sv.namehint = "_a_set_wo_ready_T"} : i16
    %280 = comb.mux bin %277, %279, %c0_i16 {sv.namehint = "a_set_wo_ready"} : i16
    %281 = comb.and bin %184, %261 : i1
    %282 = comb.shl bin %c1_i16, %278 {sv.namehint = "_a_set_T"} : i16
    %283 = comb.mux bin %281, %282, %c0_i16 {sv.namehint = "a_set"} : i16
    %284 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %285 = comb.mux bin %281, %284, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %286 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %287 = comb.mux bin %281, %286, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %288 = comb.concat %c0_i127, %285 : i127, i4
    %289 = comb.concat %c0_i125, %io_in_a_bits_source, %c0_i2 : i125, i4, i2
    %290 = comb.shl bin %288, %289 {sv.namehint = "_a_opcodes_set_T_1"} : i131
    %291 = comb.extract %290 from 0 : (i131) -> i64
    %292 = comb.mux bin %281, %291, %c0_i64 {sv.namehint = "a_opcodes_set"} : i64
    %293 = comb.concat %c0_i127, %287 : i127, i4
    %294 = comb.shl bin %293, %289 {sv.namehint = "_a_sizes_set_T_1"} : i131
    %295 = comb.extract %294 from 0 : (i131) -> i64
    %296 = comb.mux bin %281, %295, %c0_i64 {sv.namehint = "a_sizes_set"} : i64
    %297 = comb.shru bin %inflight, %278 : i16
    %298 = comb.extract %297 from 0 : (i16) -> i1
    %299 = comb.xor bin %298, %true : i1
    %300 = comb.or bin %299, %reset : i1
    %301 = comb.xor bin %300, %true : i1
    %302 = comb.and bin %281, %301 : i1
    %303 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %304 = comb.and bin %io_in_d_valid, %269 : i1
    %305 = comb.xor bin %303, %true : i1
    %306 = comb.and bin %304, %305 : i1
    %307 = comb.concat %c0_i12, %io_in_d_bits_source : i12, i4
    %308 = comb.shl bin %c1_i16, %307 {sv.namehint = "_d_clr_wo_ready_T"} : i16
    %309 = comb.mux bin %306, %308, %c0_i16 {sv.namehint = "d_clr_wo_ready"} : i16
    %310 = comb.and bin %222, %269, %305 : i1
    %311 = comb.shl bin %c1_i16, %307 {sv.namehint = "_d_clr_T"} : i16
    %312 = comb.mux bin %310, %311, %c0_i16 {sv.namehint = "d_clr"} : i16
    %313 = comb.concat %c0_i137, %io_in_d_bits_source, %c0_i2 : i137, i4, i2
    %314 = comb.shl bin %c15_i143, %313 {sv.namehint = "_d_opcodes_clr_T_5"} : i143
    %315 = comb.extract %314 from 0 : (i143) -> i64
    %316 = comb.mux bin %310, %315, %c0_i64 {sv.namehint = "d_opcodes_clr"} : i64
    %317 = comb.shl bin %c15_i143, %313 {sv.namehint = "_d_sizes_clr_T_5"} : i143
    %318 = comb.extract %317 from 0 : (i143) -> i64
    %319 = comb.mux bin %310, %318, %c0_i64 {sv.namehint = "d_sizes_clr"} : i64
    %320 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i4
    %321 = comb.and bin %277, %320 {sv.namehint = "same_cycle_resp"} : i1
    %322 = comb.shru bin %inflight, %307 : i16
    %323 = comb.extract %322 from 0 : (i16) -> i1
    %324 = comb.or bin %323, %321, %reset : i1
    %325 = comb.xor bin %324, %true : i1
    %326 = comb.and bin %306, %325 : i1
    %327 = comb.and bin %306, %321 : i1
    %328 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %329 = comb.icmp bin eq %io_in_d_bits_opcode, %328 : i3
    %330 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %331 = comb.icmp bin eq %io_in_d_bits_opcode, %330 : i3
    %332 = comb.or bin %329, %331, %reset : i1
    %333 = comb.xor bin %332, %true : i1
    %334 = comb.and bin %327, %333 : i1
    %335 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %336 = comb.or bin %335, %reset : i1
    %337 = comb.xor bin %336, %true : i1
    %338 = comb.and bin %327, %337 : i1
    %339 = comb.xor bin %321, %true : i1
    %340 = comb.and bin %306, %339 : i1
    %341 = hw.array_get %1[%274] : !hw.array<8xi3>, i3
    %342 = comb.icmp bin eq %io_in_d_bits_opcode, %341 : i3
    %343 = hw.array_get %0[%274] : !hw.array<8xi3>, i3
    %344 = comb.icmp bin eq %io_in_d_bits_opcode, %343 : i3
    %345 = comb.or bin %342, %344, %reset : i1
    %346 = comb.xor bin %345, %true : i1
    %347 = comb.and bin %340, %346 : i1
    %348 = comb.icmp bin eq %io_in_d_bits_size, %276 : i3
    %349 = comb.or bin %348, %reset : i1
    %350 = comb.xor bin %349, %true : i1
    %351 = comb.and bin %340, %350 : i1
    %352 = comb.and bin %304, %261 : i1
    %353 = comb.and bin %352, %io_in_a_valid : i1
    %354 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i4
    %355 = comb.and bin %353, %354 : i1
    %356 = comb.and bin %355, %305 : i1
    %357 = comb.xor bin %io_in_d_ready, %true : i1
    %358 = comb.or bin %357, %io_in_a_ready, %reset : i1
    %359 = comb.xor bin %358, %true : i1
    %360 = comb.and bin %356, %359 : i1
    %361 = comb.icmp bin ne %280, %309 : i16
    %362 = comb.icmp bin eq %280, %c0_i16 : i16
    %363 = comb.or bin %361, %362, %reset : i1
    %364 = comb.xor bin %363, %true : i1
    %365 = comb.or bin %inflight, %283 {sv.namehint = "_inflight_T"} : i16
    %366 = comb.xor bin %312, %c-1_i16 {sv.namehint = "_inflight_T_1"} : i16
    %367 = comb.and bin %365, %366 {sv.namehint = "_inflight_T_2"} : i16
    %368 = comb.or bin %inflight_opcodes, %292 {sv.namehint = "_inflight_opcodes_T"} : i64
    %369 = comb.xor bin %316, %c-1_i64 {sv.namehint = "_inflight_opcodes_T_1"} : i64
    %370 = comb.and bin %368, %369 {sv.namehint = "_inflight_opcodes_T_2"} : i64
    %371 = comb.or bin %inflight_sizes, %296 {sv.namehint = "_inflight_sizes_T"} : i64
    %372 = comb.xor bin %319, %c-1_i64 {sv.namehint = "_inflight_sizes_T_1"} : i64
    %373 = comb.and bin %371, %372 {sv.namehint = "_inflight_sizes_T_2"} : i64
    %watchdog = seq.firreg %381 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 215 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %374 = comb.icmp bin eq %inflight, %c0_i16 : i16
    %375 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %376 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %377 = comb.or bin %374, %375, %376, %reset : i1
    %378 = comb.xor bin %377, %true : i1
    %379 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %380 = comb.or bin %184, %222 : i1
    %381 = comb.mux bin %380, %c0_i32, %379 : i32
    %inflight_1 = seq.firreg %409 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 247 : ui64} : i16
    %inflight_sizes_1 = seq.firreg %411 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 327 : ui64} : i64
    %382 = comb.shl bin %c63_i13, %223 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %383 = comb.extract %382 from 3 : (i13) -> i3
    %384 = comb.xor %383, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %385 = comb.mux bin %227, %384, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %389 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 394 : ui64} : i3
    %386 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %387 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %388 = comb.mux bin %387, %385, %386 {sv.namehint = "_d_first_counter_T_2"} : i3
    %389 = comb.mux bin %222, %388, %d_first_counter_2 : i3
    %390 = comb.shru bin %inflight_sizes_1, %272 {sv.namehint = "_c_size_lookup_T_1"} : i64
    %391 = comb.extract %390 from 1 : (i64) -> i3
    %392 = comb.and bin %222, %387, %303 : i1
    %393 = comb.shl bin %c1_i16, %307 {sv.namehint = "_d_clr_T_1"} : i16
    %394 = comb.mux bin %392, %393, %c0_i16 {sv.namehint = "d_clr_1"} : i16
    %395 = comb.shl bin %c15_i143, %313 {sv.namehint = "_d_sizes_clr_T_11"} : i143
    %396 = comb.extract %395 from 0 : (i143) -> i64
    %397 = comb.mux bin %392, %396, %c0_i64 {sv.namehint = "d_sizes_clr_1"} : i64
    %398 = comb.and bin %io_in_d_valid, %387, %303 : i1
    %399 = comb.shru bin %inflight_1, %307 : i16
    %400 = comb.extract %399 from 0 : (i16) -> i1
    %401 = comb.or bin %400, %reset : i1
    %402 = comb.xor bin %401, %true : i1
    %403 = comb.and bin %398, %402 : i1
    %404 = comb.icmp bin eq %io_in_d_bits_size, %391 : i3
    %405 = comb.or bin %404, %reset : i1
    %406 = comb.xor bin %405, %true : i1
    %407 = comb.and bin %398, %406 : i1
    %408 = comb.xor bin %394, %c-1_i16 {sv.namehint = "_inflight_T_4"} : i16
    %409 = comb.and bin %inflight_1, %408 {sv.namehint = "_inflight_T_5"} : i16
    %410 = comb.xor bin %397, %c-1_i64 {sv.namehint = "_inflight_sizes_T_4"} : i64
    %411 = comb.and bin %inflight_sizes_1, %410 {sv.namehint = "_inflight_sizes_T_5"} : i64
    %watchdog_1 = seq.firreg %418 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 397 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %412 = comb.icmp bin eq %inflight_1, %c0_i16 : i16
    %413 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %414 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %415 = comb.or bin %412, %413, %414, %reset : i1
    %416 = comb.xor bin %415, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %419 = comb.and bin %STOP_COND_, %false : i1
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %420 = comb.and bin %STOP_COND_, %56 : i1
        sv.if %420 {
          sv.fatal 1
        }
        sv.if %420 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %421 = comb.and bin %STOP_COND_, %59 : i1
        sv.if %421 {
          sv.fatal 1
        }
        %422 = comb.and bin %STOP_COND_, %62 : i1
        sv.if %422 {
          sv.fatal 1
        }
        %423 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %423 {
          sv.fatal 1
        }
        %424 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %425 = comb.and bin %STOP_COND_, %73 : i1
        sv.if %425 {
          sv.fatal 1
        }
        sv.if %425 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %426 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %426 {
          sv.fatal 1
        }
        %427 = comb.and bin %STOP_COND_, %75 : i1
        sv.if %427 {
          sv.fatal 1
        }
        %428 = comb.and bin %STOP_COND_, %76 : i1
        sv.if %428 {
          sv.fatal 1
        }
        %429 = comb.and bin %STOP_COND_, %80 : i1
        sv.if %429 {
          sv.fatal 1
        }
        %430 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %430 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %431 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %431 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %432 = comb.and bin %STOP_COND_, %91 : i1
        sv.if %432 {
          sv.fatal 1
        }
        %433 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %433 {
          sv.fatal 1
        }
        %434 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %434 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %435 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %435 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %436 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %436 {
          sv.fatal 1
        }
        %437 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %437 {
          sv.fatal 1
        }
        %438 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %438 {
          sv.fatal 1
        }
        %439 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %439 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %440 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %440 {
          sv.fatal 1
        }
        %441 = comb.and bin %STOP_COND_, %110 : i1
        sv.if %441 {
          sv.fatal 1
        }
        %442 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %442 {
          sv.fatal 1
        }
        %443 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %443 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %444 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %444 {
          sv.fatal 1
        }
        %445 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %445 {
          sv.fatal 1
        }
        %446 = comb.and bin %STOP_COND_, %125 : i1
        sv.if %446 {
          sv.fatal 1
        }
        %447 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %447 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %448 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %448 {
          sv.fatal 1
        }
        %449 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %449 {
          sv.fatal 1
        }
        %450 = comb.and bin %STOP_COND_, %135 : i1
        sv.if %450 {
          sv.fatal 1
        }
        %451 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %451 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %452 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %452 {
          sv.fatal 1
        }
        %453 = comb.and bin %STOP_COND_, %143 : i1
        sv.if %453 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %144 : i1
        sv.if %454 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %455 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %154 : i1
        sv.if %456 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %458 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %165 : i1
        sv.if %459 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %460 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %461 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %170 : i1
        sv.if %462 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %171 : i1
        sv.if %463 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %464 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %465 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %466 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %467 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %468 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %203 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %207 : i1
        sv.if %470 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %211 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %215 : i1
        sv.if %472 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %238 : i1
        sv.if %473 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %242 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %475 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %302 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %326 : i1
        sv.if %478 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %334 : i1
        sv.if %479 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %338 : i1
        sv.if %480 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %347 : i1
        sv.if %481 {
          sv.fatal 1
        }
        %482 = comb.and bin %STOP_COND_, %351 : i1
        sv.if %482 {
          sv.fatal 1
        }
        %483 = comb.and bin %STOP_COND_, %360 : i1
        sv.if %483 {
          sv.fatal 1
        }
        %484 = comb.and bin %STOP_COND_, %364 : i1
        sv.if %484 {
          sv.fatal 1
        }
        %485 = comb.and bin %STOP_COND_, %378 : i1
        sv.if %485 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %486 = comb.and bin %STOP_COND_, %403 : i1
        sv.if %486 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %487 = comb.and bin %STOP_COND_, %407 : i1
        sv.if %487 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        sv.if %419 {
          sv.fatal 1
        }
        %488 = comb.and bin %STOP_COND_, %416 : i1
        sv.if %488 {
          sv.fatal 1
        }
      }
    }
    %417 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %418 = comb.mux bin %222, %c0_i32, %417 : i32
    hw.output
  }
  hw.module private @TLFIFOFixer_3(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_13(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i4, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %auto_out_d_bits_size: i3, io_in_d_bits_source: %auto_out_d_bits_source: i4, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @ProbePicker(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.instance "monitor" @TLMonitor_13(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_out_a_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i4, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_out_d_valid: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_size: %auto_out_d_bits_size: i3, io_in_d_bits_source: %auto_out_d_bits_source: i4, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @TLBuffer_6(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @QueueCompatibility_6(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_tl_state_size : i4, in %io_enq_bits_tl_state_source : i4, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_tl_state_size : i4, out io_deq_bits_tl_state_source : i4) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firreg %8 clock %clock : i8
    %0 = comb.concat %io_enq_bits_tl_state_source, %io_enq_bits_tl_state_size : i4, i4
    %1 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_size"} : (i8) -> i4
    %2 = comb.extract %ram from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_tl_state_source"} : (i8) -> i4
    %full = seq.firreg %6 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %3 = comb.and bin %7, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %4 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %5 = comb.icmp bin eq %3, %4 : i1
    %6 = comb.mux bin %5, %full, %3 : i1
    %7 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %8 = comb.mux bin %3, %0, %ram : i8
    hw.output %7, %full, %1, %2 : i1, i1, i4, i4
  }
  hw.module private @AXI4UserYanker_1(in %clock : !seq.clock, in %reset : i1, out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i32, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i4, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i4, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i32, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i4, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i4, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i32, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i32, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_last : i1) {
    %c-1_i4 = hw.constant -1 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c-4_i4 = hw.constant -4 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c-8_i4 = hw.constant -8 : i4
    %c7_i4 = hw.constant 7 : i4
    %c6_i4 = hw.constant 6 : i4
    %c5_i4 = hw.constant 5 : i4
    %c4_i4 = hw.constant 4 : i4
    %c3_i4 = hw.constant 3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c1_i4 = hw.constant 1 : i4
    %c0_i4 = hw.constant 0 : i4
    %true = hw.constant true
    %0 = seq.from_clock %clock
    %QueueCompatibility.io_enq_ready, %QueueCompatibility.io_deq_valid, %QueueCompatibility.io_deq_bits_tl_state_size, %QueueCompatibility.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %49: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %47: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility.io_deq_valid"}
    %QueueCompatibility_1.io_enq_ready, %QueueCompatibility_1.io_deq_valid, %QueueCompatibility_1.io_deq_bits_tl_state_size, %QueueCompatibility_1.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_1" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %51: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %50: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_1.io_deq_valid"}
    %QueueCompatibility_2.io_enq_ready, %QueueCompatibility_2.io_deq_valid, %QueueCompatibility_2.io_deq_bits_tl_state_size, %QueueCompatibility_2.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_2" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %53: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %52: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_2.io_deq_valid"}
    %QueueCompatibility_3.io_enq_ready, %QueueCompatibility_3.io_deq_valid, %QueueCompatibility_3.io_deq_bits_tl_state_size, %QueueCompatibility_3.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_3" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %55: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %54: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_3.io_deq_valid"}
    %QueueCompatibility_4.io_enq_ready, %QueueCompatibility_4.io_deq_valid, %QueueCompatibility_4.io_deq_bits_tl_state_size, %QueueCompatibility_4.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_4" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %57: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %56: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_4.io_deq_valid"}
    %QueueCompatibility_5.io_enq_ready, %QueueCompatibility_5.io_deq_valid, %QueueCompatibility_5.io_deq_bits_tl_state_size, %QueueCompatibility_5.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_5" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %59: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %58: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_5.io_deq_valid"}
    %QueueCompatibility_6.io_enq_ready, %QueueCompatibility_6.io_deq_valid, %QueueCompatibility_6.io_deq_bits_tl_state_size, %QueueCompatibility_6.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_6" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %61: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %60: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_6.io_deq_valid"}
    %QueueCompatibility_7.io_enq_ready, %QueueCompatibility_7.io_deq_valid, %QueueCompatibility_7.io_deq_bits_tl_state_size, %QueueCompatibility_7.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_7" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %63: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %62: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_7.io_deq_valid"}
    %QueueCompatibility_8.io_enq_ready, %QueueCompatibility_8.io_deq_valid, %QueueCompatibility_8.io_deq_bits_tl_state_size, %QueueCompatibility_8.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_8" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %65: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %64: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_8.io_deq_valid"}
    %QueueCompatibility_9.io_enq_ready, %QueueCompatibility_9.io_deq_valid, %QueueCompatibility_9.io_deq_bits_tl_state_size, %QueueCompatibility_9.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_9" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %67: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %66: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_9.io_deq_valid"}
    %QueueCompatibility_10.io_enq_ready, %QueueCompatibility_10.io_deq_valid, %QueueCompatibility_10.io_deq_bits_tl_state_size, %QueueCompatibility_10.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_10" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %69: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %68: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_10.io_deq_valid"}
    %QueueCompatibility_11.io_enq_ready, %QueueCompatibility_11.io_deq_valid, %QueueCompatibility_11.io_deq_bits_tl_state_size, %QueueCompatibility_11.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_11" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %71: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %70: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_11.io_deq_valid"}
    %QueueCompatibility_12.io_enq_ready, %QueueCompatibility_12.io_deq_valid, %QueueCompatibility_12.io_deq_bits_tl_state_size, %QueueCompatibility_12.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_12" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %73: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %72: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_12.io_deq_valid"}
    %QueueCompatibility_13.io_enq_ready, %QueueCompatibility_13.io_deq_valid, %QueueCompatibility_13.io_deq_bits_tl_state_size, %QueueCompatibility_13.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_13" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %75: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %74: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_13.io_deq_valid"}
    %QueueCompatibility_14.io_enq_ready, %QueueCompatibility_14.io_deq_valid, %QueueCompatibility_14.io_deq_bits_tl_state_size, %QueueCompatibility_14.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_14" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %77: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %76: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_14.io_deq_valid"}
    %QueueCompatibility_15.io_enq_ready, %QueueCompatibility_15.io_deq_valid, %QueueCompatibility_15.io_deq_bits_tl_state_size, %QueueCompatibility_15.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_15" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %79: i1, io_enq_bits_tl_state_size: %auto_in_ar_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_ar_bits_echo_tl_state_source: i4, io_deq_ready: %78: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_15.io_deq_valid"}
    %QueueCompatibility_16.io_enq_ready, %QueueCompatibility_16.io_deq_valid, %QueueCompatibility_16.io_deq_bits_tl_state_size, %QueueCompatibility_16.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_16" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %128: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %126: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_16.io_deq_valid"}
    %QueueCompatibility_17.io_enq_ready, %QueueCompatibility_17.io_deq_valid, %QueueCompatibility_17.io_deq_bits_tl_state_size, %QueueCompatibility_17.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_17" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %130: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %129: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_17.io_deq_valid"}
    %QueueCompatibility_18.io_enq_ready, %QueueCompatibility_18.io_deq_valid, %QueueCompatibility_18.io_deq_bits_tl_state_size, %QueueCompatibility_18.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_18" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %132: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %131: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_18.io_deq_valid"}
    %QueueCompatibility_19.io_enq_ready, %QueueCompatibility_19.io_deq_valid, %QueueCompatibility_19.io_deq_bits_tl_state_size, %QueueCompatibility_19.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_19" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %134: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %133: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_19.io_deq_valid"}
    %QueueCompatibility_20.io_enq_ready, %QueueCompatibility_20.io_deq_valid, %QueueCompatibility_20.io_deq_bits_tl_state_size, %QueueCompatibility_20.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_20" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %136: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %135: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_20.io_deq_valid"}
    %QueueCompatibility_21.io_enq_ready, %QueueCompatibility_21.io_deq_valid, %QueueCompatibility_21.io_deq_bits_tl_state_size, %QueueCompatibility_21.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_21" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %138: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %137: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_21.io_deq_valid"}
    %QueueCompatibility_22.io_enq_ready, %QueueCompatibility_22.io_deq_valid, %QueueCompatibility_22.io_deq_bits_tl_state_size, %QueueCompatibility_22.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_22" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %140: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %139: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_22.io_deq_valid"}
    %QueueCompatibility_23.io_enq_ready, %QueueCompatibility_23.io_deq_valid, %QueueCompatibility_23.io_deq_bits_tl_state_size, %QueueCompatibility_23.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_23" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %142: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %141: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_23.io_deq_valid"}
    %QueueCompatibility_24.io_enq_ready, %QueueCompatibility_24.io_deq_valid, %QueueCompatibility_24.io_deq_bits_tl_state_size, %QueueCompatibility_24.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_24" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %144: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %143: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_24.io_deq_valid"}
    %QueueCompatibility_25.io_enq_ready, %QueueCompatibility_25.io_deq_valid, %QueueCompatibility_25.io_deq_bits_tl_state_size, %QueueCompatibility_25.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_25" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %146: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %145: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_25.io_deq_valid"}
    %QueueCompatibility_26.io_enq_ready, %QueueCompatibility_26.io_deq_valid, %QueueCompatibility_26.io_deq_bits_tl_state_size, %QueueCompatibility_26.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_26" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %148: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %147: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_26.io_deq_valid"}
    %QueueCompatibility_27.io_enq_ready, %QueueCompatibility_27.io_deq_valid, %QueueCompatibility_27.io_deq_bits_tl_state_size, %QueueCompatibility_27.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_27" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %150: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %149: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_27.io_deq_valid"}
    %QueueCompatibility_28.io_enq_ready, %QueueCompatibility_28.io_deq_valid, %QueueCompatibility_28.io_deq_bits_tl_state_size, %QueueCompatibility_28.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_28" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %152: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %151: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_28.io_deq_valid"}
    %QueueCompatibility_29.io_enq_ready, %QueueCompatibility_29.io_deq_valid, %QueueCompatibility_29.io_deq_bits_tl_state_size, %QueueCompatibility_29.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_29" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %154: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %153: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_29.io_deq_valid"}
    %QueueCompatibility_30.io_enq_ready, %QueueCompatibility_30.io_deq_valid, %QueueCompatibility_30.io_deq_bits_tl_state_size, %QueueCompatibility_30.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_30" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %156: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %155: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_30.io_deq_valid"}
    %QueueCompatibility_31.io_enq_ready, %QueueCompatibility_31.io_deq_valid, %QueueCompatibility_31.io_deq_bits_tl_state_size, %QueueCompatibility_31.io_deq_bits_tl_state_source = hw.instance "QueueCompatibility_31" @QueueCompatibility_6(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %158: i1, io_enq_bits_tl_state_size: %auto_in_aw_bits_echo_tl_state_size: i4, io_enq_bits_tl_state_source: %auto_in_aw_bits_echo_tl_state_source: i4, io_deq_ready: %157: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_tl_state_size: i4, io_deq_bits_tl_state_source: i4) {sv.namehint = "QueueCompatibility_31.io_deq_valid"}
    %1 = hw.array_create %QueueCompatibility_15.io_enq_ready, %QueueCompatibility_14.io_enq_ready, %QueueCompatibility_13.io_enq_ready, %QueueCompatibility_12.io_enq_ready, %QueueCompatibility_11.io_enq_ready, %QueueCompatibility_10.io_enq_ready, %QueueCompatibility_9.io_enq_ready, %QueueCompatibility_8.io_enq_ready, %QueueCompatibility_7.io_enq_ready, %QueueCompatibility_6.io_enq_ready, %QueueCompatibility_5.io_enq_ready, %QueueCompatibility_4.io_enq_ready, %QueueCompatibility_3.io_enq_ready, %QueueCompatibility_2.io_enq_ready, %QueueCompatibility_1.io_enq_ready, %QueueCompatibility.io_enq_ready : i1
    %2 = hw.array_get %1[%auto_in_ar_bits_id] : !hw.array<16xi1>, i4
    %3 = comb.and bin %auto_out_ar_ready, %2 {sv.namehint = "bundleIn_0_ar_ready"} : i1
    %4 = comb.and bin %auto_in_ar_valid, %2 {sv.namehint = "bundleOut_0_ar_valid"} : i1
    %5 = comb.xor bin %auto_out_r_valid, %true : i1
    %6 = hw.array_create %QueueCompatibility_15.io_deq_valid, %QueueCompatibility_14.io_deq_valid, %QueueCompatibility_13.io_deq_valid, %QueueCompatibility_12.io_deq_valid, %QueueCompatibility_11.io_deq_valid, %QueueCompatibility_10.io_deq_valid, %QueueCompatibility_9.io_deq_valid, %QueueCompatibility_8.io_deq_valid, %QueueCompatibility_7.io_deq_valid, %QueueCompatibility_6.io_deq_valid, %QueueCompatibility_5.io_deq_valid, %QueueCompatibility_4.io_deq_valid, %QueueCompatibility_3.io_deq_valid, %QueueCompatibility_2.io_deq_valid, %QueueCompatibility_1.io_deq_valid, %QueueCompatibility.io_deq_valid : i1
    %7 = hw.array_get %6[%auto_out_r_bits_id] : !hw.array<16xi1>, i4
    %8 = comb.or bin %5, %7, %reset : i1
    %9 = comb.xor bin %8, %true : i1
    %10 = hw.array_create %QueueCompatibility_15.io_deq_bits_tl_state_size, %QueueCompatibility_14.io_deq_bits_tl_state_size, %QueueCompatibility_13.io_deq_bits_tl_state_size, %QueueCompatibility_12.io_deq_bits_tl_state_size, %QueueCompatibility_11.io_deq_bits_tl_state_size, %QueueCompatibility_10.io_deq_bits_tl_state_size, %QueueCompatibility_9.io_deq_bits_tl_state_size, %QueueCompatibility_8.io_deq_bits_tl_state_size, %QueueCompatibility_7.io_deq_bits_tl_state_size, %QueueCompatibility_6.io_deq_bits_tl_state_size, %QueueCompatibility_5.io_deq_bits_tl_state_size, %QueueCompatibility_4.io_deq_bits_tl_state_size, %QueueCompatibility_3.io_deq_bits_tl_state_size, %QueueCompatibility_2.io_deq_bits_tl_state_size, %QueueCompatibility_1.io_deq_bits_tl_state_size, %QueueCompatibility.io_deq_bits_tl_state_size : i4
    %11 = hw.array_get %10[%auto_out_r_bits_id] {sv.namehint = "bundleIn_0_r_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %12 = hw.array_create %QueueCompatibility_15.io_deq_bits_tl_state_source, %QueueCompatibility_14.io_deq_bits_tl_state_source, %QueueCompatibility_13.io_deq_bits_tl_state_source, %QueueCompatibility_12.io_deq_bits_tl_state_source, %QueueCompatibility_11.io_deq_bits_tl_state_source, %QueueCompatibility_10.io_deq_bits_tl_state_source, %QueueCompatibility_9.io_deq_bits_tl_state_source, %QueueCompatibility_8.io_deq_bits_tl_state_source, %QueueCompatibility_7.io_deq_bits_tl_state_source, %QueueCompatibility_6.io_deq_bits_tl_state_source, %QueueCompatibility_5.io_deq_bits_tl_state_source, %QueueCompatibility_4.io_deq_bits_tl_state_source, %QueueCompatibility_3.io_deq_bits_tl_state_source, %QueueCompatibility_2.io_deq_bits_tl_state_source, %QueueCompatibility_1.io_deq_bits_tl_state_source, %QueueCompatibility.io_deq_bits_tl_state_source : i4
    %13 = hw.array_get %12[%auto_out_r_bits_id] {sv.namehint = "bundleIn_0_r_bits_echo_tl_state_source"} : !hw.array<16xi4>, i4
    %14 = comb.icmp eq %auto_in_ar_bits_id, %c0_i4 {sv.namehint = "arsel_0"} : i4
    %15 = comb.icmp eq %auto_in_ar_bits_id, %c1_i4 {sv.namehint = "arsel_1"} : i4
    %16 = comb.icmp eq %auto_in_ar_bits_id, %c2_i4 {sv.namehint = "arsel_2"} : i4
    %17 = comb.icmp eq %auto_in_ar_bits_id, %c3_i4 {sv.namehint = "arsel_3"} : i4
    %18 = comb.icmp eq %auto_in_ar_bits_id, %c4_i4 {sv.namehint = "arsel_4"} : i4
    %19 = comb.icmp eq %auto_in_ar_bits_id, %c5_i4 {sv.namehint = "arsel_5"} : i4
    %20 = comb.icmp eq %auto_in_ar_bits_id, %c6_i4 {sv.namehint = "arsel_6"} : i4
    %21 = comb.icmp eq %auto_in_ar_bits_id, %c7_i4 {sv.namehint = "arsel_7"} : i4
    %22 = comb.icmp eq %auto_in_ar_bits_id, %c-8_i4 {sv.namehint = "arsel_8"} : i4
    %23 = comb.icmp eq %auto_in_ar_bits_id, %c-7_i4 {sv.namehint = "arsel_9"} : i4
    %24 = comb.icmp eq %auto_in_ar_bits_id, %c-6_i4 {sv.namehint = "arsel_10"} : i4
    %25 = comb.icmp eq %auto_in_ar_bits_id, %c-5_i4 {sv.namehint = "arsel_11"} : i4
    %26 = comb.icmp eq %auto_in_ar_bits_id, %c-4_i4 {sv.namehint = "arsel_12"} : i4
    %27 = comb.icmp eq %auto_in_ar_bits_id, %c-3_i4 {sv.namehint = "arsel_13"} : i4
    %28 = comb.icmp eq %auto_in_ar_bits_id, %c-2_i4 {sv.namehint = "arsel_14"} : i4
    %29 = comb.icmp eq %auto_in_ar_bits_id, %c-1_i4 {sv.namehint = "arsel_15"} : i4
    %30 = comb.icmp eq %auto_out_r_bits_id, %c0_i4 {sv.namehint = "rsel_0"} : i4
    %31 = comb.icmp eq %auto_out_r_bits_id, %c1_i4 {sv.namehint = "rsel_1"} : i4
    %32 = comb.icmp eq %auto_out_r_bits_id, %c2_i4 {sv.namehint = "rsel_2"} : i4
    %33 = comb.icmp eq %auto_out_r_bits_id, %c3_i4 {sv.namehint = "rsel_3"} : i4
    %34 = comb.icmp eq %auto_out_r_bits_id, %c4_i4 {sv.namehint = "rsel_4"} : i4
    %35 = comb.icmp eq %auto_out_r_bits_id, %c5_i4 {sv.namehint = "rsel_5"} : i4
    %36 = comb.icmp eq %auto_out_r_bits_id, %c6_i4 {sv.namehint = "rsel_6"} : i4
    %37 = comb.icmp eq %auto_out_r_bits_id, %c7_i4 {sv.namehint = "rsel_7"} : i4
    %38 = comb.icmp eq %auto_out_r_bits_id, %c-8_i4 {sv.namehint = "rsel_8"} : i4
    %39 = comb.icmp eq %auto_out_r_bits_id, %c-7_i4 {sv.namehint = "rsel_9"} : i4
    %40 = comb.icmp eq %auto_out_r_bits_id, %c-6_i4 {sv.namehint = "rsel_10"} : i4
    %41 = comb.icmp eq %auto_out_r_bits_id, %c-5_i4 {sv.namehint = "rsel_11"} : i4
    %42 = comb.icmp eq %auto_out_r_bits_id, %c-4_i4 {sv.namehint = "rsel_12"} : i4
    %43 = comb.icmp eq %auto_out_r_bits_id, %c-3_i4 {sv.namehint = "rsel_13"} : i4
    %44 = comb.icmp eq %auto_out_r_bits_id, %c-2_i4 {sv.namehint = "rsel_14"} : i4
    %45 = comb.icmp eq %auto_out_r_bits_id, %c-1_i4 {sv.namehint = "rsel_15"} : i4
    %46 = comb.and bin %auto_out_r_valid, %auto_in_r_ready : i1
    %47 = comb.and bin %46, %30, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility.io_deq_ready"} : i1
    %48 = comb.and bin %auto_in_ar_valid, %auto_out_ar_ready : i1
    %49 = comb.and bin %48, %14 {sv.namehint = "QueueCompatibility.io_enq_valid"} : i1
    %50 = comb.and bin %46, %31, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_1.io_deq_ready"} : i1
    %51 = comb.and bin %48, %15 {sv.namehint = "QueueCompatibility_1.io_enq_valid"} : i1
    %52 = comb.and bin %46, %32, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_2.io_deq_ready"} : i1
    %53 = comb.and bin %48, %16 {sv.namehint = "QueueCompatibility_2.io_enq_valid"} : i1
    %54 = comb.and bin %46, %33, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_3.io_deq_ready"} : i1
    %55 = comb.and bin %48, %17 {sv.namehint = "QueueCompatibility_3.io_enq_valid"} : i1
    %56 = comb.and bin %46, %34, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_4.io_deq_ready"} : i1
    %57 = comb.and bin %48, %18 {sv.namehint = "QueueCompatibility_4.io_enq_valid"} : i1
    %58 = comb.and bin %46, %35, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_5.io_deq_ready"} : i1
    %59 = comb.and bin %48, %19 {sv.namehint = "QueueCompatibility_5.io_enq_valid"} : i1
    %60 = comb.and bin %46, %36, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_6.io_deq_ready"} : i1
    %61 = comb.and bin %48, %20 {sv.namehint = "QueueCompatibility_6.io_enq_valid"} : i1
    %62 = comb.and bin %46, %37, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_7.io_deq_ready"} : i1
    %63 = comb.and bin %48, %21 {sv.namehint = "QueueCompatibility_7.io_enq_valid"} : i1
    %64 = comb.and bin %46, %38, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_8.io_deq_ready"} : i1
    %65 = comb.and bin %48, %22 {sv.namehint = "QueueCompatibility_8.io_enq_valid"} : i1
    %66 = comb.and bin %46, %39, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_9.io_deq_ready"} : i1
    %67 = comb.and bin %48, %23 {sv.namehint = "QueueCompatibility_9.io_enq_valid"} : i1
    %68 = comb.and bin %46, %40, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_10.io_deq_ready"} : i1
    %69 = comb.and bin %48, %24 {sv.namehint = "QueueCompatibility_10.io_enq_valid"} : i1
    %70 = comb.and bin %46, %41, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_11.io_deq_ready"} : i1
    %71 = comb.and bin %48, %25 {sv.namehint = "QueueCompatibility_11.io_enq_valid"} : i1
    %72 = comb.and bin %46, %42, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_12.io_deq_ready"} : i1
    %73 = comb.and bin %48, %26 {sv.namehint = "QueueCompatibility_12.io_enq_valid"} : i1
    %74 = comb.and bin %46, %43, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_13.io_deq_ready"} : i1
    %75 = comb.and bin %48, %27 {sv.namehint = "QueueCompatibility_13.io_enq_valid"} : i1
    %76 = comb.and bin %46, %44, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_14.io_deq_ready"} : i1
    %77 = comb.and bin %48, %28 {sv.namehint = "QueueCompatibility_14.io_enq_valid"} : i1
    %78 = comb.and bin %46, %45, %auto_out_r_bits_last {sv.namehint = "QueueCompatibility_15.io_deq_ready"} : i1
    %79 = comb.and bin %48, %29 {sv.namehint = "QueueCompatibility_15.io_enq_valid"} : i1
    %80 = hw.array_create %QueueCompatibility_31.io_enq_ready, %QueueCompatibility_30.io_enq_ready, %QueueCompatibility_29.io_enq_ready, %QueueCompatibility_28.io_enq_ready, %QueueCompatibility_27.io_enq_ready, %QueueCompatibility_26.io_enq_ready, %QueueCompatibility_25.io_enq_ready, %QueueCompatibility_24.io_enq_ready, %QueueCompatibility_23.io_enq_ready, %QueueCompatibility_22.io_enq_ready, %QueueCompatibility_21.io_enq_ready, %QueueCompatibility_20.io_enq_ready, %QueueCompatibility_19.io_enq_ready, %QueueCompatibility_18.io_enq_ready, %QueueCompatibility_17.io_enq_ready, %QueueCompatibility_16.io_enq_ready : i1
    %81 = hw.array_get %80[%auto_in_aw_bits_id] : !hw.array<16xi1>, i4
    %82 = comb.and bin %auto_out_aw_ready, %81 {sv.namehint = "bundleIn_0_aw_ready"} : i1
    %83 = comb.and bin %auto_in_aw_valid, %81 {sv.namehint = "bundleOut_0_aw_valid"} : i1
    %84 = comb.xor bin %auto_out_b_valid, %true : i1
    %85 = hw.array_create %QueueCompatibility_31.io_deq_valid, %QueueCompatibility_30.io_deq_valid, %QueueCompatibility_29.io_deq_valid, %QueueCompatibility_28.io_deq_valid, %QueueCompatibility_27.io_deq_valid, %QueueCompatibility_26.io_deq_valid, %QueueCompatibility_25.io_deq_valid, %QueueCompatibility_24.io_deq_valid, %QueueCompatibility_23.io_deq_valid, %QueueCompatibility_22.io_deq_valid, %QueueCompatibility_21.io_deq_valid, %QueueCompatibility_20.io_deq_valid, %QueueCompatibility_19.io_deq_valid, %QueueCompatibility_18.io_deq_valid, %QueueCompatibility_17.io_deq_valid, %QueueCompatibility_16.io_deq_valid : i1
    %86 = hw.array_get %85[%auto_out_b_bits_id] : !hw.array<16xi1>, i4
    %87 = comb.or bin %84, %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %159 = comb.and bin %STOP_COND_, %9 : i1
        sv.if %159 {
          sv.fatal 1
        }
        %160 = comb.and bin %STOP_COND_, %88 : i1
        sv.if %160 {
          sv.fatal 1
        }
      }
    }
    %89 = hw.array_create %QueueCompatibility_31.io_deq_bits_tl_state_size, %QueueCompatibility_30.io_deq_bits_tl_state_size, %QueueCompatibility_29.io_deq_bits_tl_state_size, %QueueCompatibility_28.io_deq_bits_tl_state_size, %QueueCompatibility_27.io_deq_bits_tl_state_size, %QueueCompatibility_26.io_deq_bits_tl_state_size, %QueueCompatibility_25.io_deq_bits_tl_state_size, %QueueCompatibility_24.io_deq_bits_tl_state_size, %QueueCompatibility_23.io_deq_bits_tl_state_size, %QueueCompatibility_22.io_deq_bits_tl_state_size, %QueueCompatibility_21.io_deq_bits_tl_state_size, %QueueCompatibility_20.io_deq_bits_tl_state_size, %QueueCompatibility_19.io_deq_bits_tl_state_size, %QueueCompatibility_18.io_deq_bits_tl_state_size, %QueueCompatibility_17.io_deq_bits_tl_state_size, %QueueCompatibility_16.io_deq_bits_tl_state_size : i4
    %90 = hw.array_get %89[%auto_out_b_bits_id] {sv.namehint = "bundleIn_0_b_bits_echo_tl_state_size"} : !hw.array<16xi4>, i4
    %91 = hw.array_create %QueueCompatibility_31.io_deq_bits_tl_state_source, %QueueCompatibility_30.io_deq_bits_tl_state_source, %QueueCompatibility_29.io_deq_bits_tl_state_source, %QueueCompatibility_28.io_deq_bits_tl_state_source, %QueueCompatibility_27.io_deq_bits_tl_state_source, %QueueCompatibility_26.io_deq_bits_tl_state_source, %QueueCompatibility_25.io_deq_bits_tl_state_source, %QueueCompatibility_24.io_deq_bits_tl_state_source, %QueueCompatibility_23.io_deq_bits_tl_state_source, %QueueCompatibility_22.io_deq_bits_tl_state_source, %QueueCompatibility_21.io_deq_bits_tl_state_source, %QueueCompatibility_20.io_deq_bits_tl_state_source, %QueueCompatibility_19.io_deq_bits_tl_state_source, %QueueCompatibility_18.io_deq_bits_tl_state_source, %QueueCompatibility_17.io_deq_bits_tl_state_source, %QueueCompatibility_16.io_deq_bits_tl_state_source : i4
    %92 = hw.array_get %91[%auto_out_b_bits_id] {sv.namehint = "bundleIn_0_b_bits_echo_tl_state_source"} : !hw.array<16xi4>, i4
    %93 = comb.icmp eq %auto_in_aw_bits_id, %c0_i4 {sv.namehint = "awsel_0"} : i4
    %94 = comb.icmp eq %auto_in_aw_bits_id, %c1_i4 {sv.namehint = "awsel_1"} : i4
    %95 = comb.icmp eq %auto_in_aw_bits_id, %c2_i4 {sv.namehint = "awsel_2"} : i4
    %96 = comb.icmp eq %auto_in_aw_bits_id, %c3_i4 {sv.namehint = "awsel_3"} : i4
    %97 = comb.icmp eq %auto_in_aw_bits_id, %c4_i4 {sv.namehint = "awsel_4"} : i4
    %98 = comb.icmp eq %auto_in_aw_bits_id, %c5_i4 {sv.namehint = "awsel_5"} : i4
    %99 = comb.icmp eq %auto_in_aw_bits_id, %c6_i4 {sv.namehint = "awsel_6"} : i4
    %100 = comb.icmp eq %auto_in_aw_bits_id, %c7_i4 {sv.namehint = "awsel_7"} : i4
    %101 = comb.icmp eq %auto_in_aw_bits_id, %c-8_i4 {sv.namehint = "awsel_8"} : i4
    %102 = comb.icmp eq %auto_in_aw_bits_id, %c-7_i4 {sv.namehint = "awsel_9"} : i4
    %103 = comb.icmp eq %auto_in_aw_bits_id, %c-6_i4 {sv.namehint = "awsel_10"} : i4
    %104 = comb.icmp eq %auto_in_aw_bits_id, %c-5_i4 {sv.namehint = "awsel_11"} : i4
    %105 = comb.icmp eq %auto_in_aw_bits_id, %c-4_i4 {sv.namehint = "awsel_12"} : i4
    %106 = comb.icmp eq %auto_in_aw_bits_id, %c-3_i4 {sv.namehint = "awsel_13"} : i4
    %107 = comb.icmp eq %auto_in_aw_bits_id, %c-2_i4 {sv.namehint = "awsel_14"} : i4
    %108 = comb.icmp eq %auto_in_aw_bits_id, %c-1_i4 {sv.namehint = "awsel_15"} : i4
    %109 = comb.icmp eq %auto_out_b_bits_id, %c0_i4 {sv.namehint = "bsel_0"} : i4
    %110 = comb.icmp eq %auto_out_b_bits_id, %c1_i4 {sv.namehint = "bsel_1"} : i4
    %111 = comb.icmp eq %auto_out_b_bits_id, %c2_i4 {sv.namehint = "bsel_2"} : i4
    %112 = comb.icmp eq %auto_out_b_bits_id, %c3_i4 {sv.namehint = "bsel_3"} : i4
    %113 = comb.icmp eq %auto_out_b_bits_id, %c4_i4 {sv.namehint = "bsel_4"} : i4
    %114 = comb.icmp eq %auto_out_b_bits_id, %c5_i4 {sv.namehint = "bsel_5"} : i4
    %115 = comb.icmp eq %auto_out_b_bits_id, %c6_i4 {sv.namehint = "bsel_6"} : i4
    %116 = comb.icmp eq %auto_out_b_bits_id, %c7_i4 {sv.namehint = "bsel_7"} : i4
    %117 = comb.icmp eq %auto_out_b_bits_id, %c-8_i4 {sv.namehint = "bsel_8"} : i4
    %118 = comb.icmp eq %auto_out_b_bits_id, %c-7_i4 {sv.namehint = "bsel_9"} : i4
    %119 = comb.icmp eq %auto_out_b_bits_id, %c-6_i4 {sv.namehint = "bsel_10"} : i4
    %120 = comb.icmp eq %auto_out_b_bits_id, %c-5_i4 {sv.namehint = "bsel_11"} : i4
    %121 = comb.icmp eq %auto_out_b_bits_id, %c-4_i4 {sv.namehint = "bsel_12"} : i4
    %122 = comb.icmp eq %auto_out_b_bits_id, %c-3_i4 {sv.namehint = "bsel_13"} : i4
    %123 = comb.icmp eq %auto_out_b_bits_id, %c-2_i4 {sv.namehint = "bsel_14"} : i4
    %124 = comb.icmp eq %auto_out_b_bits_id, %c-1_i4 {sv.namehint = "bsel_15"} : i4
    %125 = comb.and bin %auto_out_b_valid, %auto_in_b_ready : i1
    %126 = comb.and bin %125, %109 {sv.namehint = "QueueCompatibility_16.io_deq_ready"} : i1
    %127 = comb.and bin %auto_in_aw_valid, %auto_out_aw_ready : i1
    %128 = comb.and bin %127, %93 {sv.namehint = "QueueCompatibility_16.io_enq_valid"} : i1
    %129 = comb.and bin %125, %110 {sv.namehint = "QueueCompatibility_17.io_deq_ready"} : i1
    %130 = comb.and bin %127, %94 {sv.namehint = "QueueCompatibility_17.io_enq_valid"} : i1
    %131 = comb.and bin %125, %111 {sv.namehint = "QueueCompatibility_18.io_deq_ready"} : i1
    %132 = comb.and bin %127, %95 {sv.namehint = "QueueCompatibility_18.io_enq_valid"} : i1
    %133 = comb.and bin %125, %112 {sv.namehint = "QueueCompatibility_19.io_deq_ready"} : i1
    %134 = comb.and bin %127, %96 {sv.namehint = "QueueCompatibility_19.io_enq_valid"} : i1
    %135 = comb.and bin %125, %113 {sv.namehint = "QueueCompatibility_20.io_deq_ready"} : i1
    %136 = comb.and bin %127, %97 {sv.namehint = "QueueCompatibility_20.io_enq_valid"} : i1
    %137 = comb.and bin %125, %114 {sv.namehint = "QueueCompatibility_21.io_deq_ready"} : i1
    %138 = comb.and bin %127, %98 {sv.namehint = "QueueCompatibility_21.io_enq_valid"} : i1
    %139 = comb.and bin %125, %115 {sv.namehint = "QueueCompatibility_22.io_deq_ready"} : i1
    %140 = comb.and bin %127, %99 {sv.namehint = "QueueCompatibility_22.io_enq_valid"} : i1
    %141 = comb.and bin %125, %116 {sv.namehint = "QueueCompatibility_23.io_deq_ready"} : i1
    %142 = comb.and bin %127, %100 {sv.namehint = "QueueCompatibility_23.io_enq_valid"} : i1
    %143 = comb.and bin %125, %117 {sv.namehint = "QueueCompatibility_24.io_deq_ready"} : i1
    %144 = comb.and bin %127, %101 {sv.namehint = "QueueCompatibility_24.io_enq_valid"} : i1
    %145 = comb.and bin %125, %118 {sv.namehint = "QueueCompatibility_25.io_deq_ready"} : i1
    %146 = comb.and bin %127, %102 {sv.namehint = "QueueCompatibility_25.io_enq_valid"} : i1
    %147 = comb.and bin %125, %119 {sv.namehint = "QueueCompatibility_26.io_deq_ready"} : i1
    %148 = comb.and bin %127, %103 {sv.namehint = "QueueCompatibility_26.io_enq_valid"} : i1
    %149 = comb.and bin %125, %120 {sv.namehint = "QueueCompatibility_27.io_deq_ready"} : i1
    %150 = comb.and bin %127, %104 {sv.namehint = "QueueCompatibility_27.io_enq_valid"} : i1
    %151 = comb.and bin %125, %121 {sv.namehint = "QueueCompatibility_28.io_deq_ready"} : i1
    %152 = comb.and bin %127, %105 {sv.namehint = "QueueCompatibility_28.io_enq_valid"} : i1
    %153 = comb.and bin %125, %122 {sv.namehint = "QueueCompatibility_29.io_deq_ready"} : i1
    %154 = comb.and bin %127, %106 {sv.namehint = "QueueCompatibility_29.io_enq_valid"} : i1
    %155 = comb.and bin %125, %123 {sv.namehint = "QueueCompatibility_30.io_deq_ready"} : i1
    %156 = comb.and bin %127, %107 {sv.namehint = "QueueCompatibility_30.io_enq_valid"} : i1
    %157 = comb.and bin %125, %124 {sv.namehint = "QueueCompatibility_31.io_deq_ready"} : i1
    %158 = comb.and bin %127, %108 {sv.namehint = "QueueCompatibility_31.io_enq_valid"} : i1
    hw.output %82, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %90, %92, %3, %auto_out_r_valid, %auto_out_r_bits_id, %auto_out_r_bits_data, %auto_out_r_bits_resp, %11, %13, %auto_out_r_bits_last, %83, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %4, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_r_ready : i1, i1, i1, i4, i2, i4, i4, i1, i1, i4, i64, i2, i4, i4, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1
  }
  hw.module private @AXI4IdIndexer_1(out auto_in_aw_ready : i1, in %auto_in_aw_valid : i1, in %auto_in_aw_bits_id : i4, in %auto_in_aw_bits_addr : i32, in %auto_in_aw_bits_len : i8, in %auto_in_aw_bits_size : i3, in %auto_in_aw_bits_burst : i2, in %auto_in_aw_bits_lock : i1, in %auto_in_aw_bits_cache : i4, in %auto_in_aw_bits_prot : i3, in %auto_in_aw_bits_qos : i4, in %auto_in_aw_bits_echo_tl_state_size : i4, in %auto_in_aw_bits_echo_tl_state_source : i4, out auto_in_w_ready : i1, in %auto_in_w_valid : i1, in %auto_in_w_bits_data : i64, in %auto_in_w_bits_strb : i8, in %auto_in_w_bits_last : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_id : i4, out auto_in_b_bits_resp : i2, out auto_in_b_bits_echo_tl_state_size : i4, out auto_in_b_bits_echo_tl_state_source : i4, out auto_in_ar_ready : i1, in %auto_in_ar_valid : i1, in %auto_in_ar_bits_id : i4, in %auto_in_ar_bits_addr : i32, in %auto_in_ar_bits_len : i8, in %auto_in_ar_bits_size : i3, in %auto_in_ar_bits_burst : i2, in %auto_in_ar_bits_lock : i1, in %auto_in_ar_bits_cache : i4, in %auto_in_ar_bits_prot : i3, in %auto_in_ar_bits_qos : i4, in %auto_in_ar_bits_echo_tl_state_size : i4, in %auto_in_ar_bits_echo_tl_state_source : i4, in %auto_in_r_ready : i1, out auto_in_r_valid : i1, out auto_in_r_bits_id : i4, out auto_in_r_bits_data : i64, out auto_in_r_bits_resp : i2, out auto_in_r_bits_echo_tl_state_size : i4, out auto_in_r_bits_echo_tl_state_source : i4, out auto_in_r_bits_last : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i32, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i4, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i32, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i4, in %auto_out_r_bits_last : i1) {
    hw.output %auto_out_aw_ready, %auto_out_w_ready, %auto_out_b_valid, %auto_out_b_bits_id, %auto_out_b_bits_resp, %auto_out_b_bits_echo_tl_state_size, %auto_out_b_bits_echo_tl_state_source, %auto_out_ar_ready, %auto_out_r_valid, %auto_out_r_bits_id, %auto_out_r_bits_data, %auto_out_r_bits_resp, %auto_out_r_bits_echo_tl_state_size, %auto_out_r_bits_echo_tl_state_source, %auto_out_r_bits_last, %auto_in_aw_valid, %auto_in_aw_bits_id, %auto_in_aw_bits_addr, %auto_in_aw_bits_len, %auto_in_aw_bits_size, %auto_in_aw_bits_burst, %auto_in_aw_bits_lock, %auto_in_aw_bits_cache, %auto_in_aw_bits_prot, %auto_in_aw_bits_qos, %auto_in_aw_bits_echo_tl_state_size, %auto_in_aw_bits_echo_tl_state_source, %auto_in_w_valid, %auto_in_w_bits_data, %auto_in_w_bits_strb, %auto_in_w_bits_last, %auto_in_b_ready, %auto_in_ar_valid, %auto_in_ar_bits_id, %auto_in_ar_bits_addr, %auto_in_ar_bits_len, %auto_in_ar_bits_size, %auto_in_ar_bits_burst, %auto_in_ar_bits_lock, %auto_in_ar_bits_cache, %auto_in_ar_bits_prot, %auto_in_ar_bits_qos, %auto_in_ar_bits_echo_tl_state_size, %auto_in_ar_bits_echo_tl_state_source, %auto_in_r_ready : i1, i1, i1, i4, i2, i4, i4, i1, i1, i4, i64, i2, i4, i4, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1
  }
  hw.module private @Queue_16(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_id : i4, in %io_enq_bits_addr : i32, in %io_enq_bits_len : i8, in %io_enq_bits_size : i3, in %io_enq_bits_cache : i4, in %io_enq_bits_prot : i3, in %io_enq_bits_echo_tl_state_size : i4, in %io_enq_bits_echo_tl_state_source : i4, in %io_enq_bits_wen : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_id : i4, out io_deq_bits_addr : i32, out io_deq_bits_len : i8, out io_deq_bits_size : i3, out io_deq_bits_burst : i2, out io_deq_bits_lock : i1, out io_deq_bits_cache : i4, out io_deq_bits_prot : i3, out io_deq_bits_qos : i4, out io_deq_bits_echo_tl_state_size : i4, out io_deq_bits_echo_tl_state_source : i4, out io_deq_bits_wen : i1) {
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %false = hw.constant false
    %c1_i2 = hw.constant 1 : i2
    %c1_i3 = hw.constant 1 : i3
    %ram = seq.firreg %34 clock %clock : i70
    %0 = comb.concat %io_enq_bits_wen, %io_enq_bits_echo_tl_state_source, %io_enq_bits_echo_tl_state_size, %c0_i4, %io_enq_bits_prot, %io_enq_bits_cache, %c1_i3, %io_enq_bits_size, %io_enq_bits_len, %io_enq_bits_addr, %io_enq_bits_id : i1, i4, i4, i4, i3, i4, i3, i3, i8, i32, i4
    %1 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_id"} : (i70) -> i4
    %2 = comb.extract %ram from 4 {sv.namehint = "ram_io_deq_bits_MPORT_data_addr"} : (i70) -> i32
    %3 = comb.extract %ram from 36 {sv.namehint = "ram_io_deq_bits_MPORT_data_len"} : (i70) -> i8
    %4 = comb.extract %ram from 44 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i70) -> i3
    %5 = comb.extract %ram from 47 {sv.namehint = "ram_io_deq_bits_MPORT_data_burst"} : (i70) -> i2
    %6 = comb.extract %ram from 49 {sv.namehint = "ram_io_deq_bits_MPORT_data_lock"} : (i70) -> i1
    %7 = comb.extract %ram from 50 {sv.namehint = "ram_io_deq_bits_MPORT_data_cache"} : (i70) -> i4
    %8 = comb.extract %ram from 54 {sv.namehint = "ram_io_deq_bits_MPORT_data_prot"} : (i70) -> i3
    %9 = comb.extract %ram from 57 {sv.namehint = "ram_io_deq_bits_MPORT_data_qos"} : (i70) -> i4
    %10 = comb.extract %ram from 61 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_size"} : (i70) -> i4
    %11 = comb.extract %ram from 65 {sv.namehint = "ram_io_deq_bits_MPORT_data_echo_tl_state_source"} : (i70) -> i4
    %12 = comb.extract %ram from 69 {sv.namehint = "ram_io_deq_bits_MPORT_data_wen"} : (i70) -> i1
    %full = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %13 = comb.xor bin %full, %true {sv.namehint = "empty"} : i1
    %14 = comb.icmp bin eq %33, %30 : i1
    %15 = comb.mux bin %14, %full, %33 : i1
    %16 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %17 = comb.or %io_enq_valid, %full {sv.namehint = "io_deq_valid"} : i1
    %18 = comb.mux bin %full, %12, %io_enq_bits_wen {sv.namehint = "io_deq_bits_wen"} : i1
    %19 = comb.mux bin %full, %11, %io_enq_bits_echo_tl_state_source {sv.namehint = "io_deq_bits_echo_tl_state_source"} : i4
    %20 = comb.mux bin %full, %10, %io_enq_bits_echo_tl_state_size {sv.namehint = "io_deq_bits_echo_tl_state_size"} : i4
    %21 = comb.mux bin %full, %9, %c0_i4 {sv.namehint = "io_deq_bits_qos"} : i4
    %22 = comb.mux bin %full, %8, %io_enq_bits_prot {sv.namehint = "io_deq_bits_prot"} : i3
    %23 = comb.mux bin %full, %7, %io_enq_bits_cache {sv.namehint = "io_deq_bits_cache"} : i4
    %24 = comb.and %full, %6 {sv.namehint = "io_deq_bits_lock"} : i1
    %25 = comb.mux bin %full, %5, %c1_i2 {sv.namehint = "io_deq_bits_burst"} : i2
    %26 = comb.mux bin %full, %4, %io_enq_bits_size {sv.namehint = "io_deq_bits_size"} : i3
    %27 = comb.mux bin %full, %3, %io_enq_bits_len {sv.namehint = "io_deq_bits_len"} : i8
    %28 = comb.mux bin %full, %2, %io_enq_bits_addr {sv.namehint = "io_deq_bits_addr"} : i32
    %29 = comb.mux bin %full, %1, %io_enq_bits_id {sv.namehint = "io_deq_bits_id"} : i4
    %30 = comb.and %full, %io_deq_ready, %17 {sv.namehint = "do_deq"} : i1
    %31 = comb.and bin %13, %io_deq_ready : i1
    %32 = comb.xor %31, %true : i1
    %33 = comb.and %32, %16, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %34 = comb.mux bin %33, %0, %ram : i70
    hw.output %16, %17, %29, %28, %27, %26, %25, %24, %23, %22, %21, %20, %19, %18 : i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1
  }
  hw.module private @TLToAXI4_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_aw_ready : i1, out auto_out_aw_valid : i1, out auto_out_aw_bits_id : i4, out auto_out_aw_bits_addr : i32, out auto_out_aw_bits_len : i8, out auto_out_aw_bits_size : i3, out auto_out_aw_bits_burst : i2, out auto_out_aw_bits_lock : i1, out auto_out_aw_bits_cache : i4, out auto_out_aw_bits_prot : i3, out auto_out_aw_bits_qos : i4, out auto_out_aw_bits_echo_tl_state_size : i4, out auto_out_aw_bits_echo_tl_state_source : i4, in %auto_out_w_ready : i1, out auto_out_w_valid : i1, out auto_out_w_bits_data : i64, out auto_out_w_bits_strb : i8, out auto_out_w_bits_last : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_id : i4, in %auto_out_b_bits_resp : i2, in %auto_out_b_bits_echo_tl_state_size : i4, in %auto_out_b_bits_echo_tl_state_source : i4, in %auto_out_ar_ready : i1, out auto_out_ar_valid : i1, out auto_out_ar_bits_id : i4, out auto_out_ar_bits_addr : i32, out auto_out_ar_bits_len : i8, out auto_out_ar_bits_size : i3, out auto_out_ar_bits_burst : i2, out auto_out_ar_bits_lock : i1, out auto_out_ar_bits_cache : i4, out auto_out_ar_bits_prot : i3, out auto_out_ar_bits_qos : i4, out auto_out_ar_bits_echo_tl_state_size : i4, out auto_out_ar_bits_echo_tl_state_source : i4, out auto_out_r_ready : i1, in %auto_out_r_valid : i1, in %auto_out_r_bits_id : i4, in %auto_out_r_bits_data : i64, in %auto_out_r_bits_resp : i2, in %auto_out_r_bits_echo_tl_state_size : i4, in %auto_out_r_bits_echo_tl_state_source : i4, in %auto_out_r_bits_last : i1) {
    %c-1_i4 = hw.constant -1 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c-4_i4 = hw.constant -4 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c-8_i4 = hw.constant -8 : i4
    %c7_i4 = hw.constant 7 : i4
    %c6_i4 = hw.constant 6 : i4
    %c5_i4 = hw.constant 5 : i4
    %c4_i4 = hw.constant 4 : i4
    %c3_i4 = hw.constant 3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c1_i4 = hw.constant 1 : i4
    %c0_i4 = hw.constant 0 : i4
    %c2_i3 = hw.constant 2 : i3
    %c-1_i8 = hw.constant -1 : i8
    %0 = hw.aggregate_constant [-1 : i4, -2 : i4, -3 : i4, -4 : i4, -5 : i4, -6 : i4, -7 : i4, -8 : i4, 7 : i4, 6 : i4, 5 : i4, 4 : i4, 3 : i4, 2 : i4, 1 : i4, 0 : i4] : !hw.array<16xi4>
    %c-1_i3 = hw.constant -1 : i3
    %c2047_i18 = hw.constant 2047 : i18
    %c63_i13 = hw.constant 63 : i13
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %c0_i15 = hw.constant 0 : i15
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_13(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %41: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i4, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %53: i1, io_in_d_bits_opcode: %63: i3, io_in_d_bits_size: %64: i3, io_in_d_bits_source: %65: i4, io_in_d_bits_denied: %66: i1, io_in_d_bits_corrupt: %67: i1) -> ()
    %2 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_beats1_opdata_T"} : (i3) -> i1
    %3 = comb.xor bin %2, %true {sv.namehint = "a_isPut"} : i1
    %4 = comb.and bin %41, %auto_in_a_valid : i1
    %5 = comb.concat %c0_i10, %auto_in_a_bits_size : i10, i3
    %6 = comb.shl bin %c63_i13, %5 {sv.namehint = "_beats1_decode_T_1"} : i13
    %7 = comb.extract %6 from 3 : (i13) -> i3
    %8 = comb.xor %7, %c-1_i3 {sv.namehint = "_beats1_decode_T_3"} : i3
    %9 = comb.mux bin %2, %c0_i3, %8 {sv.namehint = "beats1"} : i3
    %counter = seq.firreg %16 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %10 = comb.add %counter, %c-1_i3 {sv.namehint = "_counter1_T"} : i3
    %11 = comb.icmp bin eq %counter, %c0_i3 {sv.namehint = "a_first"} : i3
    %12 = comb.icmp bin eq %counter, %c1_i3 {sv.namehint = "_last_T"} : i3
    %13 = comb.icmp bin eq %9, %c0_i3 {sv.namehint = "_last_T_1"} : i3
    %14 = comb.or bin %12, %13 {sv.namehint = "a_last"} : i1
    %15 = comb.mux bin %11, %9, %10 {sv.namehint = "_counter_T"} : i3
    %16 = comb.mux bin %4, %15, %counter : i3
    %deq.io_enq_ready, %deq.io_deq_valid, %deq.io_deq_bits_data, %deq.io_deq_bits_strb, %deq.io_deq_bits_last = hw.instance "deq" @Queue_8(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %46: i1, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_strb: %auto_in_a_bits_mask: i8, io_enq_bits_last: %14: i1, io_deq_ready: %auto_out_w_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_data: i64, io_deq_bits_strb: i8, io_deq_bits_last: i1) {sv.namehint = "irr_valid"}
    %queue_arw_deq.io_enq_ready, %queue_arw_deq.io_deq_valid, %queue_arw_deq.io_deq_bits_id, %queue_arw_deq.io_deq_bits_addr, %queue_arw_deq.io_deq_bits_len, %queue_arw_deq.io_deq_bits_size, %queue_arw_deq.io_deq_bits_burst, %queue_arw_deq.io_deq_bits_lock, %queue_arw_deq.io_deq_bits_cache, %queue_arw_deq.io_deq_bits_prot, %queue_arw_deq.io_deq_bits_qos, %queue_arw_deq.io_deq_bits_echo_tl_state_size, %queue_arw_deq.io_deq_bits_echo_tl_state_source, %queue_arw_deq.io_deq_bits_wen = hw.instance "queue_arw_deq" @Queue_16(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %45: i1, io_enq_bits_id: %23: i4, io_enq_bits_addr: %auto_in_a_bits_address: i32, io_enq_bits_len: %27: i8, io_enq_bits_size: %29: i3, io_enq_bits_cache: %33: i4, io_enq_bits_prot: %32: i3, io_enq_bits_echo_tl_state_size: %30: i4, io_enq_bits_echo_tl_state_source: %auto_in_a_bits_source: i4, io_enq_bits_wen: %3: i1, io_deq_ready: %20: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_id: i4, io_deq_bits_addr: i32, io_deq_bits_len: i8, io_deq_bits_size: i3, io_deq_bits_burst: i2, io_deq_bits_lock: i1, io_deq_bits_cache: i4, io_deq_bits_prot: i3, io_deq_bits_qos: i4, io_deq_bits_echo_tl_state_size: i4, io_deq_bits_echo_tl_state_source: i4, io_deq_bits_wen: i1) {sv.namehint = "queue_arw_valid"}
    %17 = comb.xor bin %queue_arw_deq.io_deq_bits_wen, %true {sv.namehint = "_bundleOut_0_ar_valid_T"} : i1
    %18 = comb.and bin %queue_arw_deq.io_deq_valid, %17 {sv.namehint = "bundleOut_0_ar_valid"} : i1
    %19 = comb.and bin %queue_arw_deq.io_deq_valid, %queue_arw_deq.io_deq_bits_wen {sv.namehint = "bundleOut_0_aw_valid"} : i1
    %20 = comb.mux bin %queue_arw_deq.io_deq_bits_wen, %auto_out_aw_ready, %auto_out_ar_ready {sv.namehint = "queue_arw_ready"} : i1
    %doneAW = seq.firreg %22 clock %clock reset sync %reset, %false {firrtl.random_init_start = 3 : ui64} : i1
    %21 = comb.xor bin %14, %true {sv.namehint = "_doneAW_T"} : i1
    %22 = comb.mux bin %4, %21, %doneAW : i1
    %23 = hw.array_get %0[%auto_in_a_bits_source] {sv.namehint = "a_sel_shiftAmount"} : !hw.array<16xi4>, i4
    %24 = comb.concat %c0_i15, %auto_in_a_bits_size : i15, i3
    %25 = comb.shl bin %c2047_i18, %24 {sv.namehint = "_out_arw_bits_len_T_1"} : i18
    %26 = comb.extract %25 from 3 : (i18) -> i8
    %27 = comb.xor %26, %c-1_i8 {sv.namehint = "_out_arw_bits_len_T_3"} : i8
    %28 = comb.icmp bin ugt %auto_in_a_bits_size, %c2_i3 {sv.namehint = "_out_arw_bits_size_T"} : i3
    %29 = comb.mux bin %28, %c3_i3, %auto_in_a_bits_size {sv.namehint = "out_arw_bits_size"} : i3
    %30 = comb.concat %false, %auto_in_a_bits_size {sv.namehint = "out_arw_bits_echo_tl_state_size"} : i1, i3
    %31 = comb.xor bin %auto_in_a_bits_user_amba_prot_secure, %true {sv.namehint = "prot_1"} : i1
    %32 = comb.concat %auto_in_a_bits_user_amba_prot_fetch, %31, %auto_in_a_bits_user_amba_prot_privileged {sv.namehint = "out_arw_bits_prot"} : i1, i1, i1
    %33 = comb.concat %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_bufferable {sv.namehint = "out_arw_bits_cache"} : i1, i1, i1, i1
    %34 = hw.array_create %count_16, %count_15, %count_14, %count_13, %count_12, %count_11, %count_10, %count_9, %count_8, %count_7, %count_6, %count_5, %count_4, %count_3, %count_2, %count_1 : i1
    %35 = hw.array_get %34[%auto_in_a_bits_source] : !hw.array<16xi1>, i4
    %36 = comb.and bin %35, %11 {sv.namehint = "stall"} : i1
    %37 = comb.xor bin %36, %true {sv.namehint = "_out_w_valid_T"} : i1
    %38 = comb.or bin %doneAW, %queue_arw_deq.io_enq_ready {sv.namehint = "_out_w_valid_T_3"} : i1
    %39 = comb.and bin %38, %deq.io_enq_ready {sv.namehint = "_bundleIn_0_a_ready_T_2"} : i1
    %40 = comb.mux bin %2, %queue_arw_deq.io_enq_ready, %39 {sv.namehint = "_bundleIn_0_a_ready_T_3"} : i1
    %41 = comb.and bin %37, %40 {sv.namehint = "bundleIn_0_a_ready"} : i1
    %42 = comb.xor bin %doneAW, %true {sv.namehint = "_out_arw_valid_T_2"} : i1
    %43 = comb.and bin %42, %deq.io_enq_ready {sv.namehint = "_out_arw_valid_T_3"} : i1
    %44 = comb.or %2, %43 {sv.namehint = "_out_arw_valid_T_4"} : i1
    %45 = comb.and bin %37, %auto_in_a_valid, %44 {sv.namehint = "out_arw_valid"} : i1
    %46 = comb.and bin %37, %auto_in_a_valid, %3, %38 {sv.namehint = "out_w_valid"} : i1
    %r_holds_d = seq.firreg %49 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %47 = comb.and bin %auto_in_d_ready, %auto_out_r_valid : i1
    %48 = comb.xor bin %auto_out_r_bits_last, %true {sv.namehint = "_r_holds_d_T"} : i1
    %49 = comb.mux bin %47, %48, %r_holds_d : i1
    %50 = comb.or bin %auto_out_r_valid, %r_holds_d {sv.namehint = "r_wins"} : i1
    %51 = comb.xor bin %50, %true {sv.namehint = "_bundleOut_0_b_ready_T"} : i1
    %52 = comb.and bin %auto_in_d_ready, %51 {sv.namehint = "bundleOut_0_b_ready"} : i1
    %53 = comb.mux bin %50, %auto_out_r_valid, %auto_out_b_valid {sv.namehint = "bundleIn_0_d_valid"} : i1
    %r_first = seq.firreg %54 clock %clock reset sync %reset, %true {firrtl.random_init_start = 5 : ui64} : i1
    %54 = comb.mux bin %47, %auto_out_r_bits_last, %r_first : i1
    %55 = comb.icmp bin eq %auto_out_r_bits_resp, %c-1_i2 {sv.namehint = "_r_denied_T"} : i2
    %r_denied_r = seq.firreg %56 clock %clock {firrtl.random_init_start = 6 : ui64} : i1
    %56 = comb.mux bin %r_first, %55, %r_denied_r : i1
    %57 = comb.mux bin %r_first, %55, %r_denied_r {sv.namehint = "r_denied"} : i1
    %58 = comb.icmp bin ne %auto_out_r_bits_resp, %c0_i2 {sv.namehint = "r_corrupt"} : i2
    %59 = comb.icmp bin ne %auto_out_b_bits_resp, %c0_i2 {sv.namehint = "b_denied"} : i2
    %60 = comb.or bin %58, %57 {sv.namehint = "r_d_corrupt"} : i1
    %61 = comb.extract %auto_out_r_bits_echo_tl_state_size from 0 {sv.namehint = "r_d_size"} : (i4) -> i3
    %62 = comb.extract %auto_out_b_bits_echo_tl_state_size from 0 {sv.namehint = "b_d_size"} : (i4) -> i3
    %63 = comb.concat %c0_i2, %50 {sv.namehint = "bundleIn_0_d_bits_opcode"} : i2, i1
    %64 = comb.mux bin %50, %61, %62 {sv.namehint = "bundleIn_0_d_bits_size"} : i3
    %65 = comb.mux bin %50, %auto_out_r_bits_echo_tl_state_source, %auto_out_b_bits_echo_tl_state_source {sv.namehint = "bundleIn_0_d_bits_source"} : i4
    %66 = comb.mux bin %50, %57, %59 {sv.namehint = "bundleIn_0_d_bits_denied"} : i1
    %67 = comb.and %50, %60 {sv.namehint = "bundleIn_0_d_bits_corrupt"} : i1
    %68 = comb.icmp eq %23, %c0_i4 {sv.namehint = "a_sel_0"} : i4
    %69 = comb.icmp eq %23, %c1_i4 {sv.namehint = "a_sel_1"} : i4
    %70 = comb.icmp eq %23, %c2_i4 {sv.namehint = "a_sel_2"} : i4
    %71 = comb.icmp eq %23, %c3_i4 {sv.namehint = "a_sel_3"} : i4
    %72 = comb.icmp eq %23, %c4_i4 {sv.namehint = "a_sel_4"} : i4
    %73 = comb.icmp eq %23, %c5_i4 {sv.namehint = "a_sel_5"} : i4
    %74 = comb.icmp eq %23, %c6_i4 {sv.namehint = "a_sel_6"} : i4
    %75 = comb.icmp eq %23, %c7_i4 {sv.namehint = "a_sel_7"} : i4
    %76 = comb.icmp eq %23, %c-8_i4 {sv.namehint = "a_sel_8"} : i4
    %77 = comb.icmp eq %23, %c-7_i4 {sv.namehint = "a_sel_9"} : i4
    %78 = comb.icmp eq %23, %c-6_i4 {sv.namehint = "a_sel_10"} : i4
    %79 = comb.icmp eq %23, %c-5_i4 {sv.namehint = "a_sel_11"} : i4
    %80 = comb.icmp eq %23, %c-4_i4 {sv.namehint = "a_sel_12"} : i4
    %81 = comb.icmp eq %23, %c-3_i4 {sv.namehint = "a_sel_13"} : i4
    %82 = comb.icmp eq %23, %c-2_i4 {sv.namehint = "a_sel_14"} : i4
    %83 = comb.icmp eq %23, %c-1_i4 {sv.namehint = "a_sel_15"} : i4
    %84 = comb.mux bin %50, %auto_out_r_bits_id, %auto_out_b_bits_id {sv.namehint = "d_sel_shiftAmount"} : i4
    %85 = comb.icmp eq %84, %c0_i4 {sv.namehint = "d_sel_0"} : i4
    %86 = comb.icmp eq %84, %c1_i4 {sv.namehint = "d_sel_1"} : i4
    %87 = comb.icmp eq %84, %c2_i4 {sv.namehint = "d_sel_2"} : i4
    %88 = comb.icmp eq %84, %c3_i4 {sv.namehint = "d_sel_3"} : i4
    %89 = comb.icmp eq %84, %c4_i4 {sv.namehint = "d_sel_4"} : i4
    %90 = comb.icmp eq %84, %c5_i4 {sv.namehint = "d_sel_5"} : i4
    %91 = comb.icmp eq %84, %c6_i4 {sv.namehint = "d_sel_6"} : i4
    %92 = comb.icmp eq %84, %c7_i4 {sv.namehint = "d_sel_7"} : i4
    %93 = comb.icmp eq %84, %c-8_i4 {sv.namehint = "d_sel_8"} : i4
    %94 = comb.icmp eq %84, %c-7_i4 {sv.namehint = "d_sel_9"} : i4
    %95 = comb.icmp eq %84, %c-6_i4 {sv.namehint = "d_sel_10"} : i4
    %96 = comb.icmp eq %84, %c-5_i4 {sv.namehint = "d_sel_11"} : i4
    %97 = comb.icmp eq %84, %c-4_i4 {sv.namehint = "d_sel_12"} : i4
    %98 = comb.icmp eq %84, %c-3_i4 {sv.namehint = "d_sel_13"} : i4
    %99 = comb.icmp eq %84, %c-2_i4 {sv.namehint = "d_sel_14"} : i4
    %100 = comb.icmp eq %84, %c-1_i4 {sv.namehint = "d_sel_15"} : i4
    %101 = comb.xor %50, %true : i1
    %102 = comb.or %101, %auto_out_r_bits_last {sv.namehint = "d_last"} : i1
    %count_1 = seq.firreg %108 clock %clock reset sync %reset, %false {firrtl.random_init_start = 7 : ui64, sv.namehint = "count_1"} : i1
    %103 = comb.and bin %queue_arw_deq.io_enq_ready, %45 {sv.namehint = "_inc_T_15"} : i1
    %104 = comb.and bin %68, %103 {sv.namehint = "inc"} : i1
    %105 = comb.and bin %auto_in_d_ready, %53 {sv.namehint = "_dec_T_31"} : i1
    %106 = comb.and bin %85, %102, %105 {sv.namehint = "dec"} : i1
    %107 = comb.add %count_1, %104 {sv.namehint = "_count_T_1"} : i1
    %108 = comb.sub %107, %106 {sv.namehint = "_count_T_3"} : i1
    %109 = comb.xor bin %106, %true : i1
    %110 = comb.or bin %109, %count_1, %reset : i1
    %111 = comb.xor bin %110, %true : i1
    %112 = comb.xor bin %104, %true : i1
    %113 = comb.xor bin %count_1, %true : i1
    %114 = comb.or bin %112, %113, %reset : i1
    %115 = comb.xor bin %114, %true : i1
    %count_2 = seq.firreg %119 clock %clock reset sync %reset, %false {firrtl.random_init_start = 9 : ui64, sv.namehint = "count_2"} : i1
    %116 = comb.and bin %69, %103 {sv.namehint = "inc_1"} : i1
    %117 = comb.and bin %86, %102, %105 {sv.namehint = "dec_1"} : i1
    %118 = comb.add %count_2, %116 {sv.namehint = "_count_T_5"} : i1
    %119 = comb.sub %118, %117 {sv.namehint = "_count_T_7"} : i1
    %120 = comb.xor bin %117, %true : i1
    %121 = comb.or bin %120, %count_2, %reset : i1
    %122 = comb.xor bin %121, %true : i1
    %123 = comb.xor bin %116, %true : i1
    %124 = comb.xor bin %count_2, %true : i1
    %125 = comb.or bin %123, %124, %reset : i1
    %126 = comb.xor bin %125, %true : i1
    %count_3 = seq.firreg %130 clock %clock reset sync %reset, %false {firrtl.random_init_start = 11 : ui64, sv.namehint = "count_3"} : i1
    %127 = comb.and bin %70, %103 {sv.namehint = "inc_2"} : i1
    %128 = comb.and bin %87, %102, %105 {sv.namehint = "dec_2"} : i1
    %129 = comb.add %count_3, %127 {sv.namehint = "_count_T_9"} : i1
    %130 = comb.sub %129, %128 {sv.namehint = "_count_T_11"} : i1
    %131 = comb.xor bin %128, %true : i1
    %132 = comb.or bin %131, %count_3, %reset : i1
    %133 = comb.xor bin %132, %true : i1
    %134 = comb.xor bin %127, %true : i1
    %135 = comb.xor bin %count_3, %true : i1
    %136 = comb.or bin %134, %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %count_4 = seq.firreg %141 clock %clock reset sync %reset, %false {firrtl.random_init_start = 13 : ui64, sv.namehint = "count_4"} : i1
    %138 = comb.and bin %71, %103 {sv.namehint = "inc_3"} : i1
    %139 = comb.and bin %88, %102, %105 {sv.namehint = "dec_3"} : i1
    %140 = comb.add %count_4, %138 {sv.namehint = "_count_T_13"} : i1
    %141 = comb.sub %140, %139 {sv.namehint = "_count_T_15"} : i1
    %142 = comb.xor bin %139, %true : i1
    %143 = comb.or bin %142, %count_4, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.xor bin %138, %true : i1
    %146 = comb.xor bin %count_4, %true : i1
    %147 = comb.or bin %145, %146, %reset : i1
    %148 = comb.xor bin %147, %true : i1
    %count_5 = seq.firreg %152 clock %clock reset sync %reset, %false {firrtl.random_init_start = 15 : ui64, sv.namehint = "count_5"} : i1
    %149 = comb.and bin %72, %103 {sv.namehint = "inc_4"} : i1
    %150 = comb.and bin %89, %102, %105 {sv.namehint = "dec_4"} : i1
    %151 = comb.add %count_5, %149 {sv.namehint = "_count_T_17"} : i1
    %152 = comb.sub %151, %150 {sv.namehint = "_count_T_19"} : i1
    %153 = comb.xor bin %150, %true : i1
    %154 = comb.or bin %153, %count_5, %reset : i1
    %155 = comb.xor bin %154, %true : i1
    %156 = comb.xor bin %149, %true : i1
    %157 = comb.xor bin %count_5, %true : i1
    %158 = comb.or bin %156, %157, %reset : i1
    %159 = comb.xor bin %158, %true : i1
    %count_6 = seq.firreg %163 clock %clock reset sync %reset, %false {firrtl.random_init_start = 17 : ui64, sv.namehint = "count_6"} : i1
    %160 = comb.and bin %73, %103 {sv.namehint = "inc_5"} : i1
    %161 = comb.and bin %90, %102, %105 {sv.namehint = "dec_5"} : i1
    %162 = comb.add %count_6, %160 {sv.namehint = "_count_T_21"} : i1
    %163 = comb.sub %162, %161 {sv.namehint = "_count_T_23"} : i1
    %164 = comb.xor bin %161, %true : i1
    %165 = comb.or bin %164, %count_6, %reset : i1
    %166 = comb.xor bin %165, %true : i1
    %167 = comb.xor bin %160, %true : i1
    %168 = comb.xor bin %count_6, %true : i1
    %169 = comb.or bin %167, %168, %reset : i1
    %170 = comb.xor bin %169, %true : i1
    %count_7 = seq.firreg %174 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64, sv.namehint = "count_7"} : i1
    %171 = comb.and bin %74, %103 {sv.namehint = "inc_6"} : i1
    %172 = comb.and bin %91, %102, %105 {sv.namehint = "dec_6"} : i1
    %173 = comb.add %count_7, %171 {sv.namehint = "_count_T_25"} : i1
    %174 = comb.sub %173, %172 {sv.namehint = "_count_T_27"} : i1
    %175 = comb.xor bin %172, %true : i1
    %176 = comb.or bin %175, %count_7, %reset : i1
    %177 = comb.xor bin %176, %true : i1
    %178 = comb.xor bin %171, %true : i1
    %179 = comb.xor bin %count_7, %true : i1
    %180 = comb.or bin %178, %179, %reset : i1
    %181 = comb.xor bin %180, %true : i1
    %count_8 = seq.firreg %185 clock %clock reset sync %reset, %false {firrtl.random_init_start = 21 : ui64, sv.namehint = "count_8"} : i1
    %182 = comb.and bin %75, %103 {sv.namehint = "inc_7"} : i1
    %183 = comb.and bin %92, %102, %105 {sv.namehint = "dec_7"} : i1
    %184 = comb.add %count_8, %182 {sv.namehint = "_count_T_29"} : i1
    %185 = comb.sub %184, %183 {sv.namehint = "_count_T_31"} : i1
    %186 = comb.xor bin %183, %true : i1
    %187 = comb.or bin %186, %count_8, %reset : i1
    %188 = comb.xor bin %187, %true : i1
    %189 = comb.xor bin %182, %true : i1
    %190 = comb.xor bin %count_8, %true : i1
    %191 = comb.or bin %189, %190, %reset : i1
    %192 = comb.xor bin %191, %true : i1
    %count_9 = seq.firreg %196 clock %clock reset sync %reset, %false {firrtl.random_init_start = 23 : ui64, sv.namehint = "count_9"} : i1
    %193 = comb.and bin %76, %103 {sv.namehint = "inc_8"} : i1
    %194 = comb.and bin %93, %102, %105 {sv.namehint = "dec_8"} : i1
    %195 = comb.add %count_9, %193 {sv.namehint = "_count_T_33"} : i1
    %196 = comb.sub %195, %194 {sv.namehint = "_count_T_35"} : i1
    %197 = comb.xor bin %194, %true : i1
    %198 = comb.or bin %197, %count_9, %reset : i1
    %199 = comb.xor bin %198, %true : i1
    %200 = comb.xor bin %193, %true : i1
    %201 = comb.xor bin %count_9, %true : i1
    %202 = comb.or bin %200, %201, %reset : i1
    %203 = comb.xor bin %202, %true : i1
    %count_10 = seq.firreg %207 clock %clock reset sync %reset, %false {firrtl.random_init_start = 25 : ui64, sv.namehint = "count_10"} : i1
    %204 = comb.and bin %77, %103 {sv.namehint = "inc_9"} : i1
    %205 = comb.and bin %94, %102, %105 {sv.namehint = "dec_9"} : i1
    %206 = comb.add %count_10, %204 {sv.namehint = "_count_T_37"} : i1
    %207 = comb.sub %206, %205 {sv.namehint = "_count_T_39"} : i1
    %208 = comb.xor bin %205, %true : i1
    %209 = comb.or bin %208, %count_10, %reset : i1
    %210 = comb.xor bin %209, %true : i1
    %211 = comb.xor bin %204, %true : i1
    %212 = comb.xor bin %count_10, %true : i1
    %213 = comb.or bin %211, %212, %reset : i1
    %214 = comb.xor bin %213, %true : i1
    %count_11 = seq.firreg %218 clock %clock reset sync %reset, %false {firrtl.random_init_start = 27 : ui64, sv.namehint = "count_11"} : i1
    %215 = comb.and bin %78, %103 {sv.namehint = "inc_10"} : i1
    %216 = comb.and bin %95, %102, %105 {sv.namehint = "dec_10"} : i1
    %217 = comb.add %count_11, %215 {sv.namehint = "_count_T_41"} : i1
    %218 = comb.sub %217, %216 {sv.namehint = "_count_T_43"} : i1
    %219 = comb.xor bin %216, %true : i1
    %220 = comb.or bin %219, %count_11, %reset : i1
    %221 = comb.xor bin %220, %true : i1
    %222 = comb.xor bin %215, %true : i1
    %223 = comb.xor bin %count_11, %true : i1
    %224 = comb.or bin %222, %223, %reset : i1
    %225 = comb.xor bin %224, %true : i1
    %count_12 = seq.firreg %229 clock %clock reset sync %reset, %false {firrtl.random_init_start = 29 : ui64, sv.namehint = "count_12"} : i1
    %226 = comb.and bin %79, %103 {sv.namehint = "inc_11"} : i1
    %227 = comb.and bin %96, %102, %105 {sv.namehint = "dec_11"} : i1
    %228 = comb.add %count_12, %226 {sv.namehint = "_count_T_45"} : i1
    %229 = comb.sub %228, %227 {sv.namehint = "_count_T_47"} : i1
    %230 = comb.xor bin %227, %true : i1
    %231 = comb.or bin %230, %count_12, %reset : i1
    %232 = comb.xor bin %231, %true : i1
    %233 = comb.xor bin %226, %true : i1
    %234 = comb.xor bin %count_12, %true : i1
    %235 = comb.or bin %233, %234, %reset : i1
    %236 = comb.xor bin %235, %true : i1
    %count_13 = seq.firreg %240 clock %clock reset sync %reset, %false {firrtl.random_init_start = 31 : ui64, sv.namehint = "count_13"} : i1
    %237 = comb.and bin %80, %103 {sv.namehint = "inc_12"} : i1
    %238 = comb.and bin %97, %102, %105 {sv.namehint = "dec_12"} : i1
    %239 = comb.add %count_13, %237 {sv.namehint = "_count_T_49"} : i1
    %240 = comb.sub %239, %238 {sv.namehint = "_count_T_51"} : i1
    %241 = comb.xor bin %238, %true : i1
    %242 = comb.or bin %241, %count_13, %reset : i1
    %243 = comb.xor bin %242, %true : i1
    %244 = comb.xor bin %237, %true : i1
    %245 = comb.xor bin %count_13, %true : i1
    %246 = comb.or bin %244, %245, %reset : i1
    %247 = comb.xor bin %246, %true : i1
    %count_14 = seq.firreg %251 clock %clock reset sync %reset, %false {firrtl.random_init_start = 33 : ui64, sv.namehint = "count_14"} : i1
    %248 = comb.and bin %81, %103 {sv.namehint = "inc_13"} : i1
    %249 = comb.and bin %98, %102, %105 {sv.namehint = "dec_13"} : i1
    %250 = comb.add %count_14, %248 {sv.namehint = "_count_T_53"} : i1
    %251 = comb.sub %250, %249 {sv.namehint = "_count_T_55"} : i1
    %252 = comb.xor bin %249, %true : i1
    %253 = comb.or bin %252, %count_14, %reset : i1
    %254 = comb.xor bin %253, %true : i1
    %255 = comb.xor bin %248, %true : i1
    %256 = comb.xor bin %count_14, %true : i1
    %257 = comb.or bin %255, %256, %reset : i1
    %258 = comb.xor bin %257, %true : i1
    %count_15 = seq.firreg %262 clock %clock reset sync %reset, %false {firrtl.random_init_start = 35 : ui64, sv.namehint = "count_15"} : i1
    %259 = comb.and bin %82, %103 {sv.namehint = "inc_14"} : i1
    %260 = comb.and bin %99, %102, %105 {sv.namehint = "dec_14"} : i1
    %261 = comb.add %count_15, %259 {sv.namehint = "_count_T_57"} : i1
    %262 = comb.sub %261, %260 {sv.namehint = "_count_T_59"} : i1
    %263 = comb.xor bin %260, %true : i1
    %264 = comb.or bin %263, %count_15, %reset : i1
    %265 = comb.xor bin %264, %true : i1
    %266 = comb.xor bin %259, %true : i1
    %267 = comb.xor bin %count_15, %true : i1
    %268 = comb.or bin %266, %267, %reset : i1
    %269 = comb.xor bin %268, %true : i1
    %count_16 = seq.firreg %273 clock %clock reset sync %reset, %false {firrtl.random_init_start = 37 : ui64, sv.namehint = "count_16"} : i1
    %270 = comb.and bin %83, %103 {sv.namehint = "inc_15"} : i1
    %271 = comb.and bin %100, %102, %105 {sv.namehint = "dec_15"} : i1
    %272 = comb.add %count_16, %270 {sv.namehint = "_count_T_61"} : i1
    %273 = comb.sub %272, %271 {sv.namehint = "_count_T_63"} : i1
    %274 = comb.xor bin %271, %true : i1
    %275 = comb.or bin %274, %count_16, %reset : i1
    %276 = comb.xor bin %275, %true : i1
    %277 = comb.xor bin %270, %true : i1
    %278 = comb.xor bin %count_16, %true : i1
    %279 = comb.or bin %277, %278, %reset : i1
    %280 = comb.xor bin %279, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %1 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %281 = comb.and bin %STOP_COND_, %111 : i1
        sv.if %281 {
          sv.fatal 1
        }
        %282 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %282 {
          sv.fatal 1
        }
        %283 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %283 {
          sv.fatal 1
        }
        %284 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %284 {
          sv.fatal 1
        }
        %285 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %285 {
          sv.fatal 1
        }
        %286 = comb.and bin %STOP_COND_, %137 : i1
        sv.if %286 {
          sv.fatal 1
        }
        %287 = comb.and bin %STOP_COND_, %144 : i1
        sv.if %287 {
          sv.fatal 1
        }
        %288 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %288 {
          sv.fatal 1
        }
        %289 = comb.and bin %STOP_COND_, %155 : i1
        sv.if %289 {
          sv.fatal 1
        }
        %290 = comb.and bin %STOP_COND_, %159 : i1
        sv.if %290 {
          sv.fatal 1
        }
        %291 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %291 {
          sv.fatal 1
        }
        %292 = comb.and bin %STOP_COND_, %170 : i1
        sv.if %292 {
          sv.fatal 1
        }
        %293 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %293 {
          sv.fatal 1
        }
        %294 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %294 {
          sv.fatal 1
        }
        %295 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %295 {
          sv.fatal 1
        }
        %296 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %296 {
          sv.fatal 1
        }
        %297 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %297 {
          sv.fatal 1
        }
        %298 = comb.and bin %STOP_COND_, %203 : i1
        sv.if %298 {
          sv.fatal 1
        }
        %299 = comb.and bin %STOP_COND_, %210 : i1
        sv.if %299 {
          sv.fatal 1
        }
        %300 = comb.and bin %STOP_COND_, %214 : i1
        sv.if %300 {
          sv.fatal 1
        }
        %301 = comb.and bin %STOP_COND_, %221 : i1
        sv.if %301 {
          sv.fatal 1
        }
        %302 = comb.and bin %STOP_COND_, %225 : i1
        sv.if %302 {
          sv.fatal 1
        }
        %303 = comb.and bin %STOP_COND_, %232 : i1
        sv.if %303 {
          sv.fatal 1
        }
        %304 = comb.and bin %STOP_COND_, %236 : i1
        sv.if %304 {
          sv.fatal 1
        }
        %305 = comb.and bin %STOP_COND_, %243 : i1
        sv.if %305 {
          sv.fatal 1
        }
        %306 = comb.and bin %STOP_COND_, %247 : i1
        sv.if %306 {
          sv.fatal 1
        }
        %307 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %307 {
          sv.fatal 1
        }
        %308 = comb.and bin %STOP_COND_, %258 : i1
        sv.if %308 {
          sv.fatal 1
        }
        %309 = comb.and bin %STOP_COND_, %265 : i1
        sv.if %309 {
          sv.fatal 1
        }
        %310 = comb.and bin %STOP_COND_, %269 : i1
        sv.if %310 {
          sv.fatal 1
        }
        %311 = comb.and bin %STOP_COND_, %276 : i1
        sv.if %311 {
          sv.fatal 1
        }
        %312 = comb.and bin %STOP_COND_, %280 : i1
        sv.if %312 {
          sv.fatal 1
        }
      }
    }
    hw.output %41, %53, %63, %64, %65, %66, %auto_out_r_bits_data, %67, %19, %queue_arw_deq.io_deq_bits_id, %queue_arw_deq.io_deq_bits_addr, %queue_arw_deq.io_deq_bits_len, %queue_arw_deq.io_deq_bits_size, %queue_arw_deq.io_deq_bits_burst, %queue_arw_deq.io_deq_bits_lock, %queue_arw_deq.io_deq_bits_cache, %queue_arw_deq.io_deq_bits_prot, %queue_arw_deq.io_deq_bits_qos, %queue_arw_deq.io_deq_bits_echo_tl_state_size, %queue_arw_deq.io_deq_bits_echo_tl_state_source, %deq.io_deq_valid, %deq.io_deq_bits_data, %deq.io_deq_bits_strb, %deq.io_deq_bits_last, %52, %18, %queue_arw_deq.io_deq_bits_id, %queue_arw_deq.io_deq_bits_addr, %queue_arw_deq.io_deq_bits_len, %queue_arw_deq.io_deq_bits_size, %queue_arw_deq.io_deq_bits_burst, %queue_arw_deq.io_deq_bits_lock, %queue_arw_deq.io_deq_bits_cache, %queue_arw_deq.io_deq_bits_prot, %queue_arw_deq.io_deq_bits_qos, %queue_arw_deq.io_deq_bits_echo_tl_state_size, %queue_arw_deq.io_deq_bits_echo_tl_state_source, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i4, i4, i1
  }
  hw.module private @TLWidthWidget_6(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i4, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i4, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    hw.output %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @TLInterconnectCoupler_11(in %clock : !seq.clock, in %reset : i1, in %auto_axi4yank_out_aw_ready : i1, out auto_axi4yank_out_aw_valid : i1, out auto_axi4yank_out_aw_bits_id : i4, out auto_axi4yank_out_aw_bits_addr : i32, out auto_axi4yank_out_aw_bits_len : i8, out auto_axi4yank_out_aw_bits_size : i3, out auto_axi4yank_out_aw_bits_burst : i2, out auto_axi4yank_out_aw_bits_lock : i1, out auto_axi4yank_out_aw_bits_cache : i4, out auto_axi4yank_out_aw_bits_prot : i3, out auto_axi4yank_out_aw_bits_qos : i4, in %auto_axi4yank_out_w_ready : i1, out auto_axi4yank_out_w_valid : i1, out auto_axi4yank_out_w_bits_data : i64, out auto_axi4yank_out_w_bits_strb : i8, out auto_axi4yank_out_w_bits_last : i1, out auto_axi4yank_out_b_ready : i1, in %auto_axi4yank_out_b_valid : i1, in %auto_axi4yank_out_b_bits_id : i4, in %auto_axi4yank_out_b_bits_resp : i2, in %auto_axi4yank_out_ar_ready : i1, out auto_axi4yank_out_ar_valid : i1, out auto_axi4yank_out_ar_bits_id : i4, out auto_axi4yank_out_ar_bits_addr : i32, out auto_axi4yank_out_ar_bits_len : i8, out auto_axi4yank_out_ar_bits_size : i3, out auto_axi4yank_out_ar_bits_burst : i2, out auto_axi4yank_out_ar_bits_lock : i1, out auto_axi4yank_out_ar_bits_cache : i4, out auto_axi4yank_out_ar_bits_prot : i3, out auto_axi4yank_out_ar_bits_qos : i4, out auto_axi4yank_out_r_ready : i1, in %auto_axi4yank_out_r_valid : i1, in %auto_axi4yank_out_r_bits_id : i4, in %auto_axi4yank_out_r_bits_data : i64, in %auto_axi4yank_out_r_bits_resp : i2, in %auto_axi4yank_out_r_bits_last : i1, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i3, in %auto_tl_in_a_bits_source : i4, in %auto_tl_in_a_bits_address : i32, in %auto_tl_in_a_bits_user_amba_prot_bufferable : i1, in %auto_tl_in_a_bits_user_amba_prot_modifiable : i1, in %auto_tl_in_a_bits_user_amba_prot_readalloc : i1, in %auto_tl_in_a_bits_user_amba_prot_writealloc : i1, in %auto_tl_in_a_bits_user_amba_prot_privileged : i1, in %auto_tl_in_a_bits_user_amba_prot_secure : i1, in %auto_tl_in_a_bits_user_amba_prot_fetch : i1, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i3, out auto_tl_in_d_bits_source : i4, out auto_tl_in_d_bits_denied : i1, out auto_tl_in_d_bits_data : i64, out auto_tl_in_d_bits_corrupt : i1) {
    %axi4yank.auto_in_aw_ready, %axi4yank.auto_in_w_ready, %axi4yank.auto_in_b_valid, %axi4yank.auto_in_b_bits_id, %axi4yank.auto_in_b_bits_resp, %axi4yank.auto_in_b_bits_echo_tl_state_size, %axi4yank.auto_in_b_bits_echo_tl_state_source, %axi4yank.auto_in_ar_ready, %axi4yank.auto_in_r_valid, %axi4yank.auto_in_r_bits_id, %axi4yank.auto_in_r_bits_data, %axi4yank.auto_in_r_bits_resp, %axi4yank.auto_in_r_bits_echo_tl_state_size, %axi4yank.auto_in_r_bits_echo_tl_state_source, %axi4yank.auto_in_r_bits_last, %axi4yank.auto_out_aw_valid, %axi4yank.auto_out_aw_bits_id, %axi4yank.auto_out_aw_bits_addr, %axi4yank.auto_out_aw_bits_len, %axi4yank.auto_out_aw_bits_size, %axi4yank.auto_out_aw_bits_burst, %axi4yank.auto_out_aw_bits_lock, %axi4yank.auto_out_aw_bits_cache, %axi4yank.auto_out_aw_bits_prot, %axi4yank.auto_out_aw_bits_qos, %axi4yank.auto_out_w_valid, %axi4yank.auto_out_w_bits_data, %axi4yank.auto_out_w_bits_strb, %axi4yank.auto_out_w_bits_last, %axi4yank.auto_out_b_ready, %axi4yank.auto_out_ar_valid, %axi4yank.auto_out_ar_bits_id, %axi4yank.auto_out_ar_bits_addr, %axi4yank.auto_out_ar_bits_len, %axi4yank.auto_out_ar_bits_size, %axi4yank.auto_out_ar_bits_burst, %axi4yank.auto_out_ar_bits_lock, %axi4yank.auto_out_ar_bits_cache, %axi4yank.auto_out_ar_bits_prot, %axi4yank.auto_out_ar_bits_qos, %axi4yank.auto_out_r_ready = hw.instance "axi4yank" @AXI4UserYanker_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_aw_valid: %axi4index.auto_out_aw_valid: i1, auto_in_aw_bits_id: %axi4index.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %axi4index.auto_out_aw_bits_addr: i32, auto_in_aw_bits_len: %axi4index.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %axi4index.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %axi4index.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %axi4index.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %axi4index.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %axi4index.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %axi4index.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %axi4index.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %axi4index.auto_out_aw_bits_echo_tl_state_source: i4, auto_in_w_valid: %axi4index.auto_out_w_valid: i1, auto_in_w_bits_data: %axi4index.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %axi4index.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %axi4index.auto_out_w_bits_last: i1, auto_in_b_ready: %axi4index.auto_out_b_ready: i1, auto_in_ar_valid: %axi4index.auto_out_ar_valid: i1, auto_in_ar_bits_id: %axi4index.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %axi4index.auto_out_ar_bits_addr: i32, auto_in_ar_bits_len: %axi4index.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %axi4index.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %axi4index.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %axi4index.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %axi4index.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %axi4index.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %axi4index.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %axi4index.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %axi4index.auto_out_ar_bits_echo_tl_state_source: i4, auto_in_r_ready: %axi4index.auto_out_r_ready: i1, auto_out_aw_ready: %auto_axi4yank_out_aw_ready: i1, auto_out_w_ready: %auto_axi4yank_out_w_ready: i1, auto_out_b_valid: %auto_axi4yank_out_b_valid: i1, auto_out_b_bits_id: %auto_axi4yank_out_b_bits_id: i4, auto_out_b_bits_resp: %auto_axi4yank_out_b_bits_resp: i2, auto_out_ar_ready: %auto_axi4yank_out_ar_ready: i1, auto_out_r_valid: %auto_axi4yank_out_r_valid: i1, auto_out_r_bits_id: %auto_axi4yank_out_r_bits_id: i4, auto_out_r_bits_data: %auto_axi4yank_out_r_bits_data: i64, auto_out_r_bits_resp: %auto_axi4yank_out_r_bits_resp: i2, auto_out_r_bits_last: %auto_axi4yank_out_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i4, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i4, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i32, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i32, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_r_ready: i1) {sv.namehint = "axi4yank.auto_in_r_valid"}
    %axi4index.auto_in_aw_ready, %axi4index.auto_in_w_ready, %axi4index.auto_in_b_valid, %axi4index.auto_in_b_bits_id, %axi4index.auto_in_b_bits_resp, %axi4index.auto_in_b_bits_echo_tl_state_size, %axi4index.auto_in_b_bits_echo_tl_state_source, %axi4index.auto_in_ar_ready, %axi4index.auto_in_r_valid, %axi4index.auto_in_r_bits_id, %axi4index.auto_in_r_bits_data, %axi4index.auto_in_r_bits_resp, %axi4index.auto_in_r_bits_echo_tl_state_size, %axi4index.auto_in_r_bits_echo_tl_state_source, %axi4index.auto_in_r_bits_last, %axi4index.auto_out_aw_valid, %axi4index.auto_out_aw_bits_id, %axi4index.auto_out_aw_bits_addr, %axi4index.auto_out_aw_bits_len, %axi4index.auto_out_aw_bits_size, %axi4index.auto_out_aw_bits_burst, %axi4index.auto_out_aw_bits_lock, %axi4index.auto_out_aw_bits_cache, %axi4index.auto_out_aw_bits_prot, %axi4index.auto_out_aw_bits_qos, %axi4index.auto_out_aw_bits_echo_tl_state_size, %axi4index.auto_out_aw_bits_echo_tl_state_source, %axi4index.auto_out_w_valid, %axi4index.auto_out_w_bits_data, %axi4index.auto_out_w_bits_strb, %axi4index.auto_out_w_bits_last, %axi4index.auto_out_b_ready, %axi4index.auto_out_ar_valid, %axi4index.auto_out_ar_bits_id, %axi4index.auto_out_ar_bits_addr, %axi4index.auto_out_ar_bits_len, %axi4index.auto_out_ar_bits_size, %axi4index.auto_out_ar_bits_burst, %axi4index.auto_out_ar_bits_lock, %axi4index.auto_out_ar_bits_cache, %axi4index.auto_out_ar_bits_prot, %axi4index.auto_out_ar_bits_qos, %axi4index.auto_out_ar_bits_echo_tl_state_size, %axi4index.auto_out_ar_bits_echo_tl_state_source, %axi4index.auto_out_r_ready = hw.instance "axi4index" @AXI4IdIndexer_1(auto_in_aw_valid: %tl2axi4.auto_out_aw_valid: i1, auto_in_aw_bits_id: %tl2axi4.auto_out_aw_bits_id: i4, auto_in_aw_bits_addr: %tl2axi4.auto_out_aw_bits_addr: i32, auto_in_aw_bits_len: %tl2axi4.auto_out_aw_bits_len: i8, auto_in_aw_bits_size: %tl2axi4.auto_out_aw_bits_size: i3, auto_in_aw_bits_burst: %tl2axi4.auto_out_aw_bits_burst: i2, auto_in_aw_bits_lock: %tl2axi4.auto_out_aw_bits_lock: i1, auto_in_aw_bits_cache: %tl2axi4.auto_out_aw_bits_cache: i4, auto_in_aw_bits_prot: %tl2axi4.auto_out_aw_bits_prot: i3, auto_in_aw_bits_qos: %tl2axi4.auto_out_aw_bits_qos: i4, auto_in_aw_bits_echo_tl_state_size: %tl2axi4.auto_out_aw_bits_echo_tl_state_size: i4, auto_in_aw_bits_echo_tl_state_source: %tl2axi4.auto_out_aw_bits_echo_tl_state_source: i4, auto_in_w_valid: %tl2axi4.auto_out_w_valid: i1, auto_in_w_bits_data: %tl2axi4.auto_out_w_bits_data: i64, auto_in_w_bits_strb: %tl2axi4.auto_out_w_bits_strb: i8, auto_in_w_bits_last: %tl2axi4.auto_out_w_bits_last: i1, auto_in_b_ready: %tl2axi4.auto_out_b_ready: i1, auto_in_ar_valid: %tl2axi4.auto_out_ar_valid: i1, auto_in_ar_bits_id: %tl2axi4.auto_out_ar_bits_id: i4, auto_in_ar_bits_addr: %tl2axi4.auto_out_ar_bits_addr: i32, auto_in_ar_bits_len: %tl2axi4.auto_out_ar_bits_len: i8, auto_in_ar_bits_size: %tl2axi4.auto_out_ar_bits_size: i3, auto_in_ar_bits_burst: %tl2axi4.auto_out_ar_bits_burst: i2, auto_in_ar_bits_lock: %tl2axi4.auto_out_ar_bits_lock: i1, auto_in_ar_bits_cache: %tl2axi4.auto_out_ar_bits_cache: i4, auto_in_ar_bits_prot: %tl2axi4.auto_out_ar_bits_prot: i3, auto_in_ar_bits_qos: %tl2axi4.auto_out_ar_bits_qos: i4, auto_in_ar_bits_echo_tl_state_size: %tl2axi4.auto_out_ar_bits_echo_tl_state_size: i4, auto_in_ar_bits_echo_tl_state_source: %tl2axi4.auto_out_ar_bits_echo_tl_state_source: i4, auto_in_r_ready: %tl2axi4.auto_out_r_ready: i1, auto_out_aw_ready: %axi4yank.auto_in_aw_ready: i1, auto_out_w_ready: %axi4yank.auto_in_w_ready: i1, auto_out_b_valid: %axi4yank.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4yank.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4yank.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4yank.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4yank.auto_in_b_bits_echo_tl_state_source: i4, auto_out_ar_ready: %axi4yank.auto_in_ar_ready: i1, auto_out_r_valid: %axi4yank.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4yank.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4yank.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4yank.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4yank.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4yank.auto_in_r_bits_echo_tl_state_source: i4, auto_out_r_bits_last: %axi4yank.auto_in_r_bits_last: i1) -> (auto_in_aw_ready: i1, auto_in_w_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_id: i4, auto_in_b_bits_resp: i2, auto_in_b_bits_echo_tl_state_size: i4, auto_in_b_bits_echo_tl_state_source: i4, auto_in_ar_ready: i1, auto_in_r_valid: i1, auto_in_r_bits_id: i4, auto_in_r_bits_data: i64, auto_in_r_bits_resp: i2, auto_in_r_bits_echo_tl_state_size: i4, auto_in_r_bits_echo_tl_state_source: i4, auto_in_r_bits_last: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i32, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i32, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i4, auto_out_r_ready: i1) {sv.namehint = "tl2axi4.auto_out_r_valid"}
    %tl2axi4.auto_in_a_ready, %tl2axi4.auto_in_d_valid, %tl2axi4.auto_in_d_bits_opcode, %tl2axi4.auto_in_d_bits_size, %tl2axi4.auto_in_d_bits_source, %tl2axi4.auto_in_d_bits_denied, %tl2axi4.auto_in_d_bits_data, %tl2axi4.auto_in_d_bits_corrupt, %tl2axi4.auto_out_aw_valid, %tl2axi4.auto_out_aw_bits_id, %tl2axi4.auto_out_aw_bits_addr, %tl2axi4.auto_out_aw_bits_len, %tl2axi4.auto_out_aw_bits_size, %tl2axi4.auto_out_aw_bits_burst, %tl2axi4.auto_out_aw_bits_lock, %tl2axi4.auto_out_aw_bits_cache, %tl2axi4.auto_out_aw_bits_prot, %tl2axi4.auto_out_aw_bits_qos, %tl2axi4.auto_out_aw_bits_echo_tl_state_size, %tl2axi4.auto_out_aw_bits_echo_tl_state_source, %tl2axi4.auto_out_w_valid, %tl2axi4.auto_out_w_bits_data, %tl2axi4.auto_out_w_bits_strb, %tl2axi4.auto_out_w_bits_last, %tl2axi4.auto_out_b_ready, %tl2axi4.auto_out_ar_valid, %tl2axi4.auto_out_ar_bits_id, %tl2axi4.auto_out_ar_bits_addr, %tl2axi4.auto_out_ar_bits_len, %tl2axi4.auto_out_ar_bits_size, %tl2axi4.auto_out_ar_bits_burst, %tl2axi4.auto_out_ar_bits_lock, %tl2axi4.auto_out_ar_bits_cache, %tl2axi4.auto_out_ar_bits_prot, %tl2axi4.auto_out_ar_bits_qos, %tl2axi4.auto_out_ar_bits_echo_tl_state_size, %tl2axi4.auto_out_ar_bits_echo_tl_state_source, %tl2axi4.auto_out_r_ready = hw.instance "tl2axi4" @TLToAXI4_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %widget.auto_out_a_valid: i1, auto_in_a_bits_opcode: %widget.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %widget.auto_out_a_bits_param: i3, auto_in_a_bits_size: %widget.auto_out_a_bits_size: i3, auto_in_a_bits_source: %widget.auto_out_a_bits_source: i4, auto_in_a_bits_address: %widget.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %widget.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %widget.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %widget.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %widget.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %widget.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %widget.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %widget.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %widget.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %widget.auto_out_a_bits_data: i64, auto_in_d_ready: %widget.auto_out_d_ready: i1, auto_out_aw_ready: %axi4index.auto_in_aw_ready: i1, auto_out_w_ready: %axi4index.auto_in_w_ready: i1, auto_out_b_valid: %axi4index.auto_in_b_valid: i1, auto_out_b_bits_id: %axi4index.auto_in_b_bits_id: i4, auto_out_b_bits_resp: %axi4index.auto_in_b_bits_resp: i2, auto_out_b_bits_echo_tl_state_size: %axi4index.auto_in_b_bits_echo_tl_state_size: i4, auto_out_b_bits_echo_tl_state_source: %axi4index.auto_in_b_bits_echo_tl_state_source: i4, auto_out_ar_ready: %axi4index.auto_in_ar_ready: i1, auto_out_r_valid: %axi4index.auto_in_r_valid: i1, auto_out_r_bits_id: %axi4index.auto_in_r_bits_id: i4, auto_out_r_bits_data: %axi4index.auto_in_r_bits_data: i64, auto_out_r_bits_resp: %axi4index.auto_in_r_bits_resp: i2, auto_out_r_bits_echo_tl_state_size: %axi4index.auto_in_r_bits_echo_tl_state_size: i4, auto_out_r_bits_echo_tl_state_source: %axi4index.auto_in_r_bits_echo_tl_state_source: i4, auto_out_r_bits_last: %axi4index.auto_in_r_bits_last: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_aw_valid: i1, auto_out_aw_bits_id: i4, auto_out_aw_bits_addr: i32, auto_out_aw_bits_len: i8, auto_out_aw_bits_size: i3, auto_out_aw_bits_burst: i2, auto_out_aw_bits_lock: i1, auto_out_aw_bits_cache: i4, auto_out_aw_bits_prot: i3, auto_out_aw_bits_qos: i4, auto_out_aw_bits_echo_tl_state_size: i4, auto_out_aw_bits_echo_tl_state_source: i4, auto_out_w_valid: i1, auto_out_w_bits_data: i64, auto_out_w_bits_strb: i8, auto_out_w_bits_last: i1, auto_out_b_ready: i1, auto_out_ar_valid: i1, auto_out_ar_bits_id: i4, auto_out_ar_bits_addr: i32, auto_out_ar_bits_len: i8, auto_out_ar_bits_size: i3, auto_out_ar_bits_burst: i2, auto_out_ar_bits_lock: i1, auto_out_ar_bits_cache: i4, auto_out_ar_bits_prot: i3, auto_out_ar_bits_qos: i4, auto_out_ar_bits_echo_tl_state_size: i4, auto_out_ar_bits_echo_tl_state_source: i4, auto_out_r_ready: i1) {sv.namehint = "widget.auto_out_d_valid"}
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_user_amba_prot_fetch, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget_6(auto_in_a_valid: %auto_tl_in_a_valid: i1, auto_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_tl_in_a_bits_param: i3, auto_in_a_bits_size: %auto_tl_in_a_bits_size: i3, auto_in_a_bits_source: %auto_tl_in_a_bits_source: i4, auto_in_a_bits_address: %auto_tl_in_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %auto_tl_in_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %auto_tl_in_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %auto_tl_in_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %auto_tl_in_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %auto_tl_in_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %auto_tl_in_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %auto_tl_in_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_tl_in_a_bits_data: i64, auto_in_d_ready: %auto_tl_in_d_ready: i1, auto_out_a_ready: %tl2axi4.auto_in_a_ready: i1, auto_out_d_valid: %tl2axi4.auto_in_d_valid: i1, auto_out_d_bits_opcode: %tl2axi4.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %tl2axi4.auto_in_d_bits_size: i3, auto_out_d_bits_source: %tl2axi4.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %tl2axi4.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %tl2axi4.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %tl2axi4.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_valid"}
    hw.output %axi4yank.auto_out_aw_valid, %axi4yank.auto_out_aw_bits_id, %axi4yank.auto_out_aw_bits_addr, %axi4yank.auto_out_aw_bits_len, %axi4yank.auto_out_aw_bits_size, %axi4yank.auto_out_aw_bits_burst, %axi4yank.auto_out_aw_bits_lock, %axi4yank.auto_out_aw_bits_cache, %axi4yank.auto_out_aw_bits_prot, %axi4yank.auto_out_aw_bits_qos, %axi4yank.auto_out_w_valid, %axi4yank.auto_out_w_bits_data, %axi4yank.auto_out_w_bits_strb, %axi4yank.auto_out_w_bits_last, %axi4yank.auto_out_b_ready, %axi4yank.auto_out_ar_valid, %axi4yank.auto_out_ar_bits_id, %axi4yank.auto_out_ar_bits_addr, %axi4yank.auto_out_ar_bits_len, %axi4yank.auto_out_ar_bits_size, %axi4yank.auto_out_ar_bits_burst, %axi4yank.auto_out_ar_bits_lock, %axi4yank.auto_out_ar_bits_cache, %axi4yank.auto_out_ar_bits_prot, %axi4yank.auto_out_ar_bits_qos, %axi4yank.auto_out_r_ready, %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt : i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i3, i3, i4, i1, i64, i1
  }
  hw.module private @MemoryBus(in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr : i32, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len : i8, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst : i2, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos : i4, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data : i64, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb : i8, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id : i4, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp : i2, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr : i32, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len : i8, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst : i2, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock : i1, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot : i3, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos : i4, out auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid : i1, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id : i4, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data : i64, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp : i2, in %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last : i1, in %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock : !seq.clock, in %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset : i1, out auto_bus_xing_in_a_ready : i1, in %auto_bus_xing_in_a_valid : i1, in %auto_bus_xing_in_a_bits_opcode : i3, in %auto_bus_xing_in_a_bits_param : i3, in %auto_bus_xing_in_a_bits_size : i3, in %auto_bus_xing_in_a_bits_source : i4, in %auto_bus_xing_in_a_bits_address : i32, in %auto_bus_xing_in_a_bits_user_amba_prot_bufferable : i1, in %auto_bus_xing_in_a_bits_user_amba_prot_modifiable : i1, in %auto_bus_xing_in_a_bits_user_amba_prot_readalloc : i1, in %auto_bus_xing_in_a_bits_user_amba_prot_writealloc : i1, in %auto_bus_xing_in_a_bits_user_amba_prot_privileged : i1, in %auto_bus_xing_in_a_bits_user_amba_prot_secure : i1, in %auto_bus_xing_in_a_bits_user_amba_prot_fetch : i1, in %auto_bus_xing_in_a_bits_mask : i8, in %auto_bus_xing_in_a_bits_data : i64, in %auto_bus_xing_in_d_ready : i1, out auto_bus_xing_in_d_valid : i1, out auto_bus_xing_in_d_bits_opcode : i3, out auto_bus_xing_in_d_bits_size : i3, out auto_bus_xing_in_d_bits_source : i4, out auto_bus_xing_in_d_bits_denied : i1, out auto_bus_xing_in_d_bits_data : i64, out auto_bus_xing_in_d_bits_corrupt : i1) {
    %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_clock, %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_reset = hw.instance "subsystem_mbus_clock_groups" @ClockGroupAggregator_1(auto_in_member_subsystem_pbus_0_clock: %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock: !seq.clock, auto_in_member_subsystem_pbus_0_reset: %auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset: i1) -> (auto_out_member_subsystem_pbus_0_clock: !seq.clock, auto_out_member_subsystem_pbus_0_reset: i1) {sv.namehint = "auto_out_member_subsystem_mbus_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_mbus_clock_groups.auto_out_member_subsystem_pbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_clock, %fixedClockNode.auto_out_reset = hw.instance "fixedClockNode" @FixedClockBroadcast_1(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "bundleIn_0_reset"}
    %subsystem_mbus_xbar.auto_in_a_ready, %subsystem_mbus_xbar.auto_in_d_valid, %subsystem_mbus_xbar.auto_in_d_bits_opcode, %subsystem_mbus_xbar.auto_in_d_bits_size, %subsystem_mbus_xbar.auto_in_d_bits_source, %subsystem_mbus_xbar.auto_in_d_bits_denied, %subsystem_mbus_xbar.auto_in_d_bits_data, %subsystem_mbus_xbar.auto_in_d_bits_corrupt, %subsystem_mbus_xbar.auto_out_a_valid, %subsystem_mbus_xbar.auto_out_a_bits_opcode, %subsystem_mbus_xbar.auto_out_a_bits_param, %subsystem_mbus_xbar.auto_out_a_bits_size, %subsystem_mbus_xbar.auto_out_a_bits_source, %subsystem_mbus_xbar.auto_out_a_bits_address, %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_bufferable, %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_modifiable, %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_readalloc, %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_writealloc, %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_privileged, %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_secure, %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_fetch, %subsystem_mbus_xbar.auto_out_a_bits_mask, %subsystem_mbus_xbar.auto_out_a_bits_data, %subsystem_mbus_xbar.auto_out_d_ready = hw.instance "subsystem_mbus_xbar" @TLXbar_6(auto_in_a_valid: %fixer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %fixer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %fixer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %fixer.auto_out_a_bits_size: i3, auto_in_a_bits_source: %fixer.auto_out_a_bits_source: i4, auto_in_a_bits_address: %fixer.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %fixer.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %fixer.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %fixer.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %fixer.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %fixer.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %fixer.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %fixer.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %fixer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %fixer.auto_out_a_bits_data: i64, auto_in_d_ready: %fixer.auto_out_d_ready: i1, auto_out_a_ready: %picker.auto_in_a_ready: i1, auto_out_d_valid: %picker.auto_in_d_valid: i1, auto_out_d_bits_opcode: %picker.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %picker.auto_in_d_bits_size: i3, auto_out_d_bits_source: %picker.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %picker.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %picker.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %picker.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "picker.auto_in_d_ready"}
    %fixer.auto_in_a_ready, %fixer.auto_in_d_valid, %fixer.auto_in_d_bits_opcode, %fixer.auto_in_d_bits_size, %fixer.auto_in_d_bits_source, %fixer.auto_in_d_bits_denied, %fixer.auto_in_d_bits_data, %fixer.auto_in_d_bits_corrupt, %fixer.auto_out_a_valid, %fixer.auto_out_a_bits_opcode, %fixer.auto_out_a_bits_param, %fixer.auto_out_a_bits_size, %fixer.auto_out_a_bits_source, %fixer.auto_out_a_bits_address, %fixer.auto_out_a_bits_user_amba_prot_bufferable, %fixer.auto_out_a_bits_user_amba_prot_modifiable, %fixer.auto_out_a_bits_user_amba_prot_readalloc, %fixer.auto_out_a_bits_user_amba_prot_writealloc, %fixer.auto_out_a_bits_user_amba_prot_privileged, %fixer.auto_out_a_bits_user_amba_prot_secure, %fixer.auto_out_a_bits_user_amba_prot_fetch, %fixer.auto_out_a_bits_mask, %fixer.auto_out_a_bits_data, %fixer.auto_out_d_ready = hw.instance "fixer" @TLFIFOFixer_3(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %buffer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer.auto_out_a_bits_size: i3, auto_in_a_bits_source: %buffer.auto_out_a_bits_source: i4, auto_in_a_bits_address: %buffer.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %buffer.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %buffer.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %buffer.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %buffer.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %buffer.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %buffer.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %buffer.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %buffer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer.auto_out_a_bits_data: i64, auto_in_d_ready: %buffer.auto_out_d_ready: i1, auto_out_a_ready: %subsystem_mbus_xbar.auto_in_a_ready: i1, auto_out_d_valid: %subsystem_mbus_xbar.auto_in_d_valid: i1, auto_out_d_bits_opcode: %subsystem_mbus_xbar.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %subsystem_mbus_xbar.auto_in_d_bits_size: i3, auto_out_d_bits_source: %subsystem_mbus_xbar.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %subsystem_mbus_xbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %subsystem_mbus_xbar.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %subsystem_mbus_xbar.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "fixer.auto_in_d_valid"}
    %picker.auto_in_a_ready, %picker.auto_in_d_valid, %picker.auto_in_d_bits_opcode, %picker.auto_in_d_bits_size, %picker.auto_in_d_bits_source, %picker.auto_in_d_bits_denied, %picker.auto_in_d_bits_data, %picker.auto_in_d_bits_corrupt, %picker.auto_out_a_valid, %picker.auto_out_a_bits_opcode, %picker.auto_out_a_bits_param, %picker.auto_out_a_bits_size, %picker.auto_out_a_bits_source, %picker.auto_out_a_bits_address, %picker.auto_out_a_bits_user_amba_prot_bufferable, %picker.auto_out_a_bits_user_amba_prot_modifiable, %picker.auto_out_a_bits_user_amba_prot_readalloc, %picker.auto_out_a_bits_user_amba_prot_writealloc, %picker.auto_out_a_bits_user_amba_prot_privileged, %picker.auto_out_a_bits_user_amba_prot_secure, %picker.auto_out_a_bits_user_amba_prot_fetch, %picker.auto_out_a_bits_mask, %picker.auto_out_a_bits_data, %picker.auto_out_d_ready = hw.instance "picker" @ProbePicker(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %subsystem_mbus_xbar.auto_out_a_valid: i1, auto_in_a_bits_opcode: %subsystem_mbus_xbar.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %subsystem_mbus_xbar.auto_out_a_bits_param: i3, auto_in_a_bits_size: %subsystem_mbus_xbar.auto_out_a_bits_size: i3, auto_in_a_bits_source: %subsystem_mbus_xbar.auto_out_a_bits_source: i4, auto_in_a_bits_address: %subsystem_mbus_xbar.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %subsystem_mbus_xbar.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %subsystem_mbus_xbar.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %subsystem_mbus_xbar.auto_out_a_bits_data: i64, auto_in_d_ready: %subsystem_mbus_xbar.auto_out_d_ready: i1, auto_out_a_ready: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_a_ready: i1, auto_out_d_valid: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_valid: i1, auto_out_d_bits_opcode: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_opcode: i3, auto_out_d_bits_size: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_size: i3, auto_out_d_bits_source: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_source: i4, auto_out_d_bits_denied: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_denied: i1, auto_out_d_bits_data: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_data: i64, auto_out_d_bits_corrupt: %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "picker.auto_in_d_valid"}
    %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_user_amba_prot_bufferable, %buffer.auto_out_a_bits_user_amba_prot_modifiable, %buffer.auto_out_a_bits_user_amba_prot_readalloc, %buffer.auto_out_a_bits_user_amba_prot_writealloc, %buffer.auto_out_a_bits_user_amba_prot_privileged, %buffer.auto_out_a_bits_user_amba_prot_secure, %buffer.auto_out_a_bits_user_amba_prot_fetch, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_d_ready = hw.instance "buffer" @TLBuffer_6(auto_in_a_valid: %auto_bus_xing_in_a_valid: i1, auto_in_a_bits_opcode: %auto_bus_xing_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_bus_xing_in_a_bits_param: i3, auto_in_a_bits_size: %auto_bus_xing_in_a_bits_size: i3, auto_in_a_bits_source: %auto_bus_xing_in_a_bits_source: i4, auto_in_a_bits_address: %auto_bus_xing_in_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %auto_bus_xing_in_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %auto_bus_xing_in_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %auto_bus_xing_in_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %auto_bus_xing_in_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %auto_bus_xing_in_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %auto_bus_xing_in_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %auto_bus_xing_in_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %auto_bus_xing_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_bus_xing_in_a_bits_data: i64, auto_in_d_ready: %auto_bus_xing_in_d_ready: i1, auto_out_a_ready: %fixer.auto_in_a_ready: i1, auto_out_d_valid: %fixer.auto_in_d_valid: i1, auto_out_d_bits_opcode: %fixer.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %fixer.auto_in_d_bits_size: i3, auto_out_d_bits_source: %fixer.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %fixer.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %fixer.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %fixer.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "bundleOut_0_d_valid"}
    %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_strb, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_last, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_b_ready, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_r_ready, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_a_ready, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_valid, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_opcode, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_source, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_denied, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_bits_corrupt = hw.instance "coupler_to_memory_controller_port_named_axi4" @TLInterconnectCoupler_11(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_axi4yank_out_aw_ready: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready: i1, auto_axi4yank_out_w_ready: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready: i1, auto_axi4yank_out_b_valid: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid: i1, auto_axi4yank_out_b_bits_id: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id: i4, auto_axi4yank_out_b_bits_resp: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp: i2, auto_axi4yank_out_ar_ready: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready: i1, auto_axi4yank_out_r_valid: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid: i1, auto_axi4yank_out_r_bits_id: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id: i4, auto_axi4yank_out_r_bits_data: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data: i64, auto_axi4yank_out_r_bits_resp: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp: i2, auto_axi4yank_out_r_bits_last: %auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last: i1, auto_tl_in_a_valid: %picker.auto_out_a_valid: i1, auto_tl_in_a_bits_opcode: %picker.auto_out_a_bits_opcode: i3, auto_tl_in_a_bits_param: %picker.auto_out_a_bits_param: i3, auto_tl_in_a_bits_size: %picker.auto_out_a_bits_size: i3, auto_tl_in_a_bits_source: %picker.auto_out_a_bits_source: i4, auto_tl_in_a_bits_address: %picker.auto_out_a_bits_address: i32, auto_tl_in_a_bits_user_amba_prot_bufferable: %picker.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_tl_in_a_bits_user_amba_prot_modifiable: %picker.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_tl_in_a_bits_user_amba_prot_readalloc: %picker.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_tl_in_a_bits_user_amba_prot_writealloc: %picker.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_tl_in_a_bits_user_amba_prot_privileged: %picker.auto_out_a_bits_user_amba_prot_privileged: i1, auto_tl_in_a_bits_user_amba_prot_secure: %picker.auto_out_a_bits_user_amba_prot_secure: i1, auto_tl_in_a_bits_user_amba_prot_fetch: %picker.auto_out_a_bits_user_amba_prot_fetch: i1, auto_tl_in_a_bits_mask: %picker.auto_out_a_bits_mask: i8, auto_tl_in_a_bits_data: %picker.auto_out_a_bits_data: i64, auto_tl_in_d_ready: %picker.auto_out_d_ready: i1) -> (auto_axi4yank_out_aw_valid: i1, auto_axi4yank_out_aw_bits_id: i4, auto_axi4yank_out_aw_bits_addr: i32, auto_axi4yank_out_aw_bits_len: i8, auto_axi4yank_out_aw_bits_size: i3, auto_axi4yank_out_aw_bits_burst: i2, auto_axi4yank_out_aw_bits_lock: i1, auto_axi4yank_out_aw_bits_cache: i4, auto_axi4yank_out_aw_bits_prot: i3, auto_axi4yank_out_aw_bits_qos: i4, auto_axi4yank_out_w_valid: i1, auto_axi4yank_out_w_bits_data: i64, auto_axi4yank_out_w_bits_strb: i8, auto_axi4yank_out_w_bits_last: i1, auto_axi4yank_out_b_ready: i1, auto_axi4yank_out_ar_valid: i1, auto_axi4yank_out_ar_bits_id: i4, auto_axi4yank_out_ar_bits_addr: i32, auto_axi4yank_out_ar_bits_len: i8, auto_axi4yank_out_ar_bits_size: i3, auto_axi4yank_out_ar_bits_burst: i2, auto_axi4yank_out_ar_bits_lock: i1, auto_axi4yank_out_ar_bits_cache: i4, auto_axi4yank_out_ar_bits_prot: i3, auto_axi4yank_out_ar_bits_qos: i4, auto_axi4yank_out_r_ready: i1, auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i3, auto_tl_in_d_bits_source: i4, auto_tl_in_d_bits_denied: i1, auto_tl_in_d_bits_data: i64, auto_tl_in_d_bits_corrupt: i1) {sv.namehint = "coupler_to_memory_controller_port_named_axi4.auto_tl_in_d_valid"}
    hw.output %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_aw_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_data, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_strb, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_w_bits_last, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_b_ready, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_valid, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_id, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_addr, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_len, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_size, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_burst, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_lock, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_cache, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_prot, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_ar_bits_qos, %coupler_to_memory_controller_port_named_axi4.auto_axi4yank_out_r_ready, %buffer.auto_in_a_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt : i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i3, i3, i4, i1, i64, i1
  }
  hw.module private @TLMonitor_16(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_b_ready : i1, in %io_in_b_valid : i1, in %io_in_b_bits_param : i2, in %io_in_b_bits_address : i32, in %io_in_c_ready : i1, in %io_in_c_valid : i1, in %io_in_c_bits_opcode : i3, in %io_in_c_bits_param : i3, in %io_in_c_bits_size : i3, in %io_in_c_bits_source : i2, in %io_in_c_bits_address : i32, in %io_in_c_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i3, in %io_in_d_bits_source : i2, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1, in %io_in_e_valid : i1, in %io_in_e_bits_sink : i2) {
    %c-8_i4 = hw.constant -8 : i4
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i43 = hw.constant 0 : i43
    %c-1_i2 = hw.constant -1 : i2
    %c15_i47 = hw.constant 15 : i47
    %c1_i4 = hw.constant 1 : i4
    %c63_i13 = hw.constant 63 : i13
    %c1_i2 = hw.constant 1 : i2
    %c-2_i3 = hw.constant -2 : i3
    %false = hw.constant false
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i6 = hw.constant -1 : i6
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i4 = hw.constant 0 : i4
    %c0_i12 = hw.constant 0 : i12
    %c3_i3 = hw.constant 3 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i12 = hw.constant -1 : i12
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i6 = hw.constant 0 : i6
    %c0_i10 = hw.constant 0 : i10
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.icmp bin eq %io_in_a_bits_source, %c0_i2 {sv.namehint = "_source_ok_T"} : i2
    %4 = comb.icmp bin eq %io_in_a_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_1"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_2"} : i2
    %6 = comb.concat %c0_i10, %io_in_a_bits_size : i10, i3
    %7 = comb.shl bin %c63_i13, %6 {sv.namehint = "_is_aligned_mask_T_1"} : i13
    %8 = comb.extract %7 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i13) -> i6
    %9 = comb.xor bin %8, %c-1_i6 {sv.namehint = "is_aligned_mask"} : i6
    %10 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i6
    %11 = comb.and bin %10, %9 : i6
    %12 = comb.icmp bin eq %11, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %13 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i3) -> i2
    %14 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i3 {sv.namehint = "_mask_T"} : i3
    %15 = comb.icmp eq %13, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %16 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %17 = comb.xor bin %16, %true {sv.namehint = "mask_eq"} : i1
    %18 = comb.and bin %15, %17 {sv.namehint = "_mask_acc_T"} : i1
    %19 = comb.or bin %14, %18 {sv.namehint = "mask_acc"} : i1
    %20 = comb.and bin %15, %16 {sv.namehint = "_mask_acc_T_1"} : i1
    %21 = comb.or bin %14, %20 {sv.namehint = "mask_acc_1"} : i1
    %22 = comb.icmp eq %13, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %23 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %24 = comb.xor bin %23, %true {sv.namehint = "mask_nbit_1"} : i1
    %25 = comb.and bin %17, %24 {sv.namehint = "mask_eq_2"} : i1
    %26 = comb.and bin %22, %25 {sv.namehint = "_mask_acc_T_2"} : i1
    %27 = comb.or bin %19, %26 {sv.namehint = "mask_acc_2"} : i1
    %28 = comb.and bin %17, %23 {sv.namehint = "mask_eq_3"} : i1
    %29 = comb.and bin %22, %28 {sv.namehint = "_mask_acc_T_3"} : i1
    %30 = comb.or bin %19, %29 {sv.namehint = "mask_acc_3"} : i1
    %31 = comb.and bin %16, %24 {sv.namehint = "mask_eq_4"} : i1
    %32 = comb.and bin %22, %31 {sv.namehint = "_mask_acc_T_4"} : i1
    %33 = comb.or bin %21, %32 {sv.namehint = "mask_acc_4"} : i1
    %34 = comb.and bin %16, %23 {sv.namehint = "mask_eq_5"} : i1
    %35 = comb.and bin %22, %34 {sv.namehint = "_mask_acc_T_5"} : i1
    %36 = comb.or bin %21, %35 {sv.namehint = "mask_acc_5"} : i1
    %37 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %38 = comb.xor bin %37, %true {sv.namehint = "mask_nbit_2"} : i1
    %39 = comb.and bin %25, %38 {sv.namehint = "mask_eq_6"} : i1
    %40 = comb.or bin %27, %39 {sv.namehint = "mask_lo_lo_lo"} : i1
    %41 = comb.and bin %25, %37 {sv.namehint = "mask_eq_7"} : i1
    %42 = comb.or bin %27, %41 {sv.namehint = "mask_lo_lo_hi"} : i1
    %43 = comb.and bin %28, %38 {sv.namehint = "mask_eq_8"} : i1
    %44 = comb.or bin %30, %43 {sv.namehint = "mask_lo_hi_lo"} : i1
    %45 = comb.and bin %28, %37 {sv.namehint = "mask_eq_9"} : i1
    %46 = comb.or bin %30, %45 {sv.namehint = "mask_lo_hi_hi"} : i1
    %47 = comb.and bin %31, %38 {sv.namehint = "mask_eq_10"} : i1
    %48 = comb.or bin %33, %47 {sv.namehint = "mask_hi_lo_lo"} : i1
    %49 = comb.and bin %31, %37 {sv.namehint = "mask_eq_11"} : i1
    %50 = comb.or bin %33, %49 {sv.namehint = "mask_hi_lo_hi"} : i1
    %51 = comb.and bin %34, %38 {sv.namehint = "mask_eq_12"} : i1
    %52 = comb.or bin %36, %51 {sv.namehint = "mask_hi_hi_lo"} : i1
    %53 = comb.and bin %34, %37 {sv.namehint = "mask_eq_13"} : i1
    %54 = comb.or bin %36, %53 {sv.namehint = "mask_hi_hi_hi"} : i1
    %55 = comb.concat %54, %52, %50, %48, %46, %44, %42, %40 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %56 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %57 = comb.and bin %io_in_a_valid, %56 : i1
    %58 = comb.or bin %3, %4, %5 : i1
    %59 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i3 : i3
    %60 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %61 = comb.icmp eq %60, %c-8_i4 : i4
    %62 = comb.and bin %59, %61 : i1
    %63 = comb.and bin %58, %62 : i1
    %64 = comb.or bin %63, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %57, %65 : i1
    %67 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i3 : i3
    %68 = comb.and bin %3, %67, %61 : i1
    %69 = comb.or bin %68, %reset : i1
    %70 = comb.xor bin %69, %true : i1
    %71 = comb.and bin %57, %70 : i1
    %72 = comb.or bin %3, %4, %5, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %57, %73 : i1
    %75 = comb.or bin %14, %reset : i1
    %76 = comb.xor bin %75, %true : i1
    %77 = comb.and bin %57, %76 : i1
    %78 = comb.or bin %12, %reset : i1
    %79 = comb.xor bin %78, %true : i1
    %80 = comb.and bin %57, %79 : i1
    %81 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %82 = comb.or bin %81, %reset : i1
    %83 = comb.xor bin %82, %true : i1
    %84 = comb.and bin %57, %83 : i1
    %85 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %86 = comb.or bin %85, %reset : i1
    %87 = comb.xor bin %86, %true : i1
    %88 = comb.and bin %57, %87 : i1
    %89 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %90 = comb.or bin %89, %reset : i1
    %91 = comb.xor bin %90, %true : i1
    %92 = comb.and bin %57, %91 : i1
    %93 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %94 = comb.and bin %io_in_a_valid, %93 : i1
    %95 = comb.and bin %94, %65 : i1
    %96 = comb.and bin %3, %67, %61 : i1
    %97 = comb.or bin %96, %reset : i1
    %98 = comb.xor bin %97, %true : i1
    %99 = comb.and bin %94, %98 : i1
    %100 = comb.and bin %94, %73 : i1
    %101 = comb.and bin %94, %76 : i1
    %102 = comb.and bin %94, %79 : i1
    %103 = comb.and bin %94, %83 : i1
    %104 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %105 = comb.or bin %104, %reset : i1
    %106 = comb.xor bin %105, %true : i1
    %107 = comb.and bin %94, %106 : i1
    %108 = comb.and bin %94, %87 : i1
    %109 = comb.and bin %94, %91 : i1
    %110 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %111 = comb.and bin %io_in_a_valid, %110 : i1
    %112 = comb.or bin %58, %reset : i1
    %113 = comb.xor bin %112, %true : i1
    %114 = comb.and bin %111, %113 : i1
    %115 = comb.or bin %62, %reset : i1
    %116 = comb.xor bin %115, %true : i1
    %117 = comb.and bin %111, %116 : i1
    %118 = comb.and bin %111, %73 : i1
    %119 = comb.and bin %111, %79 : i1
    %120 = comb.xor bin %104, %true : i1
    %121 = comb.or bin %120, %reset : i1
    %122 = comb.xor bin %121, %true : i1
    %123 = comb.and bin %111, %122 : i1
    %124 = comb.icmp bin eq %io_in_a_bits_mask, %55 : i8
    %125 = comb.or bin %124, %reset : i1
    %126 = comb.xor bin %125, %true : i1
    %127 = comb.and bin %111, %126 : i1
    %128 = comb.and bin %111, %91 : i1
    %129 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %130 = comb.and bin %io_in_a_valid, %129 : i1
    %131 = comb.and bin %130, %65 : i1
    %132 = comb.and bin %130, %73 : i1
    %133 = comb.and bin %130, %79 : i1
    %134 = comb.and bin %130, %122 : i1
    %135 = comb.and bin %130, %126 : i1
    %136 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %137 = comb.and bin %io_in_a_valid, %136 : i1
    %138 = comb.and bin %137, %65 : i1
    %139 = comb.and bin %137, %73 : i1
    %140 = comb.and bin %137, %79 : i1
    %141 = comb.and bin %137, %122 : i1
    %142 = comb.xor bin %55, %c-1_i8 : i8
    %143 = comb.and bin %io_in_a_bits_mask, %142 : i8
    %144 = comb.icmp bin eq %143, %c0_i8 : i8
    %145 = comb.or bin %144, %reset : i1
    %146 = comb.xor bin %145, %true : i1
    %147 = comb.and bin %137, %146 : i1
    %148 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %149 = comb.and bin %io_in_a_valid, %148 : i1
    %150 = comb.xor bin %reset, %true : i1
    %151 = comb.and bin %149, %150 : i1
    %152 = comb.and bin %149, %73 : i1
    %153 = comb.and bin %149, %79 : i1
    %154 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %155 = comb.or bin %154, %reset : i1
    %156 = comb.xor bin %155, %true : i1
    %157 = comb.and bin %149, %156 : i1
    %158 = comb.and bin %149, %126 : i1
    %159 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %160 = comb.and bin %io_in_a_valid, %159 : i1
    %161 = comb.and bin %160, %150 : i1
    %162 = comb.and bin %160, %73 : i1
    %163 = comb.and bin %160, %79 : i1
    %164 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %165 = comb.xor bin %164, %true : i1
    %166 = comb.or bin %165, %reset : i1
    %167 = comb.xor bin %166, %true : i1
    %168 = comb.and bin %160, %167 : i1
    %169 = comb.and bin %160, %126 : i1
    %170 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %171 = comb.and bin %io_in_a_valid, %170 : i1
    %172 = comb.and bin %171, %150 : i1
    %173 = comb.and bin %171, %73 : i1
    %174 = comb.and bin %171, %79 : i1
    %175 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %176 = comb.or bin %175, %reset : i1
    %177 = comb.xor bin %176, %true : i1
    %178 = comb.and bin %171, %177 : i1
    %179 = comb.and bin %171, %126 : i1
    %180 = comb.and bin %171, %91 : i1
    %181 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %182 = comb.or bin %181, %reset : i1
    %183 = comb.xor bin %182, %true : i1
    %184 = comb.and bin %io_in_d_valid, %183 : i1
    %185 = comb.icmp bin eq %io_in_d_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_4"} : i2
    %186 = comb.icmp bin eq %io_in_d_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %187 = comb.icmp bin eq %io_in_d_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_6"} : i2
    %188 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %189 = comb.and bin %io_in_d_valid, %188 : i1
    %190 = comb.or bin %185, %186, %187, %reset : i1
    %191 = comb.xor bin %190, %true : i1
    %192 = comb.and bin %189, %191 : i1
    %193 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i3 : i3
    %194 = comb.or bin %193, %reset : i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.and bin %189, %195 : i1
    %197 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %198 = comb.or bin %197, %reset : i1
    %199 = comb.xor bin %198, %true : i1
    %200 = comb.and bin %189, %199 : i1
    %201 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %202 = comb.or bin %201, %reset : i1
    %203 = comb.xor bin %202, %true : i1
    %204 = comb.and bin %189, %203 : i1
    %205 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %206 = comb.or bin %205, %reset : i1
    %207 = comb.xor bin %206, %true : i1
    %208 = comb.and bin %189, %207 : i1
    %209 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %210 = comb.and bin %io_in_d_valid, %209 : i1
    %211 = comb.and bin %210, %191 : i1
    %212 = comb.and bin %210, %195 : i1
    %213 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %214 = comb.or bin %213, %reset : i1
    %215 = comb.xor bin %214, %true : i1
    %216 = comb.and bin %210, %215 : i1
    %217 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %218 = comb.or bin %217, %reset : i1
    %219 = comb.xor bin %218, %true : i1
    %220 = comb.and bin %210, %219 : i1
    %221 = comb.and bin %210, %203 : i1
    %222 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %223 = comb.and bin %io_in_d_valid, %222 : i1
    %224 = comb.and bin %223, %191 : i1
    %225 = comb.and bin %223, %195 : i1
    %226 = comb.and bin %223, %215 : i1
    %227 = comb.and bin %223, %219 : i1
    %228 = comb.or bin %205, %io_in_d_bits_corrupt, %reset : i1
    %229 = comb.xor bin %228, %true : i1
    %230 = comb.and bin %223, %229 : i1
    %231 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %232 = comb.and bin %io_in_d_valid, %231 : i1
    %233 = comb.and bin %232, %191 : i1
    %234 = comb.and bin %232, %199 : i1
    %235 = comb.and bin %232, %203 : i1
    %236 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %237 = comb.and bin %io_in_d_valid, %236 : i1
    %238 = comb.and bin %237, %191 : i1
    %239 = comb.and bin %237, %199 : i1
    %240 = comb.and bin %237, %229 : i1
    %241 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %242 = comb.and bin %io_in_d_valid, %241 : i1
    %243 = comb.and bin %242, %191 : i1
    %244 = comb.and bin %242, %199 : i1
    %245 = comb.and bin %242, %203 : i1
    %246 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %247 = comb.icmp ne %246, %c-8_i4 : i4
    %248 = comb.xor bin %247, %true {sv.namehint = "_address_ok_T_4"} : i1
    %249 = comb.extract %io_in_b_bits_address from 0 : (i32) -> i6
    %250 = comb.icmp bin eq %249, %c0_i6 {sv.namehint = "is_aligned_1"} : i6
    %251 = comb.xor bin %247, %true : i1
    %252 = comb.or bin %251, %reset : i1
    %253 = comb.xor bin %252, %true : i1
    %254 = comb.and bin %io_in_b_valid, %253 : i1
    %255 = comb.or bin %248, %reset : i1
    %256 = comb.xor bin %255, %true : i1
    %257 = comb.and bin %io_in_b_valid, %256 : i1
    %258 = comb.or bin %250, %reset : i1
    %259 = comb.xor bin %258, %true : i1
    %260 = comb.and bin %io_in_b_valid, %259 : i1
    %261 = comb.icmp bin ne %io_in_b_bits_param, %c-1_i2 : i2
    %262 = comb.or bin %261, %reset : i1
    %263 = comb.xor bin %262, %true : i1
    %264 = comb.and bin %io_in_b_valid, %263 : i1
    %265 = comb.icmp bin eq %io_in_c_bits_source, %c0_i2 {sv.namehint = "_source_ok_T_8"} : i2
    %266 = comb.icmp bin eq %io_in_c_bits_source, %c1_i2 {sv.namehint = "_source_ok_T_9"} : i2
    %267 = comb.icmp bin eq %io_in_c_bits_source, %c-2_i2 {sv.namehint = "_source_ok_T_10"} : i2
    %268 = comb.concat %c0_i10, %io_in_c_bits_size : i10, i3
    %269 = comb.shl bin %c63_i13, %268 {sv.namehint = "_is_aligned_mask_T_7"} : i13
    %270 = comb.extract %269 from 0 {sv.namehint = "_is_aligned_mask_T_8"} : (i13) -> i6
    %271 = comb.xor bin %270, %c-1_i6 {sv.namehint = "is_aligned_mask_2"} : i6
    %272 = comb.extract %io_in_c_bits_address from 0 : (i32) -> i6
    %273 = comb.and bin %272, %271 : i6
    %274 = comb.icmp bin eq %273, %c0_i6 {sv.namehint = "is_aligned_2"} : i6
    %275 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %276 = comb.icmp ne %275, %c-8_i4 : i4
    %277 = comb.xor bin %276, %true {sv.namehint = "_address_ok_T_9"} : i1
    %278 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 : i3
    %279 = comb.and bin %io_in_c_valid, %278 : i1
    %280 = comb.or bin %277, %reset : i1
    %281 = comb.xor bin %280, %true : i1
    %282 = comb.and bin %279, %281 : i1
    %283 = comb.or bin %265, %266, %267, %reset : i1
    %284 = comb.xor bin %283, %true : i1
    %285 = comb.and bin %279, %284 : i1
    %286 = comb.icmp bin ugt %io_in_c_bits_size, %c2_i3 : i3
    %287 = comb.or bin %286, %reset : i1
    %288 = comb.xor bin %287, %true : i1
    %289 = comb.and bin %279, %288 : i1
    %290 = comb.or bin %274, %reset : i1
    %291 = comb.xor bin %290, %true : i1
    %292 = comb.and bin %279, %291 : i1
    %293 = comb.extract %io_in_c_bits_param from 1 : (i3) -> i2
    %294 = comb.icmp bin ne %293, %c-1_i2 : i2
    %295 = comb.or bin %294, %reset : i1
    %296 = comb.xor bin %295, %true : i1
    %297 = comb.and bin %279, %296 : i1
    %298 = comb.xor bin %io_in_c_bits_corrupt, %true : i1
    %299 = comb.or bin %298, %reset : i1
    %300 = comb.xor bin %299, %true : i1
    %301 = comb.and bin %279, %300 : i1
    %302 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 : i3
    %303 = comb.and bin %io_in_c_valid, %302 : i1
    %304 = comb.and bin %303, %281 : i1
    %305 = comb.and bin %303, %284 : i1
    %306 = comb.and bin %303, %288 : i1
    %307 = comb.and bin %303, %291 : i1
    %308 = comb.and bin %303, %296 : i1
    %309 = comb.icmp bin eq %io_in_c_bits_opcode, %c-2_i3 : i3
    %310 = comb.and bin %io_in_c_valid, %309 : i1
    %311 = comb.or bin %265, %266, %267 : i1
    %312 = comb.icmp bin ne %io_in_c_bits_size, %c-1_i3 : i3
    %313 = comb.xor bin %276, %true : i1
    %314 = comb.and bin %311, %312, %313 : i1
    %315 = comb.or bin %314, %reset : i1
    %316 = comb.xor bin %315, %true : i1
    %317 = comb.and bin %310, %316 : i1
    %318 = comb.icmp bin eq %io_in_c_bits_size, %c-2_i3 : i3
    %319 = comb.and bin %265, %318, %313 : i1
    %320 = comb.or bin %319, %reset : i1
    %321 = comb.xor bin %320, %true : i1
    %322 = comb.and bin %310, %321 : i1
    %323 = comb.and bin %310, %284 : i1
    %324 = comb.and bin %310, %288 : i1
    %325 = comb.and bin %310, %291 : i1
    %326 = comb.and bin %310, %296 : i1
    %327 = comb.and bin %310, %300 : i1
    %328 = comb.icmp bin eq %io_in_c_bits_opcode, %c-1_i3 : i3
    %329 = comb.and bin %io_in_c_valid, %328 : i1
    %330 = comb.and bin %329, %316 : i1
    %331 = comb.and bin %265, %318, %313 : i1
    %332 = comb.or bin %331, %reset : i1
    %333 = comb.xor bin %332, %true : i1
    %334 = comb.and bin %329, %333 : i1
    %335 = comb.and bin %329, %284 : i1
    %336 = comb.and bin %329, %288 : i1
    %337 = comb.and bin %329, %291 : i1
    %338 = comb.and bin %329, %296 : i1
    %339 = comb.icmp bin eq %io_in_c_bits_opcode, %c0_i3 : i3
    %340 = comb.and bin %io_in_c_valid, %339 : i1
    %341 = comb.and bin %340, %281 : i1
    %342 = comb.and bin %340, %284 : i1
    %343 = comb.and bin %340, %291 : i1
    %344 = comb.icmp bin eq %io_in_c_bits_param, %c0_i3 : i3
    %345 = comb.or bin %344, %reset : i1
    %346 = comb.xor bin %345, %true : i1
    %347 = comb.and bin %340, %346 : i1
    %348 = comb.and bin %340, %300 : i1
    %349 = comb.icmp bin eq %io_in_c_bits_opcode, %c1_i3 : i3
    %350 = comb.and bin %io_in_c_valid, %349 : i1
    %351 = comb.and bin %350, %281 : i1
    %352 = comb.and bin %350, %284 : i1
    %353 = comb.and bin %350, %291 : i1
    %354 = comb.and bin %350, %346 : i1
    %355 = comb.icmp bin eq %io_in_c_bits_opcode, %c2_i3 : i3
    %356 = comb.and bin %io_in_c_valid, %355 : i1
    %357 = comb.and bin %356, %281 : i1
    %358 = comb.and bin %356, %284 : i1
    %359 = comb.and bin %356, %291 : i1
    %360 = comb.and bin %356, %346 : i1
    %361 = comb.and bin %356, %300 : i1
    %362 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %363 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_1"} : i13
    %364 = comb.extract %363 from 3 : (i13) -> i3
    %365 = comb.xor %364, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_3"} : i3
    %366 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %367 = comb.mux bin %366, %c0_i3, %365 {sv.namehint = "a_first_beats1"} : i3
    %a_first_counter = seq.firreg %372 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %368 = comb.add %a_first_counter, %c-1_i3 {sv.namehint = "_a_first_counter1_T"} : i3
    %369 = comb.icmp bin ne %a_first_counter, %c0_i3 : i3
    %370 = comb.xor bin %369, %true {sv.namehint = "a_first"} : i1
    %371 = comb.mux bin %369, %368, %367 {sv.namehint = "_a_first_counter_T"} : i3
    %372 = comb.mux bin %362, %371, %a_first_counter : i3
    %opcode = seq.firreg %395 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %396 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %397 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %source = seq.firreg %398 clock %clock {firrtl.random_init_start = 12 : ui64} : i2
    %address = seq.firreg %399 clock %clock {firrtl.random_init_start = 14 : ui64} : i32
    %373 = comb.and bin %io_in_a_valid, %369 : i1
    %374 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %375 = comb.or bin %374, %reset : i1
    %376 = comb.xor bin %375, %true : i1
    %377 = comb.and bin %373, %376 : i1
    %378 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %379 = comb.or bin %378, %reset : i1
    %380 = comb.xor bin %379, %true : i1
    %381 = comb.and bin %373, %380 : i1
    %382 = comb.icmp bin eq %io_in_a_bits_size, %size : i3
    %383 = comb.or bin %382, %reset : i1
    %384 = comb.xor bin %383, %true : i1
    %385 = comb.and bin %373, %384 : i1
    %386 = comb.icmp bin eq %io_in_a_bits_source, %source : i2
    %387 = comb.or bin %386, %reset : i1
    %388 = comb.xor bin %387, %true : i1
    %389 = comb.and bin %373, %388 : i1
    %390 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %391 = comb.or bin %390, %reset : i1
    %392 = comb.xor bin %391, %true : i1
    %393 = comb.and bin %373, %392 : i1
    %394 = comb.and bin %362, %370 : i1
    %395 = comb.mux bin %394, %io_in_a_bits_opcode, %opcode : i3
    %396 = comb.mux bin %394, %io_in_a_bits_param, %param : i3
    %397 = comb.mux bin %394, %io_in_a_bits_size, %size : i3
    %398 = comb.mux bin %394, %io_in_a_bits_source, %source : i2
    %399 = comb.mux bin %394, %io_in_a_bits_address, %address : i32
    %400 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_3"} : i1
    %401 = comb.concat %c0_i10, %io_in_d_bits_size : i10, i3
    %402 = comb.shl bin %c63_i13, %401 {sv.namehint = "_d_first_beats1_decode_T_1"} : i13
    %403 = comb.extract %402 from 3 : (i13) -> i3
    %404 = comb.xor %403, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_3"} : i3
    %405 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %406 = comb.mux bin %405, %404, %c0_i3 {sv.namehint = "d_first_beats1"} : i3
    %d_first_counter = seq.firreg %411 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 46 : ui64} : i3
    %407 = comb.add %d_first_counter, %c-1_i3 {sv.namehint = "_d_first_counter1_T"} : i3
    %408 = comb.icmp bin ne %d_first_counter, %c0_i3 : i3
    %409 = comb.xor bin %408, %true {sv.namehint = "d_first"} : i1
    %410 = comb.mux bin %408, %407, %406 {sv.namehint = "_d_first_counter_T"} : i3
    %411 = comb.mux bin %400, %410, %d_first_counter : i3
    %opcode_1 = seq.firreg %438 clock %clock {firrtl.random_init_start = 49 : ui64} : i3
    %param_1 = seq.firreg %439 clock %clock {firrtl.random_init_start = 52 : ui64} : i2
    %size_1 = seq.firreg %440 clock %clock {firrtl.random_init_start = 54 : ui64} : i3
    %source_1 = seq.firreg %441 clock %clock {firrtl.random_init_start = 57 : ui64} : i2
    %sink = seq.firreg %442 clock %clock {firrtl.random_init_start = 59 : ui64} : i2
    %denied = seq.firreg %443 clock %clock {firrtl.random_init_start = 61 : ui64} : i1
    %412 = comb.and bin %io_in_d_valid, %408 : i1
    %413 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %414 = comb.or bin %413, %reset : i1
    %415 = comb.xor bin %414, %true : i1
    %416 = comb.and bin %412, %415 : i1
    %417 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %418 = comb.or bin %417, %reset : i1
    %419 = comb.xor bin %418, %true : i1
    %420 = comb.and bin %412, %419 : i1
    %421 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i3
    %422 = comb.or bin %421, %reset : i1
    %423 = comb.xor bin %422, %true : i1
    %424 = comb.and bin %412, %423 : i1
    %425 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i2
    %426 = comb.or bin %425, %reset : i1
    %427 = comb.xor bin %426, %true : i1
    %428 = comb.and bin %412, %427 : i1
    %429 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %430 = comb.or bin %429, %reset : i1
    %431 = comb.xor bin %430, %true : i1
    %432 = comb.and bin %412, %431 : i1
    %433 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %434 = comb.or bin %433, %reset : i1
    %435 = comb.xor bin %434, %true : i1
    %436 = comb.and bin %412, %435 : i1
    %437 = comb.and bin %400, %409 : i1
    %438 = comb.mux bin %437, %io_in_d_bits_opcode, %opcode_1 : i3
    %439 = comb.mux bin %437, %io_in_d_bits_param, %param_1 : i2
    %440 = comb.mux bin %437, %io_in_d_bits_size, %size_1 : i3
    %441 = comb.mux bin %437, %io_in_d_bits_source, %source_1 : i2
    %442 = comb.mux bin %437, %io_in_d_bits_sink, %sink : i2
    %443 = comb.mux bin %437, %io_in_d_bits_denied, %denied : i1
    %444 = comb.and bin %io_in_b_ready, %io_in_b_valid {sv.namehint = "b_first_done"} : i1
    %b_first_counter = seq.firreg %449 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 62 : ui64} : i3
    %445 = comb.add %b_first_counter, %c-1_i3 {sv.namehint = "_b_first_counter1_T"} : i3
    %446 = comb.icmp bin ne %b_first_counter, %c0_i3 : i3
    %447 = comb.xor bin %446, %true {sv.namehint = "b_first"} : i1
    %448 = comb.mux bin %446, %445, %c0_i3 {sv.namehint = "_b_first_counter_T"} : i3
    %449 = comb.mux bin %444, %448, %b_first_counter : i3
    %param_2 = seq.firreg %460 clock %clock {firrtl.random_init_start = 68 : ui64} : i2
    %address_1 = seq.firreg %461 clock %clock {firrtl.random_init_start = 75 : ui64} : i32
    %450 = comb.and bin %io_in_b_valid, %446 : i1
    %451 = comb.icmp bin eq %io_in_b_bits_param, %param_2 : i2
    %452 = comb.or bin %451, %reset : i1
    %453 = comb.xor bin %452, %true : i1
    %454 = comb.and bin %450, %453 : i1
    %455 = comb.icmp bin eq %io_in_b_bits_address, %address_1 : i32
    %456 = comb.or bin %455, %reset : i1
    %457 = comb.xor bin %456, %true : i1
    %458 = comb.and bin %450, %457 : i1
    %459 = comb.and bin %444, %447 : i1
    %460 = comb.mux bin %459, %io_in_b_bits_param, %param_2 : i2
    %461 = comb.mux bin %459, %io_in_b_bits_address, %address_1 : i32
    %462 = comb.and bin %io_in_c_ready, %io_in_c_valid {sv.namehint = "_c_first_T_1"} : i1
    %463 = comb.shl bin %c63_i13, %268 {sv.namehint = "_c_first_beats1_decode_T_1"} : i13
    %464 = comb.extract %463 from 3 : (i13) -> i3
    %465 = comb.xor %464, %c-1_i3 {sv.namehint = "_c_first_beats1_decode_T_3"} : i3
    %466 = comb.extract %io_in_c_bits_opcode from 0 {sv.namehint = "c_first_beats1_opdata"} : (i3) -> i1
    %467 = comb.mux bin %466, %465, %c0_i3 {sv.namehint = "c_first_beats1"} : i3
    %c_first_counter = seq.firreg %472 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 107 : ui64} : i3
    %468 = comb.add %c_first_counter, %c-1_i3 {sv.namehint = "_c_first_counter1_T"} : i3
    %469 = comb.icmp bin ne %c_first_counter, %c0_i3 : i3
    %470 = comb.xor bin %469, %true {sv.namehint = "c_first"} : i1
    %471 = comb.mux bin %469, %468, %467 {sv.namehint = "_c_first_counter_T"} : i3
    %472 = comb.mux bin %462, %471, %c_first_counter : i3
    %opcode_3 = seq.firreg %495 clock %clock {firrtl.random_init_start = 110 : ui64} : i3
    %param_3 = seq.firreg %496 clock %clock {firrtl.random_init_start = 113 : ui64} : i3
    %size_3 = seq.firreg %497 clock %clock {firrtl.random_init_start = 116 : ui64} : i3
    %source_3 = seq.firreg %498 clock %clock {firrtl.random_init_start = 119 : ui64} : i2
    %address_2 = seq.firreg %499 clock %clock {firrtl.random_init_start = 121 : ui64} : i32
    %473 = comb.and bin %io_in_c_valid, %469 : i1
    %474 = comb.icmp bin eq %io_in_c_bits_opcode, %opcode_3 : i3
    %475 = comb.or bin %474, %reset : i1
    %476 = comb.xor bin %475, %true : i1
    %477 = comb.and bin %473, %476 : i1
    %478 = comb.icmp bin eq %io_in_c_bits_param, %param_3 : i3
    %479 = comb.or bin %478, %reset : i1
    %480 = comb.xor bin %479, %true : i1
    %481 = comb.and bin %473, %480 : i1
    %482 = comb.icmp bin eq %io_in_c_bits_size, %size_3 : i3
    %483 = comb.or bin %482, %reset : i1
    %484 = comb.xor bin %483, %true : i1
    %485 = comb.and bin %473, %484 : i1
    %486 = comb.icmp bin eq %io_in_c_bits_source, %source_3 : i2
    %487 = comb.or bin %486, %reset : i1
    %488 = comb.xor bin %487, %true : i1
    %489 = comb.and bin %473, %488 : i1
    %490 = comb.icmp bin eq %io_in_c_bits_address, %address_2 : i32
    %491 = comb.or bin %490, %reset : i1
    %492 = comb.xor bin %491, %true : i1
    %493 = comb.and bin %473, %492 : i1
    %494 = comb.and bin %462, %470 : i1
    %495 = comb.mux bin %494, %io_in_c_bits_opcode, %opcode_3 : i3
    %496 = comb.mux bin %494, %io_in_c_bits_param, %param_3 : i3
    %497 = comb.mux bin %494, %io_in_c_bits_size, %size_3 : i3
    %498 = comb.mux bin %494, %io_in_c_bits_source, %source_3 : i2
    %499 = comb.mux bin %494, %io_in_c_bits_address, %address_2 : i32
    %inflight = seq.firreg %617 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 153 : ui64} : i3
    %inflight_opcodes = seq.firreg %620 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 156 : ui64} : i12
    %inflight_sizes = seq.firreg %623 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 168 : ui64} : i12
    %500 = comb.shl bin %c63_i13, %6 {sv.namehint = "_a_first_beats1_decode_T_5"} : i13
    %501 = comb.extract %500 from 3 : (i13) -> i3
    %502 = comb.xor %501, %c-1_i3 {sv.namehint = "_a_first_beats1_decode_T_7"} : i3
    %503 = comb.mux bin %366, %c0_i3, %502 {sv.namehint = "a_first_beats1_1"} : i3
    %a_first_counter_1 = seq.firreg %507 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 180 : ui64} : i3
    %504 = comb.add %a_first_counter_1, %c-1_i3 {sv.namehint = "_a_first_counter1_T_1"} : i3
    %505 = comb.icmp bin eq %a_first_counter_1, %c0_i3 {sv.namehint = "a_first_1"} : i3
    %506 = comb.mux bin %505, %503, %504 {sv.namehint = "_a_first_counter_T_1"} : i3
    %507 = comb.mux bin %362, %506, %a_first_counter_1 : i3
    %508 = comb.shl bin %c63_i13, %401 {sv.namehint = "_d_first_beats1_decode_T_5"} : i13
    %509 = comb.extract %508 from 3 : (i13) -> i3
    %510 = comb.xor %509, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_7"} : i3
    %511 = comb.mux bin %405, %510, %c0_i3 {sv.namehint = "d_first_beats1_1"} : i3
    %d_first_counter_1 = seq.firreg %515 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 183 : ui64} : i3
    %512 = comb.add %d_first_counter_1, %c-1_i3 {sv.namehint = "_d_first_counter1_T_1"} : i3
    %513 = comb.icmp bin eq %d_first_counter_1, %c0_i3 {sv.namehint = "d_first_1"} : i3
    %514 = comb.mux bin %513, %511, %512 {sv.namehint = "_d_first_counter_T_1"} : i3
    %515 = comb.mux bin %400, %514, %d_first_counter_1 : i3
    %516 = comb.concat %c0_i8, %io_in_d_bits_source, %c0_i2 : i8, i2, i2
    %517 = comb.shru bin %inflight_opcodes, %516 {sv.namehint = "_a_opcode_lookup_T_1"} : i12
    %518 = comb.extract %517 from 1 : (i12) -> i3
    %519 = comb.shru bin %inflight_sizes, %516 {sv.namehint = "_a_size_lookup_T_1"} : i12
    %520 = comb.extract %519 from 1 : (i12) -> i3
    %521 = comb.and bin %io_in_a_valid, %505 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %522 = comb.concat %c0_i2, %io_in_a_bits_source : i2, i2
    %523 = comb.shl bin %c1_i4, %522 {sv.namehint = "_a_set_wo_ready_T"} : i4
    %524 = comb.extract %523 from 0 : (i4) -> i3
    %525 = comb.mux bin %521, %524, %c0_i3 {sv.namehint = "a_set_wo_ready"} : i3
    %526 = comb.and bin %362, %505 : i1
    %527 = comb.shl bin %c1_i4, %522 {sv.namehint = "_a_set_T"} : i4
    %528 = comb.extract %527 from 0 : (i4) -> i3
    %529 = comb.mux bin %526, %528, %c0_i3 {sv.namehint = "a_set"} : i3
    %530 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %531 = comb.mux bin %526, %530, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %532 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i3, i1
    %533 = comb.mux bin %526, %532, %c0_i4 {sv.namehint = "a_sizes_set_interm"} : i4
    %534 = comb.concat %c0_i31, %531 : i31, i4
    %535 = comb.concat %c0_i31, %io_in_a_bits_source, %c0_i2 : i31, i2, i2
    %536 = comb.shl bin %534, %535 {sv.namehint = "_a_opcodes_set_T_1"} : i35
    %537 = comb.extract %536 from 0 : (i35) -> i12
    %538 = comb.mux bin %526, %537, %c0_i12 {sv.namehint = "a_opcodes_set"} : i12
    %539 = comb.concat %c0_i31, %533 : i31, i4
    %540 = comb.shl bin %539, %535 {sv.namehint = "_a_sizes_set_T_1"} : i35
    %541 = comb.extract %540 from 0 : (i35) -> i12
    %542 = comb.mux bin %526, %541, %c0_i12 {sv.namehint = "a_sizes_set"} : i12
    %543 = comb.concat %false, %io_in_a_bits_source : i1, i2
    %544 = comb.shru bin %inflight, %543 : i3
    %545 = comb.extract %544 from 0 : (i3) -> i1
    %546 = comb.xor bin %545, %true : i1
    %547 = comb.or bin %546, %reset : i1
    %548 = comb.xor bin %547, %true : i1
    %549 = comb.and bin %526, %548 : i1
    %550 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %551 = comb.and bin %io_in_d_valid, %513 : i1
    %552 = comb.xor bin %550, %true : i1
    %553 = comb.and bin %551, %552 : i1
    %554 = comb.concat %c0_i2, %io_in_d_bits_source : i2, i2
    %555 = comb.shl bin %c1_i4, %554 {sv.namehint = "_d_clr_wo_ready_T"} : i4
    %556 = comb.extract %555 from 0 : (i4) -> i3
    %557 = comb.mux bin %553, %556, %c0_i3 {sv.namehint = "d_clr_wo_ready"} : i3
    %558 = comb.and bin %400, %513, %552 : i1
    %559 = comb.shl bin %c1_i4, %554 {sv.namehint = "_d_clr_T"} : i4
    %560 = comb.extract %559 from 0 : (i4) -> i3
    %561 = comb.mux bin %558, %560, %c0_i3 {sv.namehint = "d_clr"} : i3
    %562 = comb.concat %c0_i43, %io_in_d_bits_source, %c0_i2 : i43, i2, i2
    %563 = comb.shl bin %c15_i47, %562 {sv.namehint = "_d_opcodes_clr_T_5"} : i47
    %564 = comb.extract %563 from 0 : (i47) -> i12
    %565 = comb.mux bin %558, %564, %c0_i12 {sv.namehint = "d_opcodes_clr"} : i12
    %566 = comb.shl bin %c15_i47, %562 {sv.namehint = "_d_sizes_clr_T_5"} : i47
    %567 = comb.extract %566 from 0 : (i47) -> i12
    %568 = comb.mux bin %558, %567, %c0_i12 {sv.namehint = "d_sizes_clr"} : i12
    %569 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i2
    %570 = comb.and bin %521, %569 {sv.namehint = "same_cycle_resp"} : i1
    %571 = comb.concat %false, %io_in_d_bits_source : i1, i2
    %572 = comb.shru bin %inflight, %571 : i3
    %573 = comb.extract %572 from 0 : (i3) -> i1
    %574 = comb.or bin %573, %570, %reset : i1
    %575 = comb.xor bin %574, %true : i1
    %576 = comb.and bin %553, %575 : i1
    %577 = comb.and bin %553, %570 : i1
    %578 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %579 = comb.icmp bin eq %io_in_d_bits_opcode, %578 : i3
    %580 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %581 = comb.icmp bin eq %io_in_d_bits_opcode, %580 : i3
    %582 = comb.or bin %579, %581, %reset : i1
    %583 = comb.xor bin %582, %true : i1
    %584 = comb.and bin %577, %583 : i1
    %585 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i3
    %586 = comb.or bin %585, %reset : i1
    %587 = comb.xor bin %586, %true : i1
    %588 = comb.and bin %577, %587 : i1
    %589 = comb.xor bin %570, %true : i1
    %590 = comb.and bin %553, %589 : i1
    %591 = hw.array_get %1[%518] : !hw.array<8xi3>, i3
    %592 = comb.icmp bin eq %io_in_d_bits_opcode, %591 : i3
    %593 = hw.array_get %0[%518] : !hw.array<8xi3>, i3
    %594 = comb.icmp bin eq %io_in_d_bits_opcode, %593 : i3
    %595 = comb.or bin %592, %594, %reset : i1
    %596 = comb.xor bin %595, %true : i1
    %597 = comb.and bin %590, %596 : i1
    %598 = comb.icmp bin eq %io_in_d_bits_size, %520 : i3
    %599 = comb.or bin %598, %reset : i1
    %600 = comb.xor bin %599, %true : i1
    %601 = comb.and bin %590, %600 : i1
    %602 = comb.and bin %551, %505 : i1
    %603 = comb.and bin %602, %io_in_a_valid : i1
    %604 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i2
    %605 = comb.and bin %603, %604 : i1
    %606 = comb.and bin %605, %552 : i1
    %607 = comb.xor bin %io_in_d_ready, %true : i1
    %608 = comb.or bin %607, %io_in_a_ready, %reset : i1
    %609 = comb.xor bin %608, %true : i1
    %610 = comb.and bin %606, %609 : i1
    %611 = comb.icmp bin ne %525, %557 : i3
    %612 = comb.icmp bin eq %525, %c0_i3 : i3
    %613 = comb.or bin %611, %612, %reset : i1
    %614 = comb.xor bin %613, %true : i1
    %615 = comb.or bin %inflight, %529 {sv.namehint = "_inflight_T"} : i3
    %616 = comb.xor bin %561, %c-1_i3 {sv.namehint = "_inflight_T_1"} : i3
    %617 = comb.and bin %615, %616 {sv.namehint = "_inflight_T_2"} : i3
    %618 = comb.or bin %inflight_opcodes, %538 {sv.namehint = "_inflight_opcodes_T"} : i12
    %619 = comb.xor bin %565, %c-1_i12 {sv.namehint = "_inflight_opcodes_T_1"} : i12
    %620 = comb.and bin %618, %619 {sv.namehint = "_inflight_opcodes_T_2"} : i12
    %621 = comb.or bin %inflight_sizes, %542 {sv.namehint = "_inflight_sizes_T"} : i12
    %622 = comb.xor bin %568, %c-1_i12 {sv.namehint = "_inflight_sizes_T_1"} : i12
    %623 = comb.and bin %621, %622 {sv.namehint = "_inflight_sizes_T_2"} : i12
    %watchdog = seq.firreg %631 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 186 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %624 = comb.icmp bin eq %inflight, %c0_i3 : i3
    %625 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %626 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %627 = comb.or bin %624, %625, %626, %reset : i1
    %628 = comb.xor bin %627, %true : i1
    %629 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %630 = comb.or bin %362, %400 : i1
    %631 = comb.mux bin %630, %c0_i32, %629 : i32
    %inflight_1 = seq.firreg %722 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 218 : ui64} : i3
    %inflight_sizes_1 = seq.firreg %725 clock %clock reset sync %reset, %c0_i12 {firrtl.random_init_start = 233 : ui64} : i12
    %632 = comb.shl bin %c63_i13, %268 {sv.namehint = "_c_first_beats1_decode_T_5"} : i13
    %633 = comb.extract %632 from 3 : (i13) -> i3
    %634 = comb.xor %633, %c-1_i3 {sv.namehint = "_c_first_beats1_decode_T_7"} : i3
    %635 = comb.mux bin %466, %634, %c0_i3 {sv.namehint = "c_first_beats1_1"} : i3
    %c_first_counter_1 = seq.firreg %639 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 245 : ui64} : i3
    %636 = comb.add %c_first_counter_1, %c-1_i3 {sv.namehint = "_c_first_counter1_T_1"} : i3
    %637 = comb.icmp bin eq %c_first_counter_1, %c0_i3 {sv.namehint = "c_first_1"} : i3
    %638 = comb.mux bin %637, %635, %636 {sv.namehint = "_c_first_counter_T_1"} : i3
    %639 = comb.mux bin %462, %638, %c_first_counter_1 : i3
    %640 = comb.shl bin %c63_i13, %401 {sv.namehint = "_d_first_beats1_decode_T_9"} : i13
    %641 = comb.extract %640 from 3 : (i13) -> i3
    %642 = comb.xor %641, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_11"} : i3
    %643 = comb.mux bin %405, %642, %c0_i3 {sv.namehint = "d_first_beats1_2"} : i3
    %d_first_counter_2 = seq.firreg %647 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 248 : ui64} : i3
    %644 = comb.add %d_first_counter_2, %c-1_i3 {sv.namehint = "_d_first_counter1_T_2"} : i3
    %645 = comb.icmp bin eq %d_first_counter_2, %c0_i3 {sv.namehint = "d_first_2"} : i3
    %646 = comb.mux bin %645, %643, %644 {sv.namehint = "_d_first_counter_T_2"} : i3
    %647 = comb.mux bin %400, %646, %d_first_counter_2 : i3
    %648 = comb.shru bin %inflight_sizes_1, %516 {sv.namehint = "_c_size_lookup_T_1"} : i12
    %649 = comb.extract %648 from 1 : (i12) -> i3
    %650 = comb.and bin %io_in_c_valid, %637 {sv.namehint = "_same_cycle_resp_T_3"} : i1
    %651 = comb.extract %io_in_c_bits_opcode from 2 {sv.namehint = "_same_cycle_resp_T_4"} : (i3) -> i1
    %652 = comb.extract %io_in_c_bits_opcode from 1 {sv.namehint = "_same_cycle_resp_T_5"} : (i3) -> i1
    %653 = comb.and bin %651, %652 : i1
    %654 = comb.and bin %650, %653 : i1
    %655 = comb.concat %c0_i2, %io_in_c_bits_source : i2, i2
    %656 = comb.shl bin %c1_i4, %655 {sv.namehint = "_c_set_wo_ready_T"} : i4
    %657 = comb.extract %656 from 0 : (i4) -> i3
    %658 = comb.mux bin %654, %657, %c0_i3 {sv.namehint = "c_set_wo_ready"} : i3
    %659 = comb.and bin %462, %637, %653 : i1
    %660 = comb.shl bin %c1_i4, %655 {sv.namehint = "_c_set_T"} : i4
    %661 = comb.extract %660 from 0 : (i4) -> i3
    %662 = comb.mux bin %659, %661, %c0_i3 {sv.namehint = "c_set"} : i3
    %663 = comb.concat %io_in_c_bits_size, %true {sv.namehint = "_c_sizes_set_interm_T_1"} : i3, i1
    %664 = comb.mux bin %659, %663, %c0_i4 {sv.namehint = "c_sizes_set_interm"} : i4
    %665 = comb.concat %c0_i31, %664 : i31, i4
    %666 = comb.concat %c0_i31, %io_in_c_bits_source, %c0_i2 : i31, i2, i2
    %667 = comb.shl bin %665, %666 {sv.namehint = "_c_sizes_set_T_1"} : i35
    %668 = comb.extract %667 from 0 : (i35) -> i12
    %669 = comb.mux bin %659, %668, %c0_i12 {sv.namehint = "c_sizes_set"} : i12
    %670 = comb.concat %false, %io_in_c_bits_source : i1, i2
    %671 = comb.shru bin %inflight_1, %670 : i3
    %672 = comb.extract %671 from 0 : (i3) -> i1
    %673 = comb.xor bin %672, %true : i1
    %674 = comb.or bin %673, %reset : i1
    %675 = comb.xor bin %674, %true : i1
    %676 = comb.and bin %659, %675 : i1
    %677 = comb.and bin %io_in_d_valid, %645 : i1
    %678 = comb.and bin %677, %550 : i1
    %679 = comb.shl bin %c1_i4, %554 {sv.namehint = "_d_clr_wo_ready_T_1"} : i4
    %680 = comb.extract %679 from 0 : (i4) -> i3
    %681 = comb.mux bin %678, %680, %c0_i3 {sv.namehint = "d_clr_wo_ready_1"} : i3
    %682 = comb.and bin %400, %645, %550 : i1
    %683 = comb.shl bin %c1_i4, %554 {sv.namehint = "_d_clr_T_1"} : i4
    %684 = comb.extract %683 from 0 : (i4) -> i3
    %685 = comb.mux bin %682, %684, %c0_i3 {sv.namehint = "d_clr_1"} : i3
    %686 = comb.shl bin %c15_i47, %562 {sv.namehint = "_d_sizes_clr_T_11"} : i47
    %687 = comb.extract %686 from 0 : (i47) -> i12
    %688 = comb.mux bin %682, %687, %c0_i12 {sv.namehint = "d_sizes_clr_1"} : i12
    %689 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_8"} : i2
    %690 = comb.and bin %650, %651, %652, %689 {sv.namehint = "same_cycle_resp_1"} : i1
    %691 = comb.shru bin %inflight_1, %571 : i3
    %692 = comb.extract %691 from 0 : (i3) -> i1
    %693 = comb.or bin %692, %690, %reset : i1
    %694 = comb.xor bin %693, %true : i1
    %695 = comb.and bin %678, %694 : i1
    %696 = comb.and bin %678, %690 : i1
    %697 = comb.icmp bin eq %io_in_d_bits_size, %io_in_c_bits_size : i3
    %698 = comb.or bin %697, %reset : i1
    %699 = comb.xor bin %698, %true : i1
    %700 = comb.and bin %696, %699 : i1
    %701 = comb.xor bin %690, %true : i1
    %702 = comb.and bin %678, %701 : i1
    %703 = comb.icmp bin eq %io_in_d_bits_size, %649 : i3
    %704 = comb.or bin %703, %reset : i1
    %705 = comb.xor bin %704, %true : i1
    %706 = comb.and bin %702, %705 : i1
    %707 = comb.and bin %677, %637 : i1
    %708 = comb.and bin %707, %io_in_c_valid : i1
    %709 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source : i2
    %710 = comb.and bin %708, %709 : i1
    %711 = comb.and bin %710, %550 : i1
    %712 = comb.or bin %607, %io_in_c_ready, %reset : i1
    %713 = comb.xor bin %712, %true : i1
    %714 = comb.and bin %711, %713 : i1
    %715 = comb.icmp bin ne %658, %c0_i3 : i3
    %716 = comb.icmp bin ne %658, %681 : i3
    %717 = comb.or bin %716, %reset : i1
    %718 = comb.xor bin %717, %true : i1
    %719 = comb.and bin %715, %718 : i1
    %720 = comb.or bin %inflight_1, %662 {sv.namehint = "_inflight_T_3"} : i3
    %721 = comb.xor bin %685, %c-1_i3 {sv.namehint = "_inflight_T_4"} : i3
    %722 = comb.and bin %720, %721 {sv.namehint = "_inflight_T_5"} : i3
    %723 = comb.or bin %inflight_sizes_1, %669 {sv.namehint = "_inflight_sizes_T_3"} : i12
    %724 = comb.xor bin %688, %c-1_i12 {sv.namehint = "_inflight_sizes_T_4"} : i12
    %725 = comb.and bin %723, %724 {sv.namehint = "_inflight_sizes_T_5"} : i12
    %watchdog_1 = seq.firreg %733 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 251 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %726 = comb.icmp bin eq %inflight_1, %c0_i3 : i3
    %727 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %728 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %729 = comb.or bin %726, %727, %728, %reset : i1
    %730 = comb.xor bin %729, %true : i1
    %731 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %732 = comb.or bin %462, %400 : i1
    %733 = comb.mux bin %732, %c0_i32, %731 : i32
    %inflight_2 = seq.firreg %766 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 283 : ui64} : i4
    %734 = comb.shl bin %c63_i13, %401 {sv.namehint = "_d_first_beats1_decode_T_13"} : i13
    %735 = comb.extract %734 from 3 : (i13) -> i3
    %736 = comb.xor %735, %c-1_i3 {sv.namehint = "_d_first_beats1_decode_T_15"} : i3
    %737 = comb.mux bin %405, %736, %c0_i3 {sv.namehint = "d_first_beats1_3"} : i3
    %d_first_counter_3 = seq.firreg %741 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 287 : ui64} : i3
    %738 = comb.add %d_first_counter_3, %c-1_i3 {sv.namehint = "_d_first_counter1_T_3"} : i3
    %739 = comb.icmp bin eq %d_first_counter_3, %c0_i3 {sv.namehint = "d_first_3"} : i3
    %740 = comb.mux bin %739, %737, %738 {sv.namehint = "_d_first_counter_T_3"} : i3
    %741 = comb.mux bin %400, %740, %d_first_counter_3 : i3
    %742 = comb.extract %io_in_d_bits_opcode from 2 : (i3) -> i1
    %743 = comb.extract %io_in_d_bits_opcode from 1 : (i3) -> i1
    %744 = comb.xor bin %743, %true : i1
    %745 = comb.and bin %400, %739, %742, %744 : i1
    %746 = comb.concat %c0_i2, %io_in_d_bits_sink : i2, i2
    %747 = comb.shl bin %c1_i4, %746 {sv.namehint = "_d_set_T"} : i4
    %748 = comb.mux bin %745, %747, %c0_i4 {sv.namehint = "d_set"} : i4
    %749 = comb.shru bin %inflight_2, %746 : i4
    %750 = comb.extract %749 from 0 : (i4) -> i1
    %751 = comb.xor bin %750, %true : i1
    %752 = comb.or bin %751, %reset : i1
    %753 = comb.xor bin %752, %true : i1
    %754 = comb.and bin %745, %753 : i1
    %755 = comb.concat %c0_i2, %io_in_e_bits_sink : i2, i2
    %756 = comb.shl bin %c1_i4, %755 {sv.namehint = "_e_clr_T"} : i4
    %757 = comb.mux bin %io_in_e_valid, %756, %c0_i4 {sv.namehint = "e_clr"} : i4
    %758 = comb.or bin %748, %inflight_2 : i4
    %759 = comb.shru bin %758, %755 : i4
    %760 = comb.extract %759 from 0 : (i4) -> i1
    %761 = comb.or bin %760, %reset : i1
    %762 = comb.xor bin %761, %true : i1
    %763 = comb.and bin %io_in_e_valid, %762 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %767 = comb.and bin %STOP_COND_, %false : i1
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %768 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %768 {
          sv.fatal 1
        }
        %769 = comb.and bin %STOP_COND_, %71 : i1
        sv.if %769 {
          sv.fatal 1
        }
        %770 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %770 {
          sv.fatal 1
        }
        %771 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %771 {
          sv.fatal 1
        }
        %772 = comb.and bin %STOP_COND_, %80 : i1
        sv.if %772 {
          sv.fatal 1
        }
        %773 = comb.and bin %STOP_COND_, %84 : i1
        sv.if %773 {
          sv.fatal 1
        }
        %774 = comb.and bin %STOP_COND_, %88 : i1
        sv.if %774 {
          sv.fatal 1
        }
        %775 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %775 {
          sv.fatal 1
        }
        %776 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %776 {
          sv.fatal 1
        }
        %777 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %777 {
          sv.fatal 1
        }
        %778 = comb.and bin %STOP_COND_, %100 : i1
        sv.if %778 {
          sv.fatal 1
        }
        %779 = comb.and bin %STOP_COND_, %101 : i1
        sv.if %779 {
          sv.fatal 1
        }
        %780 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %780 {
          sv.fatal 1
        }
        %781 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %781 {
          sv.fatal 1
        }
        %782 = comb.and bin %STOP_COND_, %107 : i1
        sv.if %782 {
          sv.fatal 1
        }
        %783 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %783 {
          sv.fatal 1
        }
        %784 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %784 {
          sv.fatal 1
        }
        %785 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %785 {
          sv.fatal 1
        }
        %786 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %786 {
          sv.fatal 1
        }
        %787 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %787 {
          sv.fatal 1
        }
        %788 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %788 {
          sv.fatal 1
        }
        %789 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %789 {
          sv.fatal 1
        }
        %790 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %790 {
          sv.fatal 1
        }
        %791 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %791 {
          sv.fatal 1
        }
        %792 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %792 {
          sv.fatal 1
        }
        %793 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %793 {
          sv.fatal 1
        }
        %794 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %794 {
          sv.fatal 1
        }
        %795 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %795 {
          sv.fatal 1
        }
        %796 = comb.and bin %STOP_COND_, %135 : i1
        sv.if %796 {
          sv.fatal 1
        }
        %797 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %797 {
          sv.fatal 1
        }
        %798 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %798 {
          sv.fatal 1
        }
        %799 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %799 {
          sv.fatal 1
        }
        %800 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %800 {
          sv.fatal 1
        }
        %801 = comb.and bin %STOP_COND_, %147 : i1
        sv.if %801 {
          sv.fatal 1
        }
        %802 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %802 {
          sv.fatal 1
        }
        %803 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %803 {
          sv.fatal 1
        }
        %804 = comb.and bin %STOP_COND_, %153 : i1
        sv.if %804 {
          sv.fatal 1
        }
        %805 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %805 {
          sv.fatal 1
        }
        %806 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %806 {
          sv.fatal 1
        }
        %807 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %807 {
          sv.fatal 1
        }
        %808 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %808 {
          sv.fatal 1
        }
        %809 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %809 {
          sv.fatal 1
        }
        %810 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %810 {
          sv.fatal 1
        }
        %811 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %811 {
          sv.fatal 1
        }
        %812 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %812 {
          sv.fatal 1
        }
        %813 = comb.and bin %STOP_COND_, %173 : i1
        sv.if %813 {
          sv.fatal 1
        }
        %814 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %814 {
          sv.fatal 1
        }
        %815 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %815 {
          sv.fatal 1
        }
        %816 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %816 {
          sv.fatal 1
        }
        %817 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %817 {
          sv.fatal 1
        }
        %818 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %818 {
          sv.fatal 1
        }
        %819 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %819 {
          sv.fatal 1
        }
        %820 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %820 {
          sv.fatal 1
        }
        %821 = comb.and bin %STOP_COND_, %200 : i1
        sv.if %821 {
          sv.fatal 1
        }
        %822 = comb.and bin %STOP_COND_, %204 : i1
        sv.if %822 {
          sv.fatal 1
        }
        %823 = comb.and bin %STOP_COND_, %208 : i1
        sv.if %823 {
          sv.fatal 1
        }
        %824 = comb.and bin %STOP_COND_, %211 : i1
        sv.if %824 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %825 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %825 {
          sv.fatal 1
        }
        %826 = comb.and bin %STOP_COND_, %216 : i1
        sv.if %826 {
          sv.fatal 1
        }
        %827 = comb.and bin %STOP_COND_, %220 : i1
        sv.if %827 {
          sv.fatal 1
        }
        %828 = comb.and bin %STOP_COND_, %221 : i1
        sv.if %828 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %829 = comb.and bin %STOP_COND_, %224 : i1
        sv.if %829 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %830 = comb.and bin %STOP_COND_, %225 : i1
        sv.if %830 {
          sv.fatal 1
        }
        %831 = comb.and bin %STOP_COND_, %226 : i1
        sv.if %831 {
          sv.fatal 1
        }
        %832 = comb.and bin %STOP_COND_, %227 : i1
        sv.if %832 {
          sv.fatal 1
        }
        %833 = comb.and bin %STOP_COND_, %230 : i1
        sv.if %833 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %834 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %834 {
          sv.fatal 1
        }
        %835 = comb.and bin %STOP_COND_, %234 : i1
        sv.if %835 {
          sv.fatal 1
        }
        %836 = comb.and bin %STOP_COND_, %235 : i1
        sv.if %836 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %837 = comb.and bin %STOP_COND_, %238 : i1
        sv.if %837 {
          sv.fatal 1
        }
        %838 = comb.and bin %STOP_COND_, %239 : i1
        sv.if %838 {
          sv.fatal 1
        }
        %839 = comb.and bin %STOP_COND_, %240 : i1
        sv.if %839 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %840 = comb.and bin %STOP_COND_, %243 : i1
        sv.if %840 {
          sv.fatal 1
        }
        %841 = comb.and bin %STOP_COND_, %244 : i1
        sv.if %841 {
          sv.fatal 1
        }
        %842 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %842 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %843 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %843 {
          sv.fatal 1
        }
        %844 = comb.and bin %STOP_COND_, %257 : i1
        sv.if %844 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %845 = comb.and bin %STOP_COND_, %260 : i1
        sv.if %845 {
          sv.fatal 1
        }
        %846 = comb.and bin %STOP_COND_, %264 : i1
        sv.if %846 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %847 = comb.and bin %STOP_COND_, %282 : i1
        sv.if %847 {
          sv.fatal 1
        }
        %848 = comb.and bin %STOP_COND_, %285 : i1
        sv.if %848 {
          sv.fatal 1
        }
        %849 = comb.and bin %STOP_COND_, %289 : i1
        sv.if %849 {
          sv.fatal 1
        }
        %850 = comb.and bin %STOP_COND_, %292 : i1
        sv.if %850 {
          sv.fatal 1
        }
        %851 = comb.and bin %STOP_COND_, %297 : i1
        sv.if %851 {
          sv.fatal 1
        }
        %852 = comb.and bin %STOP_COND_, %301 : i1
        sv.if %852 {
          sv.fatal 1
        }
        %853 = comb.and bin %STOP_COND_, %304 : i1
        sv.if %853 {
          sv.fatal 1
        }
        %854 = comb.and bin %STOP_COND_, %305 : i1
        sv.if %854 {
          sv.fatal 1
        }
        %855 = comb.and bin %STOP_COND_, %306 : i1
        sv.if %855 {
          sv.fatal 1
        }
        %856 = comb.and bin %STOP_COND_, %307 : i1
        sv.if %856 {
          sv.fatal 1
        }
        %857 = comb.and bin %STOP_COND_, %308 : i1
        sv.if %857 {
          sv.fatal 1
        }
        %858 = comb.and bin %STOP_COND_, %317 : i1
        sv.if %858 {
          sv.fatal 1
        }
        %859 = comb.and bin %STOP_COND_, %322 : i1
        sv.if %859 {
          sv.fatal 1
        }
        %860 = comb.and bin %STOP_COND_, %323 : i1
        sv.if %860 {
          sv.fatal 1
        }
        %861 = comb.and bin %STOP_COND_, %324 : i1
        sv.if %861 {
          sv.fatal 1
        }
        %862 = comb.and bin %STOP_COND_, %325 : i1
        sv.if %862 {
          sv.fatal 1
        }
        %863 = comb.and bin %STOP_COND_, %326 : i1
        sv.if %863 {
          sv.fatal 1
        }
        %864 = comb.and bin %STOP_COND_, %327 : i1
        sv.if %864 {
          sv.fatal 1
        }
        %865 = comb.and bin %STOP_COND_, %330 : i1
        sv.if %865 {
          sv.fatal 1
        }
        %866 = comb.and bin %STOP_COND_, %334 : i1
        sv.if %866 {
          sv.fatal 1
        }
        %867 = comb.and bin %STOP_COND_, %335 : i1
        sv.if %867 {
          sv.fatal 1
        }
        %868 = comb.and bin %STOP_COND_, %336 : i1
        sv.if %868 {
          sv.fatal 1
        }
        %869 = comb.and bin %STOP_COND_, %337 : i1
        sv.if %869 {
          sv.fatal 1
        }
        %870 = comb.and bin %STOP_COND_, %338 : i1
        sv.if %870 {
          sv.fatal 1
        }
        %871 = comb.and bin %STOP_COND_, %341 : i1
        sv.if %871 {
          sv.fatal 1
        }
        %872 = comb.and bin %STOP_COND_, %342 : i1
        sv.if %872 {
          sv.fatal 1
        }
        %873 = comb.and bin %STOP_COND_, %343 : i1
        sv.if %873 {
          sv.fatal 1
        }
        %874 = comb.and bin %STOP_COND_, %347 : i1
        sv.if %874 {
          sv.fatal 1
        }
        %875 = comb.and bin %STOP_COND_, %348 : i1
        sv.if %875 {
          sv.fatal 1
        }
        %876 = comb.and bin %STOP_COND_, %351 : i1
        sv.if %876 {
          sv.fatal 1
        }
        %877 = comb.and bin %STOP_COND_, %352 : i1
        sv.if %877 {
          sv.fatal 1
        }
        %878 = comb.and bin %STOP_COND_, %353 : i1
        sv.if %878 {
          sv.fatal 1
        }
        %879 = comb.and bin %STOP_COND_, %354 : i1
        sv.if %879 {
          sv.fatal 1
        }
        %880 = comb.and bin %STOP_COND_, %357 : i1
        sv.if %880 {
          sv.fatal 1
        }
        %881 = comb.and bin %STOP_COND_, %358 : i1
        sv.if %881 {
          sv.fatal 1
        }
        %882 = comb.and bin %STOP_COND_, %359 : i1
        sv.if %882 {
          sv.fatal 1
        }
        %883 = comb.and bin %STOP_COND_, %360 : i1
        sv.if %883 {
          sv.fatal 1
        }
        %884 = comb.and bin %STOP_COND_, %361 : i1
        sv.if %884 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %885 = comb.and bin %STOP_COND_, %377 : i1
        sv.if %885 {
          sv.fatal 1
        }
        %886 = comb.and bin %STOP_COND_, %381 : i1
        sv.if %886 {
          sv.fatal 1
        }
        %887 = comb.and bin %STOP_COND_, %385 : i1
        sv.if %887 {
          sv.fatal 1
        }
        %888 = comb.and bin %STOP_COND_, %389 : i1
        sv.if %888 {
          sv.fatal 1
        }
        %889 = comb.and bin %STOP_COND_, %393 : i1
        sv.if %889 {
          sv.fatal 1
        }
        %890 = comb.and bin %STOP_COND_, %416 : i1
        sv.if %890 {
          sv.fatal 1
        }
        %891 = comb.and bin %STOP_COND_, %420 : i1
        sv.if %891 {
          sv.fatal 1
        }
        %892 = comb.and bin %STOP_COND_, %424 : i1
        sv.if %892 {
          sv.fatal 1
        }
        %893 = comb.and bin %STOP_COND_, %428 : i1
        sv.if %893 {
          sv.fatal 1
        }
        %894 = comb.and bin %STOP_COND_, %432 : i1
        sv.if %894 {
          sv.fatal 1
        }
        %895 = comb.and bin %STOP_COND_, %436 : i1
        sv.if %895 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %896 = comb.and bin %STOP_COND_, %454 : i1
        sv.if %896 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        sv.if %767 {
          sv.fatal 1
        }
        %897 = comb.and bin %STOP_COND_, %458 : i1
        sv.if %897 {
          sv.fatal 1
        }
        %898 = comb.and bin %STOP_COND_, %477 : i1
        sv.if %898 {
          sv.fatal 1
        }
        %899 = comb.and bin %STOP_COND_, %481 : i1
        sv.if %899 {
          sv.fatal 1
        }
        %900 = comb.and bin %STOP_COND_, %485 : i1
        sv.if %900 {
          sv.fatal 1
        }
        %901 = comb.and bin %STOP_COND_, %489 : i1
        sv.if %901 {
          sv.fatal 1
        }
        %902 = comb.and bin %STOP_COND_, %493 : i1
        sv.if %902 {
          sv.fatal 1
        }
        %903 = comb.and bin %STOP_COND_, %549 : i1
        sv.if %903 {
          sv.fatal 1
        }
        %904 = comb.and bin %STOP_COND_, %576 : i1
        sv.if %904 {
          sv.fatal 1
        }
        %905 = comb.and bin %STOP_COND_, %584 : i1
        sv.if %905 {
          sv.fatal 1
        }
        %906 = comb.and bin %STOP_COND_, %588 : i1
        sv.if %906 {
          sv.fatal 1
        }
        %907 = comb.and bin %STOP_COND_, %597 : i1
        sv.if %907 {
          sv.fatal 1
        }
        %908 = comb.and bin %STOP_COND_, %601 : i1
        sv.if %908 {
          sv.fatal 1
        }
        %909 = comb.and bin %STOP_COND_, %610 : i1
        sv.if %909 {
          sv.fatal 1
        }
        %910 = comb.and bin %STOP_COND_, %614 : i1
        sv.if %910 {
          sv.fatal 1
        }
        %911 = comb.and bin %STOP_COND_, %628 : i1
        sv.if %911 {
          sv.fatal 1
        }
        %912 = comb.and bin %STOP_COND_, %676 : i1
        sv.if %912 {
          sv.fatal 1
        }
        %913 = comb.and bin %STOP_COND_, %695 : i1
        sv.if %913 {
          sv.fatal 1
        }
        %914 = comb.and bin %STOP_COND_, %700 : i1
        sv.if %914 {
          sv.fatal 1
        }
        %915 = comb.and bin %STOP_COND_, %706 : i1
        sv.if %915 {
          sv.fatal 1
        }
        %916 = comb.and bin %STOP_COND_, %714 : i1
        sv.if %916 {
          sv.fatal 1
        }
        %917 = comb.and bin %STOP_COND_, %719 : i1
        sv.if %917 {
          sv.fatal 1
        }
        %918 = comb.and bin %STOP_COND_, %730 : i1
        sv.if %918 {
          sv.fatal 1
        }
        %919 = comb.and bin %STOP_COND_, %754 : i1
        sv.if %919 {
          sv.fatal 1
        }
        %920 = comb.and bin %STOP_COND_, %763 : i1
        sv.if %920 {
          sv.fatal 1
        }
      }
    }
    %764 = comb.or bin %inflight_2, %748 {sv.namehint = "_inflight_T_6"} : i4
    %765 = comb.xor bin %757, %c-1_i4 {sv.namehint = "_inflight_T_7"} : i4
    %766 = comb.and bin %764, %765 {sv.namehint = "_inflight_T_8"} : i4
    hw.output
  }
  hw.module private @BroadcastFilter(out io_request_ready : i1, in %io_request_valid : i1, in %io_request_bits_mshr : i2, in %io_request_bits_address : i32, in %io_request_bits_allocOH : i1, in %io_request_bits_needT : i1, in %io_response_ready : i1, out io_response_valid : i1, out io_response_bits_mshr : i2, out io_response_bits_address : i32, out io_response_bits_allocOH : i1, out io_response_bits_needT : i1) {
    hw.output %io_response_ready, %io_request_valid, %io_request_bits_mshr, %io_request_bits_address, %io_request_bits_allocOH, %io_request_bits_needT : i1, i1, i2, i32, i1, i1
  }
  hw.module private @Queue_17(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_mask : i8, out io_deq_bits_data : i64) {
    %c1_i3 = hw.constant 1 : i3
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <8 x 72>
    seq.firmem.write_port %ram[%value] = %1, clock %clock enable %8 : <8 x 72>
    %0 = seq.firmem.read_port %ram[%value_1], clock %clock : <8 x 72>
    %1 = comb.concat %io_enq_bits_data, %io_enq_bits_mask : i64, i8
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i72) -> i8
    %3 = comb.extract %0 from 8 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i72) -> i64
    %value = seq.firreg %11 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64, sv.namehint = "value"} : i3
    %value_1 = seq.firreg %13 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 3 : ui64, sv.namehint = "value_1"} : i3
    %maybe_full = seq.firreg %15 clock %clock reset sync %reset, %false {firrtl.random_init_start = 6 : ui64} : i1
    %4 = comb.icmp bin eq %value, %value_1 {sv.namehint = "ptr_match"} : i3
    %5 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %6 = comb.and bin %4, %5 {sv.namehint = "empty"} : i1
    %7 = comb.and bin %4, %maybe_full {sv.namehint = "full"} : i1
    %8 = comb.and bin %17, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %9 = comb.and bin %io_deq_ready, %16 {sv.namehint = "do_deq"} : i1
    %10 = comb.add %value, %c1_i3 {sv.namehint = "_value_T"} : i3
    %11 = comb.mux bin %8, %10, %value : i3
    %12 = comb.add %value_1, %c1_i3 {sv.namehint = "_value_T_2"} : i3
    %13 = comb.mux bin %9, %12, %value_1 : i3
    %14 = comb.icmp bin eq %8, %9 : i1
    %15 = comb.mux bin %14, %maybe_full, %8 : i1
    %16 = comb.xor bin %6, %true {sv.namehint = "io_deq_valid"} : i1
    %17 = comb.xor bin %7, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %17, %16, %2, %3 : i1, i1, i8, i64
  }
  hw.module private @TLBroadcastTracker(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_user_amba_prot_bufferable : i1, in %io_in_a_bits_user_amba_prot_modifiable : i1, in %io_in_a_bits_user_amba_prot_readalloc : i1, in %io_in_a_bits_user_amba_prot_writealloc : i1, in %io_in_a_bits_user_amba_prot_privileged : i1, in %io_in_a_bits_user_amba_prot_secure : i1, in %io_in_a_bits_user_amba_prot_fetch : i1, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_user_amba_prot_bufferable : i1, out io_out_a_bits_user_amba_prot_modifiable : i1, out io_out_a_bits_user_amba_prot_readalloc : i1, out io_out_a_bits_user_amba_prot_writealloc : i1, out io_out_a_bits_user_amba_prot_privileged : i1, out io_out_a_bits_user_amba_prot_secure : i1, out io_out_a_bits_user_amba_prot_fetch : i1, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %37 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %32 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %9 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %14 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %15 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %16 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %17 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %user_amba_prot_bufferable = seq.firreg %24 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "user_amba_prot_bufferable"} : i1
    %user_amba_prot_modifiable = seq.firreg %23 clock %clock {firrtl.random_init_start = 15 : ui64, sv.namehint = "user_amba_prot_modifiable"} : i1
    %user_amba_prot_readalloc = seq.firreg %22 clock %clock {firrtl.random_init_start = 16 : ui64, sv.namehint = "user_amba_prot_readalloc"} : i1
    %user_amba_prot_writealloc = seq.firreg %21 clock %clock {firrtl.random_init_start = 17 : ui64, sv.namehint = "user_amba_prot_writealloc"} : i1
    %user_amba_prot_privileged = seq.firreg %20 clock %clock {firrtl.random_init_start = 18 : ui64, sv.namehint = "user_amba_prot_privileged"} : i1
    %user_amba_prot_secure = seq.firreg %19 clock %clock {firrtl.random_init_start = 19 : ui64, sv.namehint = "user_amba_prot_secure"} : i1
    %user_amba_prot_fetch = seq.firreg %18 clock %clock {firrtl.random_init_start = 20 : ui64, sv.namehint = "user_amba_prot_fetch"} : i1
    %address = seq.firreg %25 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %45 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %50, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.or bin %1, %reset : i1
    %4 = comb.xor bin %3, %true : i1
    %5 = comb.and bin %2, %4 : i1
    %6 = comb.xor %2, %true : i1
    %7 = comb.and %6, %sent_d : i1
    %8 = comb.xor %2, %true : i1
    %9 = comb.and %8, %shared : i1
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %11 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %12 = comb.and bin %10, %11 {sv.namehint = "_got_e_T_2"} : i1
    %13 = comb.mux bin %2, %12, %got_e : i1
    %14 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %15 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %16 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %17 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %18 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_fetch, %user_amba_prot_fetch : i1
    %19 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_secure, %user_amba_prot_secure : i1
    %20 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_privileged, %user_amba_prot_privileged : i1
    %21 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_writealloc, %user_amba_prot_writealloc : i1
    %22 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_readalloc, %user_amba_prot_readalloc : i1
    %23 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_modifiable, %user_amba_prot_modifiable : i1
    %24 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_bufferable, %user_amba_prot_bufferable : i1
    %25 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %26 = comb.or %2, %count : i1
    %27 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %26 : i1
    %28 = comb.xor bin %sent_d, %true : i1
    %29 = comb.or bin %28, %reset : i1
    %30 = comb.xor bin %29, %true : i1
    %31 = comb.and bin %io_d_last, %30 : i1
    %32 = comb.or %io_d_last, %7 : i1
    %33 = comb.xor bin %got_e, %true : i1
    %34 = comb.or bin %33, %reset : i1
    %35 = comb.xor bin %34, %true : i1
    %36 = comb.and bin %io_e_last, %35 : i1
    %37 = comb.or %io_e_last, %13 : i1
    %38 = comb.or bin %io_probenack, %io_probedack : i1
    %39 = comb.or bin %count, %reset : i1
    %40 = comb.xor bin %39, %true : i1
    %41 = comb.and bin %38, %40 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %65 = comb.and bin %STOP_COND_, %5 : i1
        sv.if %65 {
          sv.fatal 1
        }
        %66 = comb.and bin %STOP_COND_, %31 : i1
        sv.if %66 {
          sv.fatal 1
        }
        %67 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %67 {
          sv.fatal 1
        }
        %68 = comb.and bin %STOP_COND_, %41 : i1
        sv.if %68 {
          sv.fatal 1
        }
      }
    }
    %42 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %43 = comb.xor %42, %true : i1
    %44 = comb.sub %count, %43 {sv.namehint = "_count_T_2"} : i1
    %45 = comb.mux bin %38, %44, %27 : i1
    %46 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %47 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data.io_enq_ready, %o_data.io_deq_valid, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data = hw.instance "o_data" @Queue_17(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %52: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %59: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data.io_deq_valid"}
    %48 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %49 = comb.or bin %1, %48 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %50 = comb.and bin %49, %o_data.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %51 = comb.or bin %1, %48 {sv.namehint = "_i_data_valid_T_1"} : i1
    %52 = comb.and bin %51, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %53 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %54 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %55 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %56 = comb.or bin %54, %55 {sv.namehint = "acquire"} : i1
    %57 = comb.xor %shared, %true : i1
    %58 = comb.concat %true, %57 {sv.namehint = "transform"} : i1, i1
    %59 = comb.and bin %io_out_a_ready, %53 {sv.namehint = "o_data.io_deq_ready"} : i1
    %60 = comb.and bin %o_data.io_deq_valid, %53 {sv.namehint = "io_out_a_valid"} : i1
    %61 = comb.mux bin %56, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %62 = comb.mux bin %56, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %63 = comb.mux bin %56, %58, %c0_i2 {sv.namehint = "io_out_a_bits_source_hi"} : i2
    %64 = comb.concat %63, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %50, %60, %61, %62, %size, %64, %address, %user_amba_prot_bufferable, %user_amba_prot_modifiable, %user_amba_prot_readalloc, %user_amba_prot_writealloc, %user_amba_prot_privileged, %user_amba_prot_secure, %user_amba_prot_fetch, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data, %source, %47, %1, %46 : i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcastTracker_1(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_user_amba_prot_bufferable : i1, in %io_in_a_bits_user_amba_prot_modifiable : i1, in %io_in_a_bits_user_amba_prot_readalloc : i1, in %io_in_a_bits_user_amba_prot_writealloc : i1, in %io_in_a_bits_user_amba_prot_privileged : i1, in %io_in_a_bits_user_amba_prot_secure : i1, in %io_in_a_bits_user_amba_prot_fetch : i1, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_user_amba_prot_bufferable : i1, out io_out_a_bits_user_amba_prot_modifiable : i1, out io_out_a_bits_user_amba_prot_readalloc : i1, out io_out_a_bits_user_amba_prot_writealloc : i1, out io_out_a_bits_user_amba_prot_privileged : i1, out io_out_a_bits_user_amba_prot_secure : i1, out io_out_a_bits_user_amba_prot_fetch : i1, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c64_i32 = hw.constant 64 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %37 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %32 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %9 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %14 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %15 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %16 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %17 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %user_amba_prot_bufferable = seq.firreg %24 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "user_amba_prot_bufferable"} : i1
    %user_amba_prot_modifiable = seq.firreg %23 clock %clock {firrtl.random_init_start = 15 : ui64, sv.namehint = "user_amba_prot_modifiable"} : i1
    %user_amba_prot_readalloc = seq.firreg %22 clock %clock {firrtl.random_init_start = 16 : ui64, sv.namehint = "user_amba_prot_readalloc"} : i1
    %user_amba_prot_writealloc = seq.firreg %21 clock %clock {firrtl.random_init_start = 17 : ui64, sv.namehint = "user_amba_prot_writealloc"} : i1
    %user_amba_prot_privileged = seq.firreg %20 clock %clock {firrtl.random_init_start = 18 : ui64, sv.namehint = "user_amba_prot_privileged"} : i1
    %user_amba_prot_secure = seq.firreg %19 clock %clock {firrtl.random_init_start = 19 : ui64, sv.namehint = "user_amba_prot_secure"} : i1
    %user_amba_prot_fetch = seq.firreg %18 clock %clock {firrtl.random_init_start = 20 : ui64, sv.namehint = "user_amba_prot_fetch"} : i1
    %address = seq.firreg %25 clock %clock reset sync %reset, %c64_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %45 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %50, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.or bin %1, %reset : i1
    %4 = comb.xor bin %3, %true : i1
    %5 = comb.and bin %2, %4 : i1
    %6 = comb.xor %2, %true : i1
    %7 = comb.and %6, %sent_d : i1
    %8 = comb.xor %2, %true : i1
    %9 = comb.and %8, %shared : i1
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %11 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %12 = comb.and bin %10, %11 {sv.namehint = "_got_e_T_2"} : i1
    %13 = comb.mux bin %2, %12, %got_e : i1
    %14 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %15 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %16 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %17 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %18 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_fetch, %user_amba_prot_fetch : i1
    %19 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_secure, %user_amba_prot_secure : i1
    %20 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_privileged, %user_amba_prot_privileged : i1
    %21 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_writealloc, %user_amba_prot_writealloc : i1
    %22 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_readalloc, %user_amba_prot_readalloc : i1
    %23 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_modifiable, %user_amba_prot_modifiable : i1
    %24 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_bufferable, %user_amba_prot_bufferable : i1
    %25 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %26 = comb.or %2, %count : i1
    %27 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %26 : i1
    %28 = comb.xor bin %sent_d, %true : i1
    %29 = comb.or bin %28, %reset : i1
    %30 = comb.xor bin %29, %true : i1
    %31 = comb.and bin %io_d_last, %30 : i1
    %32 = comb.or %io_d_last, %7 : i1
    %33 = comb.xor bin %got_e, %true : i1
    %34 = comb.or bin %33, %reset : i1
    %35 = comb.xor bin %34, %true : i1
    %36 = comb.and bin %io_e_last, %35 : i1
    %37 = comb.or %io_e_last, %13 : i1
    %38 = comb.or bin %io_probenack, %io_probedack : i1
    %39 = comb.or bin %count, %reset : i1
    %40 = comb.xor bin %39, %true : i1
    %41 = comb.and bin %38, %40 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %65 = comb.and bin %STOP_COND_, %5 : i1
        sv.if %65 {
          sv.fatal 1
        }
        %66 = comb.and bin %STOP_COND_, %31 : i1
        sv.if %66 {
          sv.fatal 1
        }
        %67 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %67 {
          sv.fatal 1
        }
        %68 = comb.and bin %STOP_COND_, %41 : i1
        sv.if %68 {
          sv.fatal 1
        }
      }
    }
    %42 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %43 = comb.xor %42, %true : i1
    %44 = comb.sub %count, %43 {sv.namehint = "_count_T_2"} : i1
    %45 = comb.mux bin %38, %44, %27 : i1
    %46 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %47 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data.io_enq_ready, %o_data.io_deq_valid, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data = hw.instance "o_data" @Queue_17(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %52: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %59: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data.io_deq_valid"}
    %48 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %49 = comb.or bin %1, %48 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %50 = comb.and bin %49, %o_data.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %51 = comb.or bin %1, %48 {sv.namehint = "_i_data_valid_T_1"} : i1
    %52 = comb.and bin %51, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %53 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %54 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %55 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %56 = comb.or bin %54, %55 {sv.namehint = "acquire"} : i1
    %57 = comb.xor %shared, %true : i1
    %58 = comb.concat %true, %57 {sv.namehint = "transform"} : i1, i1
    %59 = comb.and bin %io_out_a_ready, %53 {sv.namehint = "o_data.io_deq_ready"} : i1
    %60 = comb.and bin %o_data.io_deq_valid, %53 {sv.namehint = "io_out_a_valid"} : i1
    %61 = comb.mux bin %56, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %62 = comb.mux bin %56, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %63 = comb.mux bin %56, %58, %c0_i2 {sv.namehint = "io_out_a_bits_source_hi"} : i2
    %64 = comb.concat %63, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %50, %60, %61, %62, %size, %64, %address, %user_amba_prot_bufferable, %user_amba_prot_modifiable, %user_amba_prot_readalloc, %user_amba_prot_writealloc, %user_amba_prot_privileged, %user_amba_prot_secure, %user_amba_prot_fetch, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data, %source, %47, %1, %46 : i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcastTracker_2(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_user_amba_prot_bufferable : i1, in %io_in_a_bits_user_amba_prot_modifiable : i1, in %io_in_a_bits_user_amba_prot_readalloc : i1, in %io_in_a_bits_user_amba_prot_writealloc : i1, in %io_in_a_bits_user_amba_prot_privileged : i1, in %io_in_a_bits_user_amba_prot_secure : i1, in %io_in_a_bits_user_amba_prot_fetch : i1, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_user_amba_prot_bufferable : i1, out io_out_a_bits_user_amba_prot_modifiable : i1, out io_out_a_bits_user_amba_prot_readalloc : i1, out io_out_a_bits_user_amba_prot_writealloc : i1, out io_out_a_bits_user_amba_prot_privileged : i1, out io_out_a_bits_user_amba_prot_secure : i1, out io_out_a_bits_user_amba_prot_fetch : i1, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c128_i32 = hw.constant 128 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %37 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %32 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %9 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %14 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %15 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %16 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %17 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %user_amba_prot_bufferable = seq.firreg %24 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "user_amba_prot_bufferable"} : i1
    %user_amba_prot_modifiable = seq.firreg %23 clock %clock {firrtl.random_init_start = 15 : ui64, sv.namehint = "user_amba_prot_modifiable"} : i1
    %user_amba_prot_readalloc = seq.firreg %22 clock %clock {firrtl.random_init_start = 16 : ui64, sv.namehint = "user_amba_prot_readalloc"} : i1
    %user_amba_prot_writealloc = seq.firreg %21 clock %clock {firrtl.random_init_start = 17 : ui64, sv.namehint = "user_amba_prot_writealloc"} : i1
    %user_amba_prot_privileged = seq.firreg %20 clock %clock {firrtl.random_init_start = 18 : ui64, sv.namehint = "user_amba_prot_privileged"} : i1
    %user_amba_prot_secure = seq.firreg %19 clock %clock {firrtl.random_init_start = 19 : ui64, sv.namehint = "user_amba_prot_secure"} : i1
    %user_amba_prot_fetch = seq.firreg %18 clock %clock {firrtl.random_init_start = 20 : ui64, sv.namehint = "user_amba_prot_fetch"} : i1
    %address = seq.firreg %25 clock %clock reset sync %reset, %c128_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %45 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %50, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.or bin %1, %reset : i1
    %4 = comb.xor bin %3, %true : i1
    %5 = comb.and bin %2, %4 : i1
    %6 = comb.xor %2, %true : i1
    %7 = comb.and %6, %sent_d : i1
    %8 = comb.xor %2, %true : i1
    %9 = comb.and %8, %shared : i1
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %11 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %12 = comb.and bin %10, %11 {sv.namehint = "_got_e_T_2"} : i1
    %13 = comb.mux bin %2, %12, %got_e : i1
    %14 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %15 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %16 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %17 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %18 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_fetch, %user_amba_prot_fetch : i1
    %19 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_secure, %user_amba_prot_secure : i1
    %20 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_privileged, %user_amba_prot_privileged : i1
    %21 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_writealloc, %user_amba_prot_writealloc : i1
    %22 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_readalloc, %user_amba_prot_readalloc : i1
    %23 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_modifiable, %user_amba_prot_modifiable : i1
    %24 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_bufferable, %user_amba_prot_bufferable : i1
    %25 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %26 = comb.or %2, %count : i1
    %27 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %26 : i1
    %28 = comb.xor bin %sent_d, %true : i1
    %29 = comb.or bin %28, %reset : i1
    %30 = comb.xor bin %29, %true : i1
    %31 = comb.and bin %io_d_last, %30 : i1
    %32 = comb.or %io_d_last, %7 : i1
    %33 = comb.xor bin %got_e, %true : i1
    %34 = comb.or bin %33, %reset : i1
    %35 = comb.xor bin %34, %true : i1
    %36 = comb.and bin %io_e_last, %35 : i1
    %37 = comb.or %io_e_last, %13 : i1
    %38 = comb.or bin %io_probenack, %io_probedack : i1
    %39 = comb.or bin %count, %reset : i1
    %40 = comb.xor bin %39, %true : i1
    %41 = comb.and bin %38, %40 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %65 = comb.and bin %STOP_COND_, %5 : i1
        sv.if %65 {
          sv.fatal 1
        }
        %66 = comb.and bin %STOP_COND_, %31 : i1
        sv.if %66 {
          sv.fatal 1
        }
        %67 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %67 {
          sv.fatal 1
        }
        %68 = comb.and bin %STOP_COND_, %41 : i1
        sv.if %68 {
          sv.fatal 1
        }
      }
    }
    %42 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %43 = comb.xor %42, %true : i1
    %44 = comb.sub %count, %43 {sv.namehint = "_count_T_2"} : i1
    %45 = comb.mux bin %38, %44, %27 : i1
    %46 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %47 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data.io_enq_ready, %o_data.io_deq_valid, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data = hw.instance "o_data" @Queue_17(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %52: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %59: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data.io_deq_valid"}
    %48 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %49 = comb.or bin %1, %48 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %50 = comb.and bin %49, %o_data.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %51 = comb.or bin %1, %48 {sv.namehint = "_i_data_valid_T_1"} : i1
    %52 = comb.and bin %51, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %53 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %54 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %55 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %56 = comb.or bin %54, %55 {sv.namehint = "acquire"} : i1
    %57 = comb.xor %shared, %true : i1
    %58 = comb.concat %true, %57 {sv.namehint = "transform"} : i1, i1
    %59 = comb.and bin %io_out_a_ready, %53 {sv.namehint = "o_data.io_deq_ready"} : i1
    %60 = comb.and bin %o_data.io_deq_valid, %53 {sv.namehint = "io_out_a_valid"} : i1
    %61 = comb.mux bin %56, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %62 = comb.mux bin %56, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %63 = comb.mux bin %56, %58, %c0_i2 {sv.namehint = "io_out_a_bits_source_hi"} : i2
    %64 = comb.concat %63, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %50, %60, %61, %62, %size, %64, %address, %user_amba_prot_bufferable, %user_amba_prot_modifiable, %user_amba_prot_readalloc, %user_amba_prot_writealloc, %user_amba_prot_privileged, %user_amba_prot_secure, %user_amba_prot_fetch, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data, %source, %47, %1, %46 : i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcastTracker_3(in %clock : !seq.clock, in %reset : i1, in %io_in_a_first : i1, out io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i3, in %io_in_a_bits_source : i2, in %io_in_a_bits_address : i32, in %io_in_a_bits_user_amba_prot_bufferable : i1, in %io_in_a_bits_user_amba_prot_modifiable : i1, in %io_in_a_bits_user_amba_prot_readalloc : i1, in %io_in_a_bits_user_amba_prot_writealloc : i1, in %io_in_a_bits_user_amba_prot_privileged : i1, in %io_in_a_bits_user_amba_prot_secure : i1, in %io_in_a_bits_user_amba_prot_fetch : i1, in %io_in_a_bits_mask : i8, in %io_in_a_bits_data : i64, in %io_out_a_ready : i1, out io_out_a_valid : i1, out io_out_a_bits_opcode : i3, out io_out_a_bits_param : i3, out io_out_a_bits_size : i3, out io_out_a_bits_source : i4, out io_out_a_bits_address : i32, out io_out_a_bits_user_amba_prot_bufferable : i1, out io_out_a_bits_user_amba_prot_modifiable : i1, out io_out_a_bits_user_amba_prot_readalloc : i1, out io_out_a_bits_user_amba_prot_writealloc : i1, out io_out_a_bits_user_amba_prot_privileged : i1, out io_out_a_bits_user_amba_prot_secure : i1, out io_out_a_bits_user_amba_prot_fetch : i1, out io_out_a_bits_mask : i8, out io_out_a_bits_data : i64, in %io_probe_valid : i1, in %io_probe_bits_count : i1, in %io_probenack : i1, in %io_probedack : i1, in %io_probesack : i1, in %io_d_last : i1, in %io_e_last : i1, out io_source : i2, out io_line : i26, out io_idle : i1, out io_need_d : i1) {
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c192_i32 = hw.constant 192 : i32
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %got_e = seq.firreg %37 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %sent_d = seq.firreg %32 clock %clock reset sync %reset, %true {firrtl.random_init_start = 1 : ui64} : i1
    %shared = seq.firreg %9 clock %clock reset sync %io_probesack, %true {firrtl.random_init_start = 2 : ui64} : i1
    %opcode = seq.firreg %14 clock %clock {firrtl.random_init_start = 3 : ui64} : i3
    %param = seq.firreg %15 clock %clock {firrtl.random_init_start = 6 : ui64} : i3
    %size = seq.firreg %16 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "size"} : i3
    %source = seq.firreg %17 clock %clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "source"} : i2
    %user_amba_prot_bufferable = seq.firreg %24 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "user_amba_prot_bufferable"} : i1
    %user_amba_prot_modifiable = seq.firreg %23 clock %clock {firrtl.random_init_start = 15 : ui64, sv.namehint = "user_amba_prot_modifiable"} : i1
    %user_amba_prot_readalloc = seq.firreg %22 clock %clock {firrtl.random_init_start = 16 : ui64, sv.namehint = "user_amba_prot_readalloc"} : i1
    %user_amba_prot_writealloc = seq.firreg %21 clock %clock {firrtl.random_init_start = 17 : ui64, sv.namehint = "user_amba_prot_writealloc"} : i1
    %user_amba_prot_privileged = seq.firreg %20 clock %clock {firrtl.random_init_start = 18 : ui64, sv.namehint = "user_amba_prot_privileged"} : i1
    %user_amba_prot_secure = seq.firreg %19 clock %clock {firrtl.random_init_start = 19 : ui64, sv.namehint = "user_amba_prot_secure"} : i1
    %user_amba_prot_fetch = seq.firreg %18 clock %clock {firrtl.random_init_start = 20 : ui64, sv.namehint = "user_amba_prot_fetch"} : i1
    %address = seq.firreg %25 clock %clock reset sync %reset, %c192_i32 {firrtl.random_init_start = 21 : ui64, sv.namehint = "address"} : i32
    %count = seq.firreg %45 clock %clock {firrtl.random_init_start = 53 : ui64} : i1
    %1 = comb.and bin %got_e, %sent_d {sv.namehint = "idle"} : i1
    %2 = comb.and bin %50, %io_in_a_valid, %io_in_a_first : i1
    %3 = comb.or bin %1, %reset : i1
    %4 = comb.xor bin %3, %true : i1
    %5 = comb.and bin %2, %4 : i1
    %6 = comb.xor %2, %true : i1
    %7 = comb.and %6, %sent_d : i1
    %8 = comb.xor %2, %true : i1
    %9 = comb.and %8, %shared : i1
    %10 = comb.icmp bin ne %io_in_a_bits_opcode, %c-2_i3 {sv.namehint = "_got_e_T"} : i3
    %11 = comb.icmp bin ne %io_in_a_bits_opcode, %c-1_i3 {sv.namehint = "_got_e_T_1"} : i3
    %12 = comb.and bin %10, %11 {sv.namehint = "_got_e_T_2"} : i1
    %13 = comb.mux bin %2, %12, %got_e : i1
    %14 = comb.mux bin %2, %io_in_a_bits_opcode, %opcode : i3
    %15 = comb.mux bin %2, %io_in_a_bits_param, %param : i3
    %16 = comb.mux bin %2, %io_in_a_bits_size, %size : i3
    %17 = comb.mux bin %2, %io_in_a_bits_source, %source : i2
    %18 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_fetch, %user_amba_prot_fetch : i1
    %19 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_secure, %user_amba_prot_secure : i1
    %20 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_privileged, %user_amba_prot_privileged : i1
    %21 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_writealloc, %user_amba_prot_writealloc : i1
    %22 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_readalloc, %user_amba_prot_readalloc : i1
    %23 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_modifiable, %user_amba_prot_modifiable : i1
    %24 = comb.mux bin %2, %io_in_a_bits_user_amba_prot_bufferable, %user_amba_prot_bufferable : i1
    %25 = comb.mux bin %2, %io_in_a_bits_address, %address : i32
    %26 = comb.or %2, %count : i1
    %27 = comb.mux bin %io_probe_valid, %io_probe_bits_count, %26 : i1
    %28 = comb.xor bin %sent_d, %true : i1
    %29 = comb.or bin %28, %reset : i1
    %30 = comb.xor bin %29, %true : i1
    %31 = comb.and bin %io_d_last, %30 : i1
    %32 = comb.or %io_d_last, %7 : i1
    %33 = comb.xor bin %got_e, %true : i1
    %34 = comb.or bin %33, %reset : i1
    %35 = comb.xor bin %34, %true : i1
    %36 = comb.and bin %io_e_last, %35 : i1
    %37 = comb.or %io_e_last, %13 : i1
    %38 = comb.or bin %io_probenack, %io_probedack : i1
    %39 = comb.or bin %count, %reset : i1
    %40 = comb.xor bin %39, %true : i1
    %41 = comb.and bin %38, %40 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %65 = comb.and bin %STOP_COND_, %5 : i1
        sv.if %65 {
          sv.fatal 1
        }
        %66 = comb.and bin %STOP_COND_, %31 : i1
        sv.if %66 {
          sv.fatal 1
        }
        %67 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %67 {
          sv.fatal 1
        }
        %68 = comb.and bin %STOP_COND_, %41 : i1
        sv.if %68 {
          sv.fatal 1
        }
      }
    }
    %42 = comb.and bin %io_probenack, %io_probedack {sv.namehint = "_count_T"} : i1
    %43 = comb.xor %42, %true : i1
    %44 = comb.sub %count, %43 {sv.namehint = "_count_T_2"} : i1
    %45 = comb.mux bin %38, %44, %27 : i1
    %46 = comb.xor bin %sent_d, %true {sv.namehint = "io_need_d"} : i1
    %47 = comb.extract %address from 6 {sv.namehint = "io_line"} : (i32) -> i26
    %o_data.io_enq_ready, %o_data.io_deq_valid, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data = hw.instance "o_data" @Queue_17(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %52: i1, io_enq_bits_mask: %io_in_a_bits_mask: i8, io_enq_bits_data: %io_in_a_bits_data: i64, io_deq_ready: %59: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64) {sv.namehint = "o_data.io_deq_valid"}
    %48 = comb.xor bin %io_in_a_first, %true {sv.namehint = "_i_data_valid_T"} : i1
    %49 = comb.or bin %1, %48 {sv.namehint = "_io_in_a_ready_T_1"} : i1
    %50 = comb.and bin %49, %o_data.io_enq_ready {sv.namehint = "io_in_a_ready"} : i1
    %51 = comb.or bin %1, %48 {sv.namehint = "_i_data_valid_T_1"} : i1
    %52 = comb.and bin %51, %io_in_a_valid {sv.namehint = "i_data_valid"} : i1
    %53 = comb.xor bin %count, %true {sv.namehint = "probe_done"} : i1
    %54 = comb.icmp bin eq %opcode, %c-2_i3 {sv.namehint = "_acquire_T"} : i3
    %55 = comb.icmp bin eq %opcode, %c-1_i3 {sv.namehint = "_acquire_T_1"} : i3
    %56 = comb.or bin %54, %55 {sv.namehint = "acquire"} : i1
    %57 = comb.xor %shared, %true : i1
    %58 = comb.concat %true, %57 {sv.namehint = "transform"} : i1, i1
    %59 = comb.and bin %io_out_a_ready, %53 {sv.namehint = "o_data.io_deq_ready"} : i1
    %60 = comb.and bin %o_data.io_deq_valid, %53 {sv.namehint = "io_out_a_valid"} : i1
    %61 = comb.mux bin %56, %c-4_i3, %opcode {sv.namehint = "io_out_a_bits_opcode"} : i3
    %62 = comb.mux bin %56, %c0_i3, %param {sv.namehint = "io_out_a_bits_param"} : i3
    %63 = comb.mux bin %56, %58, %c0_i2 {sv.namehint = "io_out_a_bits_source_hi"} : i2
    %64 = comb.concat %63, %source {sv.namehint = "io_out_a_bits_source"} : i2, i2
    hw.output %50, %60, %61, %62, %size, %64, %address, %user_amba_prot_bufferable, %user_amba_prot_modifiable, %user_amba_prot_readalloc, %user_amba_prot_writealloc, %user_amba_prot_privileged, %user_amba_prot_secure, %user_amba_prot_fetch, %o_data.io_deq_bits_mask, %o_data.io_deq_bits_data, %source, %47, %1, %46 : i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i2, i26, i1, i1
  }
  hw.module private @TLBroadcast(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i3, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i4, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i4, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1) {
    %c-1_i2 = hw.constant -1 : i2
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c63_i13 = hw.constant 63 : i13
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false {sv.namehint = "hi_7"}
    %true = hw.constant true {sv.namehint = "a_mask_size_2"}
    %c0_i64 = hw.constant 0 : i64
    %c-2_i3 = hw.constant -2 : i3
    %c0_i8 = hw.constant 0 : i8
    %c0_i32 = hw.constant 0 : i32
    %c0_i4 = hw.constant 0 : i4
    %c-2_i2 = hw.constant -2 : i2
    %c-4_i3 = hw.constant -4 : i3
    %c1_i2 = hw.constant 1 : i2
    %c-3_i3 = hw.constant -3 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i10 = hw.constant 0 : i10
    %c0_i6 = hw.constant 0 : i6
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_16(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %427: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %REG: i1, io_in_b_bits_param: %REG_2: i2, io_in_b_bits_address: %389: i32, io_in_c_ready: %105: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i3, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %auto_in_c_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %188: i1, io_in_d_bits_opcode: %203: i3, io_in_d_bits_param: %200: i2, io_in_d_bits_size: %198: i3, io_in_d_bits_source: %195: i2, io_in_d_bits_sink: %192: i2, io_in_d_bits_denied: %191: i1, io_in_d_bits_corrupt: %189: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    %BroadcastFilter.io_request_ready, %BroadcastFilter.io_response_valid, %BroadcastFilter.io_response_bits_mshr, %BroadcastFilter.io_response_bits_address, %BroadcastFilter.io_response_bits_allocOH, %BroadcastFilter.io_response_bits_needT = hw.instance "BroadcastFilter" @BroadcastFilter(io_request_valid: %437: i1, io_request_bits_mshr: %443: i2, io_request_bits_address: %auto_in_a_bits_address: i32, io_request_bits_allocOH: %393: i1, io_request_bits_needT: %454: i1, io_response_ready: %456: i1) -> (io_request_ready: i1, io_response_valid: i1, io_response_bits_mshr: i2, io_response_bits_address: i32, io_response_bits_allocOH: i1, io_response_bits_needT: i1) {sv.namehint = "shiftAmount"}
    %TLBroadcastTracker.io_in_a_ready, %TLBroadcastTracker.io_out_a_valid, %TLBroadcastTracker.io_out_a_bits_opcode, %TLBroadcastTracker.io_out_a_bits_param, %TLBroadcastTracker.io_out_a_bits_size, %TLBroadcastTracker.io_out_a_bits_source, %TLBroadcastTracker.io_out_a_bits_address, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_bufferable, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_modifiable, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_readalloc, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_writealloc, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_privileged, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_secure, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_fetch, %TLBroadcastTracker.io_out_a_bits_mask, %TLBroadcastTracker.io_out_a_bits_data, %TLBroadcastTracker.io_source, %TLBroadcastTracker.io_line, %TLBroadcastTracker.io_idle, %TLBroadcastTracker.io_need_d = hw.instance "TLBroadcastTracker" @TLBroadcastTracker(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %403: i1, io_in_a_valid: %433: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_user_amba_prot_bufferable: %auto_in_a_bits_user_amba_prot_bufferable: i1, io_in_a_bits_user_amba_prot_modifiable: %auto_in_a_bits_user_amba_prot_modifiable: i1, io_in_a_bits_user_amba_prot_readalloc: %auto_in_a_bits_user_amba_prot_readalloc: i1, io_in_a_bits_user_amba_prot_writealloc: %auto_in_a_bits_user_amba_prot_writealloc: i1, io_in_a_bits_user_amba_prot_privileged: %auto_in_a_bits_user_amba_prot_privileged: i1, io_in_a_bits_user_amba_prot_secure: %auto_in_a_bits_user_amba_prot_secure: i1, io_in_a_bits_user_amba_prot_fetch: %auto_in_a_bits_user_amba_prot_fetch: i1, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %302: i1, io_probe_valid: %467: i1, io_probe_bits_count: %455: i1, io_probenack: %93: i1, io_probedack: %69: i1, io_probesack: %97: i1, io_d_last: %67: i1, io_e_last: %5: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_user_amba_prot_bufferable: i1, io_out_a_bits_user_amba_prot_modifiable: i1, io_out_a_bits_user_amba_prot_readalloc: i1, io_out_a_bits_user_amba_prot_writealloc: i1, io_out_a_bits_user_amba_prot_privileged: i1, io_out_a_bits_user_amba_prot_secure: i1, io_out_a_bits_user_amba_prot_fetch: i1, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "TLBroadcastTracker.io_idle"}
    %TLBroadcastTracker_1.io_in_a_ready, %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker_1.io_out_a_bits_opcode, %TLBroadcastTracker_1.io_out_a_bits_param, %TLBroadcastTracker_1.io_out_a_bits_size, %TLBroadcastTracker_1.io_out_a_bits_source, %TLBroadcastTracker_1.io_out_a_bits_address, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_bufferable, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_modifiable, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_readalloc, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_writealloc, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_privileged, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_secure, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_fetch, %TLBroadcastTracker_1.io_out_a_bits_mask, %TLBroadcastTracker_1.io_out_a_bits_data, %TLBroadcastTracker_1.io_source, %TLBroadcastTracker_1.io_line, %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker_1.io_need_d = hw.instance "TLBroadcastTracker_1" @TLBroadcastTracker_1(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %403: i1, io_in_a_valid: %434: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_user_amba_prot_bufferable: %auto_in_a_bits_user_amba_prot_bufferable: i1, io_in_a_bits_user_amba_prot_modifiable: %auto_in_a_bits_user_amba_prot_modifiable: i1, io_in_a_bits_user_amba_prot_readalloc: %auto_in_a_bits_user_amba_prot_readalloc: i1, io_in_a_bits_user_amba_prot_writealloc: %auto_in_a_bits_user_amba_prot_writealloc: i1, io_in_a_bits_user_amba_prot_privileged: %auto_in_a_bits_user_amba_prot_privileged: i1, io_in_a_bits_user_amba_prot_secure: %auto_in_a_bits_user_amba_prot_secure: i1, io_in_a_bits_user_amba_prot_fetch: %auto_in_a_bits_user_amba_prot_fetch: i1, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %303: i1, io_probe_valid: %468: i1, io_probe_bits_count: %455: i1, io_probenack: %98: i1, io_probedack: %71: i1, io_probesack: %99: i1, io_d_last: %70: i1, io_e_last: %6: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_user_amba_prot_bufferable: i1, io_out_a_bits_user_amba_prot_modifiable: i1, io_out_a_bits_user_amba_prot_readalloc: i1, io_out_a_bits_user_amba_prot_writealloc: i1, io_out_a_bits_user_amba_prot_privileged: i1, io_out_a_bits_user_amba_prot_secure: i1, io_out_a_bits_user_amba_prot_fetch: i1, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "validQuals_2"}
    %TLBroadcastTracker_2.io_in_a_ready, %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_2.io_out_a_bits_opcode, %TLBroadcastTracker_2.io_out_a_bits_param, %TLBroadcastTracker_2.io_out_a_bits_size, %TLBroadcastTracker_2.io_out_a_bits_source, %TLBroadcastTracker_2.io_out_a_bits_address, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_bufferable, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_modifiable, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_readalloc, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_writealloc, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_privileged, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_secure, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_fetch, %TLBroadcastTracker_2.io_out_a_bits_mask, %TLBroadcastTracker_2.io_out_a_bits_data, %TLBroadcastTracker_2.io_source, %TLBroadcastTracker_2.io_line, %TLBroadcastTracker_2.io_idle, %TLBroadcastTracker_2.io_need_d = hw.instance "TLBroadcastTracker_2" @TLBroadcastTracker_2(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %403: i1, io_in_a_valid: %435: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_user_amba_prot_bufferable: %auto_in_a_bits_user_amba_prot_bufferable: i1, io_in_a_bits_user_amba_prot_modifiable: %auto_in_a_bits_user_amba_prot_modifiable: i1, io_in_a_bits_user_amba_prot_readalloc: %auto_in_a_bits_user_amba_prot_readalloc: i1, io_in_a_bits_user_amba_prot_writealloc: %auto_in_a_bits_user_amba_prot_writealloc: i1, io_in_a_bits_user_amba_prot_privileged: %auto_in_a_bits_user_amba_prot_privileged: i1, io_in_a_bits_user_amba_prot_secure: %auto_in_a_bits_user_amba_prot_secure: i1, io_in_a_bits_user_amba_prot_fetch: %auto_in_a_bits_user_amba_prot_fetch: i1, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %304: i1, io_probe_valid: %469: i1, io_probe_bits_count: %455: i1, io_probenack: %100: i1, io_probedack: %73: i1, io_probesack: %101: i1, io_d_last: %72: i1, io_e_last: %7: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_user_amba_prot_bufferable: i1, io_out_a_bits_user_amba_prot_modifiable: i1, io_out_a_bits_user_amba_prot_readalloc: i1, io_out_a_bits_user_amba_prot_writealloc: i1, io_out_a_bits_user_amba_prot_privileged: i1, io_out_a_bits_user_amba_prot_secure: i1, io_out_a_bits_user_amba_prot_fetch: i1, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "validQuals_3"}
    %TLBroadcastTracker_3.io_in_a_ready, %TLBroadcastTracker_3.io_out_a_valid, %TLBroadcastTracker_3.io_out_a_bits_opcode, %TLBroadcastTracker_3.io_out_a_bits_param, %TLBroadcastTracker_3.io_out_a_bits_size, %TLBroadcastTracker_3.io_out_a_bits_source, %TLBroadcastTracker_3.io_out_a_bits_address, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_bufferable, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_modifiable, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_readalloc, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_writealloc, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_privileged, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_secure, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_fetch, %TLBroadcastTracker_3.io_out_a_bits_mask, %TLBroadcastTracker_3.io_out_a_bits_data, %TLBroadcastTracker_3.io_source, %TLBroadcastTracker_3.io_line, %TLBroadcastTracker_3.io_idle, %TLBroadcastTracker_3.io_need_d = hw.instance "TLBroadcastTracker_3" @TLBroadcastTracker_3(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_first: %403: i1, io_in_a_valid: %436: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i3, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_user_amba_prot_bufferable: %auto_in_a_bits_user_amba_prot_bufferable: i1, io_in_a_bits_user_amba_prot_modifiable: %auto_in_a_bits_user_amba_prot_modifiable: i1, io_in_a_bits_user_amba_prot_readalloc: %auto_in_a_bits_user_amba_prot_readalloc: i1, io_in_a_bits_user_amba_prot_writealloc: %auto_in_a_bits_user_amba_prot_writealloc: i1, io_in_a_bits_user_amba_prot_privileged: %auto_in_a_bits_user_amba_prot_privileged: i1, io_in_a_bits_user_amba_prot_secure: %auto_in_a_bits_user_amba_prot_secure: i1, io_in_a_bits_user_amba_prot_fetch: %auto_in_a_bits_user_amba_prot_fetch: i1, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_data: %auto_in_a_bits_data: i64, io_out_a_ready: %305: i1, io_probe_valid: %470: i1, io_probe_bits_count: %455: i1, io_probenack: %102: i1, io_probedack: %75: i1, io_probesack: %103: i1, io_d_last: %74: i1, io_e_last: %8: i1) -> (io_in_a_ready: i1, io_out_a_valid: i1, io_out_a_bits_opcode: i3, io_out_a_bits_param: i3, io_out_a_bits_size: i3, io_out_a_bits_source: i4, io_out_a_bits_address: i32, io_out_a_bits_user_amba_prot_bufferable: i1, io_out_a_bits_user_amba_prot_modifiable: i1, io_out_a_bits_user_amba_prot_readalloc: i1, io_out_a_bits_user_amba_prot_writealloc: i1, io_out_a_bits_user_amba_prot_privileged: i1, io_out_a_bits_user_amba_prot_secure: i1, io_out_a_bits_user_amba_prot_fetch: i1, io_out_a_bits_mask: i8, io_out_a_bits_data: i64, io_source: i2, io_line: i26, io_idle: i1, io_need_d: i1) {sv.namehint = "validQuals_4"}
    %1 = comb.icmp eq %auto_in_e_bits_sink, %c0_i2 : i2
    %2 = comb.icmp eq %auto_in_e_bits_sink, %c1_i2 : i2
    %3 = comb.icmp eq %auto_in_e_bits_sink, %c-2_i2 : i2
    %4 = comb.icmp eq %auto_in_e_bits_sink, %c-1_i2 : i2
    %5 = comb.and bin %1, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker.io_e_last"} : i1
    %6 = comb.and bin %2, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker_1.io_e_last"} : i1
    %7 = comb.and bin %3, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker_2.io_e_last"} : i1
    %8 = comb.and bin %4, %auto_in_e_valid {sv.namehint = "TLBroadcastTracker_3.io_e_last"} : i1
    %9 = comb.extract %auto_out_d_bits_source from 2 : (i4) -> i2
    %10 = comb.icmp bin eq %9, %c1_i2 : i2
    %11 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "opdata"} : (i3) -> i1
    %12 = comb.and bin %184, %42 : i1
    %13 = comb.concat %c0_i10, %auto_out_d_bits_size : i10, i3
    %14 = comb.shl bin %c63_i13, %13 {sv.namehint = "_beats1_decode_T_1"} : i13
    %15 = comb.extract %14 from 3 : (i13) -> i3
    %16 = comb.xor %15, %c-1_i3 {sv.namehint = "_beats1_decode_T_3"} : i3
    %17 = comb.extract %46 from 0 {sv.namehint = "opdata_2"} : (i3) -> i1
    %18 = comb.mux bin %17, %16, %c0_i3 {sv.namehint = "beats1"} : i3
    %counter = seq.firreg %25 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %19 = comb.add %counter, %c-1_i3 {sv.namehint = "_counter1_T"} : i3
    %20 = comb.icmp bin eq %counter, %c0_i3 {sv.namehint = "first"} : i3
    %21 = comb.icmp bin eq %counter, %c1_i3 {sv.namehint = "_last_T"} : i3
    %22 = comb.icmp bin eq %18, %c0_i3 {sv.namehint = "_last_T_1"} : i3
    %23 = comb.or bin %21, %22 {sv.namehint = "last"} : i1
    %24 = comb.mux bin %20, %18, %19 {sv.namehint = "_counter_T"} : i3
    %25 = comb.mux bin %12, %24, %counter : i3
    %26 = comb.icmp bin eq %TLBroadcastTracker.io_source, %43 : i2
    %27 = comb.and bin %TLBroadcastTracker.io_need_d, %26 : i1
    %28 = comb.icmp bin eq %TLBroadcastTracker_1.io_source, %43 : i2
    %29 = comb.and bin %TLBroadcastTracker_1.io_need_d, %28 : i1
    %30 = comb.icmp bin eq %TLBroadcastTracker_2.io_source, %43 : i2
    %31 = comb.and bin %TLBroadcastTracker_2.io_need_d, %30 : i1
    %32 = comb.icmp bin eq %TLBroadcastTracker_3.io_source, %43 : i2
    %33 = comb.and bin %TLBroadcastTracker_3.io_need_d, %32 : i1
    %34 = comb.concat %33, %31, %29, %27 : i1, i1, i1, i1
    %r = seq.firreg %35 clock %clock {firrtl.random_init_start = 3 : ui64} : i4
    %35 = comb.mux bin %20, %34, %r : i4
    %36 = comb.xor bin %auto_out_d_valid, %true : i1
    %37 = comb.xor bin %10, %true : i1
    %38 = comb.icmp bin eq %auto_out_d_bits_opcode, %c0_i3 : i3
    %39 = comb.or bin %36, %37, %38, %reset : i1
    %40 = comb.xor bin %39, %true : i1
    %41 = comb.or bin %184, %10 {sv.namehint = "bundleOut_0_d_ready"} : i1
    %42 = comb.and bin %auto_out_d_valid, %37 {sv.namehint = "validQuals_1"} : i1
    %43 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "out_1_bits_source"} : (i4) -> i2
    %44 = comb.extract %auto_out_d_bits_source from 3 : (i4) -> i1
    %45 = comb.mux bin %11, %c-3_i3, %c-2_i3 : i3
    %46 = comb.mux bin %44, %45, %auto_out_d_bits_opcode {sv.namehint = "out_1_bits_opcode"} : i3
    %47 = comb.extract %auto_out_d_bits_source from 2 : (i4) -> i1
    %48 = comb.xor %47, %true : i1
    %49 = comb.concat %false, %48 : i1, i1
    %50 = comb.extract %35 from 2 {sv.namehint = "hi_1"} : (i4) -> i2
    %51 = comb.icmp bin ne %50, %c0_i2 {sv.namehint = "hi_2"} : i2
    %52 = comb.extract %35 from 3 : (i4) -> i1
    %53 = comb.extract %35 from 1 : (i4) -> i1
    %54 = comb.or %52, %53 {sv.namehint = "lo_2"} : i1
    %55 = comb.concat %51, %54 {sv.namehint = "out_1_bits_sink"} : i1, i1
    %56 = comb.xor bin %42, %true : i1
    %57 = comb.icmp bin ne %35, %c0_i4 : i4
    %58 = comb.icmp bin eq %46, %c-2_i3 : i3
    %59 = comb.or bin %56, %57, %58, %reset : i1
    %60 = comb.xor bin %59, %true : i1
    %61 = comb.xor bin %44, %true : i1
    %62 = comb.or bin %11, %61 : i1
    %63 = comb.extract %35 from 0 : (i4) -> i1
    %64 = comb.extract %35 from 1 : (i4) -> i1
    %65 = comb.extract %35 from 2 : (i4) -> i1
    %66 = comb.extract %35 from 3 : (i4) -> i1
    %67 = comb.and bin %63, %12, %62, %23 {sv.namehint = "TLBroadcastTracker.io_d_last"} : i1
    %68 = comb.and bin %41, %auto_out_d_valid : i1
    %69 = comb.and bin %63, %68, %10 {sv.namehint = "TLBroadcastTracker.io_probedack"} : i1
    %70 = comb.and bin %64, %12, %62, %23 {sv.namehint = "TLBroadcastTracker_1.io_d_last"} : i1
    %71 = comb.and bin %64, %68, %10 {sv.namehint = "TLBroadcastTracker_1.io_probedack"} : i1
    %72 = comb.and bin %65, %12, %62, %23 {sv.namehint = "TLBroadcastTracker_2.io_d_last"} : i1
    %73 = comb.and bin %65, %68, %10 {sv.namehint = "TLBroadcastTracker_2.io_probedack"} : i1
    %74 = comb.and bin %66, %12, %62, %23 {sv.namehint = "TLBroadcastTracker_3.io_d_last"} : i1
    %75 = comb.and bin %66, %68, %10 {sv.namehint = "TLBroadcastTracker_3.io_probedack"} : i1
    %76 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-4_i3 : i3
    %77 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-3_i3 : i3
    %78 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-1_i3 : i3
    %79 = comb.icmp bin eq %auto_in_c_bits_opcode, %c-2_i3 : i3
    %80 = comb.extract %auto_in_c_bits_address from 6 : (i32) -> i26
    %81 = comb.icmp bin eq %TLBroadcastTracker.io_line, %80 : i26
    %82 = comb.icmp bin eq %TLBroadcastTracker_1.io_line, %80 : i26
    %83 = comb.icmp bin eq %TLBroadcastTracker_2.io_line, %80 : i26
    %84 = comb.icmp bin eq %TLBroadcastTracker_3.io_line, %80 : i26
    %85 = comb.mux bin %81, %TLBroadcastTracker.io_source, %c0_i2 : i2
    %86 = comb.mux bin %82, %TLBroadcastTracker_1.io_source, %c0_i2 : i2
    %87 = comb.mux bin %83, %TLBroadcastTracker_2.io_source, %c0_i2 : i2
    %88 = comb.mux bin %84, %TLBroadcastTracker_3.io_source, %c0_i2 : i2
    %89 = comb.or bin %85, %86, %87, %88 : i2
    %90 = comb.and bin %105, %auto_in_c_valid : i1
    %91 = comb.or bin %76, %77 : i1
    %92 = comb.and bin %90, %76 : i1
    %93 = comb.and bin %92, %81 {sv.namehint = "TLBroadcastTracker.io_probenack"} : i1
    %94 = comb.icmp bin eq %auto_in_c_bits_param, %c0_i3 : i3
    %95 = comb.icmp bin eq %auto_in_c_bits_param, %c-4_i3 : i3
    %96 = comb.or bin %94, %95 : i1
    %97 = comb.and bin %90, %81, %91, %96 {sv.namehint = "TLBroadcastTracker.io_probesack"} : i1
    %98 = comb.and bin %92, %82 {sv.namehint = "TLBroadcastTracker_1.io_probenack"} : i1
    %99 = comb.and bin %90, %82, %91, %96 {sv.namehint = "TLBroadcastTracker_1.io_probesack"} : i1
    %100 = comb.and bin %92, %83 {sv.namehint = "TLBroadcastTracker_2.io_probenack"} : i1
    %101 = comb.and bin %90, %83, %91, %96 {sv.namehint = "TLBroadcastTracker_2.io_probesack"} : i1
    %102 = comb.and bin %92, %84 {sv.namehint = "TLBroadcastTracker_3.io_probenack"} : i1
    %103 = comb.and bin %90, %84, %91, %96 {sv.namehint = "TLBroadcastTracker_3.io_probesack"} : i1
    %104 = comb.mux bin %79, %183, %301 {sv.namehint = "_bundleIn_0_c_ready_T"} : i1
    %105 = comb.or bin %76, %104 {sv.namehint = "bundleIn_0_c_ready"} : i1
    %106 = comb.and bin %auto_in_c_valid, %79 {sv.namehint = "prefixOR_1"} : i1
    %107 = comb.mux bin %78, %c-2_i2, %c1_i2 {sv.namehint = "hi_3"} : i2
    %108 = comb.mux bin %78, %auto_in_c_bits_source, %89 {sv.namehint = "lo_3"} : i2
    %109 = comb.or bin %77, %78 : i1
    %110 = comb.and bin %auto_in_c_valid, %109 {sv.namehint = "prefixOR_1_1"} : i1
    %111 = comb.concat %107, %108 {sv.namehint = "a_source"} : i2, i2
    %112 = comb.extract %auto_in_c_bits_size from 0 {sv.namehint = "a_mask_sizeOH_shiftAmount"} : (i3) -> i2
    %113 = comb.icmp bin ugt %auto_in_c_bits_size, %c2_i3 {sv.namehint = "_a_mask_T"} : i3
    %114 = comb.icmp eq %112, %c-2_i2 {sv.namehint = "a_mask_size"} : i2
    %115 = comb.extract %auto_in_c_bits_address from 2 {sv.namehint = "a_mask_bit"} : (i32) -> i1
    %116 = comb.xor bin %115, %true {sv.namehint = "a_mask_eq"} : i1
    %117 = comb.and bin %114, %116 {sv.namehint = "_a_mask_acc_T"} : i1
    %118 = comb.or bin %113, %117 {sv.namehint = "a_mask_acc"} : i1
    %119 = comb.and bin %114, %115 {sv.namehint = "_a_mask_acc_T_1"} : i1
    %120 = comb.or bin %113, %119 {sv.namehint = "a_mask_acc_1"} : i1
    %121 = comb.icmp eq %112, %c1_i2 {sv.namehint = "a_mask_size_1"} : i2
    %122 = comb.extract %auto_in_c_bits_address from 1 {sv.namehint = "a_mask_bit_1"} : (i32) -> i1
    %123 = comb.xor bin %122, %true {sv.namehint = "a_mask_nbit_1"} : i1
    %124 = comb.and bin %116, %123 {sv.namehint = "a_mask_eq_2"} : i1
    %125 = comb.and bin %121, %124 {sv.namehint = "_a_mask_acc_T_2"} : i1
    %126 = comb.or bin %118, %125 {sv.namehint = "a_mask_acc_2"} : i1
    %127 = comb.and bin %116, %122 {sv.namehint = "a_mask_eq_3"} : i1
    %128 = comb.and bin %121, %127 {sv.namehint = "_a_mask_acc_T_3"} : i1
    %129 = comb.or bin %118, %128 {sv.namehint = "a_mask_acc_3"} : i1
    %130 = comb.and bin %115, %123 {sv.namehint = "a_mask_eq_4"} : i1
    %131 = comb.and bin %121, %130 {sv.namehint = "_a_mask_acc_T_4"} : i1
    %132 = comb.or bin %120, %131 {sv.namehint = "a_mask_acc_4"} : i1
    %133 = comb.and bin %115, %122 {sv.namehint = "a_mask_eq_5"} : i1
    %134 = comb.and bin %121, %133 {sv.namehint = "_a_mask_acc_T_5"} : i1
    %135 = comb.or bin %120, %134 {sv.namehint = "a_mask_acc_5"} : i1
    %136 = comb.extract %auto_in_c_bits_address from 0 {sv.namehint = "a_mask_bit_2"} : (i32) -> i1
    %137 = comb.xor bin %136, %true {sv.namehint = "a_mask_nbit_2"} : i1
    %138 = comb.and bin %124, %137 {sv.namehint = "a_mask_eq_6"} : i1
    %139 = comb.or bin %126, %138 {sv.namehint = "a_mask_lo_lo_lo"} : i1
    %140 = comb.and bin %124, %136 {sv.namehint = "a_mask_eq_7"} : i1
    %141 = comb.or bin %126, %140 {sv.namehint = "a_mask_lo_lo_hi"} : i1
    %142 = comb.and bin %127, %137 {sv.namehint = "a_mask_eq_8"} : i1
    %143 = comb.or bin %129, %142 {sv.namehint = "a_mask_lo_hi_lo"} : i1
    %144 = comb.and bin %127, %136 {sv.namehint = "a_mask_eq_9"} : i1
    %145 = comb.or bin %129, %144 {sv.namehint = "a_mask_lo_hi_hi"} : i1
    %146 = comb.and bin %130, %137 {sv.namehint = "a_mask_eq_10"} : i1
    %147 = comb.or bin %132, %146 {sv.namehint = "a_mask_hi_lo_lo"} : i1
    %148 = comb.and bin %130, %136 {sv.namehint = "a_mask_eq_11"} : i1
    %149 = comb.or bin %132, %148 {sv.namehint = "a_mask_hi_lo_hi"} : i1
    %150 = comb.and bin %133, %137 {sv.namehint = "a_mask_eq_12"} : i1
    %151 = comb.or bin %135, %150 {sv.namehint = "a_mask_hi_hi_lo"} : i1
    %152 = comb.and bin %133, %136 {sv.namehint = "a_mask_eq_13"} : i1
    %153 = comb.or bin %135, %152 {sv.namehint = "a_mask_hi_hi_hi"} : i1
    %154 = comb.concat %153, %151, %149, %147, %145, %143, %141, %139 {sv.namehint = "a_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %155 = comb.shl bin %c63_i13, %13 {sv.namehint = "_decode_T_5"} : i13
    %156 = comb.extract %155 from 3 : (i13) -> i3
    %157 = comb.xor %156, %c-1_i3 {sv.namehint = "_decode_T_7"} : i3
    %beatsLeft = seq.firreg %176 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 10 : ui64} : i3
    %158 = comb.icmp bin eq %beatsLeft, %c0_i3 {sv.namehint = "idle"} : i3
    %159 = comb.and bin %158, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %160 = comb.xor %106, %true {sv.namehint = "readys_1"} : i1
    %161 = comb.and bin %160, %42 {sv.namehint = "earlyWinner_1"} : i1
    %162 = comb.and bin %160, %42 {sv.namehint = "winnerQual_1"} : i1
    %163 = comb.xor bin %106, %true : i1
    %164 = comb.xor bin %161, %true : i1
    %165 = comb.or bin %163, %164, %reset : i1
    %166 = comb.xor bin %165, %true : i1
    %167 = comb.or bin %106, %42 {sv.namehint = "_sink_ACancel_earlyValid_T"} : i1
    %168 = comb.xor bin %167, %true : i1
    %169 = comb.or bin %168, %106, %161, %reset : i1
    %170 = comb.xor bin %169, %true : i1
    %171 = comb.and bin %162, %17 : i1
    %172 = comb.mux bin %171, %157, %c0_i3 {sv.namehint = "initBeats"} : i3
    %173 = comb.and bin %auto_in_d_ready, %188 {sv.namehint = "_beatsLeft_T_2"} : i1
    %174 = comb.concat %c0_i2, %173 : i2, i1
    %175 = comb.sub %beatsLeft, %174 {sv.namehint = "_beatsLeft_T_3"} : i3
    %176 = comb.mux bin %159, %172, %175 {sv.namehint = "_beatsLeft_T_5"} : i3
    %state_0 = seq.firreg %179 clock %clock reset sync %reset, %false {firrtl.random_init_start = 13 : ui64} : i1
    %state_1 = seq.firreg %180 clock %clock reset sync %reset, %false {firrtl.random_init_start = 14 : ui64} : i1
    %177 = comb.mux bin %158, %106, %state_0 {sv.namehint = "muxStateEarly_0"} : i1
    %178 = comb.mux bin %158, %161, %state_1 {sv.namehint = "muxStateEarly_1"} : i1
    %179 = comb.mux bin %158, %106, %state_0 {sv.namehint = "muxStateQual_0"} : i1
    %180 = comb.mux bin %158, %162, %state_1 {sv.namehint = "muxStateQual_1"} : i1
    %181 = comb.or %158, %state_0 {sv.namehint = "allowed_0"} : i1
    %182 = comb.mux bin %158, %160, %state_1 {sv.namehint = "allowed_1"} : i1
    %183 = comb.and bin %auto_in_d_ready, %181 {sv.namehint = "out_ready"} : i1
    %184 = comb.and bin %auto_in_d_ready, %182 {sv.namehint = "out_1_ready"} : i1
    %185 = comb.and %state_0, %106 {sv.namehint = "_sink_ACancel_earlyValid_T_1"} : i1
    %186 = comb.and %state_1, %42 {sv.namehint = "_sink_ACancel_earlyValid_T_2"} : i1
    %187 = comb.or bin %185, %186 {sv.namehint = "_sink_ACancel_earlyValid_T_3"} : i1
    %188 = comb.mux bin %158, %167, %187 {sv.namehint = "out_2_valid"} : i1
    %189 = comb.and %178, %auto_out_d_bits_corrupt {sv.namehint = "out_2_bits_corrupt"} : i1
    %190 = comb.mux bin %178, %auto_out_d_bits_data, %c0_i64 {sv.namehint = "out_2_bits_data"} : i64
    %191 = comb.and %178, %auto_out_d_bits_denied {sv.namehint = "out_2_bits_denied"} : i1
    %192 = comb.mux bin %178, %55, %c0_i2 {sv.namehint = "out_2_bits_sink"} : i2
    %193 = comb.mux bin %177, %auto_in_c_bits_source, %c0_i2 : i2
    %194 = comb.mux bin %178, %43, %c0_i2 : i2
    %195 = comb.or bin %193, %194 {sv.namehint = "out_2_bits_source"} : i2
    %196 = comb.mux bin %177, %auto_in_c_bits_size, %c0_i3 : i3
    %197 = comb.mux bin %178, %auto_out_d_bits_size, %c0_i3 : i3
    %198 = comb.or bin %196, %197 {sv.namehint = "out_2_bits_size"} : i3
    %199 = comb.and %178, %44, %11 : i1
    %200 = comb.mux bin %199, %49, %c0_i2 {sv.namehint = "out_2_bits_param"} : i2
    %201 = comb.mux bin %177, %c-2_i3, %c0_i3 : i3
    %202 = comb.mux bin %178, %46, %c0_i3 : i3
    %203 = comb.or bin %201, %202 {sv.namehint = "out_2_bits_opcode"} : i3
    %204 = comb.concat %c0_i10, %auto_in_c_bits_size : i10, i3
    %205 = comb.shl bin %c63_i13, %204 {sv.namehint = "_decode_T_9"} : i13
    %206 = comb.extract %205 from 3 : (i13) -> i3
    %207 = comb.xor %206, %c-1_i3 {sv.namehint = "_decode_T_11"} : i3
    %208 = comb.concat %c0_i10, %TLBroadcastTracker.io_out_a_bits_size : i10, i3
    %209 = comb.shl bin %c63_i13, %208 {sv.namehint = "_decode_T_13"} : i13
    %210 = comb.extract %209 from 3 : (i13) -> i3
    %211 = comb.xor %210, %c-1_i3 {sv.namehint = "_decode_T_15"} : i3
    %212 = comb.extract %TLBroadcastTracker.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_1"} : (i3) -> i1
    %213 = comb.xor bin %212, %true {sv.namehint = "opdata_4"} : i1
    %214 = comb.concat %c0_i10, %TLBroadcastTracker_1.io_out_a_bits_size : i10, i3
    %215 = comb.shl bin %c63_i13, %214 {sv.namehint = "_decode_T_17"} : i13
    %216 = comb.extract %215 from 3 : (i13) -> i3
    %217 = comb.xor %216, %c-1_i3 {sv.namehint = "_decode_T_19"} : i3
    %218 = comb.extract %TLBroadcastTracker_1.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_2"} : (i3) -> i1
    %219 = comb.xor bin %218, %true {sv.namehint = "opdata_5"} : i1
    %220 = comb.concat %c0_i10, %TLBroadcastTracker_2.io_out_a_bits_size : i10, i3
    %221 = comb.shl bin %c63_i13, %220 {sv.namehint = "_decode_T_21"} : i13
    %222 = comb.extract %221 from 3 : (i13) -> i3
    %223 = comb.xor %222, %c-1_i3 {sv.namehint = "_decode_T_23"} : i3
    %224 = comb.extract %TLBroadcastTracker_2.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_3"} : (i3) -> i1
    %225 = comb.xor bin %224, %true {sv.namehint = "opdata_6"} : i1
    %226 = comb.concat %c0_i10, %TLBroadcastTracker_3.io_out_a_bits_size : i10, i3
    %227 = comb.shl bin %c63_i13, %226 {sv.namehint = "_decode_T_25"} : i13
    %228 = comb.extract %227 from 3 : (i13) -> i3
    %229 = comb.xor %228, %c-1_i3 {sv.namehint = "_decode_T_27"} : i3
    %230 = comb.extract %TLBroadcastTracker_3.io_out_a_bits_opcode from 2 {sv.namehint = "_opdata_T_4"} : (i3) -> i1
    %231 = comb.xor bin %230, %true {sv.namehint = "opdata_7"} : i1
    %beatsLeft_1 = seq.firreg %285 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 15 : ui64} : i3
    %232 = comb.icmp bin eq %beatsLeft_1, %c0_i3 {sv.namehint = "idle_1"} : i3
    %233 = comb.and bin %232, %auto_out_a_ready {sv.namehint = "latch_1"} : i1
    %234 = comb.or %TLBroadcastTracker.io_out_a_valid, %110 : i1
    %235 = comb.or %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_1.io_out_a_valid, %234 : i1
    %236 = comb.or %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker.io_out_a_valid, %110 : i1
    %237 = comb.xor %235, %true {sv.namehint = "readys_1_4"} : i1
    %238 = comb.xor %236, %true {sv.namehint = "readys_1_3"} : i1
    %239 = comb.xor %234, %true {sv.namehint = "readys_1_2"} : i1
    %240 = comb.xor %110, %true {sv.namehint = "readys_1_1"} : i1
    %241 = comb.and bin %240, %TLBroadcastTracker.io_out_a_valid {sv.namehint = "earlyWinner_1_1"} : i1
    %242 = comb.and bin %239, %TLBroadcastTracker_1.io_out_a_valid {sv.namehint = "earlyWinner_1_2"} : i1
    %243 = comb.and bin %238, %TLBroadcastTracker_2.io_out_a_valid {sv.namehint = "earlyWinner_1_3"} : i1
    %244 = comb.and bin %237, %TLBroadcastTracker_3.io_out_a_valid {sv.namehint = "earlyWinner_1_4"} : i1
    %245 = comb.and bin %240, %TLBroadcastTracker.io_out_a_valid {sv.namehint = "winnerQual_1_1"} : i1
    %246 = comb.and bin %239, %TLBroadcastTracker_1.io_out_a_valid {sv.namehint = "winnerQual_1_2"} : i1
    %247 = comb.and bin %238, %TLBroadcastTracker_2.io_out_a_valid {sv.namehint = "winnerQual_1_3"} : i1
    %248 = comb.and bin %237, %TLBroadcastTracker_3.io_out_a_valid {sv.namehint = "winnerQual_1_4"} : i1
    %249 = comb.or bin %110, %241 {sv.namehint = "prefixOR_2"} : i1
    %250 = comb.or bin %249, %242 {sv.namehint = "prefixOR_3"} : i1
    %251 = comb.or bin %250, %243 {sv.namehint = "prefixOR_4"} : i1
    %252 = comb.xor bin %110, %true : i1
    %253 = comb.xor bin %241, %true : i1
    %254 = comb.or bin %252, %253 : i1
    %255 = comb.xor bin %249, %true : i1
    %256 = comb.xor bin %242, %true : i1
    %257 = comb.or bin %255, %256 : i1
    %258 = comb.xor bin %250, %true : i1
    %259 = comb.xor bin %243, %true : i1
    %260 = comb.or bin %258, %259 : i1
    %261 = comb.xor bin %251, %true : i1
    %262 = comb.xor bin %244, %true : i1
    %263 = comb.or bin %261, %262 : i1
    %264 = comb.and bin %254, %257, %260, %263 : i1
    %265 = comb.or bin %264, %reset : i1
    %266 = comb.xor bin %265, %true : i1
    %267 = comb.or bin %110, %TLBroadcastTracker.io_out_a_valid {sv.namehint = "_sink_ACancel_earlyValid_T_5"} : i1
    %268 = comb.or bin %267, %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_3.io_out_a_valid : i1
    %269 = comb.xor bin %268, %true : i1
    %270 = comb.or bin %269, %110, %241, %242, %243, %244, %reset : i1
    %271 = comb.xor bin %270, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %471 = comb.and bin %STOP_COND_, %40 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %472 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %473 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %170 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %false : i1
        sv.if %475 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %266 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %271 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %false : i1
        sv.if %478 {
          sv.fatal 1
        }
      }
    }
    %272 = comb.mux bin %110, %207, %c0_i3 {sv.namehint = "maskedBeats_0_1"} : i3
    %273 = comb.and bin %245, %213 : i1
    %274 = comb.mux bin %273, %211, %c0_i3 {sv.namehint = "maskedBeats_1_1"} : i3
    %275 = comb.and bin %246, %219 : i1
    %276 = comb.mux bin %275, %217, %c0_i3 {sv.namehint = "maskedBeats_2"} : i3
    %277 = comb.and bin %247, %225 : i1
    %278 = comb.mux bin %277, %223, %c0_i3 {sv.namehint = "maskedBeats_3"} : i3
    %279 = comb.and bin %248, %231 : i1
    %280 = comb.mux bin %279, %229, %c0_i3 {sv.namehint = "maskedBeats_4"} : i3
    %281 = comb.or bin %272, %274, %276, %278, %280 {sv.namehint = "initBeats_1"} : i3
    %282 = comb.and bin %auto_out_a_ready, %313 {sv.namehint = "_beatsLeft_T_8"} : i1
    %283 = comb.concat %c0_i2, %282 : i2, i1
    %284 = comb.sub %beatsLeft_1, %283 {sv.namehint = "_beatsLeft_T_9"} : i3
    %285 = comb.mux bin %233, %281, %284 {sv.namehint = "_beatsLeft_T_11"} : i3
    %state_1_0 = seq.firreg %291 clock %clock reset sync %reset, %false {firrtl.random_init_start = 18 : ui64} : i1
    %state_1_1 = seq.firreg %292 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %state_1_2 = seq.firreg %293 clock %clock reset sync %reset, %false {firrtl.random_init_start = 20 : ui64} : i1
    %state_1_3 = seq.firreg %294 clock %clock reset sync %reset, %false {firrtl.random_init_start = 21 : ui64} : i1
    %state_1_4 = seq.firreg %295 clock %clock reset sync %reset, %false {firrtl.random_init_start = 22 : ui64} : i1
    %286 = comb.mux bin %232, %110, %state_1_0 {sv.namehint = "muxStateEarly_1_0"} : i1
    %287 = comb.mux bin %232, %241, %state_1_1 {sv.namehint = "muxStateEarly_1_1"} : i1
    %288 = comb.mux bin %232, %242, %state_1_2 {sv.namehint = "muxStateEarly_1_2"} : i1
    %289 = comb.mux bin %232, %243, %state_1_3 {sv.namehint = "muxStateEarly_1_3"} : i1
    %290 = comb.mux bin %232, %244, %state_1_4 {sv.namehint = "muxStateEarly_1_4"} : i1
    %291 = comb.mux bin %232, %110, %state_1_0 {sv.namehint = "muxStateQual_1_0"} : i1
    %292 = comb.mux bin %232, %245, %state_1_1 {sv.namehint = "muxStateQual_1_1"} : i1
    %293 = comb.mux bin %232, %246, %state_1_2 {sv.namehint = "muxStateQual_1_2"} : i1
    %294 = comb.mux bin %232, %247, %state_1_3 {sv.namehint = "muxStateQual_1_3"} : i1
    %295 = comb.mux bin %232, %248, %state_1_4 {sv.namehint = "muxStateQual_1_4"} : i1
    %296 = comb.or %232, %state_1_0 {sv.namehint = "allowed_1_0"} : i1
    %297 = comb.mux bin %232, %240, %state_1_1 {sv.namehint = "allowed_1_1"} : i1
    %298 = comb.mux bin %232, %239, %state_1_2 {sv.namehint = "allowed_1_2"} : i1
    %299 = comb.mux bin %232, %238, %state_1_3 {sv.namehint = "allowed_1_3"} : i1
    %300 = comb.mux bin %232, %237, %state_1_4 {sv.namehint = "allowed_1_4"} : i1
    %301 = comb.and bin %auto_out_a_ready, %296 {sv.namehint = "out_3_ready"} : i1
    %302 = comb.and bin %auto_out_a_ready, %297 {sv.namehint = "out_4_ready"} : i1
    %303 = comb.and bin %auto_out_a_ready, %298 {sv.namehint = "out_5_ready"} : i1
    %304 = comb.and bin %auto_out_a_ready, %299 {sv.namehint = "out_6_ready"} : i1
    %305 = comb.and bin %auto_out_a_ready, %300 {sv.namehint = "out_7_ready"} : i1
    %306 = comb.or bin %267, %TLBroadcastTracker_1.io_out_a_valid, %TLBroadcastTracker_2.io_out_a_valid, %TLBroadcastTracker_3.io_out_a_valid {sv.namehint = "_sink_ACancel_earlyValid_T_8"} : i1
    %307 = comb.and %state_1_0, %110 {sv.namehint = "_sink_ACancel_earlyValid_T_9"} : i1
    %308 = comb.and %state_1_1, %TLBroadcastTracker.io_out_a_valid {sv.namehint = "_sink_ACancel_earlyValid_T_10"} : i1
    %309 = comb.and %state_1_2, %TLBroadcastTracker_1.io_out_a_valid {sv.namehint = "_sink_ACancel_earlyValid_T_11"} : i1
    %310 = comb.and %state_1_3, %TLBroadcastTracker_2.io_out_a_valid {sv.namehint = "_sink_ACancel_earlyValid_T_12"} : i1
    %311 = comb.and %state_1_4, %TLBroadcastTracker_3.io_out_a_valid {sv.namehint = "_sink_ACancel_earlyValid_T_13"} : i1
    %312 = comb.or bin %307, %308, %309, %310, %311 {sv.namehint = "_sink_ACancel_earlyValid_T_17"} : i1
    %313 = comb.mux bin %232, %306, %312 {sv.namehint = "out_8_valid"} : i1
    %314 = comb.mux bin %286, %auto_in_c_bits_data, %c0_i64 : i64
    %315 = comb.mux bin %287, %TLBroadcastTracker.io_out_a_bits_data, %c0_i64 : i64
    %316 = comb.mux bin %288, %TLBroadcastTracker_1.io_out_a_bits_data, %c0_i64 : i64
    %317 = comb.mux bin %289, %TLBroadcastTracker_2.io_out_a_bits_data, %c0_i64 : i64
    %318 = comb.mux bin %290, %TLBroadcastTracker_3.io_out_a_bits_data, %c0_i64 : i64
    %319 = comb.or bin %314, %315, %316, %317, %318 {sv.namehint = "out_8_bits_data"} : i64
    %320 = comb.mux bin %286, %154, %c0_i8 : i8
    %321 = comb.mux bin %287, %TLBroadcastTracker.io_out_a_bits_mask, %c0_i8 : i8
    %322 = comb.mux bin %288, %TLBroadcastTracker_1.io_out_a_bits_mask, %c0_i8 : i8
    %323 = comb.mux bin %289, %TLBroadcastTracker_2.io_out_a_bits_mask, %c0_i8 : i8
    %324 = comb.mux bin %290, %TLBroadcastTracker_3.io_out_a_bits_mask, %c0_i8 : i8
    %325 = comb.or bin %320, %321, %322, %323, %324 {sv.namehint = "out_8_bits_mask"} : i8
    %326 = comb.and %287, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_fetch : i1
    %327 = comb.and %288, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_fetch : i1
    %328 = comb.and %289, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_fetch : i1
    %329 = comb.and %290, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_fetch : i1
    %330 = comb.or bin %326, %327, %328, %329 {sv.namehint = "out_8_bits_user_amba_prot_fetch"} : i1
    %331 = comb.and %287, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_secure : i1
    %332 = comb.and %288, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_secure : i1
    %333 = comb.and %289, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_secure : i1
    %334 = comb.and %290, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_secure : i1
    %335 = comb.or bin %286, %331, %332, %333, %334 {sv.namehint = "out_8_bits_user_amba_prot_secure"} : i1
    %336 = comb.and %287, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_privileged : i1
    %337 = comb.and %288, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_privileged : i1
    %338 = comb.and %289, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_privileged : i1
    %339 = comb.and %290, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_privileged : i1
    %340 = comb.or bin %286, %336, %337, %338, %339 {sv.namehint = "out_8_bits_user_amba_prot_privileged"} : i1
    %341 = comb.and %287, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_writealloc : i1
    %342 = comb.and %288, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_writealloc : i1
    %343 = comb.and %289, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_writealloc : i1
    %344 = comb.and %290, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_writealloc : i1
    %345 = comb.or bin %286, %341, %342, %343, %344 {sv.namehint = "out_8_bits_user_amba_prot_writealloc"} : i1
    %346 = comb.and %287, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_readalloc : i1
    %347 = comb.and %288, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_readalloc : i1
    %348 = comb.and %289, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_readalloc : i1
    %349 = comb.and %290, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_readalloc : i1
    %350 = comb.or bin %286, %346, %347, %348, %349 {sv.namehint = "out_8_bits_user_amba_prot_readalloc"} : i1
    %351 = comb.and %287, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_modifiable : i1
    %352 = comb.and %288, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_modifiable : i1
    %353 = comb.and %289, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_modifiable : i1
    %354 = comb.and %290, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_modifiable : i1
    %355 = comb.or bin %286, %351, %352, %353, %354 {sv.namehint = "out_8_bits_user_amba_prot_modifiable"} : i1
    %356 = comb.and %287, %TLBroadcastTracker.io_out_a_bits_user_amba_prot_bufferable : i1
    %357 = comb.and %288, %TLBroadcastTracker_1.io_out_a_bits_user_amba_prot_bufferable : i1
    %358 = comb.and %289, %TLBroadcastTracker_2.io_out_a_bits_user_amba_prot_bufferable : i1
    %359 = comb.and %290, %TLBroadcastTracker_3.io_out_a_bits_user_amba_prot_bufferable : i1
    %360 = comb.or bin %286, %356, %357, %358, %359 {sv.namehint = "out_8_bits_user_amba_prot_bufferable"} : i1
    %361 = comb.mux bin %286, %auto_in_c_bits_address, %c0_i32 : i32
    %362 = comb.mux bin %287, %TLBroadcastTracker.io_out_a_bits_address, %c0_i32 : i32
    %363 = comb.mux bin %288, %TLBroadcastTracker_1.io_out_a_bits_address, %c0_i32 : i32
    %364 = comb.mux bin %289, %TLBroadcastTracker_2.io_out_a_bits_address, %c0_i32 : i32
    %365 = comb.mux bin %290, %TLBroadcastTracker_3.io_out_a_bits_address, %c0_i32 : i32
    %366 = comb.or bin %361, %362, %363, %364, %365 {sv.namehint = "out_8_bits_address"} : i32
    %367 = comb.mux bin %286, %111, %c0_i4 : i4
    %368 = comb.mux bin %287, %TLBroadcastTracker.io_out_a_bits_source, %c0_i4 : i4
    %369 = comb.mux bin %288, %TLBroadcastTracker_1.io_out_a_bits_source, %c0_i4 : i4
    %370 = comb.mux bin %289, %TLBroadcastTracker_2.io_out_a_bits_source, %c0_i4 : i4
    %371 = comb.mux bin %290, %TLBroadcastTracker_3.io_out_a_bits_source, %c0_i4 : i4
    %372 = comb.or bin %367, %368, %369, %370, %371 {sv.namehint = "out_8_bits_source"} : i4
    %373 = comb.mux bin %286, %auto_in_c_bits_size, %c0_i3 : i3
    %374 = comb.mux bin %287, %TLBroadcastTracker.io_out_a_bits_size, %c0_i3 : i3
    %375 = comb.mux bin %288, %TLBroadcastTracker_1.io_out_a_bits_size, %c0_i3 : i3
    %376 = comb.mux bin %289, %TLBroadcastTracker_2.io_out_a_bits_size, %c0_i3 : i3
    %377 = comb.mux bin %290, %TLBroadcastTracker_3.io_out_a_bits_size, %c0_i3 : i3
    %378 = comb.or bin %373, %374, %375, %376, %377 {sv.namehint = "out_8_bits_size"} : i3
    %379 = comb.mux bin %287, %TLBroadcastTracker.io_out_a_bits_param, %c0_i3 : i3
    %380 = comb.mux bin %288, %TLBroadcastTracker_1.io_out_a_bits_param, %c0_i3 : i3
    %381 = comb.mux bin %289, %TLBroadcastTracker_2.io_out_a_bits_param, %c0_i3 : i3
    %382 = comb.mux bin %290, %TLBroadcastTracker_3.io_out_a_bits_param, %c0_i3 : i3
    %383 = comb.or bin %379, %380, %381, %382 {sv.namehint = "out_8_bits_param"} : i3
    %384 = comb.mux bin %287, %TLBroadcastTracker.io_out_a_bits_opcode, %c0_i3 : i3
    %385 = comb.mux bin %288, %TLBroadcastTracker_1.io_out_a_bits_opcode, %c0_i3 : i3
    %386 = comb.mux bin %289, %TLBroadcastTracker_2.io_out_a_bits_opcode, %c0_i3 : i3
    %387 = comb.mux bin %290, %TLBroadcastTracker_3.io_out_a_bits_opcode, %c0_i3 : i3
    %388 = comb.or bin %384, %385, %386, %387 {sv.namehint = "out_8_bits_opcode"} : i3
    %REG = seq.firreg %458 clock %clock reset sync %reset, %false {firrtl.random_init_start = 23 : ui64, sv.namehint = "REG"} : i1
    %REG_1 = seq.firreg %460 clock %clock {firrtl.random_init_start = 24 : ui64} : i26
    %REG_2 = seq.firreg %462 clock %clock {firrtl.random_init_start = 50 : ui64, sv.namehint = "REG_2"} : i2
    %389 = comb.concat %REG_1, %c0_i6 {sv.namehint = "bundleIn_0_b_bits_b_address"} : i26, i6
    %390 = comb.and bin %auto_in_b_ready, %REG : i1
    %391 = comb.xor %390, %true : i1
    %392 = comb.and %391, %REG : i1
    %393 = comb.icmp bin eq %auto_in_a_bits_source, %c0_i2 {sv.namehint = "BroadcastFilter.io_request_bits_allocOH"} : i2
    %394 = comb.and bin %427, %auto_in_a_valid : i1
    %395 = comb.concat %c0_i10, %auto_in_a_bits_size : i10, i3
    %396 = comb.shl bin %c63_i13, %395 {sv.namehint = "_beats1_decode_T_9"} : i13
    %397 = comb.extract %396 from 3 : (i13) -> i3
    %398 = comb.xor %397, %c-1_i3 {sv.namehint = "_beats1_decode_T_11"} : i3
    %399 = comb.extract %auto_in_a_bits_opcode from 2 {sv.namehint = "_beats1_opdata_T"} : (i3) -> i1
    %400 = comb.mux bin %399, %c0_i3, %398 {sv.namehint = "beats1_2"} : i3
    %counter_2 = seq.firreg %405 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 52 : ui64} : i3
    %401 = comb.add %counter_2, %c-1_i3 {sv.namehint = "_counter1_T_2"} : i3
    %402 = comb.icmp bin ne %counter_2, %c0_i3 {sv.namehint = "_bundleIn_0_a_ready_T"} : i3
    %403 = comb.xor bin %402, %true {sv.namehint = "first_2"} : i1
    %404 = comb.mux bin %402, %401, %400 {sv.namehint = "_counter_T_2"} : i3
    %405 = comb.mux bin %394, %404, %counter_2 : i3
    %406 = comb.concat %TLBroadcastTracker_3.io_idle, %TLBroadcastTracker_2.io_idle, %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker.io_idle : i1, i1, i1, i1
    %407 = comb.extract %auto_in_a_bits_address from 6 : (i32) -> i26
    %408 = comb.icmp bin eq %TLBroadcastTracker.io_line, %407 : i26
    %409 = comb.icmp bin eq %TLBroadcastTracker_1.io_line, %407 : i26
    %410 = comb.icmp bin eq %TLBroadcastTracker_2.io_line, %407 : i26
    %411 = comb.icmp bin eq %TLBroadcastTracker_3.io_line, %407 : i26
    %412 = comb.concat %411, %410, %409, %408 : i1, i1, i1, i1
    %413 = comb.icmp bin ne %412, %c0_i4 : i4
    %414 = comb.or %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker.io_idle : i1
    %415 = comb.or %TLBroadcastTracker_2.io_idle, %TLBroadcastTracker_1.io_idle, %TLBroadcastTracker.io_idle : i1
    %416 = comb.xor %415, %true : i1
    %417 = comb.xor %414, %true : i1
    %418 = comb.xor %TLBroadcastTracker.io_idle, %true : i1
    %419 = comb.concat %416, %417, %418, %true : i1, i1, i1, i1
    %420 = comb.and bin %419, %406 : i4
    %421 = comb.concat %411, %410, %409, %408 : i1, i1, i1, i1
    %422 = comb.mux bin %413, %421, %420 {sv.namehint = "lo_7"} : i4
    %423 = comb.concat %TLBroadcastTracker_3.io_in_a_ready, %TLBroadcastTracker_2.io_in_a_ready, %TLBroadcastTracker_1.io_in_a_ready, %TLBroadcastTracker.io_in_a_ready : i1, i1, i1, i1
    %424 = comb.and bin %422, %423 : i4
    %425 = comb.icmp bin ne %424, %c0_i4 : i4
    %426 = comb.or bin %402, %BroadcastFilter.io_request_ready {sv.namehint = "_bundleIn_0_a_ready_T_1"} : i1
    %427 = comb.and bin %426, %425 {sv.namehint = "bundleIn_0_a_ready"} : i1
    %428 = comb.extract %422 from 0 : (i4) -> i1
    %429 = comb.extract %422 from 1 : (i4) -> i1
    %430 = comb.extract %422 from 2 : (i4) -> i1
    %431 = comb.extract %422 from 3 : (i4) -> i1
    %432 = comb.or bin %402, %BroadcastFilter.io_request_ready : i1
    %433 = comb.and bin %auto_in_a_valid, %428, %432 {sv.namehint = "TLBroadcastTracker.io_in_a_valid"} : i1
    %434 = comb.and bin %auto_in_a_valid, %429, %432 {sv.namehint = "TLBroadcastTracker_1.io_in_a_valid"} : i1
    %435 = comb.and bin %auto_in_a_valid, %430, %432 {sv.namehint = "TLBroadcastTracker_2.io_in_a_valid"} : i1
    %436 = comb.and bin %auto_in_a_valid, %431, %432 {sv.namehint = "TLBroadcastTracker_3.io_in_a_valid"} : i1
    %437 = comb.and bin %auto_in_a_valid, %403, %425 {sv.namehint = "BroadcastFilter.io_request_valid"} : i1
    %438 = comb.extract %422 from 2 {sv.namehint = "hi_9"} : (i4) -> i2
    %439 = comb.icmp bin ne %438, %c0_i2 {sv.namehint = "hi_10"} : i2
    %440 = comb.extract %422 from 3 : (i4) -> i1
    %441 = comb.extract %422 from 1 : (i4) -> i1
    %442 = comb.or %440, %441 {sv.namehint = "lo_9"} : i1
    %443 = comb.concat %439, %442 {sv.namehint = "BroadcastFilter.io_request_bits_mshr"} : i1, i1
    %444 = comb.icmp bin eq %auto_in_a_bits_param, %c1_i3 {sv.namehint = "_acq_needT_T_3"} : i3
    %445 = comb.icmp bin eq %auto_in_a_bits_param, %c2_i3 {sv.namehint = "_acq_needT_T_4"} : i3
    %446 = comb.or %445, %444 {sv.namehint = "acq_needT"} : i1
    %447 = comb.icmp bin eq %auto_in_a_bits_param, %c1_i3 : i3
    %448 = comb.icmp bin ne %auto_in_a_bits_opcode, %c-4_i3 : i3
    %449 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-3_i3 : i3
    %450 = comb.mux bin %449, %447, %448 : i1
    %451 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-2_i3 : i3
    %452 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-1_i3 : i3
    %453 = comb.or bin %452, %451 : i1
    %454 = comb.mux bin %453, %446, %450 {sv.namehint = "BroadcastFilter.io_request_bits_needT"} : i1
    %455 = comb.xor bin %BroadcastFilter.io_response_bits_allocOH, %true {sv.namehint = "TLBroadcastTracker.io_probe_bits_count"} : i1
    %456 = comb.xor bin %REG, %true {sv.namehint = "BroadcastFilter.io_response_ready"} : i1
    %457 = comb.and bin %456, %BroadcastFilter.io_response_valid : i1
    %458 = comb.mux bin %457, %455, %392 : i1
    %459 = comb.extract %BroadcastFilter.io_response_bits_address from 6 : (i32) -> i26
    %460 = comb.mux bin %457, %459, %REG_1 : i26
    %461 = comb.mux bin %BroadcastFilter.io_response_bits_needT, %c-2_i2, %c1_i2 : i2
    %462 = comb.mux bin %457, %461, %REG_2 : i2
    %463 = comb.icmp eq %BroadcastFilter.io_response_bits_mshr, %c0_i2 : i2
    %464 = comb.icmp eq %BroadcastFilter.io_response_bits_mshr, %c1_i2 : i2
    %465 = comb.icmp eq %BroadcastFilter.io_response_bits_mshr, %c-2_i2 : i2
    %466 = comb.icmp eq %BroadcastFilter.io_response_bits_mshr, %c-1_i2 : i2
    %467 = comb.and bin %457, %463 {sv.namehint = "TLBroadcastTracker.io_probe_valid"} : i1
    %468 = comb.and bin %457, %464 {sv.namehint = "TLBroadcastTracker_1.io_probe_valid"} : i1
    %469 = comb.and bin %457, %465 {sv.namehint = "TLBroadcastTracker_2.io_probe_valid"} : i1
    %470 = comb.and bin %457, %466 {sv.namehint = "TLBroadcastTracker_3.io_probe_valid"} : i1
    hw.output %427, %REG, %REG_2, %389, %105, %188, %203, %200, %198, %195, %192, %191, %190, %189, %313, %388, %383, %378, %372, %366, %360, %355, %350, %345, %340, %335, %330, %325, %319, %41 : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @TLJbar(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i3, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_param : i2, out auto_in_b_bits_address : i32, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i3, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_data : i64, in %auto_in_c_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i3, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i3, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i3, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i3, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_param, %auto_out_b_bits_address, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_a_bits_corrupt, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_data, %auto_in_c_bits_corrupt, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, i1, i3, i3, i3, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i3, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLInterconnectCoupler_12(out auto_widget_in_a_ready : i1, in %auto_widget_in_a_valid : i1, in %auto_widget_in_a_bits_opcode : i3, in %auto_widget_in_a_bits_param : i3, in %auto_widget_in_a_bits_size : i3, in %auto_widget_in_a_bits_source : i4, in %auto_widget_in_a_bits_address : i32, in %auto_widget_in_a_bits_user_amba_prot_bufferable : i1, in %auto_widget_in_a_bits_user_amba_prot_modifiable : i1, in %auto_widget_in_a_bits_user_amba_prot_readalloc : i1, in %auto_widget_in_a_bits_user_amba_prot_writealloc : i1, in %auto_widget_in_a_bits_user_amba_prot_privileged : i1, in %auto_widget_in_a_bits_user_amba_prot_secure : i1, in %auto_widget_in_a_bits_user_amba_prot_fetch : i1, in %auto_widget_in_a_bits_mask : i8, in %auto_widget_in_a_bits_data : i64, in %auto_widget_in_d_ready : i1, out auto_widget_in_d_valid : i1, out auto_widget_in_d_bits_opcode : i3, out auto_widget_in_d_bits_size : i3, out auto_widget_in_d_bits_source : i4, out auto_widget_in_d_bits_denied : i1, out auto_widget_in_d_bits_data : i64, out auto_widget_in_d_bits_corrupt : i1, in %auto_bus_xing_out_a_ready : i1, out auto_bus_xing_out_a_valid : i1, out auto_bus_xing_out_a_bits_opcode : i3, out auto_bus_xing_out_a_bits_param : i3, out auto_bus_xing_out_a_bits_size : i3, out auto_bus_xing_out_a_bits_source : i4, out auto_bus_xing_out_a_bits_address : i32, out auto_bus_xing_out_a_bits_user_amba_prot_bufferable : i1, out auto_bus_xing_out_a_bits_user_amba_prot_modifiable : i1, out auto_bus_xing_out_a_bits_user_amba_prot_readalloc : i1, out auto_bus_xing_out_a_bits_user_amba_prot_writealloc : i1, out auto_bus_xing_out_a_bits_user_amba_prot_privileged : i1, out auto_bus_xing_out_a_bits_user_amba_prot_secure : i1, out auto_bus_xing_out_a_bits_user_amba_prot_fetch : i1, out auto_bus_xing_out_a_bits_mask : i8, out auto_bus_xing_out_a_bits_data : i64, out auto_bus_xing_out_d_ready : i1, in %auto_bus_xing_out_d_valid : i1, in %auto_bus_xing_out_d_bits_opcode : i3, in %auto_bus_xing_out_d_bits_size : i3, in %auto_bus_xing_out_d_bits_source : i4, in %auto_bus_xing_out_d_bits_denied : i1, in %auto_bus_xing_out_d_bits_data : i64, in %auto_bus_xing_out_d_bits_corrupt : i1) {
    %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_user_amba_prot_fetch, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_d_ready = hw.instance "widget" @TLWidthWidget_6(auto_in_a_valid: %auto_widget_in_a_valid: i1, auto_in_a_bits_opcode: %auto_widget_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_widget_in_a_bits_param: i3, auto_in_a_bits_size: %auto_widget_in_a_bits_size: i3, auto_in_a_bits_source: %auto_widget_in_a_bits_source: i4, auto_in_a_bits_address: %auto_widget_in_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %auto_widget_in_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %auto_widget_in_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %auto_widget_in_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %auto_widget_in_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %auto_widget_in_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %auto_widget_in_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %auto_widget_in_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %auto_widget_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_widget_in_a_bits_data: i64, auto_in_d_ready: %auto_widget_in_d_ready: i1, auto_out_a_ready: %auto_bus_xing_out_a_ready: i1, auto_out_d_valid: %auto_bus_xing_out_d_valid: i1, auto_out_d_bits_opcode: %auto_bus_xing_out_d_bits_opcode: i3, auto_out_d_bits_size: %auto_bus_xing_out_d_bits_size: i3, auto_out_d_bits_source: %auto_bus_xing_out_d_bits_source: i4, auto_out_d_bits_denied: %auto_bus_xing_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_bus_xing_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_bus_xing_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "bundleIn_0_d_ready"}
    hw.output %widget.auto_in_a_ready, %widget.auto_in_d_valid, %widget.auto_in_d_bits_opcode, %widget.auto_in_d_bits_size, %widget.auto_in_d_bits_source, %widget.auto_in_d_bits_denied, %widget.auto_in_d_bits_data, %widget.auto_in_d_bits_corrupt, %widget.auto_out_a_valid, %widget.auto_out_a_bits_opcode, %widget.auto_out_a_bits_param, %widget.auto_out_a_bits_size, %widget.auto_out_a_bits_source, %widget.auto_out_a_bits_address, %widget.auto_out_a_bits_user_amba_prot_bufferable, %widget.auto_out_a_bits_user_amba_prot_modifiable, %widget.auto_out_a_bits_user_amba_prot_readalloc, %widget.auto_out_a_bits_user_amba_prot_writealloc, %widget.auto_out_a_bits_user_amba_prot_privileged, %widget.auto_out_a_bits_user_amba_prot_secure, %widget.auto_out_a_bits_user_amba_prot_fetch, %widget.auto_out_a_bits_mask, %widget.auto_out_a_bits_data, %widget.auto_out_d_ready : i1, i1, i3, i3, i4, i1, i64, i1, i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @CoherenceManagerWrapper(in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode : i3, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param : i3, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size : i3, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source : i4, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address : i32, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_privileged : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_secure : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_fetch : i1, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask : i8, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data : i64, out auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready : i1, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid : i1, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode : i3, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size : i3, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source : i4, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied : i1, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data : i64, in %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt : i1, out auto_coherent_jbar_in_a_ready : i1, in %auto_coherent_jbar_in_a_valid : i1, in %auto_coherent_jbar_in_a_bits_opcode : i3, in %auto_coherent_jbar_in_a_bits_param : i3, in %auto_coherent_jbar_in_a_bits_size : i3, in %auto_coherent_jbar_in_a_bits_source : i2, in %auto_coherent_jbar_in_a_bits_address : i32, in %auto_coherent_jbar_in_a_bits_user_amba_prot_bufferable : i1, in %auto_coherent_jbar_in_a_bits_user_amba_prot_modifiable : i1, in %auto_coherent_jbar_in_a_bits_user_amba_prot_readalloc : i1, in %auto_coherent_jbar_in_a_bits_user_amba_prot_writealloc : i1, in %auto_coherent_jbar_in_a_bits_user_amba_prot_privileged : i1, in %auto_coherent_jbar_in_a_bits_user_amba_prot_secure : i1, in %auto_coherent_jbar_in_a_bits_user_amba_prot_fetch : i1, in %auto_coherent_jbar_in_a_bits_mask : i8, in %auto_coherent_jbar_in_a_bits_data : i64, in %auto_coherent_jbar_in_a_bits_corrupt : i1, in %auto_coherent_jbar_in_b_ready : i1, out auto_coherent_jbar_in_b_valid : i1, out auto_coherent_jbar_in_b_bits_param : i2, out auto_coherent_jbar_in_b_bits_address : i32, out auto_coherent_jbar_in_c_ready : i1, in %auto_coherent_jbar_in_c_valid : i1, in %auto_coherent_jbar_in_c_bits_opcode : i3, in %auto_coherent_jbar_in_c_bits_param : i3, in %auto_coherent_jbar_in_c_bits_size : i3, in %auto_coherent_jbar_in_c_bits_source : i2, in %auto_coherent_jbar_in_c_bits_address : i32, in %auto_coherent_jbar_in_c_bits_data : i64, in %auto_coherent_jbar_in_c_bits_corrupt : i1, in %auto_coherent_jbar_in_d_ready : i1, out auto_coherent_jbar_in_d_valid : i1, out auto_coherent_jbar_in_d_bits_opcode : i3, out auto_coherent_jbar_in_d_bits_param : i2, out auto_coherent_jbar_in_d_bits_size : i3, out auto_coherent_jbar_in_d_bits_source : i2, out auto_coherent_jbar_in_d_bits_sink : i2, out auto_coherent_jbar_in_d_bits_denied : i1, out auto_coherent_jbar_in_d_bits_data : i64, out auto_coherent_jbar_in_d_bits_corrupt : i1, in %auto_coherent_jbar_in_e_valid : i1, in %auto_coherent_jbar_in_e_bits_sink : i2, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock : !seq.clock, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset : i1, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock : !seq.clock, in %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset : i1, out auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock : !seq.clock, out auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset : i1) {
    %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_clock, %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_reset, %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_clock, %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_reset = hw.instance "subsystem_l2_clock_groups" @ClockGroupAggregator_3(auto_in_member_subsystem_cbus_1_clock: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock: !seq.clock, auto_in_member_subsystem_cbus_1_reset: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset: i1, auto_in_member_subsystem_cbus_0_clock: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock: !seq.clock, auto_in_member_subsystem_cbus_0_reset: %auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset: i1) -> (auto_out_1_member_subsystem_pbus_0_clock: !seq.clock, auto_out_1_member_subsystem_pbus_0_reset: i1, auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_out_0_member_subsystem_cbus_0_reset: i1) {sv.namehint = "clockGroup.auto_in_member_subsystem_l2_0_reset"}
    %clockGroup.auto_out_clock, %clockGroup.auto_out_reset = hw.instance "clockGroup" @ClockGroup(auto_in_member_subsystem_sbus_0_clock: %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_in_member_subsystem_sbus_0_reset: %subsystem_l2_clock_groups.auto_out_0_member_subsystem_cbus_0_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockGroup.auto_out_reset"}
    %fixedClockNode.auto_out_clock, %fixedClockNode.auto_out_reset = hw.instance "fixedClockNode" @FixedClockBroadcast_1(auto_in_clock: %clockGroup.auto_out_clock: !seq.clock, auto_in_reset: %clockGroup.auto_out_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "bundleIn_0_reset"}
    %broadcast_1.auto_in_a_ready, %broadcast_1.auto_in_b_valid, %broadcast_1.auto_in_b_bits_param, %broadcast_1.auto_in_b_bits_address, %broadcast_1.auto_in_c_ready, %broadcast_1.auto_in_d_valid, %broadcast_1.auto_in_d_bits_opcode, %broadcast_1.auto_in_d_bits_param, %broadcast_1.auto_in_d_bits_size, %broadcast_1.auto_in_d_bits_source, %broadcast_1.auto_in_d_bits_sink, %broadcast_1.auto_in_d_bits_denied, %broadcast_1.auto_in_d_bits_data, %broadcast_1.auto_in_d_bits_corrupt, %broadcast_1.auto_out_a_valid, %broadcast_1.auto_out_a_bits_opcode, %broadcast_1.auto_out_a_bits_param, %broadcast_1.auto_out_a_bits_size, %broadcast_1.auto_out_a_bits_source, %broadcast_1.auto_out_a_bits_address, %broadcast_1.auto_out_a_bits_user_amba_prot_bufferable, %broadcast_1.auto_out_a_bits_user_amba_prot_modifiable, %broadcast_1.auto_out_a_bits_user_amba_prot_readalloc, %broadcast_1.auto_out_a_bits_user_amba_prot_writealloc, %broadcast_1.auto_out_a_bits_user_amba_prot_privileged, %broadcast_1.auto_out_a_bits_user_amba_prot_secure, %broadcast_1.auto_out_a_bits_user_amba_prot_fetch, %broadcast_1.auto_out_a_bits_mask, %broadcast_1.auto_out_a_bits_data, %broadcast_1.auto_out_d_ready = hw.instance "broadcast_1" @TLBroadcast(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %coherent_jbar.auto_out_a_valid: i1, auto_in_a_bits_opcode: %coherent_jbar.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %coherent_jbar.auto_out_a_bits_param: i3, auto_in_a_bits_size: %coherent_jbar.auto_out_a_bits_size: i3, auto_in_a_bits_source: %coherent_jbar.auto_out_a_bits_source: i2, auto_in_a_bits_address: %coherent_jbar.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %coherent_jbar.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %coherent_jbar.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %coherent_jbar.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %coherent_jbar.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %coherent_jbar.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %coherent_jbar.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %coherent_jbar.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %coherent_jbar.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %coherent_jbar.auto_out_a_bits_data: i64, auto_in_a_bits_corrupt: %coherent_jbar.auto_out_a_bits_corrupt: i1, auto_in_b_ready: %coherent_jbar.auto_out_b_ready: i1, auto_in_c_valid: %coherent_jbar.auto_out_c_valid: i1, auto_in_c_bits_opcode: %coherent_jbar.auto_out_c_bits_opcode: i3, auto_in_c_bits_param: %coherent_jbar.auto_out_c_bits_param: i3, auto_in_c_bits_size: %coherent_jbar.auto_out_c_bits_size: i3, auto_in_c_bits_source: %coherent_jbar.auto_out_c_bits_source: i2, auto_in_c_bits_address: %coherent_jbar.auto_out_c_bits_address: i32, auto_in_c_bits_data: %coherent_jbar.auto_out_c_bits_data: i64, auto_in_c_bits_corrupt: %coherent_jbar.auto_out_c_bits_corrupt: i1, auto_in_d_ready: %coherent_jbar.auto_out_d_ready: i1, auto_in_e_valid: %coherent_jbar.auto_out_e_valid: i1, auto_in_e_bits_sink: %coherent_jbar.auto_out_e_bits_sink: i2, auto_out_a_ready: %binder.auto_in_a_ready: i1, auto_out_d_valid: %binder.auto_in_d_valid: i1, auto_out_d_bits_opcode: %binder.auto_in_d_bits_opcode: i3, auto_out_d_bits_size: %binder.auto_in_d_bits_size: i3, auto_out_d_bits_source: %binder.auto_in_d_bits_source: i4, auto_out_d_bits_denied: %binder.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %binder.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %binder.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "binder.auto_in_d_ready"}
    %coherent_jbar.auto_in_a_ready, %coherent_jbar.auto_in_b_valid, %coherent_jbar.auto_in_b_bits_param, %coherent_jbar.auto_in_b_bits_address, %coherent_jbar.auto_in_c_ready, %coherent_jbar.auto_in_d_valid, %coherent_jbar.auto_in_d_bits_opcode, %coherent_jbar.auto_in_d_bits_param, %coherent_jbar.auto_in_d_bits_size, %coherent_jbar.auto_in_d_bits_source, %coherent_jbar.auto_in_d_bits_sink, %coherent_jbar.auto_in_d_bits_denied, %coherent_jbar.auto_in_d_bits_data, %coherent_jbar.auto_in_d_bits_corrupt, %coherent_jbar.auto_out_a_valid, %coherent_jbar.auto_out_a_bits_opcode, %coherent_jbar.auto_out_a_bits_param, %coherent_jbar.auto_out_a_bits_size, %coherent_jbar.auto_out_a_bits_source, %coherent_jbar.auto_out_a_bits_address, %coherent_jbar.auto_out_a_bits_user_amba_prot_bufferable, %coherent_jbar.auto_out_a_bits_user_amba_prot_modifiable, %coherent_jbar.auto_out_a_bits_user_amba_prot_readalloc, %coherent_jbar.auto_out_a_bits_user_amba_prot_writealloc, %coherent_jbar.auto_out_a_bits_user_amba_prot_privileged, %coherent_jbar.auto_out_a_bits_user_amba_prot_secure, %coherent_jbar.auto_out_a_bits_user_amba_prot_fetch, %coherent_jbar.auto_out_a_bits_mask, %coherent_jbar.auto_out_a_bits_data, %coherent_jbar.auto_out_a_bits_corrupt, %coherent_jbar.auto_out_b_ready, %coherent_jbar.auto_out_c_valid, %coherent_jbar.auto_out_c_bits_opcode, %coherent_jbar.auto_out_c_bits_param, %coherent_jbar.auto_out_c_bits_size, %coherent_jbar.auto_out_c_bits_source, %coherent_jbar.auto_out_c_bits_address, %coherent_jbar.auto_out_c_bits_data, %coherent_jbar.auto_out_c_bits_corrupt, %coherent_jbar.auto_out_d_ready, %coherent_jbar.auto_out_e_valid, %coherent_jbar.auto_out_e_bits_sink = hw.instance "coherent_jbar" @TLJbar(auto_in_a_valid: %auto_coherent_jbar_in_a_valid: i1, auto_in_a_bits_opcode: %auto_coherent_jbar_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_coherent_jbar_in_a_bits_param: i3, auto_in_a_bits_size: %auto_coherent_jbar_in_a_bits_size: i3, auto_in_a_bits_source: %auto_coherent_jbar_in_a_bits_source: i2, auto_in_a_bits_address: %auto_coherent_jbar_in_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %auto_coherent_jbar_in_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %auto_coherent_jbar_in_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %auto_coherent_jbar_in_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %auto_coherent_jbar_in_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %auto_coherent_jbar_in_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %auto_coherent_jbar_in_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %auto_coherent_jbar_in_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %auto_coherent_jbar_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_coherent_jbar_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_coherent_jbar_in_a_bits_corrupt: i1, auto_in_b_ready: %auto_coherent_jbar_in_b_ready: i1, auto_in_c_valid: %auto_coherent_jbar_in_c_valid: i1, auto_in_c_bits_opcode: %auto_coherent_jbar_in_c_bits_opcode: i3, auto_in_c_bits_param: %auto_coherent_jbar_in_c_bits_param: i3, auto_in_c_bits_size: %auto_coherent_jbar_in_c_bits_size: i3, auto_in_c_bits_source: %auto_coherent_jbar_in_c_bits_source: i2, auto_in_c_bits_address: %auto_coherent_jbar_in_c_bits_address: i32, auto_in_c_bits_data: %auto_coherent_jbar_in_c_bits_data: i64, auto_in_c_bits_corrupt: %auto_coherent_jbar_in_c_bits_corrupt: i1, auto_in_d_ready: %auto_coherent_jbar_in_d_ready: i1, auto_in_e_valid: %auto_coherent_jbar_in_e_valid: i1, auto_in_e_bits_sink: %auto_coherent_jbar_in_e_bits_sink: i2, auto_out_a_ready: %broadcast_1.auto_in_a_ready: i1, auto_out_b_valid: %broadcast_1.auto_in_b_valid: i1, auto_out_b_bits_param: %broadcast_1.auto_in_b_bits_param: i2, auto_out_b_bits_address: %broadcast_1.auto_in_b_bits_address: i32, auto_out_c_ready: %broadcast_1.auto_in_c_ready: i1, auto_out_d_valid: %broadcast_1.auto_in_d_valid: i1, auto_out_d_bits_opcode: %broadcast_1.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %broadcast_1.auto_in_d_bits_param: i2, auto_out_d_bits_size: %broadcast_1.auto_in_d_bits_size: i3, auto_out_d_bits_source: %broadcast_1.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %broadcast_1.auto_in_d_bits_sink: i2, auto_out_d_bits_denied: %broadcast_1.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %broadcast_1.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %broadcast_1.auto_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_param: i2, auto_in_b_bits_address: i32, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i3, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i3, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "coherent_jbar.auto_in_d_valid"}
    %binder.auto_in_a_ready, %binder.auto_in_d_valid, %binder.auto_in_d_bits_opcode, %binder.auto_in_d_bits_size, %binder.auto_in_d_bits_source, %binder.auto_in_d_bits_denied, %binder.auto_in_d_bits_data, %binder.auto_in_d_bits_corrupt, %binder.auto_out_a_valid, %binder.auto_out_a_bits_opcode, %binder.auto_out_a_bits_param, %binder.auto_out_a_bits_size, %binder.auto_out_a_bits_source, %binder.auto_out_a_bits_address, %binder.auto_out_a_bits_user_amba_prot_bufferable, %binder.auto_out_a_bits_user_amba_prot_modifiable, %binder.auto_out_a_bits_user_amba_prot_readalloc, %binder.auto_out_a_bits_user_amba_prot_writealloc, %binder.auto_out_a_bits_user_amba_prot_privileged, %binder.auto_out_a_bits_user_amba_prot_secure, %binder.auto_out_a_bits_user_amba_prot_fetch, %binder.auto_out_a_bits_mask, %binder.auto_out_a_bits_data, %binder.auto_out_d_ready = hw.instance "binder" @ProbePicker(clock: %fixedClockNode.auto_out_clock: !seq.clock, reset: %fixedClockNode.auto_out_reset: i1, auto_in_a_valid: %broadcast_1.auto_out_a_valid: i1, auto_in_a_bits_opcode: %broadcast_1.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %broadcast_1.auto_out_a_bits_param: i3, auto_in_a_bits_size: %broadcast_1.auto_out_a_bits_size: i3, auto_in_a_bits_source: %broadcast_1.auto_out_a_bits_source: i4, auto_in_a_bits_address: %broadcast_1.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %broadcast_1.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %broadcast_1.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %broadcast_1.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %broadcast_1.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %broadcast_1.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %broadcast_1.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %broadcast_1.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %broadcast_1.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %broadcast_1.auto_out_a_bits_data: i64, auto_in_d_ready: %broadcast_1.auto_out_d_ready: i1, auto_out_a_ready: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_a_ready: i1, auto_out_d_valid: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_valid: i1, auto_out_d_bits_opcode: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_opcode: i3, auto_out_d_bits_size: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_size: i3, auto_out_d_bits_source: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_source: i4, auto_out_d_bits_denied: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_denied: i1, auto_out_d_bits_data: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_data: i64, auto_out_d_bits_corrupt: %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i3, auto_in_d_bits_source: i4, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i3, auto_out_a_bits_source: i4, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_d_ready: i1) {sv.namehint = "binder.auto_in_d_valid"}
    %coupler_to_bus_named_subsystem_mbus.auto_widget_in_a_ready, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_valid, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_opcode, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_size, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_source, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_denied, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_data, %coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_bits_corrupt, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_bufferable, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_modifiable, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_readalloc, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_writealloc, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_privileged, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_secure, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_fetch, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_d_ready = hw.instance "coupler_to_bus_named_subsystem_mbus" @TLInterconnectCoupler_12(auto_widget_in_a_valid: %binder.auto_out_a_valid: i1, auto_widget_in_a_bits_opcode: %binder.auto_out_a_bits_opcode: i3, auto_widget_in_a_bits_param: %binder.auto_out_a_bits_param: i3, auto_widget_in_a_bits_size: %binder.auto_out_a_bits_size: i3, auto_widget_in_a_bits_source: %binder.auto_out_a_bits_source: i4, auto_widget_in_a_bits_address: %binder.auto_out_a_bits_address: i32, auto_widget_in_a_bits_user_amba_prot_bufferable: %binder.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_widget_in_a_bits_user_amba_prot_modifiable: %binder.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_widget_in_a_bits_user_amba_prot_readalloc: %binder.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_widget_in_a_bits_user_amba_prot_writealloc: %binder.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_widget_in_a_bits_user_amba_prot_privileged: %binder.auto_out_a_bits_user_amba_prot_privileged: i1, auto_widget_in_a_bits_user_amba_prot_secure: %binder.auto_out_a_bits_user_amba_prot_secure: i1, auto_widget_in_a_bits_user_amba_prot_fetch: %binder.auto_out_a_bits_user_amba_prot_fetch: i1, auto_widget_in_a_bits_mask: %binder.auto_out_a_bits_mask: i8, auto_widget_in_a_bits_data: %binder.auto_out_a_bits_data: i64, auto_widget_in_d_ready: %binder.auto_out_d_ready: i1, auto_bus_xing_out_a_ready: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready: i1, auto_bus_xing_out_d_valid: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid: i1, auto_bus_xing_out_d_bits_opcode: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode: i3, auto_bus_xing_out_d_bits_size: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size: i3, auto_bus_xing_out_d_bits_source: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source: i4, auto_bus_xing_out_d_bits_denied: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied: i1, auto_bus_xing_out_d_bits_data: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data: i64, auto_bus_xing_out_d_bits_corrupt: %auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt: i1) -> (auto_widget_in_a_ready: i1, auto_widget_in_d_valid: i1, auto_widget_in_d_bits_opcode: i3, auto_widget_in_d_bits_size: i3, auto_widget_in_d_bits_source: i4, auto_widget_in_d_bits_denied: i1, auto_widget_in_d_bits_data: i64, auto_widget_in_d_bits_corrupt: i1, auto_bus_xing_out_a_valid: i1, auto_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_out_a_bits_param: i3, auto_bus_xing_out_a_bits_size: i3, auto_bus_xing_out_a_bits_source: i4, auto_bus_xing_out_a_bits_address: i32, auto_bus_xing_out_a_bits_user_amba_prot_bufferable: i1, auto_bus_xing_out_a_bits_user_amba_prot_modifiable: i1, auto_bus_xing_out_a_bits_user_amba_prot_readalloc: i1, auto_bus_xing_out_a_bits_user_amba_prot_writealloc: i1, auto_bus_xing_out_a_bits_user_amba_prot_privileged: i1, auto_bus_xing_out_a_bits_user_amba_prot_secure: i1, auto_bus_xing_out_a_bits_user_amba_prot_fetch: i1, auto_bus_xing_out_a_bits_mask: i8, auto_bus_xing_out_a_bits_data: i64, auto_bus_xing_out_d_ready: i1) {sv.namehint = "coupler_to_bus_named_subsystem_mbus.auto_widget_in_d_valid"}
    hw.output %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_valid, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_opcode, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_param, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_size, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_source, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_address, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_bufferable, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_modifiable, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_readalloc, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_writealloc, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_privileged, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_secure, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_user_amba_prot_fetch, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_mask, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_a_bits_data, %coupler_to_bus_named_subsystem_mbus.auto_bus_xing_out_d_ready, %coherent_jbar.auto_in_a_ready, %coherent_jbar.auto_in_b_valid, %coherent_jbar.auto_in_b_bits_param, %coherent_jbar.auto_in_b_bits_address, %coherent_jbar.auto_in_c_ready, %coherent_jbar.auto_in_d_valid, %coherent_jbar.auto_in_d_bits_opcode, %coherent_jbar.auto_in_d_bits_param, %coherent_jbar.auto_in_d_bits_size, %coherent_jbar.auto_in_d_bits_source, %coherent_jbar.auto_in_d_bits_sink, %coherent_jbar.auto_in_d_bits_denied, %coherent_jbar.auto_in_d_bits_data, %coherent_jbar.auto_in_d_bits_corrupt, %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_clock, %subsystem_l2_clock_groups.auto_out_1_member_subsystem_pbus_0_reset : i1, i3, i3, i3, i4, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i2, i32, i1, i1, i3, i2, i3, i2, i2, i1, i64, i1, !seq.clock, i1
  }
  hw.module private @TLMonitor_18(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i4, in %io_in_a_bits_source : i1, in %io_in_a_bits_address : i32, in %io_in_a_bits_mask : i8, in %io_in_b_ready : i1, in %io_in_b_valid : i1, in %io_in_b_bits_opcode : i3, in %io_in_b_bits_param : i2, in %io_in_b_bits_size : i4, in %io_in_b_bits_source : i1, in %io_in_b_bits_address : i32, in %io_in_b_bits_mask : i8, in %io_in_b_bits_corrupt : i1, in %io_in_c_ready : i1, in %io_in_c_valid : i1, in %io_in_c_bits_opcode : i3, in %io_in_c_bits_param : i3, in %io_in_c_bits_size : i4, in %io_in_c_bits_source : i1, in %io_in_c_bits_address : i32, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_source : i1, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1, in %io_in_e_ready : i1, in %io_in_e_valid : i1, in %io_in_e_bits_sink : i2) {
    %c-8_i4 = hw.constant -8 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c-1_i9 = hw.constant -1 : i9
    %c4_i4 = hw.constant 4 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c0_i6 = hw.constant 0 : i6
    %c0_i20 = hw.constant 0 : i20
    %c7_i4 = hw.constant 7 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c2_i4 = hw.constant 2 : i4
    %c255_i31 = hw.constant 255 : i31
    %c15_i31 = hw.constant 15 : i31
    %c1_i2 = hw.constant 1 : i2
    %c6_i4 = hw.constant 6 : i4
    %c1_i4 = hw.constant 1 : i4
    %c4095_i27 = hw.constant 4095 : i27
    %false = hw.constant false
    %c-1_i12 = hw.constant -1 : i12
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i32 = hw.constant 0 : i32
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i16 = hw.constant 0 : i16
    %c0_i8 = hw.constant 0 : i8
    %c0_i9 = hw.constant 0 : i9
    %c3_i3 = hw.constant 3 : i3
    %c0_i2 = hw.constant 0 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i16 = hw.constant -1 : i16
    %c0_i27 = hw.constant 0 : i27
    %c-1_i3 = hw.constant -1 : i3
    %c-1_i8 = hw.constant -1 : i8
    %c0_i12 = hw.constant 0 : i12
    %c0_i23 = hw.constant 0 : i23
    %c0_i15 = hw.constant 0 : i15
    %2 = seq.from_clock %clock
    %3 = comb.xor bin %io_in_a_bits_source, %true {sv.namehint = "_source_ok_T"} : i1
    %4 = comb.concat %c0_i23, %io_in_a_bits_size : i23, i4
    %5 = comb.shl bin %c4095_i27, %4 {sv.namehint = "_is_aligned_mask_T_1"} : i27
    %6 = comb.extract %5 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i27) -> i12
    %7 = comb.xor bin %6, %c-1_i12 {sv.namehint = "is_aligned_mask"} : i12
    %8 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i12
    %9 = comb.and bin %8, %7 : i12
    %10 = comb.icmp bin eq %9, %c0_i12 {sv.namehint = "is_aligned"} : i12
    %11 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i4) -> i2
    %12 = comb.icmp bin ugt %io_in_a_bits_size, %c2_i4 {sv.namehint = "_mask_T"} : i4
    %13 = comb.icmp eq %11, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %14 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i32) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "mask_eq"} : i1
    %16 = comb.and bin %13, %15 {sv.namehint = "_mask_acc_T"} : i1
    %17 = comb.or bin %12, %16 {sv.namehint = "mask_acc"} : i1
    %18 = comb.and bin %13, %14 {sv.namehint = "_mask_acc_T_1"} : i1
    %19 = comb.or bin %12, %18 {sv.namehint = "mask_acc_1"} : i1
    %20 = comb.icmp eq %11, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %21 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i32) -> i1
    %22 = comb.xor bin %21, %true {sv.namehint = "mask_nbit_1"} : i1
    %23 = comb.and bin %15, %22 {sv.namehint = "mask_eq_2"} : i1
    %24 = comb.and bin %20, %23 {sv.namehint = "_mask_acc_T_2"} : i1
    %25 = comb.or bin %17, %24 {sv.namehint = "mask_acc_2"} : i1
    %26 = comb.and bin %15, %21 {sv.namehint = "mask_eq_3"} : i1
    %27 = comb.and bin %20, %26 {sv.namehint = "_mask_acc_T_3"} : i1
    %28 = comb.or bin %17, %27 {sv.namehint = "mask_acc_3"} : i1
    %29 = comb.and bin %14, %22 {sv.namehint = "mask_eq_4"} : i1
    %30 = comb.and bin %20, %29 {sv.namehint = "_mask_acc_T_4"} : i1
    %31 = comb.or bin %19, %30 {sv.namehint = "mask_acc_4"} : i1
    %32 = comb.and bin %14, %21 {sv.namehint = "mask_eq_5"} : i1
    %33 = comb.and bin %20, %32 {sv.namehint = "_mask_acc_T_5"} : i1
    %34 = comb.or bin %19, %33 {sv.namehint = "mask_acc_5"} : i1
    %35 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i32) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "mask_nbit_2"} : i1
    %37 = comb.and bin %23, %36 {sv.namehint = "mask_eq_6"} : i1
    %38 = comb.or bin %25, %37 {sv.namehint = "mask_lo_lo_lo"} : i1
    %39 = comb.and bin %23, %35 {sv.namehint = "mask_eq_7"} : i1
    %40 = comb.or bin %25, %39 {sv.namehint = "mask_lo_lo_hi"} : i1
    %41 = comb.and bin %26, %36 {sv.namehint = "mask_eq_8"} : i1
    %42 = comb.or bin %28, %41 {sv.namehint = "mask_lo_hi_lo"} : i1
    %43 = comb.and bin %26, %35 {sv.namehint = "mask_eq_9"} : i1
    %44 = comb.or bin %28, %43 {sv.namehint = "mask_lo_hi_hi"} : i1
    %45 = comb.and bin %29, %36 {sv.namehint = "mask_eq_10"} : i1
    %46 = comb.or bin %31, %45 {sv.namehint = "mask_hi_lo_lo"} : i1
    %47 = comb.and bin %29, %35 {sv.namehint = "mask_eq_11"} : i1
    %48 = comb.or bin %31, %47 {sv.namehint = "mask_hi_lo_hi"} : i1
    %49 = comb.and bin %32, %36 {sv.namehint = "mask_eq_12"} : i1
    %50 = comb.or bin %34, %49 {sv.namehint = "mask_hi_hi_lo"} : i1
    %51 = comb.and bin %32, %35 {sv.namehint = "mask_eq_13"} : i1
    %52 = comb.or bin %34, %51 {sv.namehint = "mask_hi_hi_hi"} : i1
    %53 = comb.concat %52, %50, %48, %46, %44, %42, %40, %38 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %54 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %55 = comb.and bin %io_in_a_valid, %54 : i1
    %56 = comb.icmp bin ult %io_in_a_bits_size, %c-3_i4 : i4
    %57 = comb.extract %io_in_a_bits_address from 14 : (i32) -> i18
    %58 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i2
    %59 = comb.xor %58, %c-1_i2 : i2
    %60 = comb.extract %io_in_a_bits_address from 17 : (i32) -> i15
    %61 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i1
    %62 = comb.xor %61, %true : i1
    %63 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i6
    %64 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i10
    %65 = comb.xor %64, %c-512_i10 : i10
    %66 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %67 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i2
    %68 = comb.xor %67, %c-1_i2 : i2
    %69 = comb.extract %io_in_a_bits_address from 31 : (i32) -> i1
    %70 = comb.extract %io_in_a_bits_address from 29 : (i32) -> i2
    %71 = comb.xor %70, %c-1_i2 : i2
    %72 = comb.icmp bin ult %io_in_a_bits_size, %c7_i4 : i4
    %73 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %74 = comb.icmp eq %73, %c-8_i4 : i4
    %75 = comb.and bin %56, %72, %74 : i1
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %55, %77 : i1
    %79 = comb.icmp bin eq %io_in_a_bits_size, %c6_i4 : i4
    %80 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i20
    %81 = comb.icmp bin eq %80, %c0_i20 : i20
    %82 = comb.concat %57, %59 : i18, i2
    %83 = comb.icmp bin eq %82, %c0_i20 : i20
    %84 = comb.concat %60, %62 : i15, i1
    %85 = comb.icmp bin eq %84, %c0_i16 : i16
    %86 = comb.concat %63, %65 : i6, i10
    %87 = comb.icmp bin eq %86, %c0_i16 : i16
    %88 = comb.concat %66, %68 : i4, i2
    %89 = comb.icmp bin eq %88, %c0_i6 : i6
    %90 = comb.concat %69, %71 : i1, i2
    %91 = comb.icmp bin eq %90, %c0_i3 : i3
    %92 = comb.or bin %81, %83 : i1
    %93 = comb.or bin %92, %85, %87, %89, %91, %74 : i1
    %94 = comb.and bin %56, %93 : i1
    %95 = comb.and bin %3, %79, %94 : i1
    %96 = comb.or bin %95, %reset : i1
    %97 = comb.xor bin %96, %true : i1
    %98 = comb.and bin %55, %97 : i1
    %99 = comb.or bin %12, %reset : i1
    %100 = comb.xor bin %99, %true : i1
    %101 = comb.and bin %55, %100 : i1
    %102 = comb.or bin %10, %reset : i1
    %103 = comb.xor bin %102, %true : i1
    %104 = comb.and bin %55, %103 : i1
    %105 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %106 = comb.or bin %105, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %55, %107 : i1
    %109 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %110 = comb.or bin %109, %reset : i1
    %111 = comb.xor bin %110, %true : i1
    %112 = comb.and bin %55, %111 : i1
    %113 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %114 = comb.and bin %io_in_a_valid, %113 : i1
    %115 = comb.and bin %114, %77 : i1
    %116 = comb.and bin %3, %79, %94 : i1
    %117 = comb.or bin %116, %reset : i1
    %118 = comb.xor bin %117, %true : i1
    %119 = comb.and bin %114, %118 : i1
    %120 = comb.and bin %114, %100 : i1
    %121 = comb.and bin %114, %103 : i1
    %122 = comb.and bin %114, %107 : i1
    %123 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %124 = comb.or bin %123, %reset : i1
    %125 = comb.xor bin %124, %true : i1
    %126 = comb.and bin %114, %125 : i1
    %127 = comb.and bin %114, %111 : i1
    %128 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %129 = comb.and bin %io_in_a_valid, %128 : i1
    %130 = comb.or bin %56, %reset : i1
    %131 = comb.xor bin %130, %true : i1
    %132 = comb.and bin %129, %131 : i1
    %133 = comb.and bin %56, %83 : i1
    %134 = comb.or bin %81, %85, %87, %89, %91, %74 : i1
    %135 = comb.and bin %72, %134 : i1
    %136 = comb.or bin %133, %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %138 = comb.and bin %129, %137 : i1
    %139 = comb.and bin %129, %103 : i1
    %140 = comb.xor bin %123, %true : i1
    %141 = comb.or bin %140, %reset : i1
    %142 = comb.xor bin %141, %true : i1
    %143 = comb.and bin %129, %142 : i1
    %144 = comb.icmp bin eq %io_in_a_bits_mask, %53 : i8
    %145 = comb.or bin %144, %reset : i1
    %146 = comb.xor bin %145, %true : i1
    %147 = comb.and bin %129, %146 : i1
    %148 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %149 = comb.and bin %io_in_a_valid, %148 : i1
    %150 = comb.or bin %81, %87, %89, %74 : i1
    %151 = comb.and bin %72, %150 : i1
    %152 = comb.icmp bin ult %io_in_a_bits_size, %c-7_i4 : i4
    %153 = comb.and bin %152, %91 : i1
    %154 = comb.or bin %133, %151, %153 : i1
    %155 = comb.and bin %56, %154 : i1
    %156 = comb.or bin %155, %reset : i1
    %157 = comb.xor bin %156, %true : i1
    %158 = comb.and bin %149, %157 : i1
    %159 = comb.and bin %149, %103 : i1
    %160 = comb.and bin %149, %142 : i1
    %161 = comb.and bin %149, %146 : i1
    %162 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %163 = comb.and bin %io_in_a_valid, %162 : i1
    %164 = comb.and bin %163, %157 : i1
    %165 = comb.and bin %163, %103 : i1
    %166 = comb.and bin %163, %142 : i1
    %167 = comb.xor bin %53, %c-1_i8 : i8
    %168 = comb.and bin %io_in_a_bits_mask, %167 : i8
    %169 = comb.icmp bin eq %168, %c0_i8 : i8
    %170 = comb.or bin %169, %reset : i1
    %171 = comb.xor bin %170, %true : i1
    %172 = comb.and bin %163, %171 : i1
    %173 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %174 = comb.and bin %io_in_a_valid, %173 : i1
    %175 = comb.icmp bin ult %io_in_a_bits_size, %c4_i4 : i4
    %176 = comb.or bin %92, %87, %89 : i1
    %177 = comb.and bin %56, %175, %176 : i1
    %178 = comb.or bin %177, %reset : i1
    %179 = comb.xor bin %178, %true : i1
    %180 = comb.and bin %174, %179 : i1
    %181 = comb.and bin %174, %103 : i1
    %182 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %183 = comb.or bin %182, %reset : i1
    %184 = comb.xor bin %183, %true : i1
    %185 = comb.and bin %174, %184 : i1
    %186 = comb.and bin %174, %146 : i1
    %187 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %188 = comb.and bin %io_in_a_valid, %187 : i1
    %189 = comb.and bin %188, %179 : i1
    %190 = comb.and bin %188, %103 : i1
    %191 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %192 = comb.xor bin %191, %true : i1
    %193 = comb.or bin %192, %reset : i1
    %194 = comb.xor bin %193, %true : i1
    %195 = comb.and bin %188, %194 : i1
    %196 = comb.and bin %188, %146 : i1
    %197 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %198 = comb.and bin %io_in_a_valid, %197 : i1
    %199 = comb.and bin %56, %133 : i1
    %200 = comb.or bin %199, %reset : i1
    %201 = comb.xor bin %200, %true : i1
    %202 = comb.and bin %198, %201 : i1
    %203 = comb.and bin %198, %103 : i1
    %204 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %205 = comb.or bin %204, %reset : i1
    %206 = comb.xor bin %205, %true : i1
    %207 = comb.and bin %198, %206 : i1
    %208 = comb.and bin %198, %146 : i1
    %209 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %210 = comb.or bin %209, %reset : i1
    %211 = comb.xor bin %210, %true : i1
    %212 = comb.and bin %io_in_d_valid, %211 : i1
    %213 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %214 = comb.and bin %io_in_d_valid, %213 : i1
    %215 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %216 = comb.or bin %215, %reset : i1
    %217 = comb.xor bin %216, %true : i1
    %218 = comb.and bin %214, %217 : i1
    %219 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %220 = comb.or bin %219, %reset : i1
    %221 = comb.xor bin %220, %true : i1
    %222 = comb.and bin %214, %221 : i1
    %223 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %224 = comb.or bin %223, %reset : i1
    %225 = comb.xor bin %224, %true : i1
    %226 = comb.and bin %214, %225 : i1
    %227 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %228 = comb.or bin %227, %reset : i1
    %229 = comb.xor bin %228, %true : i1
    %230 = comb.and bin %214, %229 : i1
    %231 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %232 = comb.and bin %io_in_d_valid, %231 : i1
    %233 = comb.and bin %232, %217 : i1
    %234 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %235 = comb.or bin %234, %reset : i1
    %236 = comb.xor bin %235, %true : i1
    %237 = comb.and bin %232, %236 : i1
    %238 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %239 = comb.or bin %238, %reset : i1
    %240 = comb.xor bin %239, %true : i1
    %241 = comb.and bin %232, %240 : i1
    %242 = comb.and bin %232, %225 : i1
    %243 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %244 = comb.and bin %io_in_d_valid, %243 : i1
    %245 = comb.and bin %244, %217 : i1
    %246 = comb.and bin %244, %236 : i1
    %247 = comb.and bin %244, %240 : i1
    %248 = comb.or bin %227, %io_in_d_bits_corrupt, %reset : i1
    %249 = comb.xor bin %248, %true : i1
    %250 = comb.and bin %244, %249 : i1
    %251 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %252 = comb.and bin %io_in_d_valid, %251 : i1
    %253 = comb.and bin %252, %221 : i1
    %254 = comb.and bin %252, %225 : i1
    %255 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %256 = comb.and bin %io_in_d_valid, %255 : i1
    %257 = comb.and bin %256, %221 : i1
    %258 = comb.and bin %256, %249 : i1
    %259 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %260 = comb.and bin %io_in_d_valid, %259 : i1
    %261 = comb.and bin %260, %221 : i1
    %262 = comb.and bin %260, %225 : i1
    %263 = comb.icmp bin ne %io_in_b_bits_opcode, %c-1_i3 : i3
    %264 = comb.or bin %263, %reset : i1
    %265 = comb.xor bin %264, %true : i1
    %266 = comb.and bin %io_in_b_valid, %265 : i1
    %267 = comb.xor bin %io_in_b_bits_source, %true {sv.namehint = "_legal_source_T"} : i1
    %268 = comb.extract %io_in_b_bits_address from 14 : (i32) -> i18
    %269 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i2
    %270 = comb.xor %269, %c-1_i2 : i2
    %271 = comb.concat %268, %270 : i18, i2
    %272 = comb.icmp bin ne %271, %c0_i20 : i20
    %273 = comb.xor bin %272, %true {sv.namehint = "_address_ok_T_4"} : i1
    %274 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %275 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i2
    %276 = comb.xor %275, %c-1_i2 : i2
    %277 = comb.concat %274, %276 : i4, i2
    %278 = comb.icmp bin ne %277, %c0_i6 : i6
    %279 = comb.xor bin %278, %true {sv.namehint = "_address_ok_T_9"} : i1
    %280 = comb.extract %io_in_b_bits_address from 26 : (i32) -> i6
    %281 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i10
    %282 = comb.xor %281, %c-512_i10 : i10
    %283 = comb.concat %280, %282 : i6, i10
    %284 = comb.icmp bin ne %283, %c0_i16 : i16
    %285 = comb.xor bin %284, %true {sv.namehint = "_address_ok_T_14"} : i1
    %286 = comb.extract %io_in_b_bits_address from 12 : (i32) -> i20
    %287 = comb.icmp bin ne %286, %c0_i20 : i20
    %288 = comb.xor bin %287, %true {sv.namehint = "_address_ok_T_19"} : i1
    %289 = comb.extract %io_in_b_bits_address from 17 : (i32) -> i15
    %290 = comb.extract %io_in_b_bits_address from 16 : (i32) -> i1
    %291 = comb.xor %290, %true : i1
    %292 = comb.concat %289, %291 : i15, i1
    %293 = comb.icmp bin ne %292, %c0_i16 : i16
    %294 = comb.xor bin %293, %true {sv.namehint = "_address_ok_T_24"} : i1
    %295 = comb.extract %io_in_b_bits_address from 28 : (i32) -> i4
    %296 = comb.icmp ne %295, %c-8_i4 : i4
    %297 = comb.xor bin %296, %true {sv.namehint = "_address_ok_T_29"} : i1
    %298 = comb.extract %io_in_b_bits_address from 31 : (i32) -> i1
    %299 = comb.extract %io_in_b_bits_address from 29 : (i32) -> i2
    %300 = comb.xor %299, %c-1_i2 : i2
    %301 = comb.concat %298, %300 : i1, i2
    %302 = comb.icmp bin ne %301, %c0_i3 : i3
    %303 = comb.xor bin %302, %true {sv.namehint = "_address_ok_T_34"} : i1
    %304 = comb.concat %c0_i23, %io_in_b_bits_size : i23, i4
    %305 = comb.shl bin %c4095_i27, %304 {sv.namehint = "_is_aligned_mask_T_4"} : i27
    %306 = comb.extract %305 from 0 {sv.namehint = "_is_aligned_mask_T_5"} : (i27) -> i12
    %307 = comb.xor bin %306, %c-1_i12 {sv.namehint = "is_aligned_mask_1"} : i12
    %308 = comb.extract %io_in_b_bits_address from 0 : (i32) -> i12
    %309 = comb.and bin %308, %307 : i12
    %310 = comb.icmp bin eq %309, %c0_i12 {sv.namehint = "is_aligned_1"} : i12
    %311 = comb.extract %io_in_b_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount_1"} : (i4) -> i2
    %312 = comb.icmp bin ugt %io_in_b_bits_size, %c2_i4 {sv.namehint = "_mask_T_1"} : i4
    %313 = comb.icmp eq %311, %c-2_i2 {sv.namehint = "mask_size_3"} : i2
    %314 = comb.extract %io_in_b_bits_address from 2 {sv.namehint = "mask_bit_3"} : (i32) -> i1
    %315 = comb.xor bin %314, %true {sv.namehint = "mask_eq_14"} : i1
    %316 = comb.and bin %313, %315 {sv.namehint = "_mask_acc_T_14"} : i1
    %317 = comb.or bin %312, %316 {sv.namehint = "mask_acc_6"} : i1
    %318 = comb.and bin %313, %314 {sv.namehint = "_mask_acc_T_15"} : i1
    %319 = comb.or bin %312, %318 {sv.namehint = "mask_acc_7"} : i1
    %320 = comb.icmp eq %311, %c1_i2 {sv.namehint = "mask_size_4"} : i2
    %321 = comb.extract %io_in_b_bits_address from 1 {sv.namehint = "mask_bit_4"} : (i32) -> i1
    %322 = comb.xor bin %321, %true {sv.namehint = "mask_nbit_4"} : i1
    %323 = comb.and bin %315, %322 {sv.namehint = "mask_eq_16"} : i1
    %324 = comb.and bin %320, %323 {sv.namehint = "_mask_acc_T_16"} : i1
    %325 = comb.or bin %317, %324 {sv.namehint = "mask_acc_8"} : i1
    %326 = comb.and bin %315, %321 {sv.namehint = "mask_eq_17"} : i1
    %327 = comb.and bin %320, %326 {sv.namehint = "_mask_acc_T_17"} : i1
    %328 = comb.or bin %317, %327 {sv.namehint = "mask_acc_9"} : i1
    %329 = comb.and bin %314, %322 {sv.namehint = "mask_eq_18"} : i1
    %330 = comb.and bin %320, %329 {sv.namehint = "_mask_acc_T_18"} : i1
    %331 = comb.or bin %319, %330 {sv.namehint = "mask_acc_10"} : i1
    %332 = comb.and bin %314, %321 {sv.namehint = "mask_eq_19"} : i1
    %333 = comb.and bin %320, %332 {sv.namehint = "_mask_acc_T_19"} : i1
    %334 = comb.or bin %319, %333 {sv.namehint = "mask_acc_11"} : i1
    %335 = comb.extract %io_in_b_bits_address from 0 {sv.namehint = "mask_bit_5"} : (i32) -> i1
    %336 = comb.xor bin %335, %true {sv.namehint = "mask_nbit_5"} : i1
    %337 = comb.and bin %323, %336 {sv.namehint = "mask_eq_20"} : i1
    %338 = comb.or bin %325, %337 {sv.namehint = "mask_lo_lo_lo_1"} : i1
    %339 = comb.and bin %323, %335 {sv.namehint = "mask_eq_21"} : i1
    %340 = comb.or bin %325, %339 {sv.namehint = "mask_lo_lo_hi_1"} : i1
    %341 = comb.and bin %326, %336 {sv.namehint = "mask_eq_22"} : i1
    %342 = comb.or bin %328, %341 {sv.namehint = "mask_lo_hi_lo_1"} : i1
    %343 = comb.and bin %326, %335 {sv.namehint = "mask_eq_23"} : i1
    %344 = comb.or bin %328, %343 {sv.namehint = "mask_lo_hi_hi_1"} : i1
    %345 = comb.and bin %329, %336 {sv.namehint = "mask_eq_24"} : i1
    %346 = comb.or bin %331, %345 {sv.namehint = "mask_hi_lo_lo_1"} : i1
    %347 = comb.and bin %329, %335 {sv.namehint = "mask_eq_25"} : i1
    %348 = comb.or bin %331, %347 {sv.namehint = "mask_hi_lo_hi_1"} : i1
    %349 = comb.and bin %332, %336 {sv.namehint = "mask_eq_26"} : i1
    %350 = comb.or bin %334, %349 {sv.namehint = "mask_hi_hi_lo_1"} : i1
    %351 = comb.and bin %332, %335 {sv.namehint = "mask_eq_27"} : i1
    %352 = comb.or bin %334, %351 {sv.namehint = "mask_hi_hi_hi_1"} : i1
    %353 = comb.concat %352, %350, %348, %346, %344, %342, %340, %338 {sv.namehint = "mask_1"} : i1, i1, i1, i1, i1, i1, i1, i1
    %354 = comb.icmp bin eq %io_in_b_bits_opcode, %c-2_i3 : i3
    %355 = comb.and bin %io_in_b_valid, %354 : i1
    %356 = comb.icmp bin eq %io_in_b_bits_size, %c6_i4 : i4
    %357 = comb.icmp bin ult %io_in_b_bits_size, %c-3_i4 : i4
    %358 = comb.xor bin %287, %true : i1
    %359 = comb.xor bin %272, %true : i1
    %360 = comb.xor bin %293, %true : i1
    %361 = comb.xor bin %284, %true : i1
    %362 = comb.xor bin %278, %true : i1
    %363 = comb.xor bin %302, %true : i1
    %364 = comb.xor bin %296, %true : i1
    %365 = comb.or bin %358, %359, %360, %361, %362, %363, %364 : i1
    %366 = comb.and bin %267, %356, %357, %365 : i1
    %367 = comb.or bin %366, %reset : i1
    %368 = comb.xor bin %367, %true : i1
    %369 = comb.and bin %355, %368 : i1
    %370 = comb.or bin %273, %279, %285, %288, %294, %297, %303, %reset : i1
    %371 = comb.xor bin %370, %true : i1
    %372 = comb.and bin %355, %371 : i1
    %373 = comb.or bin %310, %reset : i1
    %374 = comb.xor bin %373, %true : i1
    %375 = comb.and bin %355, %374 : i1
    %376 = comb.icmp bin ne %io_in_b_bits_param, %c-1_i2 : i2
    %377 = comb.or bin %376, %reset : i1
    %378 = comb.xor bin %377, %true : i1
    %379 = comb.and bin %355, %378 : i1
    %380 = comb.icmp bin eq %io_in_b_bits_mask, %353 : i8
    %381 = comb.or bin %380, %reset : i1
    %382 = comb.xor bin %381, %true : i1
    %383 = comb.and bin %355, %382 : i1
    %384 = comb.xor bin %io_in_b_bits_corrupt, %true : i1
    %385 = comb.or bin %384, %reset : i1
    %386 = comb.xor bin %385, %true : i1
    %387 = comb.and bin %355, %386 : i1
    %388 = comb.icmp bin eq %io_in_b_bits_opcode, %c-4_i3 : i3
    %389 = comb.and bin %io_in_b_valid, %388 : i1
    %390 = comb.xor bin %reset, %true : i1
    %391 = comb.and bin %389, %390 : i1
    %392 = comb.and bin %389, %371 : i1
    %393 = comb.and bin %389, %374 : i1
    %394 = comb.icmp bin eq %io_in_b_bits_param, %c0_i2 : i2
    %395 = comb.or bin %394, %reset : i1
    %396 = comb.xor bin %395, %true : i1
    %397 = comb.and bin %389, %396 : i1
    %398 = comb.and bin %389, %382 : i1
    %399 = comb.and bin %389, %386 : i1
    %400 = comb.icmp bin eq %io_in_b_bits_opcode, %c0_i3 : i3
    %401 = comb.and bin %io_in_b_valid, %400 : i1
    %402 = comb.and bin %401, %390 : i1
    %403 = comb.and bin %401, %371 : i1
    %404 = comb.and bin %401, %374 : i1
    %405 = comb.and bin %401, %396 : i1
    %406 = comb.and bin %401, %382 : i1
    %407 = comb.icmp bin eq %io_in_b_bits_opcode, %c1_i3 : i3
    %408 = comb.and bin %io_in_b_valid, %407 : i1
    %409 = comb.and bin %408, %390 : i1
    %410 = comb.and bin %408, %371 : i1
    %411 = comb.and bin %408, %374 : i1
    %412 = comb.and bin %408, %396 : i1
    %413 = comb.xor bin %353, %c-1_i8 : i8
    %414 = comb.and bin %io_in_b_bits_mask, %413 : i8
    %415 = comb.icmp bin eq %414, %c0_i8 : i8
    %416 = comb.or bin %415, %reset : i1
    %417 = comb.xor bin %416, %true : i1
    %418 = comb.and bin %408, %417 : i1
    %419 = comb.icmp bin eq %io_in_b_bits_opcode, %c2_i3 : i3
    %420 = comb.and bin %io_in_b_valid, %419 : i1
    %421 = comb.and bin %420, %390 : i1
    %422 = comb.and bin %420, %371 : i1
    %423 = comb.and bin %420, %374 : i1
    %424 = comb.and bin %420, %382 : i1
    %425 = comb.icmp bin eq %io_in_b_bits_opcode, %c3_i3 : i3
    %426 = comb.and bin %io_in_b_valid, %425 : i1
    %427 = comb.and bin %426, %390 : i1
    %428 = comb.and bin %426, %371 : i1
    %429 = comb.and bin %426, %374 : i1
    %430 = comb.and bin %426, %382 : i1
    %431 = comb.icmp bin eq %io_in_b_bits_opcode, %c-3_i3 : i3
    %432 = comb.and bin %io_in_b_valid, %431 : i1
    %433 = comb.and bin %432, %390 : i1
    %434 = comb.and bin %432, %371 : i1
    %435 = comb.and bin %432, %374 : i1
    %436 = comb.and bin %432, %382 : i1
    %437 = comb.and bin %432, %386 : i1
    %438 = comb.xor bin %io_in_c_bits_source, %true {sv.namehint = "_source_ok_T_4"} : i1
    %439 = comb.concat %c0_i23, %io_in_c_bits_size : i23, i4
    %440 = comb.shl bin %c4095_i27, %439 {sv.namehint = "_is_aligned_mask_T_7"} : i27
    %441 = comb.extract %440 from 0 {sv.namehint = "_is_aligned_mask_T_8"} : (i27) -> i12
    %442 = comb.xor bin %441, %c-1_i12 {sv.namehint = "is_aligned_mask_2"} : i12
    %443 = comb.extract %io_in_c_bits_address from 0 : (i32) -> i12
    %444 = comb.and bin %443, %442 : i12
    %445 = comb.icmp bin eq %444, %c0_i12 {sv.namehint = "is_aligned_2"} : i12
    %446 = comb.extract %io_in_c_bits_address from 14 : (i32) -> i18
    %447 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i2
    %448 = comb.xor %447, %c-1_i2 : i2
    %449 = comb.concat %446, %448 : i18, i2
    %450 = comb.icmp bin ne %449, %c0_i20 : i20
    %451 = comb.xor bin %450, %true {sv.namehint = "_address_ok_T_44"} : i1
    %452 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %453 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i2
    %454 = comb.xor %453, %c-1_i2 : i2
    %455 = comb.concat %452, %454 : i4, i2
    %456 = comb.icmp bin ne %455, %c0_i6 : i6
    %457 = comb.xor bin %456, %true {sv.namehint = "_address_ok_T_49"} : i1
    %458 = comb.extract %io_in_c_bits_address from 26 : (i32) -> i6
    %459 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i10
    %460 = comb.xor %459, %c-512_i10 : i10
    %461 = comb.concat %458, %460 : i6, i10
    %462 = comb.icmp bin ne %461, %c0_i16 : i16
    %463 = comb.xor bin %462, %true {sv.namehint = "_address_ok_T_54"} : i1
    %464 = comb.extract %io_in_c_bits_address from 12 : (i32) -> i20
    %465 = comb.icmp bin ne %464, %c0_i20 : i20
    %466 = comb.xor bin %465, %true {sv.namehint = "_address_ok_T_59"} : i1
    %467 = comb.extract %io_in_c_bits_address from 17 : (i32) -> i15
    %468 = comb.extract %io_in_c_bits_address from 16 : (i32) -> i1
    %469 = comb.xor %468, %true : i1
    %470 = comb.concat %467, %469 : i15, i1
    %471 = comb.icmp bin ne %470, %c0_i16 : i16
    %472 = comb.xor bin %471, %true {sv.namehint = "_address_ok_T_64"} : i1
    %473 = comb.extract %io_in_c_bits_address from 28 : (i32) -> i4
    %474 = comb.icmp ne %473, %c-8_i4 : i4
    %475 = comb.xor bin %474, %true {sv.namehint = "_address_ok_T_69"} : i1
    %476 = comb.extract %io_in_c_bits_address from 31 : (i32) -> i1
    %477 = comb.extract %io_in_c_bits_address from 29 : (i32) -> i2
    %478 = comb.xor %477, %c-1_i2 : i2
    %479 = comb.concat %476, %478 : i1, i2
    %480 = comb.icmp bin ne %479, %c0_i3 : i3
    %481 = comb.xor bin %480, %true {sv.namehint = "_address_ok_T_74"} : i1
    %482 = comb.icmp bin eq %io_in_c_bits_opcode, %c-4_i3 : i3
    %483 = comb.and bin %io_in_c_valid, %482 : i1
    %484 = comb.or bin %451, %457, %463, %466, %472, %475, %481, %reset : i1
    %485 = comb.xor bin %484, %true : i1
    %486 = comb.and bin %483, %485 : i1
    %487 = comb.icmp bin ugt %io_in_c_bits_size, %c2_i4 : i4
    %488 = comb.or bin %487, %reset : i1
    %489 = comb.xor bin %488, %true : i1
    %490 = comb.and bin %483, %489 : i1
    %491 = comb.or bin %445, %reset : i1
    %492 = comb.xor bin %491, %true : i1
    %493 = comb.and bin %483, %492 : i1
    %494 = comb.extract %io_in_c_bits_param from 1 : (i3) -> i2
    %495 = comb.icmp bin ne %494, %c-1_i2 : i2
    %496 = comb.or bin %495, %reset : i1
    %497 = comb.xor bin %496, %true : i1
    %498 = comb.and bin %483, %497 : i1
    %499 = comb.icmp bin eq %io_in_c_bits_opcode, %c-3_i3 : i3
    %500 = comb.and bin %io_in_c_valid, %499 : i1
    %501 = comb.and bin %500, %485 : i1
    %502 = comb.and bin %500, %489 : i1
    %503 = comb.and bin %500, %492 : i1
    %504 = comb.and bin %500, %497 : i1
    %505 = comb.icmp bin eq %io_in_c_bits_opcode, %c-2_i3 : i3
    %506 = comb.and bin %io_in_c_valid, %505 : i1
    %507 = comb.icmp bin ult %io_in_c_bits_size, %c-3_i4 : i4
    %508 = comb.icmp bin ult %io_in_c_bits_size, %c7_i4 : i4
    %509 = comb.xor bin %474, %true : i1
    %510 = comb.and bin %507, %508, %509 : i1
    %511 = comb.or bin %510, %reset : i1
    %512 = comb.xor bin %511, %true : i1
    %513 = comb.and bin %506, %512 : i1
    %514 = comb.icmp bin eq %io_in_c_bits_size, %c6_i4 : i4
    %515 = comb.xor bin %465, %true : i1
    %516 = comb.xor bin %450, %true : i1
    %517 = comb.xor bin %471, %true : i1
    %518 = comb.xor bin %462, %true : i1
    %519 = comb.xor bin %456, %true : i1
    %520 = comb.xor bin %480, %true : i1
    %521 = comb.or bin %515, %516, %517, %518, %519, %520, %509 : i1
    %522 = comb.and bin %507, %521 : i1
    %523 = comb.and bin %438, %514, %522 : i1
    %524 = comb.or bin %523, %reset : i1
    %525 = comb.xor bin %524, %true : i1
    %526 = comb.and bin %506, %525 : i1
    %527 = comb.and bin %506, %489 : i1
    %528 = comb.and bin %506, %492 : i1
    %529 = comb.and bin %506, %497 : i1
    %530 = comb.icmp bin eq %io_in_c_bits_opcode, %c-1_i3 : i3
    %531 = comb.and bin %io_in_c_valid, %530 : i1
    %532 = comb.and bin %531, %512 : i1
    %533 = comb.and bin %438, %514, %522 : i1
    %534 = comb.or bin %533, %reset : i1
    %535 = comb.xor bin %534, %true : i1
    %536 = comb.and bin %531, %535 : i1
    %537 = comb.and bin %531, %489 : i1
    %538 = comb.and bin %531, %492 : i1
    %539 = comb.and bin %531, %497 : i1
    %540 = comb.icmp bin eq %io_in_c_bits_opcode, %c0_i3 : i3
    %541 = comb.and bin %io_in_c_valid, %540 : i1
    %542 = comb.and bin %541, %485 : i1
    %543 = comb.and bin %541, %492 : i1
    %544 = comb.icmp bin eq %io_in_c_bits_param, %c0_i3 : i3
    %545 = comb.or bin %544, %reset : i1
    %546 = comb.xor bin %545, %true : i1
    %547 = comb.and bin %541, %546 : i1
    %548 = comb.icmp bin eq %io_in_c_bits_opcode, %c1_i3 : i3
    %549 = comb.and bin %io_in_c_valid, %548 : i1
    %550 = comb.and bin %549, %485 : i1
    %551 = comb.and bin %549, %492 : i1
    %552 = comb.and bin %549, %546 : i1
    %553 = comb.icmp bin eq %io_in_c_bits_opcode, %c2_i3 : i3
    %554 = comb.and bin %io_in_c_valid, %553 : i1
    %555 = comb.and bin %554, %485 : i1
    %556 = comb.and bin %554, %492 : i1
    %557 = comb.and bin %554, %546 : i1
    %558 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %559 = comb.shl bin %c4095_i27, %4 {sv.namehint = "_a_first_beats1_decode_T_1"} : i27
    %560 = comb.extract %559 from 3 : (i27) -> i9
    %561 = comb.xor %560, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_3"} : i9
    %562 = comb.extract %io_in_a_bits_opcode from 2 {sv.namehint = "_a_first_beats1_opdata_T_1"} : (i3) -> i1
    %563 = comb.mux bin %562, %c0_i9, %561 {sv.namehint = "a_first_beats1"} : i9
    %a_first_counter = seq.firreg %568 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %564 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %565 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %566 = comb.xor bin %565, %true {sv.namehint = "a_first"} : i1
    %567 = comb.mux bin %565, %564, %563 {sv.namehint = "_a_first_counter_T"} : i9
    %568 = comb.mux bin %558, %567, %a_first_counter : i9
    %opcode = seq.firreg %591 clock %clock {firrtl.random_init_start = 9 : ui64} : i3
    %param = seq.firreg %592 clock %clock {firrtl.random_init_start = 12 : ui64} : i3
    %size = seq.firreg %593 clock %clock {firrtl.random_init_start = 15 : ui64} : i4
    %source = seq.firreg %594 clock %clock {firrtl.random_init_start = 19 : ui64} : i1
    %address = seq.firreg %595 clock %clock {firrtl.random_init_start = 20 : ui64} : i32
    %569 = comb.and bin %io_in_a_valid, %565 : i1
    %570 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %571 = comb.or bin %570, %reset : i1
    %572 = comb.xor bin %571, %true : i1
    %573 = comb.and bin %569, %572 : i1
    %574 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %575 = comb.or bin %574, %reset : i1
    %576 = comb.xor bin %575, %true : i1
    %577 = comb.and bin %569, %576 : i1
    %578 = comb.icmp bin eq %io_in_a_bits_size, %size : i4
    %579 = comb.or bin %578, %reset : i1
    %580 = comb.xor bin %579, %true : i1
    %581 = comb.and bin %569, %580 : i1
    %582 = comb.icmp bin eq %io_in_a_bits_source, %source : i1
    %583 = comb.or bin %582, %reset : i1
    %584 = comb.xor bin %583, %true : i1
    %585 = comb.and bin %569, %584 : i1
    %586 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %587 = comb.or bin %586, %reset : i1
    %588 = comb.xor bin %587, %true : i1
    %589 = comb.and bin %569, %588 : i1
    %590 = comb.and bin %558, %566 : i1
    %591 = comb.mux bin %590, %io_in_a_bits_opcode, %opcode : i3
    %592 = comb.mux bin %590, %io_in_a_bits_param, %param : i3
    %593 = comb.mux bin %590, %io_in_a_bits_size, %size : i4
    %594 = comb.mux bin %590, %io_in_a_bits_source, %source : i1
    %595 = comb.mux bin %590, %io_in_a_bits_address, %address : i32
    %596 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "_d_first_T_3"} : i1
    %597 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %598 = comb.shl bin %c4095_i27, %597 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %599 = comb.extract %598 from 3 : (i27) -> i9
    %600 = comb.xor %599, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %601 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %602 = comb.mux bin %601, %600, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %607 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 52 : ui64} : i9
    %603 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %604 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %605 = comb.xor bin %604, %true {sv.namehint = "d_first"} : i1
    %606 = comb.mux bin %604, %603, %602 {sv.namehint = "_d_first_counter_T"} : i9
    %607 = comb.mux bin %596, %606, %d_first_counter : i9
    %opcode_1 = seq.firreg %634 clock %clock {firrtl.random_init_start = 61 : ui64} : i3
    %param_1 = seq.firreg %635 clock %clock {firrtl.random_init_start = 64 : ui64} : i2
    %size_1 = seq.firreg %636 clock %clock {firrtl.random_init_start = 66 : ui64} : i4
    %source_1 = seq.firreg %637 clock %clock {firrtl.random_init_start = 70 : ui64} : i1
    %sink = seq.firreg %638 clock %clock {firrtl.random_init_start = 71 : ui64} : i2
    %denied = seq.firreg %639 clock %clock {firrtl.random_init_start = 73 : ui64} : i1
    %608 = comb.and bin %io_in_d_valid, %604 : i1
    %609 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %610 = comb.or bin %609, %reset : i1
    %611 = comb.xor bin %610, %true : i1
    %612 = comb.and bin %608, %611 : i1
    %613 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %614 = comb.or bin %613, %reset : i1
    %615 = comb.xor bin %614, %true : i1
    %616 = comb.and bin %608, %615 : i1
    %617 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %618 = comb.or bin %617, %reset : i1
    %619 = comb.xor bin %618, %true : i1
    %620 = comb.and bin %608, %619 : i1
    %621 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %622 = comb.or bin %621, %reset : i1
    %623 = comb.xor bin %622, %true : i1
    %624 = comb.and bin %608, %623 : i1
    %625 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %626 = comb.or bin %625, %reset : i1
    %627 = comb.xor bin %626, %true : i1
    %628 = comb.and bin %608, %627 : i1
    %629 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %630 = comb.or bin %629, %reset : i1
    %631 = comb.xor bin %630, %true : i1
    %632 = comb.and bin %608, %631 : i1
    %633 = comb.and bin %596, %605 : i1
    %634 = comb.mux bin %633, %io_in_d_bits_opcode, %opcode_1 : i3
    %635 = comb.mux bin %633, %io_in_d_bits_param, %param_1 : i2
    %636 = comb.mux bin %633, %io_in_d_bits_size, %size_1 : i4
    %637 = comb.mux bin %633, %io_in_d_bits_source, %source_1 : i1
    %638 = comb.mux bin %633, %io_in_d_bits_sink, %sink : i2
    %639 = comb.mux bin %633, %io_in_d_bits_denied, %denied : i1
    %640 = comb.and bin %io_in_b_ready, %io_in_b_valid {sv.namehint = "b_first_done"} : i1
    %b_first_counter = seq.firreg %645 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 74 : ui64} : i9
    %641 = comb.add %b_first_counter, %c-1_i9 {sv.namehint = "_b_first_counter1_T"} : i9
    %642 = comb.icmp bin ne %b_first_counter, %c0_i9 : i9
    %643 = comb.xor bin %642, %true {sv.namehint = "b_first"} : i1
    %644 = comb.mux bin %642, %641, %c0_i9 {sv.namehint = "_b_first_counter_T"} : i9
    %645 = comb.mux bin %640, %644, %b_first_counter : i9
    %opcode_2 = seq.firreg %668 clock %clock {firrtl.random_init_start = 83 : ui64} : i3
    %param_2 = seq.firreg %669 clock %clock {firrtl.random_init_start = 86 : ui64} : i2
    %size_2 = seq.firreg %670 clock %clock {firrtl.random_init_start = 88 : ui64} : i4
    %source_2 = seq.firreg %671 clock %clock {firrtl.random_init_start = 92 : ui64} : i1
    %address_1 = seq.firreg %672 clock %clock {firrtl.random_init_start = 93 : ui64} : i32
    %646 = comb.and bin %io_in_b_valid, %642 : i1
    %647 = comb.icmp bin eq %io_in_b_bits_opcode, %opcode_2 : i3
    %648 = comb.or bin %647, %reset : i1
    %649 = comb.xor bin %648, %true : i1
    %650 = comb.and bin %646, %649 : i1
    %651 = comb.icmp bin eq %io_in_b_bits_param, %param_2 : i2
    %652 = comb.or bin %651, %reset : i1
    %653 = comb.xor bin %652, %true : i1
    %654 = comb.and bin %646, %653 : i1
    %655 = comb.icmp bin eq %io_in_b_bits_size, %size_2 : i4
    %656 = comb.or bin %655, %reset : i1
    %657 = comb.xor bin %656, %true : i1
    %658 = comb.and bin %646, %657 : i1
    %659 = comb.icmp bin eq %io_in_b_bits_source, %source_2 : i1
    %660 = comb.or bin %659, %reset : i1
    %661 = comb.xor bin %660, %true : i1
    %662 = comb.and bin %646, %661 : i1
    %663 = comb.icmp bin eq %io_in_b_bits_address, %address_1 : i32
    %664 = comb.or bin %663, %reset : i1
    %665 = comb.xor bin %664, %true : i1
    %666 = comb.and bin %646, %665 : i1
    %667 = comb.and bin %640, %643 : i1
    %668 = comb.mux bin %667, %io_in_b_bits_opcode, %opcode_2 : i3
    %669 = comb.mux bin %667, %io_in_b_bits_param, %param_2 : i2
    %670 = comb.mux bin %667, %io_in_b_bits_size, %size_2 : i4
    %671 = comb.mux bin %667, %io_in_b_bits_source, %source_2 : i1
    %672 = comb.mux bin %667, %io_in_b_bits_address, %address_1 : i32
    %673 = comb.and bin %io_in_c_ready, %io_in_c_valid {sv.namehint = "_c_first_T_1"} : i1
    %674 = comb.shl bin %c4095_i27, %439 {sv.namehint = "_c_first_beats1_decode_T_1"} : i27
    %675 = comb.extract %674 from 3 : (i27) -> i9
    %676 = comb.xor %675, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_3"} : i9
    %677 = comb.extract %io_in_c_bits_opcode from 0 {sv.namehint = "c_first_beats1_opdata"} : (i3) -> i1
    %678 = comb.mux bin %677, %676, %c0_i9 {sv.namehint = "c_first_beats1"} : i9
    %c_first_counter = seq.firreg %683 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 125 : ui64} : i9
    %679 = comb.add %c_first_counter, %c-1_i9 {sv.namehint = "_c_first_counter1_T"} : i9
    %680 = comb.icmp bin ne %c_first_counter, %c0_i9 : i9
    %681 = comb.xor bin %680, %true {sv.namehint = "c_first"} : i1
    %682 = comb.mux bin %680, %679, %678 {sv.namehint = "_c_first_counter_T"} : i9
    %683 = comb.mux bin %673, %682, %c_first_counter : i9
    %opcode_3 = seq.firreg %706 clock %clock {firrtl.random_init_start = 134 : ui64} : i3
    %param_3 = seq.firreg %707 clock %clock {firrtl.random_init_start = 137 : ui64} : i3
    %size_3 = seq.firreg %708 clock %clock {firrtl.random_init_start = 140 : ui64} : i4
    %source_3 = seq.firreg %709 clock %clock {firrtl.random_init_start = 144 : ui64} : i1
    %address_2 = seq.firreg %710 clock %clock {firrtl.random_init_start = 145 : ui64} : i32
    %684 = comb.and bin %io_in_c_valid, %680 : i1
    %685 = comb.icmp bin eq %io_in_c_bits_opcode, %opcode_3 : i3
    %686 = comb.or bin %685, %reset : i1
    %687 = comb.xor bin %686, %true : i1
    %688 = comb.and bin %684, %687 : i1
    %689 = comb.icmp bin eq %io_in_c_bits_param, %param_3 : i3
    %690 = comb.or bin %689, %reset : i1
    %691 = comb.xor bin %690, %true : i1
    %692 = comb.and bin %684, %691 : i1
    %693 = comb.icmp bin eq %io_in_c_bits_size, %size_3 : i4
    %694 = comb.or bin %693, %reset : i1
    %695 = comb.xor bin %694, %true : i1
    %696 = comb.and bin %684, %695 : i1
    %697 = comb.icmp bin eq %io_in_c_bits_source, %source_3 : i1
    %698 = comb.or bin %697, %reset : i1
    %699 = comb.xor bin %698, %true : i1
    %700 = comb.and bin %684, %699 : i1
    %701 = comb.icmp bin eq %io_in_c_bits_address, %address_2 : i32
    %702 = comb.or bin %701, %reset : i1
    %703 = comb.xor bin %702, %true : i1
    %704 = comb.and bin %684, %703 : i1
    %705 = comb.and bin %673, %681 : i1
    %706 = comb.mux bin %705, %io_in_c_bits_opcode, %opcode_3 : i3
    %707 = comb.mux bin %705, %io_in_c_bits_param, %param_3 : i3
    %708 = comb.mux bin %705, %io_in_c_bits_size, %size_3 : i4
    %709 = comb.mux bin %705, %io_in_c_bits_source, %source_3 : i1
    %710 = comb.mux bin %705, %io_in_c_bits_address, %address_2 : i32
    %inflight = seq.firreg %827 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 177 : ui64} : i2
    %inflight_opcodes = seq.firreg %830 clock %clock reset sync %reset, %c0_i8 {firrtl.random_init_start = 179 : ui64} : i8
    %inflight_sizes = seq.firreg %833 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 187 : ui64} : i16
    %711 = comb.shl bin %c4095_i27, %4 {sv.namehint = "_a_first_beats1_decode_T_5"} : i27
    %712 = comb.extract %711 from 3 : (i27) -> i9
    %713 = comb.xor %712, %c-1_i9 {sv.namehint = "_a_first_beats1_decode_T_7"} : i9
    %714 = comb.mux bin %562, %c0_i9, %713 {sv.namehint = "a_first_beats1_1"} : i9
    %a_first_counter_1 = seq.firreg %718 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 203 : ui64} : i9
    %715 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %716 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %717 = comb.mux bin %716, %714, %715 {sv.namehint = "_a_first_counter_T_1"} : i9
    %718 = comb.mux bin %558, %717, %a_first_counter_1 : i9
    %719 = comb.shl bin %c4095_i27, %597 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %720 = comb.extract %719 from 3 : (i27) -> i9
    %721 = comb.xor %720, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %722 = comb.mux bin %601, %721, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %726 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 212 : ui64} : i9
    %723 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %724 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %725 = comb.mux bin %724, %722, %723 {sv.namehint = "_d_first_counter_T_1"} : i9
    %726 = comb.mux bin %596, %725, %d_first_counter_1 : i9
    %727 = comb.concat %c0_i5, %io_in_d_bits_source, %c0_i2 : i5, i1, i2
    %728 = comb.shru bin %inflight_opcodes, %727 {sv.namehint = "_a_opcode_lookup_T_1"} : i8
    %729 = comb.extract %728 from 1 : (i8) -> i3
    %730 = comb.concat %c0_i12, %io_in_d_bits_source, %c0_i3 : i12, i1, i3
    %731 = comb.shru bin %inflight_sizes, %730 {sv.namehint = "_a_size_lookup_T_1"} : i16
    %732 = comb.extract %731 from 1 : (i16) -> i7
    %733 = comb.concat %false, %732 {sv.namehint = "a_size_lookup"} : i1, i7
    %734 = comb.and bin %io_in_a_valid, %716 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %735 = comb.concat %false, %io_in_a_bits_source : i1, i1
    %736 = comb.shl bin %c1_i2, %735 {sv.namehint = "_a_set_wo_ready_T"} : i2
    %737 = comb.mux bin %734, %736, %c0_i2 {sv.namehint = "a_set_wo_ready"} : i2
    %738 = comb.and bin %558, %716 : i1
    %739 = comb.shl bin %c1_i2, %735 {sv.namehint = "_a_set_T"} : i2
    %740 = comb.mux bin %738, %739, %c0_i2 {sv.namehint = "a_set"} : i2
    %741 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %742 = comb.mux bin %738, %741, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %743 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i4, i1
    %744 = comb.mux bin %738, %743, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %745 = comb.concat %c0_i15, %742 : i15, i4
    %746 = comb.concat %c0_i16, %io_in_a_bits_source, %c0_i2 : i16, i1, i2
    %747 = comb.shl bin %745, %746 {sv.namehint = "_a_opcodes_set_T_1"} : i19
    %748 = comb.extract %747 from 0 : (i19) -> i8
    %749 = comb.mux bin %738, %748, %c0_i8 {sv.namehint = "a_opcodes_set"} : i8
    %750 = comb.concat %c0_i15, %744 : i15, i5
    %751 = comb.concat %c0_i16, %io_in_a_bits_source, %c0_i3 : i16, i1, i3
    %752 = comb.shl bin %750, %751 {sv.namehint = "_a_sizes_set_T_1"} : i20
    %753 = comb.extract %752 from 0 : (i20) -> i16
    %754 = comb.mux bin %738, %753, %c0_i16 {sv.namehint = "a_sizes_set"} : i16
    %755 = comb.shru bin %inflight, %735 : i2
    %756 = comb.extract %755 from 0 : (i2) -> i1
    %757 = comb.xor bin %756, %true : i1
    %758 = comb.or bin %757, %reset : i1
    %759 = comb.xor bin %758, %true : i1
    %760 = comb.and bin %738, %759 : i1
    %761 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %762 = comb.and bin %io_in_d_valid, %724 : i1
    %763 = comb.xor bin %761, %true : i1
    %764 = comb.and bin %762, %763 : i1
    %765 = comb.concat %false, %io_in_d_bits_source : i1, i1
    %766 = comb.shl bin %c1_i2, %765 {sv.namehint = "_d_clr_wo_ready_T"} : i2
    %767 = comb.mux bin %764, %766, %c0_i2 {sv.namehint = "d_clr_wo_ready"} : i2
    %768 = comb.and bin %596, %724, %763 : i1
    %769 = comb.shl bin %c1_i2, %765 {sv.namehint = "_d_clr_T"} : i2
    %770 = comb.mux bin %768, %769, %c0_i2 {sv.namehint = "d_clr"} : i2
    %771 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %772 = comb.shl bin %c15_i31, %771 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %773 = comb.extract %772 from 0 : (i31) -> i8
    %774 = comb.mux bin %768, %773, %c0_i8 {sv.namehint = "d_opcodes_clr"} : i8
    %775 = comb.concat %c0_i27, %io_in_d_bits_source, %c0_i3 : i27, i1, i3
    %776 = comb.shl bin %c255_i31, %775 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %777 = comb.extract %776 from 0 : (i31) -> i16
    %778 = comb.mux bin %768, %777, %c0_i16 {sv.namehint = "d_sizes_clr"} : i16
    %779 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %780 = comb.and bin %734, %779 {sv.namehint = "same_cycle_resp"} : i1
    %781 = comb.shru bin %inflight, %765 : i2
    %782 = comb.extract %781 from 0 : (i2) -> i1
    %783 = comb.or bin %782, %780, %reset : i1
    %784 = comb.xor bin %783, %true : i1
    %785 = comb.and bin %764, %784 : i1
    %786 = comb.and bin %764, %780 : i1
    %787 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %788 = comb.icmp bin eq %io_in_d_bits_opcode, %787 : i3
    %789 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %790 = comb.icmp bin eq %io_in_d_bits_opcode, %789 : i3
    %791 = comb.or bin %788, %790, %reset : i1
    %792 = comb.xor bin %791, %true : i1
    %793 = comb.and bin %786, %792 : i1
    %794 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i4
    %795 = comb.or bin %794, %reset : i1
    %796 = comb.xor bin %795, %true : i1
    %797 = comb.and bin %786, %796 : i1
    %798 = comb.xor bin %780, %true : i1
    %799 = comb.and bin %764, %798 : i1
    %800 = hw.array_get %1[%729] : !hw.array<8xi3>, i3
    %801 = comb.icmp bin eq %io_in_d_bits_opcode, %800 : i3
    %802 = hw.array_get %0[%729] : !hw.array<8xi3>, i3
    %803 = comb.icmp bin eq %io_in_d_bits_opcode, %802 : i3
    %804 = comb.or bin %801, %803, %reset : i1
    %805 = comb.xor bin %804, %true : i1
    %806 = comb.and bin %799, %805 : i1
    %807 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %808 = comb.icmp bin eq %807, %733 : i8
    %809 = comb.or bin %808, %reset : i1
    %810 = comb.xor bin %809, %true : i1
    %811 = comb.and bin %799, %810 : i1
    %812 = comb.and bin %762, %716 : i1
    %813 = comb.and bin %812, %io_in_a_valid : i1
    %814 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i1
    %815 = comb.and bin %813, %814 : i1
    %816 = comb.and bin %815, %763 : i1
    %817 = comb.xor bin %io_in_d_ready, %true : i1
    %818 = comb.or bin %817, %io_in_a_ready, %reset : i1
    %819 = comb.xor bin %818, %true : i1
    %820 = comb.and bin %816, %819 : i1
    %821 = comb.icmp bin ne %737, %767 : i2
    %822 = comb.icmp bin eq %737, %c0_i2 : i2
    %823 = comb.or bin %821, %822, %reset : i1
    %824 = comb.xor bin %823, %true : i1
    %825 = comb.or bin %inflight, %740 {sv.namehint = "_inflight_T"} : i2
    %826 = comb.xor bin %770, %c-1_i2 {sv.namehint = "_inflight_T_1"} : i2
    %827 = comb.and bin %825, %826 {sv.namehint = "_inflight_T_2"} : i2
    %828 = comb.or bin %inflight_opcodes, %749 {sv.namehint = "_inflight_opcodes_T"} : i8
    %829 = comb.xor bin %774, %c-1_i8 {sv.namehint = "_inflight_opcodes_T_1"} : i8
    %830 = comb.and bin %828, %829 {sv.namehint = "_inflight_opcodes_T_2"} : i8
    %831 = comb.or bin %inflight_sizes, %754 {sv.namehint = "_inflight_sizes_T"} : i16
    %832 = comb.xor bin %778, %c-1_i16 {sv.namehint = "_inflight_sizes_T_1"} : i16
    %833 = comb.and bin %831, %832 {sv.namehint = "_inflight_sizes_T_2"} : i16
    %watchdog = seq.firreg %841 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 221 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %834 = comb.icmp bin eq %inflight, %c0_i2 : i2
    %835 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %836 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %837 = comb.or bin %834, %835, %836, %reset : i1
    %838 = comb.xor bin %837, %true : i1
    %839 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %840 = comb.or bin %558, %596 : i1
    %841 = comb.mux bin %840, %c0_i32, %839 : i32
    %inflight_1 = seq.firreg %928 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 253 : ui64} : i2
    %inflight_sizes_1 = seq.firreg %931 clock %clock reset sync %reset, %c0_i16 {firrtl.random_init_start = 263 : ui64} : i16
    %842 = comb.shl bin %c4095_i27, %439 {sv.namehint = "_c_first_beats1_decode_T_5"} : i27
    %843 = comb.extract %842 from 3 : (i27) -> i9
    %844 = comb.xor %843, %c-1_i9 {sv.namehint = "_c_first_beats1_decode_T_7"} : i9
    %845 = comb.mux bin %677, %844, %c0_i9 {sv.namehint = "c_first_beats1_1"} : i9
    %c_first_counter_1 = seq.firreg %849 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 279 : ui64} : i9
    %846 = comb.add %c_first_counter_1, %c-1_i9 {sv.namehint = "_c_first_counter1_T_1"} : i9
    %847 = comb.icmp bin eq %c_first_counter_1, %c0_i9 {sv.namehint = "c_first_1"} : i9
    %848 = comb.mux bin %847, %845, %846 {sv.namehint = "_c_first_counter_T_1"} : i9
    %849 = comb.mux bin %673, %848, %c_first_counter_1 : i9
    %850 = comb.shl bin %c4095_i27, %597 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %851 = comb.extract %850 from 3 : (i27) -> i9
    %852 = comb.xor %851, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %853 = comb.mux bin %601, %852, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %857 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 288 : ui64} : i9
    %854 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %855 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %856 = comb.mux bin %855, %853, %854 {sv.namehint = "_d_first_counter_T_2"} : i9
    %857 = comb.mux bin %596, %856, %d_first_counter_2 : i9
    %858 = comb.shru bin %inflight_sizes_1, %730 {sv.namehint = "_c_size_lookup_T_1"} : i16
    %859 = comb.extract %858 from 1 : (i16) -> i7
    %860 = comb.concat %false, %859 {sv.namehint = "c_size_lookup"} : i1, i7
    %861 = comb.and bin %io_in_c_valid, %847 {sv.namehint = "_same_cycle_resp_T_3"} : i1
    %862 = comb.extract %io_in_c_bits_opcode from 2 {sv.namehint = "_same_cycle_resp_T_4"} : (i3) -> i1
    %863 = comb.extract %io_in_c_bits_opcode from 1 {sv.namehint = "_same_cycle_resp_T_5"} : (i3) -> i1
    %864 = comb.and bin %862, %863 : i1
    %865 = comb.and bin %861, %864 : i1
    %866 = comb.concat %false, %io_in_c_bits_source : i1, i1
    %867 = comb.shl bin %c1_i2, %866 {sv.namehint = "_c_set_wo_ready_T"} : i2
    %868 = comb.mux bin %865, %867, %c0_i2 {sv.namehint = "c_set_wo_ready"} : i2
    %869 = comb.and bin %673, %847, %864 : i1
    %870 = comb.shl bin %c1_i2, %866 {sv.namehint = "_c_set_T"} : i2
    %871 = comb.mux bin %869, %870, %c0_i2 {sv.namehint = "c_set"} : i2
    %872 = comb.concat %io_in_c_bits_size, %true {sv.namehint = "_c_sizes_set_interm_T_1"} : i4, i1
    %873 = comb.mux bin %869, %872, %c0_i5 {sv.namehint = "c_sizes_set_interm"} : i5
    %874 = comb.concat %c0_i15, %873 : i15, i5
    %875 = comb.concat %c0_i16, %io_in_c_bits_source, %c0_i3 : i16, i1, i3
    %876 = comb.shl bin %874, %875 {sv.namehint = "_c_sizes_set_T_1"} : i20
    %877 = comb.extract %876 from 0 : (i20) -> i16
    %878 = comb.mux bin %869, %877, %c0_i16 {sv.namehint = "c_sizes_set"} : i16
    %879 = comb.shru bin %inflight_1, %866 : i2
    %880 = comb.extract %879 from 0 : (i2) -> i1
    %881 = comb.xor bin %880, %true : i1
    %882 = comb.or bin %881, %reset : i1
    %883 = comb.xor bin %882, %true : i1
    %884 = comb.and bin %869, %883 : i1
    %885 = comb.and bin %io_in_d_valid, %855 : i1
    %886 = comb.and bin %885, %761 : i1
    %887 = comb.shl bin %c1_i2, %765 {sv.namehint = "_d_clr_wo_ready_T_1"} : i2
    %888 = comb.mux bin %886, %887, %c0_i2 {sv.namehint = "d_clr_wo_ready_1"} : i2
    %889 = comb.and bin %596, %855, %761 : i1
    %890 = comb.shl bin %c1_i2, %765 {sv.namehint = "_d_clr_T_1"} : i2
    %891 = comb.mux bin %889, %890, %c0_i2 {sv.namehint = "d_clr_1"} : i2
    %892 = comb.shl bin %c255_i31, %775 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %893 = comb.extract %892 from 0 : (i31) -> i16
    %894 = comb.mux bin %889, %893, %c0_i16 {sv.namehint = "d_sizes_clr_1"} : i16
    %895 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_8"} : i1
    %896 = comb.and bin %861, %862, %863, %895 {sv.namehint = "same_cycle_resp_1"} : i1
    %897 = comb.shru bin %inflight_1, %765 : i2
    %898 = comb.extract %897 from 0 : (i2) -> i1
    %899 = comb.or bin %898, %896, %reset : i1
    %900 = comb.xor bin %899, %true : i1
    %901 = comb.and bin %886, %900 : i1
    %902 = comb.and bin %886, %896 : i1
    %903 = comb.icmp bin eq %io_in_d_bits_size, %io_in_c_bits_size : i4
    %904 = comb.or bin %903, %reset : i1
    %905 = comb.xor bin %904, %true : i1
    %906 = comb.and bin %902, %905 : i1
    %907 = comb.xor bin %896, %true : i1
    %908 = comb.and bin %886, %907 : i1
    %909 = comb.icmp bin eq %807, %860 : i8
    %910 = comb.or bin %909, %reset : i1
    %911 = comb.xor bin %910, %true : i1
    %912 = comb.and bin %908, %911 : i1
    %913 = comb.and bin %885, %847 : i1
    %914 = comb.and bin %913, %io_in_c_valid : i1
    %915 = comb.icmp bin eq %io_in_c_bits_source, %io_in_d_bits_source : i1
    %916 = comb.and bin %914, %915 : i1
    %917 = comb.and bin %916, %761 : i1
    %918 = comb.or bin %817, %io_in_c_ready, %reset : i1
    %919 = comb.xor bin %918, %true : i1
    %920 = comb.and bin %917, %919 : i1
    %921 = comb.icmp bin ne %868, %c0_i2 : i2
    %922 = comb.icmp bin ne %868, %888 : i2
    %923 = comb.or bin %922, %reset : i1
    %924 = comb.xor bin %923, %true : i1
    %925 = comb.and bin %921, %924 : i1
    %926 = comb.or bin %inflight_1, %871 {sv.namehint = "_inflight_T_3"} : i2
    %927 = comb.xor bin %891, %c-1_i2 {sv.namehint = "_inflight_T_4"} : i2
    %928 = comb.and bin %926, %927 {sv.namehint = "_inflight_T_5"} : i2
    %929 = comb.or bin %inflight_sizes_1, %878 {sv.namehint = "_inflight_sizes_T_3"} : i16
    %930 = comb.xor bin %894, %c-1_i16 {sv.namehint = "_inflight_sizes_T_4"} : i16
    %931 = comb.and bin %929, %930 {sv.namehint = "_inflight_sizes_T_5"} : i16
    %watchdog_1 = seq.firreg %939 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 297 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %932 = comb.icmp bin eq %inflight_1, %c0_i2 : i2
    %933 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %934 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %935 = comb.or bin %932, %933, %934, %reset : i1
    %936 = comb.xor bin %935, %true : i1
    %937 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %938 = comb.or bin %673, %596 : i1
    %939 = comb.mux bin %938, %c0_i32, %937 : i32
    %inflight_2 = seq.firreg %973 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 329 : ui64} : i4
    %940 = comb.shl bin %c4095_i27, %597 {sv.namehint = "_d_first_beats1_decode_T_13"} : i27
    %941 = comb.extract %940 from 3 : (i27) -> i9
    %942 = comb.xor %941, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_15"} : i9
    %943 = comb.mux bin %601, %942, %c0_i9 {sv.namehint = "d_first_beats1_3"} : i9
    %d_first_counter_3 = seq.firreg %947 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 333 : ui64} : i9
    %944 = comb.add %d_first_counter_3, %c-1_i9 {sv.namehint = "_d_first_counter1_T_3"} : i9
    %945 = comb.icmp bin eq %d_first_counter_3, %c0_i9 {sv.namehint = "d_first_3"} : i9
    %946 = comb.mux bin %945, %943, %944 {sv.namehint = "_d_first_counter_T_3"} : i9
    %947 = comb.mux bin %596, %946, %d_first_counter_3 : i9
    %948 = comb.extract %io_in_d_bits_opcode from 2 : (i3) -> i1
    %949 = comb.extract %io_in_d_bits_opcode from 1 : (i3) -> i1
    %950 = comb.xor bin %949, %true : i1
    %951 = comb.and bin %596, %945, %948, %950 : i1
    %952 = comb.concat %c0_i2, %io_in_d_bits_sink : i2, i2
    %953 = comb.shl bin %c1_i4, %952 {sv.namehint = "_d_set_T"} : i4
    %954 = comb.mux bin %951, %953, %c0_i4 {sv.namehint = "d_set"} : i4
    %955 = comb.shru bin %inflight_2, %952 : i4
    %956 = comb.extract %955 from 0 : (i4) -> i1
    %957 = comb.xor bin %956, %true : i1
    %958 = comb.or bin %957, %reset : i1
    %959 = comb.xor bin %958, %true : i1
    %960 = comb.and bin %951, %959 : i1
    %961 = comb.and bin %io_in_e_ready, %io_in_e_valid : i1
    %962 = comb.concat %c0_i2, %io_in_e_bits_sink : i2, i2
    %963 = comb.shl bin %c1_i4, %962 {sv.namehint = "_e_clr_T"} : i4
    %964 = comb.mux bin %961, %963, %c0_i4 {sv.namehint = "e_clr"} : i4
    %965 = comb.or bin %954, %inflight_2 : i4
    %966 = comb.shru bin %965, %962 : i4
    %967 = comb.extract %966 from 0 : (i4) -> i1
    %968 = comb.or bin %967, %reset : i1
    %969 = comb.xor bin %968, %true : i1
    %970 = comb.and bin %961, %969 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %974 = comb.and bin %STOP_COND_, %false : i1
        sv.if %974 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %975 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %975 {
          sv.fatal 1
        }
        %976 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %976 {
          sv.fatal 1
        }
        %977 = comb.and bin %STOP_COND_, %false : i1
        sv.if %977 {
          sv.fatal 1
        }
        %978 = comb.and bin %STOP_COND_, %101 : i1
        sv.if %978 {
          sv.fatal 1
        }
        %979 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %979 {
          sv.fatal 1
        }
        %980 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %980 {
          sv.fatal 1
        }
        %981 = comb.and bin %STOP_COND_, %112 : i1
        sv.if %981 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %982 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %982 {
          sv.fatal 1
        }
        %983 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %983 {
          sv.fatal 1
        }
        %984 = comb.and bin %STOP_COND_, %false : i1
        sv.if %984 {
          sv.fatal 1
        }
        %985 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %985 {
          sv.fatal 1
        }
        %986 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %986 {
          sv.fatal 1
        }
        %987 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %987 {
          sv.fatal 1
        }
        %988 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %988 {
          sv.fatal 1
        }
        %989 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %989 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %990 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %990 {
          sv.fatal 1
        }
        %991 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %991 {
          sv.fatal 1
        }
        %992 = comb.and bin %STOP_COND_, %false : i1
        sv.if %992 {
          sv.fatal 1
        }
        %993 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %993 {
          sv.fatal 1
        }
        %994 = comb.and bin %STOP_COND_, %143 : i1
        sv.if %994 {
          sv.fatal 1
        }
        %995 = comb.and bin %STOP_COND_, %147 : i1
        sv.if %995 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %996 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %996 {
          sv.fatal 1
        }
        %997 = comb.and bin %STOP_COND_, %false : i1
        sv.if %997 {
          sv.fatal 1
        }
        %998 = comb.and bin %STOP_COND_, %159 : i1
        sv.if %998 {
          sv.fatal 1
        }
        %999 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %999 {
          sv.fatal 1
        }
        %1000 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %1000 {
          sv.fatal 1
        }
        %1001 = comb.and bin %STOP_COND_, %164 : i1
        sv.if %1001 {
          sv.fatal 1
        }
        %1002 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1002 {
          sv.fatal 1
        }
        %1003 = comb.and bin %STOP_COND_, %165 : i1
        sv.if %1003 {
          sv.fatal 1
        }
        %1004 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %1004 {
          sv.fatal 1
        }
        %1005 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %1005 {
          sv.fatal 1
        }
        %1006 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %1006 {
          sv.fatal 1
        }
        %1007 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1007 {
          sv.fatal 1
        }
        %1008 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %1008 {
          sv.fatal 1
        }
        %1009 = comb.and bin %STOP_COND_, %185 : i1
        sv.if %1009 {
          sv.fatal 1
        }
        %1010 = comb.and bin %STOP_COND_, %186 : i1
        sv.if %1010 {
          sv.fatal 1
        }
        %1011 = comb.and bin %STOP_COND_, %189 : i1
        sv.if %1011 {
          sv.fatal 1
        }
        %1012 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1012 {
          sv.fatal 1
        }
        %1013 = comb.and bin %STOP_COND_, %190 : i1
        sv.if %1013 {
          sv.fatal 1
        }
        %1014 = comb.and bin %STOP_COND_, %195 : i1
        sv.if %1014 {
          sv.fatal 1
        }
        %1015 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %1015 {
          sv.fatal 1
        }
        %1016 = comb.and bin %STOP_COND_, %202 : i1
        sv.if %1016 {
          sv.fatal 1
        }
        %1017 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1017 {
          sv.fatal 1
        }
        %1018 = comb.and bin %STOP_COND_, %203 : i1
        sv.if %1018 {
          sv.fatal 1
        }
        %1019 = comb.and bin %STOP_COND_, %207 : i1
        sv.if %1019 {
          sv.fatal 1
        }
        %1020 = comb.and bin %STOP_COND_, %208 : i1
        sv.if %1020 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1021 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %1021 {
          sv.fatal 1
        }
        %1022 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1022 {
          sv.fatal 1
        }
        %1023 = comb.and bin %STOP_COND_, %218 : i1
        sv.if %1023 {
          sv.fatal 1
        }
        %1024 = comb.and bin %STOP_COND_, %222 : i1
        sv.if %1024 {
          sv.fatal 1
        }
        %1025 = comb.and bin %STOP_COND_, %226 : i1
        sv.if %1025 {
          sv.fatal 1
        }
        %1026 = comb.and bin %STOP_COND_, %230 : i1
        sv.if %1026 {
          sv.fatal 1
        }
        %1027 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1027 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1028 = comb.and bin %STOP_COND_, %233 : i1
        sv.if %1028 {
          sv.fatal 1
        }
        %1029 = comb.and bin %STOP_COND_, %237 : i1
        sv.if %1029 {
          sv.fatal 1
        }
        %1030 = comb.and bin %STOP_COND_, %241 : i1
        sv.if %1030 {
          sv.fatal 1
        }
        %1031 = comb.and bin %STOP_COND_, %242 : i1
        sv.if %1031 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1032 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1032 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1033 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %1033 {
          sv.fatal 1
        }
        %1034 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %1034 {
          sv.fatal 1
        }
        %1035 = comb.and bin %STOP_COND_, %247 : i1
        sv.if %1035 {
          sv.fatal 1
        }
        %1036 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %1036 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1037 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1037 {
          sv.fatal 1
        }
        %1038 = comb.and bin %STOP_COND_, %253 : i1
        sv.if %1038 {
          sv.fatal 1
        }
        %1039 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %1039 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1040 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1040 {
          sv.fatal 1
        }
        %1041 = comb.and bin %STOP_COND_, %257 : i1
        sv.if %1041 {
          sv.fatal 1
        }
        %1042 = comb.and bin %STOP_COND_, %258 : i1
        sv.if %1042 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1043 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1043 {
          sv.fatal 1
        }
        %1044 = comb.and bin %STOP_COND_, %261 : i1
        sv.if %1044 {
          sv.fatal 1
        }
        %1045 = comb.and bin %STOP_COND_, %262 : i1
        sv.if %1045 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1046 = comb.and bin %STOP_COND_, %266 : i1
        sv.if %1046 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1047 = comb.and bin %STOP_COND_, %369 : i1
        sv.if %1047 {
          sv.fatal 1
        }
        %1048 = comb.and bin %STOP_COND_, %372 : i1
        sv.if %1048 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1049 = comb.and bin %STOP_COND_, %375 : i1
        sv.if %1049 {
          sv.fatal 1
        }
        %1050 = comb.and bin %STOP_COND_, %379 : i1
        sv.if %1050 {
          sv.fatal 1
        }
        %1051 = comb.and bin %STOP_COND_, %383 : i1
        sv.if %1051 {
          sv.fatal 1
        }
        %1052 = comb.and bin %STOP_COND_, %387 : i1
        sv.if %1052 {
          sv.fatal 1
        }
        %1053 = comb.and bin %STOP_COND_, %391 : i1
        sv.if %1053 {
          sv.fatal 1
        }
        %1054 = comb.and bin %STOP_COND_, %392 : i1
        sv.if %1054 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1055 = comb.and bin %STOP_COND_, %393 : i1
        sv.if %1055 {
          sv.fatal 1
        }
        %1056 = comb.and bin %STOP_COND_, %397 : i1
        sv.if %1056 {
          sv.fatal 1
        }
        %1057 = comb.and bin %STOP_COND_, %398 : i1
        sv.if %1057 {
          sv.fatal 1
        }
        %1058 = comb.and bin %STOP_COND_, %399 : i1
        sv.if %1058 {
          sv.fatal 1
        }
        %1059 = comb.and bin %STOP_COND_, %402 : i1
        sv.if %1059 {
          sv.fatal 1
        }
        %1060 = comb.and bin %STOP_COND_, %403 : i1
        sv.if %1060 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1061 = comb.and bin %STOP_COND_, %404 : i1
        sv.if %1061 {
          sv.fatal 1
        }
        %1062 = comb.and bin %STOP_COND_, %405 : i1
        sv.if %1062 {
          sv.fatal 1
        }
        %1063 = comb.and bin %STOP_COND_, %406 : i1
        sv.if %1063 {
          sv.fatal 1
        }
        %1064 = comb.and bin %STOP_COND_, %409 : i1
        sv.if %1064 {
          sv.fatal 1
        }
        %1065 = comb.and bin %STOP_COND_, %410 : i1
        sv.if %1065 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1066 = comb.and bin %STOP_COND_, %411 : i1
        sv.if %1066 {
          sv.fatal 1
        }
        %1067 = comb.and bin %STOP_COND_, %412 : i1
        sv.if %1067 {
          sv.fatal 1
        }
        %1068 = comb.and bin %STOP_COND_, %418 : i1
        sv.if %1068 {
          sv.fatal 1
        }
        %1069 = comb.and bin %STOP_COND_, %421 : i1
        sv.if %1069 {
          sv.fatal 1
        }
        %1070 = comb.and bin %STOP_COND_, %422 : i1
        sv.if %1070 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1071 = comb.and bin %STOP_COND_, %423 : i1
        sv.if %1071 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1072 = comb.and bin %STOP_COND_, %424 : i1
        sv.if %1072 {
          sv.fatal 1
        }
        %1073 = comb.and bin %STOP_COND_, %427 : i1
        sv.if %1073 {
          sv.fatal 1
        }
        %1074 = comb.and bin %STOP_COND_, %428 : i1
        sv.if %1074 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1075 = comb.and bin %STOP_COND_, %429 : i1
        sv.if %1075 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1076 = comb.and bin %STOP_COND_, %430 : i1
        sv.if %1076 {
          sv.fatal 1
        }
        %1077 = comb.and bin %STOP_COND_, %433 : i1
        sv.if %1077 {
          sv.fatal 1
        }
        %1078 = comb.and bin %STOP_COND_, %434 : i1
        sv.if %1078 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1079 = comb.and bin %STOP_COND_, %435 : i1
        sv.if %1079 {
          sv.fatal 1
        }
        %1080 = comb.and bin %STOP_COND_, %436 : i1
        sv.if %1080 {
          sv.fatal 1
        }
        %1081 = comb.and bin %STOP_COND_, %437 : i1
        sv.if %1081 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1082 = comb.and bin %STOP_COND_, %486 : i1
        sv.if %1082 {
          sv.fatal 1
        }
        %1083 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1083 {
          sv.fatal 1
        }
        %1084 = comb.and bin %STOP_COND_, %490 : i1
        sv.if %1084 {
          sv.fatal 1
        }
        %1085 = comb.and bin %STOP_COND_, %493 : i1
        sv.if %1085 {
          sv.fatal 1
        }
        %1086 = comb.and bin %STOP_COND_, %498 : i1
        sv.if %1086 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1087 = comb.and bin %STOP_COND_, %501 : i1
        sv.if %1087 {
          sv.fatal 1
        }
        %1088 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1088 {
          sv.fatal 1
        }
        %1089 = comb.and bin %STOP_COND_, %502 : i1
        sv.if %1089 {
          sv.fatal 1
        }
        %1090 = comb.and bin %STOP_COND_, %503 : i1
        sv.if %1090 {
          sv.fatal 1
        }
        %1091 = comb.and bin %STOP_COND_, %504 : i1
        sv.if %1091 {
          sv.fatal 1
        }
        %1092 = comb.and bin %STOP_COND_, %513 : i1
        sv.if %1092 {
          sv.fatal 1
        }
        %1093 = comb.and bin %STOP_COND_, %526 : i1
        sv.if %1093 {
          sv.fatal 1
        }
        %1094 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1094 {
          sv.fatal 1
        }
        %1095 = comb.and bin %STOP_COND_, %527 : i1
        sv.if %1095 {
          sv.fatal 1
        }
        %1096 = comb.and bin %STOP_COND_, %528 : i1
        sv.if %1096 {
          sv.fatal 1
        }
        %1097 = comb.and bin %STOP_COND_, %529 : i1
        sv.if %1097 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1098 = comb.and bin %STOP_COND_, %532 : i1
        sv.if %1098 {
          sv.fatal 1
        }
        %1099 = comb.and bin %STOP_COND_, %536 : i1
        sv.if %1099 {
          sv.fatal 1
        }
        %1100 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1100 {
          sv.fatal 1
        }
        %1101 = comb.and bin %STOP_COND_, %537 : i1
        sv.if %1101 {
          sv.fatal 1
        }
        %1102 = comb.and bin %STOP_COND_, %538 : i1
        sv.if %1102 {
          sv.fatal 1
        }
        %1103 = comb.and bin %STOP_COND_, %539 : i1
        sv.if %1103 {
          sv.fatal 1
        }
        %1104 = comb.and bin %STOP_COND_, %542 : i1
        sv.if %1104 {
          sv.fatal 1
        }
        %1105 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1105 {
          sv.fatal 1
        }
        %1106 = comb.and bin %STOP_COND_, %543 : i1
        sv.if %1106 {
          sv.fatal 1
        }
        %1107 = comb.and bin %STOP_COND_, %547 : i1
        sv.if %1107 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1108 = comb.and bin %STOP_COND_, %550 : i1
        sv.if %1108 {
          sv.fatal 1
        }
        %1109 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1109 {
          sv.fatal 1
        }
        %1110 = comb.and bin %STOP_COND_, %551 : i1
        sv.if %1110 {
          sv.fatal 1
        }
        %1111 = comb.and bin %STOP_COND_, %552 : i1
        sv.if %1111 {
          sv.fatal 1
        }
        %1112 = comb.and bin %STOP_COND_, %555 : i1
        sv.if %1112 {
          sv.fatal 1
        }
        %1113 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1113 {
          sv.fatal 1
        }
        %1114 = comb.and bin %STOP_COND_, %556 : i1
        sv.if %1114 {
          sv.fatal 1
        }
        %1115 = comb.and bin %STOP_COND_, %557 : i1
        sv.if %1115 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        sv.if %974 {
          sv.fatal 1
        }
        %1116 = comb.and bin %STOP_COND_, %573 : i1
        sv.if %1116 {
          sv.fatal 1
        }
        %1117 = comb.and bin %STOP_COND_, %577 : i1
        sv.if %1117 {
          sv.fatal 1
        }
        %1118 = comb.and bin %STOP_COND_, %581 : i1
        sv.if %1118 {
          sv.fatal 1
        }
        %1119 = comb.and bin %STOP_COND_, %585 : i1
        sv.if %1119 {
          sv.fatal 1
        }
        %1120 = comb.and bin %STOP_COND_, %589 : i1
        sv.if %1120 {
          sv.fatal 1
        }
        %1121 = comb.and bin %STOP_COND_, %612 : i1
        sv.if %1121 {
          sv.fatal 1
        }
        %1122 = comb.and bin %STOP_COND_, %616 : i1
        sv.if %1122 {
          sv.fatal 1
        }
        %1123 = comb.and bin %STOP_COND_, %620 : i1
        sv.if %1123 {
          sv.fatal 1
        }
        %1124 = comb.and bin %STOP_COND_, %624 : i1
        sv.if %1124 {
          sv.fatal 1
        }
        %1125 = comb.and bin %STOP_COND_, %628 : i1
        sv.if %1125 {
          sv.fatal 1
        }
        %1126 = comb.and bin %STOP_COND_, %632 : i1
        sv.if %1126 {
          sv.fatal 1
        }
        %1127 = comb.and bin %STOP_COND_, %650 : i1
        sv.if %1127 {
          sv.fatal 1
        }
        %1128 = comb.and bin %STOP_COND_, %654 : i1
        sv.if %1128 {
          sv.fatal 1
        }
        %1129 = comb.and bin %STOP_COND_, %658 : i1
        sv.if %1129 {
          sv.fatal 1
        }
        %1130 = comb.and bin %STOP_COND_, %662 : i1
        sv.if %1130 {
          sv.fatal 1
        }
        %1131 = comb.and bin %STOP_COND_, %666 : i1
        sv.if %1131 {
          sv.fatal 1
        }
        %1132 = comb.and bin %STOP_COND_, %688 : i1
        sv.if %1132 {
          sv.fatal 1
        }
        %1133 = comb.and bin %STOP_COND_, %692 : i1
        sv.if %1133 {
          sv.fatal 1
        }
        %1134 = comb.and bin %STOP_COND_, %696 : i1
        sv.if %1134 {
          sv.fatal 1
        }
        %1135 = comb.and bin %STOP_COND_, %700 : i1
        sv.if %1135 {
          sv.fatal 1
        }
        %1136 = comb.and bin %STOP_COND_, %704 : i1
        sv.if %1136 {
          sv.fatal 1
        }
        %1137 = comb.and bin %STOP_COND_, %760 : i1
        sv.if %1137 {
          sv.fatal 1
        }
        %1138 = comb.and bin %STOP_COND_, %785 : i1
        sv.if %1138 {
          sv.fatal 1
        }
        %1139 = comb.and bin %STOP_COND_, %793 : i1
        sv.if %1139 {
          sv.fatal 1
        }
        %1140 = comb.and bin %STOP_COND_, %797 : i1
        sv.if %1140 {
          sv.fatal 1
        }
        %1141 = comb.and bin %STOP_COND_, %806 : i1
        sv.if %1141 {
          sv.fatal 1
        }
        %1142 = comb.and bin %STOP_COND_, %811 : i1
        sv.if %1142 {
          sv.fatal 1
        }
        %1143 = comb.and bin %STOP_COND_, %820 : i1
        sv.if %1143 {
          sv.fatal 1
        }
        %1144 = comb.and bin %STOP_COND_, %824 : i1
        sv.if %1144 {
          sv.fatal 1
        }
        %1145 = comb.and bin %STOP_COND_, %838 : i1
        sv.if %1145 {
          sv.fatal 1
        }
        %1146 = comb.and bin %STOP_COND_, %884 : i1
        sv.if %1146 {
          sv.fatal 1
        }
        %1147 = comb.and bin %STOP_COND_, %901 : i1
        sv.if %1147 {
          sv.fatal 1
        }
        %1148 = comb.and bin %STOP_COND_, %906 : i1
        sv.if %1148 {
          sv.fatal 1
        }
        %1149 = comb.and bin %STOP_COND_, %912 : i1
        sv.if %1149 {
          sv.fatal 1
        }
        %1150 = comb.and bin %STOP_COND_, %920 : i1
        sv.if %1150 {
          sv.fatal 1
        }
        %1151 = comb.and bin %STOP_COND_, %925 : i1
        sv.if %1151 {
          sv.fatal 1
        }
        %1152 = comb.and bin %STOP_COND_, %936 : i1
        sv.if %1152 {
          sv.fatal 1
        }
        %1153 = comb.and bin %STOP_COND_, %960 : i1
        sv.if %1153 {
          sv.fatal 1
        }
        %1154 = comb.and bin %STOP_COND_, %970 : i1
        sv.if %1154 {
          sv.fatal 1
        }
      }
    }
    %971 = comb.or bin %inflight_2, %954 {sv.namehint = "_inflight_T_6"} : i4
    %972 = comb.xor bin %964, %c-1_i4 {sv.namehint = "_inflight_T_7"} : i4
    %973 = comb.and bin %971, %972 {sv.namehint = "_inflight_T_8"} : i4
    hw.output
  }
  hw.module private @TLMonitor_19(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_address : i32, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i4, in %io_in_d_bits_sink : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-8_i4 = hw.constant -8 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i2 = hw.constant -1 : i2
    %c2_i4 = hw.constant 2 : i4
    %c-1_i3 = hw.constant -1 : i3
    %c0_i16 = hw.constant 0 : i16
    %c0_i20 = hw.constant 0 : i20
    %c0_i6 = hw.constant 0 : i6
    %c4095_i27 = hw.constant 4095 : i27
    %false = hw.constant false
    %c6_i4 = hw.constant 6 : i4
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %true = hw.constant true
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i4 = hw.constant -1 : i4
    %c1_i3 = hw.constant 1 : i3
    %c0_i4 = hw.constant 0 : i4
    %c13_i5 = hw.constant 13 : i5
    %c-7_i4 = hw.constant -7 : i4
    %c0_i9 = hw.constant 0 : i9
    %c0_i8 = hw.constant 0 : i8
    %c0_i5 = hw.constant 0 : i5
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i3 = hw.constant -2 : i3
    %c0_i23 = hw.constant 0 : i23
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i32) -> i6
    %4 = comb.icmp bin eq %3, %c0_i6 {sv.namehint = "is_aligned"} : i6
    %5 = comb.extract %io_in_a_bits_address from 14 : (i32) -> i18
    %6 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i2
    %7 = comb.xor %6, %c-1_i2 : i2
    %8 = comb.concat %5, %7 : i18, i2
    %9 = comb.icmp bin eq %8, %c0_i20 : i20
    %10 = comb.extract %io_in_a_bits_address from 12 : (i32) -> i20
    %11 = comb.icmp bin eq %10, %c0_i20 : i20
    %12 = comb.extract %io_in_a_bits_address from 17 : (i32) -> i15
    %13 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i1
    %14 = comb.xor %13, %true : i1
    %15 = comb.concat %12, %14 : i15, i1
    %16 = comb.icmp bin eq %15, %c0_i16 : i16
    %17 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i6
    %18 = comb.extract %io_in_a_bits_address from 16 : (i32) -> i10
    %19 = comb.xor %18, %c-512_i10 : i10
    %20 = comb.concat %17, %19 : i6, i10
    %21 = comb.icmp bin eq %20, %c0_i16 : i16
    %22 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %23 = comb.extract %io_in_a_bits_address from 26 : (i32) -> i2
    %24 = comb.xor %23, %c-1_i2 : i2
    %25 = comb.concat %22, %24 : i4, i2
    %26 = comb.icmp bin eq %25, %c0_i6 : i6
    %27 = comb.extract %io_in_a_bits_address from 31 : (i32) -> i1
    %28 = comb.extract %io_in_a_bits_address from 29 : (i32) -> i2
    %29 = comb.xor %28, %c-1_i2 : i2
    %30 = comb.concat %27, %29 : i1, i2
    %31 = comb.icmp bin eq %30, %c0_i3 : i3
    %32 = comb.extract %io_in_a_bits_address from 28 : (i32) -> i4
    %33 = comb.icmp eq %32, %c-8_i4 : i4
    %34 = comb.or bin %9, %11, %16, %21, %26, %31, %33, %reset : i1
    %35 = comb.xor bin %34, %true : i1
    %36 = comb.and bin %io_in_a_valid, %35 : i1
    %37 = comb.or bin %4, %reset : i1
    %38 = comb.xor bin %37, %true : i1
    %39 = comb.and bin %io_in_a_valid, %38 : i1
    %40 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %41 = comb.or bin %40, %reset : i1
    %42 = comb.xor bin %41, %true : i1
    %43 = comb.and bin %io_in_d_valid, %42 : i1
    %44 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %45 = comb.and bin %io_in_d_valid, %44 : i1
    %46 = comb.icmp bin ugt %io_in_d_bits_size, %c2_i4 : i4
    %47 = comb.or bin %46, %reset : i1
    %48 = comb.xor bin %47, %true : i1
    %49 = comb.and bin %45, %48 : i1
    %50 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %51 = comb.or bin %50, %reset : i1
    %52 = comb.xor bin %51, %true : i1
    %53 = comb.and bin %45, %52 : i1
    %54 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %55 = comb.or bin %54, %reset : i1
    %56 = comb.xor bin %55, %true : i1
    %57 = comb.and bin %45, %56 : i1
    %58 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %59 = comb.or bin %58, %reset : i1
    %60 = comb.xor bin %59, %true : i1
    %61 = comb.and bin %45, %60 : i1
    %62 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %63 = comb.and bin %io_in_d_valid, %62 : i1
    %64 = comb.and bin %63, %48 : i1
    %65 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %66 = comb.or bin %65, %reset : i1
    %67 = comb.xor bin %66, %true : i1
    %68 = comb.and bin %63, %67 : i1
    %69 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %70 = comb.or bin %69, %reset : i1
    %71 = comb.xor bin %70, %true : i1
    %72 = comb.and bin %63, %71 : i1
    %73 = comb.and bin %63, %56 : i1
    %74 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %75 = comb.and bin %io_in_d_valid, %74 : i1
    %76 = comb.and bin %75, %48 : i1
    %77 = comb.and bin %75, %67 : i1
    %78 = comb.and bin %75, %71 : i1
    %79 = comb.or bin %58, %io_in_d_bits_corrupt, %reset : i1
    %80 = comb.xor bin %79, %true : i1
    %81 = comb.and bin %75, %80 : i1
    %82 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %83 = comb.and bin %io_in_d_valid, %82 : i1
    %84 = comb.and bin %83, %52 : i1
    %85 = comb.and bin %83, %56 : i1
    %86 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %87 = comb.and bin %io_in_d_valid, %86 : i1
    %88 = comb.and bin %87, %52 : i1
    %89 = comb.and bin %87, %80 : i1
    %90 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %91 = comb.and bin %io_in_d_valid, %90 : i1
    %92 = comb.and bin %91, %52 : i1
    %93 = comb.and bin %91, %56 : i1
    %94 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "_a_first_T_1"} : i1
    %a_first_counter = seq.firreg %99 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %95 = comb.add %a_first_counter, %c-1_i9 {sv.namehint = "_a_first_counter1_T"} : i9
    %96 = comb.icmp bin ne %a_first_counter, %c0_i9 : i9
    %97 = comb.xor bin %96, %true {sv.namehint = "a_first"} : i1
    %98 = comb.mux bin %96, %95, %c0_i9 {sv.namehint = "_a_first_counter_T"} : i9
    %99 = comb.mux bin %94, %98, %a_first_counter : i9
    %address = seq.firreg %106 clock %clock {firrtl.random_init_start = 20 : ui64} : i32
    %100 = comb.and bin %io_in_a_valid, %96 : i1
    %101 = comb.icmp bin eq %io_in_a_bits_address, %address : i32
    %102 = comb.or bin %101, %reset : i1
    %103 = comb.xor bin %102, %true : i1
    %104 = comb.and bin %100, %103 : i1
    %105 = comb.and bin %94, %97 : i1
    %106 = comb.mux bin %105, %io_in_a_bits_address, %address : i32
    %107 = comb.concat %c0_i23, %io_in_d_bits_size : i23, i4
    %108 = comb.shl bin %c4095_i27, %107 {sv.namehint = "_d_first_beats1_decode_T_1"} : i27
    %109 = comb.extract %108 from 3 : (i27) -> i9
    %110 = comb.xor %109, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_3"} : i9
    %111 = comb.extract %io_in_d_bits_opcode from 0 {sv.namehint = "d_first_beats1_opdata"} : (i3) -> i1
    %112 = comb.mux bin %111, %110, %c0_i9 {sv.namehint = "d_first_beats1"} : i9
    %d_first_counter = seq.firreg %117 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 52 : ui64} : i9
    %113 = comb.add %d_first_counter, %c-1_i9 {sv.namehint = "_d_first_counter1_T"} : i9
    %114 = comb.icmp bin ne %d_first_counter, %c0_i9 : i9
    %115 = comb.xor bin %114, %true {sv.namehint = "d_first"} : i1
    %116 = comb.mux bin %114, %113, %112 {sv.namehint = "_d_first_counter_T"} : i9
    %117 = comb.mux bin %io_in_d_valid, %116, %d_first_counter : i9
    %opcode_1 = seq.firreg %140 clock %clock {firrtl.random_init_start = 61 : ui64} : i3
    %param_1 = seq.firreg %141 clock %clock {firrtl.random_init_start = 64 : ui64} : i2
    %size_1 = seq.firreg %142 clock %clock {firrtl.random_init_start = 66 : ui64} : i4
    %sink = seq.firreg %143 clock %clock {firrtl.random_init_start = 71 : ui64} : i2
    %denied = seq.firreg %144 clock %clock {firrtl.random_init_start = 73 : ui64} : i1
    %118 = comb.and bin %io_in_d_valid, %114 : i1
    %119 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %120 = comb.or bin %119, %reset : i1
    %121 = comb.xor bin %120, %true : i1
    %122 = comb.and bin %118, %121 : i1
    %123 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %124 = comb.or bin %123, %reset : i1
    %125 = comb.xor bin %124, %true : i1
    %126 = comb.and bin %118, %125 : i1
    %127 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i4
    %128 = comb.or bin %127, %reset : i1
    %129 = comb.xor bin %128, %true : i1
    %130 = comb.and bin %118, %129 : i1
    %131 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i2
    %132 = comb.or bin %131, %reset : i1
    %133 = comb.xor bin %132, %true : i1
    %134 = comb.and bin %118, %133 : i1
    %135 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %136 = comb.or bin %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %138 = comb.and bin %118, %137 : i1
    %139 = comb.and bin %io_in_d_valid, %115 : i1
    %140 = comb.mux bin %139, %io_in_d_bits_opcode, %opcode_1 : i3
    %141 = comb.mux bin %139, %io_in_d_bits_param, %param_1 : i2
    %142 = comb.mux bin %139, %io_in_d_bits_size, %size_1 : i4
    %143 = comb.mux bin %139, %io_in_d_bits_sink, %sink : i2
    %144 = comb.mux bin %139, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %213 clock %clock reset sync %reset, %false {firrtl.random_init_start = 74 : ui64} : i1
    %inflight_opcodes = seq.firreg %216 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 75 : ui64} : i4
    %inflight_sizes = seq.firreg %219 clock %clock reset sync %reset, %c0_i8 {firrtl.random_init_start = 79 : ui64} : i8
    %a_first_counter_1 = seq.firreg %148 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 87 : ui64} : i9
    %145 = comb.add %a_first_counter_1, %c-1_i9 {sv.namehint = "_a_first_counter1_T_1"} : i9
    %146 = comb.icmp bin eq %a_first_counter_1, %c0_i9 {sv.namehint = "a_first_1"} : i9
    %147 = comb.mux bin %146, %c0_i9, %145 {sv.namehint = "_a_first_counter_T_1"} : i9
    %148 = comb.mux bin %94, %147, %a_first_counter_1 : i9
    %149 = comb.shl bin %c4095_i27, %107 {sv.namehint = "_d_first_beats1_decode_T_5"} : i27
    %150 = comb.extract %149 from 3 : (i27) -> i9
    %151 = comb.xor %150, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_7"} : i9
    %152 = comb.mux bin %111, %151, %c0_i9 {sv.namehint = "d_first_beats1_1"} : i9
    %d_first_counter_1 = seq.firreg %156 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 96 : ui64} : i9
    %153 = comb.add %d_first_counter_1, %c-1_i9 {sv.namehint = "_d_first_counter1_T_1"} : i9
    %154 = comb.icmp bin eq %d_first_counter_1, %c0_i9 {sv.namehint = "d_first_1"} : i9
    %155 = comb.mux bin %154, %152, %153 {sv.namehint = "_d_first_counter_T_1"} : i9
    %156 = comb.mux bin %io_in_d_valid, %155, %d_first_counter_1 : i9
    %157 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %158 = comb.extract %inflight_sizes from 1 : (i8) -> i7
    %159 = comb.concat %false, %158 {sv.namehint = "a_size_lookup"} : i1, i7
    %160 = comb.and bin %io_in_a_valid, %146 {sv.namehint = "a_set_wo_ready"} : i1
    %161 = comb.and bin %94, %146 {sv.namehint = "a_set"} : i1
    %162 = comb.mux bin %161, %c13_i5, %c0_i5 {sv.namehint = "a_sizes_set_interm"} : i5
    %163 = comb.mux bin %161, %c-7_i4, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %164 = comb.concat %c0_i3, %162 : i3, i5
    %165 = comb.mux bin %161, %164, %c0_i8 {sv.namehint = "a_sizes_set"} : i8
    %166 = comb.xor bin %inflight, %true : i1
    %167 = comb.or bin %166, %reset : i1
    %168 = comb.xor bin %167, %true : i1
    %169 = comb.and bin %161, %168 : i1
    %170 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %171 = comb.and bin %io_in_d_valid, %154 : i1
    %172 = comb.xor bin %170, %true : i1
    %173 = comb.and bin %171, %172 {sv.namehint = "d_clr"} : i1
    %174 = comb.replicate %173 {sv.namehint = "d_opcodes_clr"} : (i1) -> i4
    %175 = comb.replicate %173 {sv.namehint = "d_sizes_clr"} : (i1) -> i8
    %176 = comb.or bin %inflight, %160, %reset : i1
    %177 = comb.xor bin %176, %true : i1
    %178 = comb.and bin %173, %177 : i1
    %179 = comb.and bin %173, %160 : i1
    %180 = comb.or bin %86, %reset : i1
    %181 = comb.xor bin %180, %true : i1
    %182 = comb.and bin %179, %181 : i1
    %183 = comb.icmp bin eq %io_in_d_bits_size, %c6_i4 : i4
    %184 = comb.or bin %183, %reset : i1
    %185 = comb.xor bin %184, %true : i1
    %186 = comb.and bin %179, %185 : i1
    %187 = comb.xor bin %160, %true : i1
    %188 = comb.and bin %173, %187 : i1
    %189 = hw.array_get %1[%157] : !hw.array<8xi3>, i3
    %190 = comb.icmp bin eq %io_in_d_bits_opcode, %189 : i3
    %191 = hw.array_get %0[%157] : !hw.array<8xi3>, i3
    %192 = comb.icmp bin eq %io_in_d_bits_opcode, %191 : i3
    %193 = comb.or bin %190, %192, %reset : i1
    %194 = comb.xor bin %193, %true : i1
    %195 = comb.and bin %188, %194 : i1
    %196 = comb.concat %c0_i4, %io_in_d_bits_size : i4, i4
    %197 = comb.icmp bin eq %196, %159 : i8
    %198 = comb.or bin %197, %reset : i1
    %199 = comb.xor bin %198, %true : i1
    %200 = comb.and bin %188, %199 : i1
    %201 = comb.and bin %171, %146 : i1
    %202 = comb.and bin %201, %io_in_a_valid : i1
    %203 = comb.and bin %202, %172 : i1
    %204 = comb.or bin %io_in_a_ready, %reset : i1
    %205 = comb.xor bin %204, %true : i1
    %206 = comb.and bin %203, %205 : i1
    %207 = comb.icmp bin ne %160, %173 : i1
    %208 = comb.xor bin %160, %true : i1
    %209 = comb.or bin %207, %208, %reset : i1
    %210 = comb.xor bin %209, %true : i1
    %211 = comb.or bin %inflight, %161 {sv.namehint = "_inflight_T"} : i1
    %212 = comb.xor bin %173, %true {sv.namehint = "_inflight_T_1"} : i1
    %213 = comb.and bin %211, %212 {sv.namehint = "_inflight_T_2"} : i1
    %214 = comb.or bin %inflight_opcodes, %163 {sv.namehint = "_inflight_opcodes_T"} : i4
    %215 = comb.xor bin %174, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %216 = comb.and bin %214, %215 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %217 = comb.or bin %inflight_sizes, %165 {sv.namehint = "_inflight_sizes_T"} : i8
    %218 = comb.xor bin %175, %c-1_i8 {sv.namehint = "_inflight_sizes_T_1"} : i8
    %219 = comb.and bin %217, %218 {sv.namehint = "_inflight_sizes_T_2"} : i8
    %watchdog = seq.firreg %226 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 105 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %220 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %221 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %222 = comb.or bin %166, %220, %221, %reset : i1
    %223 = comb.xor bin %222, %true : i1
    %224 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %225 = comb.or bin %94, %io_in_d_valid : i1
    %226 = comb.mux bin %225, %c0_i32, %224 : i32
    %inflight_1 = seq.firreg %247 clock %clock reset sync %reset, %false {firrtl.random_init_start = 137 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %249 clock %clock reset sync %reset, %c0_i8 {firrtl.random_init_start = 142 : ui64} : i8
    %227 = comb.shl bin %c4095_i27, %107 {sv.namehint = "_d_first_beats1_decode_T_9"} : i27
    %228 = comb.extract %227 from 3 : (i27) -> i9
    %229 = comb.xor %228, %c-1_i9 {sv.namehint = "_d_first_beats1_decode_T_11"} : i9
    %230 = comb.mux bin %111, %229, %c0_i9 {sv.namehint = "d_first_beats1_2"} : i9
    %d_first_counter_2 = seq.firreg %234 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 159 : ui64} : i9
    %231 = comb.add %d_first_counter_2, %c-1_i9 {sv.namehint = "_d_first_counter1_T_2"} : i9
    %232 = comb.icmp bin eq %d_first_counter_2, %c0_i9 {sv.namehint = "d_first_2"} : i9
    %233 = comb.mux bin %232, %230, %231 {sv.namehint = "_d_first_counter_T_2"} : i9
    %234 = comb.mux bin %io_in_d_valid, %233, %d_first_counter_2 : i9
    %235 = comb.extract %inflight_sizes_1 from 1 : (i8) -> i7
    %236 = comb.concat %false, %235 {sv.namehint = "c_size_lookup"} : i1, i7
    %237 = comb.and bin %io_in_d_valid, %232, %170 {sv.namehint = "d_clr_1"} : i1
    %238 = comb.replicate %237 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i8
    %239 = comb.or bin %inflight_1, %reset : i1
    %240 = comb.xor bin %239, %true : i1
    %241 = comb.and bin %237, %240 : i1
    %242 = comb.icmp bin eq %196, %236 : i8
    %243 = comb.or bin %242, %reset : i1
    %244 = comb.xor bin %243, %true : i1
    %245 = comb.and bin %237, %244 : i1
    %246 = comb.xor bin %237, %true {sv.namehint = "_inflight_T_4"} : i1
    %247 = comb.and bin %inflight_1, %246 {sv.namehint = "_inflight_T_5"} : i1
    %248 = comb.xor bin %238, %c-1_i8 {sv.namehint = "_inflight_sizes_T_4"} : i8
    %249 = comb.and bin %inflight_sizes_1, %248 {sv.namehint = "_inflight_sizes_T_5"} : i8
    %watchdog_1 = seq.firreg %256 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 168 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %250 = comb.xor bin %inflight_1, %true : i1
    %251 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %252 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %253 = comb.or bin %250, %251, %252, %reset : i1
    %254 = comb.xor bin %253, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %257 = comb.and bin %STOP_COND_, %false : i1
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %258 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %258 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %259 = comb.and bin %STOP_COND_, %39 : i1
        sv.if %259 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %260 = comb.and bin %STOP_COND_, %43 : i1
        sv.if %260 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %261 = comb.and bin %STOP_COND_, %49 : i1
        sv.if %261 {
          sv.fatal 1
        }
        %262 = comb.and bin %STOP_COND_, %53 : i1
        sv.if %262 {
          sv.fatal 1
        }
        %263 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %263 {
          sv.fatal 1
        }
        %264 = comb.and bin %STOP_COND_, %61 : i1
        sv.if %264 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %265 = comb.and bin %STOP_COND_, %64 : i1
        sv.if %265 {
          sv.fatal 1
        }
        %266 = comb.and bin %STOP_COND_, %68 : i1
        sv.if %266 {
          sv.fatal 1
        }
        %267 = comb.and bin %STOP_COND_, %72 : i1
        sv.if %267 {
          sv.fatal 1
        }
        %268 = comb.and bin %STOP_COND_, %73 : i1
        sv.if %268 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %269 = comb.and bin %STOP_COND_, %76 : i1
        sv.if %269 {
          sv.fatal 1
        }
        %270 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %270 {
          sv.fatal 1
        }
        %271 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %271 {
          sv.fatal 1
        }
        %272 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %272 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %273 = comb.and bin %STOP_COND_, %84 : i1
        sv.if %273 {
          sv.fatal 1
        }
        %274 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %274 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %275 = comb.and bin %STOP_COND_, %88 : i1
        sv.if %275 {
          sv.fatal 1
        }
        %276 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %276 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %277 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %277 {
          sv.fatal 1
        }
        %278 = comb.and bin %STOP_COND_, %93 : i1
        sv.if %278 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %279 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %279 {
          sv.fatal 1
        }
        %280 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %280 {
          sv.fatal 1
        }
        %281 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %281 {
          sv.fatal 1
        }
        %282 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %282 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %283 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %283 {
          sv.fatal 1
        }
        %284 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %284 {
          sv.fatal 1
        }
        %285 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %285 {
          sv.fatal 1
        }
        %286 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %286 {
          sv.fatal 1
        }
        %287 = comb.and bin %STOP_COND_, %182 : i1
        sv.if %287 {
          sv.fatal 1
        }
        %288 = comb.and bin %STOP_COND_, %186 : i1
        sv.if %288 {
          sv.fatal 1
        }
        %289 = comb.and bin %STOP_COND_, %195 : i1
        sv.if %289 {
          sv.fatal 1
        }
        %290 = comb.and bin %STOP_COND_, %200 : i1
        sv.if %290 {
          sv.fatal 1
        }
        %291 = comb.and bin %STOP_COND_, %206 : i1
        sv.if %291 {
          sv.fatal 1
        }
        %292 = comb.and bin %STOP_COND_, %210 : i1
        sv.if %292 {
          sv.fatal 1
        }
        %293 = comb.and bin %STOP_COND_, %223 : i1
        sv.if %293 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %294 = comb.and bin %STOP_COND_, %241 : i1
        sv.if %294 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %295 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %295 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %257 {
          sv.fatal 1
        }
        %296 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %296 {
          sv.fatal 1
        }
      }
    }
    %255 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %256 = comb.mux bin %io_in_d_valid, %c0_i32, %255 : i32
    hw.output
  }
  hw.module private @TLXbar_7(in %clock : !seq.clock, in %reset : i1, out auto_in_1_a_ready : i1, in %auto_in_1_a_valid : i1, in %auto_in_1_a_bits_address : i32, out auto_in_1_d_valid : i1, out auto_in_1_d_bits_opcode : i3, out auto_in_1_d_bits_size : i4, out auto_in_1_d_bits_data : i64, out auto_in_1_d_bits_corrupt : i1, out auto_in_0_a_ready : i1, in %auto_in_0_a_valid : i1, in %auto_in_0_a_bits_opcode : i3, in %auto_in_0_a_bits_param : i3, in %auto_in_0_a_bits_size : i4, in %auto_in_0_a_bits_source : i1, in %auto_in_0_a_bits_address : i32, in %auto_in_0_a_bits_user_amba_prot_bufferable : i1, in %auto_in_0_a_bits_user_amba_prot_modifiable : i1, in %auto_in_0_a_bits_user_amba_prot_readalloc : i1, in %auto_in_0_a_bits_user_amba_prot_writealloc : i1, in %auto_in_0_a_bits_user_amba_prot_privileged : i1, in %auto_in_0_a_bits_mask : i8, in %auto_in_0_a_bits_data : i64, in %auto_in_0_b_ready : i1, out auto_in_0_b_valid : i1, out auto_in_0_b_bits_param : i2, out auto_in_0_b_bits_size : i4, out auto_in_0_b_bits_source : i1, out auto_in_0_b_bits_address : i32, out auto_in_0_c_ready : i1, in %auto_in_0_c_valid : i1, in %auto_in_0_c_bits_opcode : i3, in %auto_in_0_c_bits_param : i3, in %auto_in_0_c_bits_size : i4, in %auto_in_0_c_bits_source : i1, in %auto_in_0_c_bits_address : i32, in %auto_in_0_c_bits_user_amba_prot_bufferable : i1, in %auto_in_0_c_bits_user_amba_prot_modifiable : i1, in %auto_in_0_c_bits_user_amba_prot_readalloc : i1, in %auto_in_0_c_bits_user_amba_prot_writealloc : i1, in %auto_in_0_c_bits_user_amba_prot_privileged : i1, in %auto_in_0_c_bits_user_amba_prot_secure : i1, in %auto_in_0_c_bits_data : i64, in %auto_in_0_d_ready : i1, out auto_in_0_d_valid : i1, out auto_in_0_d_bits_opcode : i3, out auto_in_0_d_bits_param : i2, out auto_in_0_d_bits_size : i4, out auto_in_0_d_bits_source : i1, out auto_in_0_d_bits_sink : i2, out auto_in_0_d_bits_denied : i1, out auto_in_0_d_bits_data : i64, out auto_in_0_e_ready : i1, in %auto_in_0_e_valid : i1, in %auto_in_0_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_opcode : i3, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_size : i4, in %auto_out_b_bits_source : i2, in %auto_out_b_bits_address : i32, in %auto_out_b_bits_mask : i8, in %auto_out_b_bits_corrupt : i1, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_user_amba_prot_bufferable : i1, out auto_out_c_bits_user_amba_prot_modifiable : i1, out auto_out_c_bits_user_amba_prot_readalloc : i1, out auto_out_c_bits_user_amba_prot_writealloc : i1, out auto_out_c_bits_user_amba_prot_privileged : i1, out auto_out_c_bits_user_amba_prot_secure : i1, out auto_out_c_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, in %auto_out_e_ready : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    %c-1_i9 = hw.constant -1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %c0_i3 = hw.constant 0 : i3
    %c6_i4 = hw.constant 6 : i4
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %c0_i9 = hw.constant 0 : i9
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i32 = hw.constant 0 : i32
    %c0_i8 = hw.constant 0 : i8
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true
    %c0_i23 = hw.constant 0 : i23
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_18(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %70: i1, io_in_a_valid: %auto_in_0_a_valid: i1, io_in_a_bits_opcode: %auto_in_0_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_0_a_bits_param: i3, io_in_a_bits_size: %auto_in_0_a_bits_size: i4, io_in_a_bits_source: %auto_in_0_a_bits_source: i1, io_in_a_bits_address: %auto_in_0_a_bits_address: i32, io_in_a_bits_mask: %auto_in_0_a_bits_mask: i8, io_in_b_ready: %auto_in_0_b_ready: i1, io_in_b_valid: %16: i1, io_in_b_bits_opcode: %auto_out_b_bits_opcode: i3, io_in_b_bits_param: %auto_out_b_bits_param: i2, io_in_b_bits_size: %auto_out_b_bits_size: i4, io_in_b_bits_source: %2: i1, io_in_b_bits_address: %auto_out_b_bits_address: i32, io_in_b_bits_mask: %auto_out_b_bits_mask: i8, io_in_b_bits_corrupt: %auto_out_b_bits_corrupt: i1, io_in_c_ready: %auto_out_c_ready: i1, io_in_c_valid: %auto_in_0_c_valid: i1, io_in_c_bits_opcode: %auto_in_0_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_0_c_bits_param: i3, io_in_c_bits_size: %auto_in_0_c_bits_size: i4, io_in_c_bits_source: %auto_in_0_c_bits_source: i1, io_in_c_bits_address: %auto_in_0_c_bits_address: i32, io_in_d_ready: %auto_in_0_d_ready: i1, io_in_d_valid: %18: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_source: %4: i1, io_in_d_bits_sink: %auto_out_d_bits_sink: i2, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_in_e_ready: %auto_out_e_ready: i1, io_in_e_valid: %auto_in_0_e_valid: i1, io_in_e_bits_sink: %auto_in_0_e_bits_sink: i2) -> ()
    hw.instance "monitor_1" @TLMonitor_19(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %71: i1, io_in_a_valid: %auto_in_1_a_valid: i1, io_in_a_bits_address: %auto_in_1_a_bits_address: i32, io_in_d_valid: %19: i1, io_in_d_bits_opcode: %auto_out_d_bits_opcode: i3, io_in_d_bits_param: %auto_out_d_bits_param: i2, io_in_d_bits_size: %auto_out_d_bits_size: i4, io_in_d_bits_sink: %auto_out_d_bits_sink: i2, io_in_d_bits_denied: %auto_out_d_bits_denied: i1, io_in_d_bits_corrupt: %auto_out_d_bits_corrupt: i1) -> ()
    %1 = comb.concat %false, %auto_in_0_a_bits_source {sv.namehint = "in_0_a_bits_source"} : i1, i1
    %2 = comb.extract %auto_out_b_bits_source from 0 {sv.namehint = "out_b_bits_source"} : (i2) -> i1
    %3 = comb.concat %false, %auto_in_0_c_bits_source {sv.namehint = "out_4_bits_source"} : i1, i1
    %4 = comb.extract %auto_out_d_bits_source from 0 {sv.namehint = "out_d_bits_source"} : (i2) -> i1
    %5 = comb.extract %auto_out_b_bits_source from 1 {sv.namehint = "_requestBOI_T"} : (i2) -> i1
    %6 = comb.xor bin %5, %true {sv.namehint = "requestBOI_0_0"} : i1
    %7 = comb.extract %auto_out_d_bits_source from 1 {sv.namehint = "_requestDOI_T"} : (i2) -> i1
    %8 = comb.xor bin %7, %true {sv.namehint = "requestDOI_0_0"} : i1
    %9 = comb.icmp bin eq %auto_out_d_bits_source, %c-2_i2 {sv.namehint = "requestDOI_0_1"} : i2
    %10 = comb.concat %c0_i23, %auto_in_0_a_bits_size : i23, i4
    %11 = comb.shl bin %c4095_i27, %10 {sv.namehint = "_beatsAI_decode_T_1"} : i27
    %12 = comb.extract %11 from 3 : (i27) -> i9
    %13 = comb.xor %12, %c-1_i9 {sv.namehint = "_beatsAI_decode_T_3"} : i9
    %14 = comb.extract %auto_in_0_a_bits_opcode from 2 {sv.namehint = "_beatsAI_opdata_T"} : (i3) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "beatsAI_opdata"} : i1
    %16 = comb.and bin %auto_out_b_valid, %6 {sv.namehint = "out_8_valid"} : i1
    %17 = comb.and %6, %auto_in_0_b_ready {sv.namehint = "bundleOut_0_out_b_ready"} : i1
    %18 = comb.and bin %auto_out_d_valid, %8 {sv.namehint = "out_10_valid"} : i1
    %19 = comb.and bin %auto_out_d_valid, %9 {sv.namehint = "out_13_valid"} : i1
    %20 = comb.and %8, %auto_in_0_d_ready {sv.namehint = "_portsDIO_out_0_d_ready_T"} : i1
    %21 = comb.or bin %20, %9 {sv.namehint = "bundleOut_0_out_d_ready"} : i1
    %beatsLeft = seq.firreg %63 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 0 : ui64} : i9
    %22 = comb.icmp bin eq %beatsLeft, %c0_i9 {sv.namehint = "idle"} : i9
    %23 = comb.and bin %22, %auto_out_a_ready {sv.namehint = "latch"} : i1
    %24 = comb.concat %auto_in_1_a_valid, %auto_in_0_a_valid {sv.namehint = "readys_filter_lo"} : i1, i1
    %readys_mask = seq.firreg %43 clock %clock reset sync %reset, %c-1_i2 {firrtl.random_init_start = 9 : ui64} : i2
    %25 = comb.xor bin %readys_mask, %c-1_i2 {sv.namehint = "_readys_filter_T"} : i2
    %26 = comb.and bin %24, %25 {sv.namehint = "readys_filter_hi"} : i2
    %27 = comb.extract %26 from 1 : (i2) -> i1
    %28 = comb.extract %26 from 0 : (i2) -> i1
    %29 = comb.concat %28, %auto_in_1_a_valid : i1, i1
    %30 = comb.or %29, %26 {sv.namehint = "_readys_readys_T_1"} : i2
    %31 = comb.extract %readys_mask from 1 : (i2) -> i1
    %32 = comb.extract %readys_mask from 0 : (i2) -> i1
    %33 = comb.or %27, %32 : i1
    %34 = comb.concat %31, %33 {sv.namehint = "_readys_readys_T"} : i1, i1
    %35 = comb.and bin %34, %30 {sv.namehint = "_readys_readys_T_2"} : i2
    %36 = comb.xor bin %35, %c-1_i2 {sv.namehint = "readys_readys"} : i2
    %37 = comb.icmp bin ne %24, %c0_i2 {sv.namehint = "_readys_T_5"} : i2
    %38 = comb.and bin %23, %37 {sv.namehint = "_readys_T_6"} : i1
    %39 = comb.and bin %36, %24 {sv.namehint = "_readys_mask_T"} : i2
    %40 = comb.extract %39 from 0 : (i2) -> i1
    %41 = comb.concat %40, %false {sv.namehint = "_readys_mask_T_2"} : i1, i1
    %42 = comb.or bin %39, %41 {sv.namehint = "_readys_mask_T_4"} : i2
    %43 = comb.mux bin %38, %42, %readys_mask : i2
    %44 = comb.extract %36 from 0 {sv.namehint = "readys_0"} : (i2) -> i1
    %45 = comb.extract %36 from 1 {sv.namehint = "readys_1"} : (i2) -> i1
    %46 = comb.and bin %44, %auto_in_0_a_valid {sv.namehint = "prefixOR_1"} : i1
    %47 = comb.and bin %45, %auto_in_1_a_valid {sv.namehint = "earlyWinner_1"} : i1
    %48 = comb.and bin %44, %auto_in_0_a_valid {sv.namehint = "winnerQual_0"} : i1
    %49 = comb.and bin %45, %auto_in_1_a_valid {sv.namehint = "winnerQual_1"} : i1
    %50 = comb.xor bin %46, %true : i1
    %51 = comb.xor bin %47, %true : i1
    %52 = comb.or bin %50, %51, %reset : i1
    %53 = comb.xor bin %52, %true : i1
    %54 = comb.or bin %auto_in_0_a_valid, %auto_in_1_a_valid {sv.namehint = "_out_0_a_earlyValid_T"} : i1
    %55 = comb.xor bin %54, %true : i1
    %56 = comb.or bin %55, %46, %47, %reset : i1
    %57 = comb.xor bin %56, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %104 = comb.and bin %STOP_COND_, %false : i1
        sv.if %104 {
          sv.fatal 1
        }
        %105 = comb.and bin %STOP_COND_, %53 : i1
        sv.if %105 {
          sv.fatal 1
        }
        %106 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %106 {
          sv.fatal 1
        }
        sv.if %104 {
          sv.fatal 1
        }
      }
    }
    %58 = comb.and bin %48, %15 : i1
    %59 = comb.mux bin %58, %13, %c0_i9 {sv.namehint = "maskedBeats_0"} : i9
    %60 = comb.and bin %auto_out_a_ready, %75 {sv.namehint = "_beatsLeft_T_2"} : i1
    %61 = comb.concat %c0_i8, %60 : i8, i1
    %62 = comb.sub %beatsLeft, %61 {sv.namehint = "_beatsLeft_T_3"} : i9
    %63 = comb.mux bin %23, %59, %62 {sv.namehint = "_beatsLeft_T_5"} : i9
    %state_0 = seq.firreg %66 clock %clock reset sync %reset, %false {firrtl.random_init_start = 11 : ui64} : i1
    %state_1 = seq.firreg %67 clock %clock reset sync %reset, %false {firrtl.random_init_start = 12 : ui64} : i1
    %64 = comb.mux bin %22, %46, %state_0 {sv.namehint = "muxStateEarly_0"} : i1
    %65 = comb.mux bin %22, %47, %state_1 {sv.namehint = "muxStateEarly_1"} : i1
    %66 = comb.mux bin %22, %48, %state_0 {sv.namehint = "muxStateQual_0"} : i1
    %67 = comb.mux bin %22, %49, %state_1 {sv.namehint = "muxStateQual_1"} : i1
    %68 = comb.mux bin %22, %44, %state_0 {sv.namehint = "allowed_0"} : i1
    %69 = comb.mux bin %22, %45, %state_1 {sv.namehint = "allowed_1"} : i1
    %70 = comb.and bin %auto_out_a_ready, %68 {sv.namehint = "portsAOI_filtered_0_ready"} : i1
    %71 = comb.and bin %auto_out_a_ready, %69 {sv.namehint = "portsAOI_filtered_1_0_ready"} : i1
    %72 = comb.and %state_0, %auto_in_0_a_valid {sv.namehint = "_out_0_a_earlyValid_T_1"} : i1
    %73 = comb.and %state_1, %auto_in_1_a_valid {sv.namehint = "_out_0_a_earlyValid_T_2"} : i1
    %74 = comb.or bin %72, %73 {sv.namehint = "_out_0_a_earlyValid_T_3"} : i1
    %75 = comb.mux bin %22, %54, %74 {sv.namehint = "out_2_0_a_earlyValid"} : i1
    %76 = comb.mux bin %64, %auto_in_0_a_bits_data, %c0_i64 {sv.namehint = "out_2_0_a_bits_data"} : i64
    %77 = comb.mux bin %64, %auto_in_0_a_bits_mask, %c0_i8 : i8
    %78 = comb.replicate %65 : (i1) -> i8
    %79 = comb.or bin %77, %78 {sv.namehint = "out_2_0_a_bits_mask"} : i8
    %80 = comb.or bin %64, %65 {sv.namehint = "out_2_0_a_bits_user_amba_prot_secure"} : i1
    %81 = comb.and %64, %auto_in_0_a_bits_user_amba_prot_privileged : i1
    %82 = comb.or bin %81, %65 {sv.namehint = "out_2_0_a_bits_user_amba_prot_privileged"} : i1
    %83 = comb.and %64, %auto_in_0_a_bits_user_amba_prot_writealloc : i1
    %84 = comb.or bin %83, %65 {sv.namehint = "out_2_0_a_bits_user_amba_prot_writealloc"} : i1
    %85 = comb.and %64, %auto_in_0_a_bits_user_amba_prot_readalloc : i1
    %86 = comb.or bin %85, %65 {sv.namehint = "out_2_0_a_bits_user_amba_prot_readalloc"} : i1
    %87 = comb.and %64, %auto_in_0_a_bits_user_amba_prot_modifiable : i1
    %88 = comb.or bin %87, %65 {sv.namehint = "out_2_0_a_bits_user_amba_prot_modifiable"} : i1
    %89 = comb.and %64, %auto_in_0_a_bits_user_amba_prot_bufferable : i1
    %90 = comb.or bin %89, %65 {sv.namehint = "out_2_0_a_bits_user_amba_prot_bufferable"} : i1
    %91 = comb.mux bin %64, %auto_in_0_a_bits_address, %c0_i32 : i32
    %92 = comb.mux bin %65, %auto_in_1_a_bits_address, %c0_i32 : i32
    %93 = comb.or bin %91, %92 {sv.namehint = "out_2_0_a_bits_address"} : i32
    %94 = comb.mux bin %64, %1, %c0_i2 : i2
    %95 = comb.concat %65, %false : i1, i1
    %96 = comb.or bin %94, %95 {sv.namehint = "out_2_0_a_bits_source"} : i2
    %97 = comb.mux bin %64, %auto_in_0_a_bits_size, %c0_i4 : i4
    %98 = comb.mux bin %65, %c6_i4, %c0_i4 : i4
    %99 = comb.or bin %97, %98 {sv.namehint = "out_2_0_a_bits_size"} : i4
    %100 = comb.mux bin %64, %auto_in_0_a_bits_param, %c0_i3 {sv.namehint = "out_2_0_a_bits_param"} : i3
    %101 = comb.mux bin %64, %auto_in_0_a_bits_opcode, %c0_i3 : i3
    %102 = comb.concat %65, %c0_i2 : i1, i2
    %103 = comb.or bin %101, %102 {sv.namehint = "out_2_0_a_bits_opcode"} : i3
    hw.output %71, %19, %auto_out_d_bits_opcode, %auto_out_d_bits_size, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %70, %16, %auto_out_b_bits_param, %auto_out_b_bits_size, %2, %auto_out_b_bits_address, %auto_out_c_ready, %18, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %4, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_e_ready, %75, %103, %100, %99, %96, %93, %90, %88, %86, %84, %82, %80, %65, %79, %76, %17, %auto_in_0_c_valid, %auto_in_0_c_bits_opcode, %auto_in_0_c_bits_param, %auto_in_0_c_bits_size, %3, %auto_in_0_c_bits_address, %auto_in_0_c_bits_user_amba_prot_bufferable, %auto_in_0_c_bits_user_amba_prot_modifiable, %auto_in_0_c_bits_user_amba_prot_readalloc, %auto_in_0_c_bits_user_amba_prot_writealloc, %auto_in_0_c_bits_user_amba_prot_privileged, %auto_in_0_c_bits_user_amba_prot_secure, %auto_in_0_c_bits_data, %21, %auto_in_0_e_valid, %auto_in_0_e_bits_sink : i1, i1, i3, i4, i64, i1, i1, i1, i2, i4, i1, i32, i1, i1, i3, i2, i4, i1, i2, i1, i64, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i64, i1, i1, i2
  }
  hw.module private @IntXbar_1(in %auto_int_in_2_0 : i1, in %auto_int_in_1_0 : i1, in %auto_int_in_1_1 : i1, in %auto_int_in_0_0 : i1, out auto_int_out_0 : i1, out auto_int_out_1 : i1, out auto_int_out_2 : i1, out auto_int_out_3 : i1) {
    hw.output %auto_int_in_0_0, %auto_int_in_1_0, %auto_int_in_1_1, %auto_int_in_2_0 : i1, i1, i1, i1
  }
  hw.module private @OptimizationBarrier(in %io_x_u : i1, in %io_x_ae : i1, in %io_x_sw : i1, in %io_x_sx : i1, in %io_x_sr : i1, in %io_x_pw : i1, in %io_x_px : i1, in %io_x_pr : i1, in %io_x_ppp : i1, in %io_x_pal : i1, in %io_x_paa : i1, in %io_x_eff : i1, in %io_x_c : i1, out io_y_u : i1, out io_y_ae : i1, out io_y_sw : i1, out io_y_sx : i1, out io_y_sr : i1, out io_y_pw : i1, out io_y_px : i1, out io_y_pr : i1, out io_y_ppp : i1, out io_y_pal : i1, out io_y_paa : i1, out io_y_eff : i1, out io_y_c : i1) {
    hw.output %io_x_u, %io_x_ae, %io_x_sw, %io_x_sx, %io_x_sr, %io_x_pw, %io_x_px, %io_x_pr, %io_x_ppp, %io_x_pal, %io_x_paa, %io_x_eff, %io_x_c : i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module private @PMPChecker(in %io_prv : i2, in %io_pmp_0_cfg_l : i1, in %io_pmp_0_cfg_a : i2, in %io_pmp_0_cfg_w : i1, in %io_pmp_0_cfg_r : i1, in %io_pmp_0_addr : i30, in %io_pmp_0_mask : i32, in %io_pmp_1_cfg_l : i1, in %io_pmp_1_cfg_a : i2, in %io_pmp_1_cfg_w : i1, in %io_pmp_1_cfg_r : i1, in %io_pmp_1_addr : i30, in %io_pmp_1_mask : i32, in %io_pmp_2_cfg_l : i1, in %io_pmp_2_cfg_a : i2, in %io_pmp_2_cfg_w : i1, in %io_pmp_2_cfg_r : i1, in %io_pmp_2_addr : i30, in %io_pmp_2_mask : i32, in %io_pmp_3_cfg_l : i1, in %io_pmp_3_cfg_a : i2, in %io_pmp_3_cfg_w : i1, in %io_pmp_3_cfg_r : i1, in %io_pmp_3_addr : i30, in %io_pmp_3_mask : i32, in %io_pmp_4_cfg_l : i1, in %io_pmp_4_cfg_a : i2, in %io_pmp_4_cfg_w : i1, in %io_pmp_4_cfg_r : i1, in %io_pmp_4_addr : i30, in %io_pmp_4_mask : i32, in %io_pmp_5_cfg_l : i1, in %io_pmp_5_cfg_a : i2, in %io_pmp_5_cfg_w : i1, in %io_pmp_5_cfg_r : i1, in %io_pmp_5_addr : i30, in %io_pmp_5_mask : i32, in %io_pmp_6_cfg_l : i1, in %io_pmp_6_cfg_a : i2, in %io_pmp_6_cfg_w : i1, in %io_pmp_6_cfg_r : i1, in %io_pmp_6_addr : i30, in %io_pmp_6_mask : i32, in %io_pmp_7_cfg_l : i1, in %io_pmp_7_cfg_a : i2, in %io_pmp_7_cfg_w : i1, in %io_pmp_7_cfg_r : i1, in %io_pmp_7_addr : i30, in %io_pmp_7_mask : i32, in %io_addr : i32, in %io_size : i2, out io_r : i1, out io_w : i1) {
    %c0_i2 = hw.constant 0 : i2
    %c7_i6 = hw.constant 7 : i6
    %c0_i29 = hw.constant 0 : i29
    %c-1_i29 = hw.constant -1 : i29
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %true = hw.constant true
    %c-1_i3 = hw.constant -1 : i3
    %0 = comb.extract %io_prv from 1 {sv.namehint = "default"} : (i2) -> i1
    %1 = comb.extract %io_pmp_7_cfg_a from 1 {sv.namehint = "_res_aligned_T"} : (i2) -> i1
    %2 = comb.concat %c0_i4, %io_size : i4, i2
    %3 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_1"} : i6
    %4 = comb.extract %3 from 0 {sv.namehint = "_res_hit_lsbMask_T_2"} : (i6) -> i3
    %5 = comb.xor bin %4, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_3"} : i3
    %6 = comb.extract %io_pmp_7_mask from 0 : (i32) -> i3
    %7 = comb.or bin %6, %5 {sv.namehint = "_res_hit_lsbMatch_T_6"} : i3
    %8 = comb.extract %io_addr from 3 {sv.namehint = "_res_aligned_straddlesUpperBound_T_119"} : (i32) -> i29
    %9 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_5"} : (i30) -> i29
    %10 = comb.extract %io_pmp_7_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_6"} : (i32) -> i29
    %11 = comb.xor bin %8, %9 {sv.namehint = "_res_hit_msbMatch_T_7"} : i29
    %12 = comb.xor bin %10, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_8"} : i29
    %13 = comb.and bin %11, %12 {sv.namehint = "_res_hit_msbMatch_T_9"} : i29
    %14 = comb.icmp bin eq %13, %c0_i29 {sv.namehint = "res_hit_msbMatch"} : i29
    %15 = comb.extract %io_addr from 0 {sv.namehint = "_res_aligned_straddlesUpperBound_T_132"} : (i32) -> i3
    %16 = comb.extract %io_pmp_7_addr from 0 : (i30) -> i1
    %17 = comb.concat %16, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_5"} : i1, i2
    %18 = comb.xor bin %15, %17 {sv.namehint = "_res_hit_lsbMatch_T_7"} : i3
    %19 = comb.xor bin %7, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_8"} : i3
    %20 = comb.and bin %18, %19 {sv.namehint = "_res_hit_lsbMatch_T_9"} : i3
    %21 = comb.icmp bin eq %20, %c0_i3 {sv.namehint = "res_hit_lsbMatch"} : i3
    %22 = comb.and bin %14, %21 {sv.namehint = "_res_hit_T_1"} : i1
    %23 = comb.extract %io_pmp_7_cfg_a from 0 {sv.namehint = "_res_hit_T_2"} : (i2) -> i1
    %24 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_4"} : i6
    %25 = comb.extract %24 from 0 {sv.namehint = "_res_hit_T_5"} : (i6) -> i3
    %26 = comb.xor bin %25, %c-1_i3 {sv.namehint = "_res_hit_T_6"} : i3
    %27 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_5"} : (i30) -> i29
    %28 = comb.icmp bin ult %8, %27 {sv.namehint = "res_hit_msbsLess"} : i29
    %29 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_5"} : (i30) -> i29
    %30 = comb.xor bin %8, %29 {sv.namehint = "_res_hit_msbsEqual_T_6"} : i29
    %31 = comb.icmp bin eq %30, %c0_i29 {sv.namehint = "res_hit_msbsEqual"} : i29
    %32 = comb.or bin %15, %26 {sv.namehint = "_res_hit_lsbsLess_T_1"} : i3
    %33 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %34 = comb.concat %33, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_6"} : i1, i2
    %35 = comb.icmp bin ult %32, %34 {sv.namehint = "res_hit_lsbsLess"} : i3
    %36 = comb.and bin %31, %35 {sv.namehint = "_res_hit_T_7"} : i1
    %37 = comb.or bin %28, %36 {sv.namehint = "_res_hit_T_8"} : i1
    %38 = comb.xor bin %37, %true {sv.namehint = "_res_hit_T_9"} : i1
    %39 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_11"} : (i30) -> i29
    %40 = comb.icmp bin ult %8, %39 {sv.namehint = "res_hit_msbsLess_1"} : i29
    %41 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_12"} : (i30) -> i29
    %42 = comb.xor bin %8, %41 {sv.namehint = "_res_hit_msbsEqual_T_13"} : i29
    %43 = comb.icmp bin eq %42, %c0_i29 {sv.namehint = "res_hit_msbsEqual_1"} : i29
    %44 = comb.extract %io_pmp_7_addr from 0 : (i30) -> i1
    %45 = comb.concat %44, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_13"} : i1, i2
    %46 = comb.icmp bin ult %15, %45 {sv.namehint = "res_hit_lsbsLess_1"} : i3
    %47 = comb.and bin %43, %46 {sv.namehint = "_res_hit_T_10"} : i1
    %48 = comb.or bin %40, %47 {sv.namehint = "_res_hit_T_11"} : i1
    %49 = comb.and bin %23, %38, %48 {sv.namehint = "_res_hit_T_13"} : i1
    %50 = comb.mux bin %1, %22, %49 {sv.namehint = "res_hit"} : i1
    %51 = comb.xor bin %io_pmp_7_cfg_l, %true {sv.namehint = "_res_ignore_T"} : i1
    %52 = comb.and bin %0, %51 {sv.namehint = "res_ignore"} : i1
    %53 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_1"} : i6
    %54 = comb.extract %53 from 0 {sv.namehint = "_res_aligned_lsbMask_T_2"} : (i6) -> i3
    %55 = comb.xor bin %54, %c-1_i3 {sv.namehint = "res_aligned_lsbMask"} : i3
    %56 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_5"} : (i30) -> i29
    %57 = comb.xor bin %8, %56 {sv.namehint = "_res_aligned_straddlesLowerBound_T_6"} : i29
    %58 = comb.icmp bin eq %57, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_7"} : i29
    %59 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %60 = comb.extract %io_addr from 2 : (i32) -> i1
    %61 = comb.xor %60, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_14"} : i1
    %62 = comb.and bin %58, %59, %61 {sv.namehint = "res_aligned_straddlesLowerBound"} : i1
    %63 = comb.extract %io_pmp_7_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_5"} : (i30) -> i29
    %64 = comb.xor bin %8, %63 {sv.namehint = "_res_aligned_straddlesUpperBound_T_6"} : i29
    %65 = comb.icmp bin eq %64, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_7"} : i29
    %66 = comb.extract %io_pmp_7_addr from 0 : (i30) -> i1
    %67 = comb.extract %io_addr from 2 : (i32) -> i1
    %68 = comb.extract %55 from 2 : (i3) -> i1
    %69 = comb.or %67, %68 {sv.namehint = "_res_aligned_straddlesUpperBound_T_14"} : i1
    %70 = comb.and bin %65, %66, %69 {sv.namehint = "res_aligned_straddlesUpperBound"} : i1
    %71 = comb.or bin %62, %70 {sv.namehint = "_res_aligned_rangeAligned_T"} : i1
    %72 = comb.xor bin %71, %true {sv.namehint = "res_aligned_rangeAligned"} : i1
    %73 = comb.extract %io_pmp_7_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T"} : (i32) -> i3
    %74 = comb.xor bin %73, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_1"} : i3
    %75 = comb.and bin %55, %74 {sv.namehint = "_res_aligned_pow2Aligned_T_2"} : i3
    %76 = comb.icmp bin eq %75, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned"} : i3
    %77 = comb.mux bin %1, %76, %72 {sv.namehint = "res_aligned"} : i1
    %78 = comb.or bin %io_pmp_7_cfg_r, %52 {sv.namehint = "_res_cur_cfg_r_T"} : i1
    %79 = comb.and bin %77, %78 {sv.namehint = "res_cur_cfg_r"} : i1
    %80 = comb.or bin %io_pmp_7_cfg_w, %52 {sv.namehint = "_res_cur_cfg_w_T"} : i1
    %81 = comb.and bin %77, %80 {sv.namehint = "res_cur_cfg_w"} : i1
    %82 = comb.mux bin %50, %81, %0 {sv.namehint = "_res_T_44_cfg_w"} : i1
    %83 = comb.mux bin %50, %79, %0 {sv.namehint = "_res_T_44_cfg_r"} : i1
    %84 = comb.extract %io_pmp_6_cfg_a from 1 {sv.namehint = "_res_aligned_T_1"} : (i2) -> i1
    %85 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_5"} : i6
    %86 = comb.extract %85 from 0 {sv.namehint = "_res_hit_lsbMask_T_6"} : (i6) -> i3
    %87 = comb.xor bin %86, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_7"} : i3
    %88 = comb.extract %io_pmp_6_mask from 0 : (i32) -> i3
    %89 = comb.or bin %88, %87 {sv.namehint = "_res_hit_lsbMatch_T_16"} : i3
    %90 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_15"} : (i30) -> i29
    %91 = comb.extract %io_pmp_6_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_16"} : (i32) -> i29
    %92 = comb.xor bin %8, %90 {sv.namehint = "_res_hit_msbMatch_T_17"} : i29
    %93 = comb.xor bin %91, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_18"} : i29
    %94 = comb.and bin %92, %93 {sv.namehint = "_res_hit_msbMatch_T_19"} : i29
    %95 = comb.icmp bin eq %94, %c0_i29 {sv.namehint = "res_hit_msbMatch_1"} : i29
    %96 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %97 = comb.concat %96, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_15"} : i1, i2
    %98 = comb.xor bin %15, %97 {sv.namehint = "_res_hit_lsbMatch_T_17"} : i3
    %99 = comb.xor bin %89, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_18"} : i3
    %100 = comb.and bin %98, %99 {sv.namehint = "_res_hit_lsbMatch_T_19"} : i3
    %101 = comb.icmp bin eq %100, %c0_i3 {sv.namehint = "res_hit_lsbMatch_1"} : i3
    %102 = comb.and bin %95, %101 {sv.namehint = "_res_hit_T_15"} : i1
    %103 = comb.extract %io_pmp_6_cfg_a from 0 {sv.namehint = "_res_hit_T_16"} : (i2) -> i1
    %104 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_18"} : i6
    %105 = comb.extract %104 from 0 {sv.namehint = "_res_hit_T_19"} : (i6) -> i3
    %106 = comb.xor bin %105, %c-1_i3 {sv.namehint = "_res_hit_T_20"} : i3
    %107 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_17"} : (i30) -> i29
    %108 = comb.icmp bin ult %8, %107 {sv.namehint = "res_hit_msbsLess_2"} : i29
    %109 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_19"} : (i30) -> i29
    %110 = comb.xor bin %8, %109 {sv.namehint = "_res_hit_msbsEqual_T_20"} : i29
    %111 = comb.icmp bin eq %110, %c0_i29 {sv.namehint = "res_hit_msbsEqual_2"} : i29
    %112 = comb.or bin %15, %106 {sv.namehint = "_res_hit_lsbsLess_T_15"} : i3
    %113 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %114 = comb.concat %113, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_20"} : i1, i2
    %115 = comb.icmp bin ult %112, %114 {sv.namehint = "res_hit_lsbsLess_2"} : i3
    %116 = comb.and bin %111, %115 {sv.namehint = "_res_hit_T_21"} : i1
    %117 = comb.or bin %108, %116 {sv.namehint = "_res_hit_T_22"} : i1
    %118 = comb.xor bin %117, %true {sv.namehint = "_res_hit_T_23"} : i1
    %119 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_23"} : (i30) -> i29
    %120 = comb.icmp bin ult %8, %119 {sv.namehint = "res_hit_msbsLess_3"} : i29
    %121 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_26"} : (i30) -> i29
    %122 = comb.xor bin %8, %121 {sv.namehint = "_res_hit_msbsEqual_T_27"} : i29
    %123 = comb.icmp bin eq %122, %c0_i29 {sv.namehint = "res_hit_msbsEqual_3"} : i29
    %124 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %125 = comb.concat %124, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_27"} : i1, i2
    %126 = comb.icmp bin ult %15, %125 {sv.namehint = "res_hit_lsbsLess_3"} : i3
    %127 = comb.and bin %123, %126 {sv.namehint = "_res_hit_T_24"} : i1
    %128 = comb.or bin %120, %127 {sv.namehint = "_res_hit_T_25"} : i1
    %129 = comb.and bin %103, %118, %128 {sv.namehint = "_res_hit_T_27"} : i1
    %130 = comb.mux bin %84, %102, %129 {sv.namehint = "res_hit_1"} : i1
    %131 = comb.xor bin %io_pmp_6_cfg_l, %true {sv.namehint = "_res_ignore_T_1"} : i1
    %132 = comb.and bin %0, %131 {sv.namehint = "res_ignore_1"} : i1
    %133 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_4"} : i6
    %134 = comb.extract %133 from 0 {sv.namehint = "_res_aligned_lsbMask_T_5"} : (i6) -> i3
    %135 = comb.xor bin %134, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_1"} : i3
    %136 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_22"} : (i30) -> i29
    %137 = comb.xor bin %8, %136 {sv.namehint = "_res_aligned_straddlesLowerBound_T_23"} : i29
    %138 = comb.icmp bin eq %137, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_24"} : i29
    %139 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %140 = comb.extract %io_addr from 2 : (i32) -> i1
    %141 = comb.xor %140, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_31"} : i1
    %142 = comb.and bin %138, %139, %141 {sv.namehint = "res_aligned_straddlesLowerBound_1"} : i1
    %143 = comb.extract %io_pmp_6_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_22"} : (i30) -> i29
    %144 = comb.xor bin %8, %143 {sv.namehint = "_res_aligned_straddlesUpperBound_T_23"} : i29
    %145 = comb.icmp bin eq %144, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_24"} : i29
    %146 = comb.extract %io_pmp_6_addr from 0 : (i30) -> i1
    %147 = comb.extract %io_addr from 2 : (i32) -> i1
    %148 = comb.extract %135 from 2 : (i3) -> i1
    %149 = comb.or %147, %148 {sv.namehint = "_res_aligned_straddlesUpperBound_T_31"} : i1
    %150 = comb.and bin %145, %146, %149 {sv.namehint = "res_aligned_straddlesUpperBound_1"} : i1
    %151 = comb.or bin %142, %150 {sv.namehint = "_res_aligned_rangeAligned_T_1"} : i1
    %152 = comb.xor bin %151, %true {sv.namehint = "res_aligned_rangeAligned_1"} : i1
    %153 = comb.extract %io_pmp_6_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_3"} : (i32) -> i3
    %154 = comb.xor bin %153, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_4"} : i3
    %155 = comb.and bin %135, %154 {sv.namehint = "_res_aligned_pow2Aligned_T_5"} : i3
    %156 = comb.icmp bin eq %155, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_1"} : i3
    %157 = comb.mux bin %84, %156, %152 {sv.namehint = "res_aligned_1"} : i1
    %158 = comb.or bin %io_pmp_6_cfg_r, %132 {sv.namehint = "_res_cur_cfg_r_T_2"} : i1
    %159 = comb.and bin %157, %158 {sv.namehint = "res_cur_1_cfg_r"} : i1
    %160 = comb.or bin %io_pmp_6_cfg_w, %132 {sv.namehint = "_res_cur_cfg_w_T_2"} : i1
    %161 = comb.and bin %157, %160 {sv.namehint = "res_cur_1_cfg_w"} : i1
    %162 = comb.mux bin %130, %161, %82 {sv.namehint = "_res_T_89_cfg_w"} : i1
    %163 = comb.mux bin %130, %159, %83 {sv.namehint = "_res_T_89_cfg_r"} : i1
    %164 = comb.extract %io_pmp_5_cfg_a from 1 {sv.namehint = "_res_aligned_T_2"} : (i2) -> i1
    %165 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_9"} : i6
    %166 = comb.extract %165 from 0 {sv.namehint = "_res_hit_lsbMask_T_10"} : (i6) -> i3
    %167 = comb.xor bin %166, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_11"} : i3
    %168 = comb.extract %io_pmp_5_mask from 0 : (i32) -> i3
    %169 = comb.or bin %168, %167 {sv.namehint = "_res_hit_lsbMatch_T_26"} : i3
    %170 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_25"} : (i30) -> i29
    %171 = comb.extract %io_pmp_5_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_26"} : (i32) -> i29
    %172 = comb.xor bin %8, %170 {sv.namehint = "_res_hit_msbMatch_T_27"} : i29
    %173 = comb.xor bin %171, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_28"} : i29
    %174 = comb.and bin %172, %173 {sv.namehint = "_res_hit_msbMatch_T_29"} : i29
    %175 = comb.icmp bin eq %174, %c0_i29 {sv.namehint = "res_hit_msbMatch_2"} : i29
    %176 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %177 = comb.concat %176, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_25"} : i1, i2
    %178 = comb.xor bin %15, %177 {sv.namehint = "_res_hit_lsbMatch_T_27"} : i3
    %179 = comb.xor bin %169, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_28"} : i3
    %180 = comb.and bin %178, %179 {sv.namehint = "_res_hit_lsbMatch_T_29"} : i3
    %181 = comb.icmp bin eq %180, %c0_i3 {sv.namehint = "res_hit_lsbMatch_2"} : i3
    %182 = comb.and bin %175, %181 {sv.namehint = "_res_hit_T_29"} : i1
    %183 = comb.extract %io_pmp_5_cfg_a from 0 {sv.namehint = "_res_hit_T_30"} : (i2) -> i1
    %184 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_32"} : i6
    %185 = comb.extract %184 from 0 {sv.namehint = "_res_hit_T_33"} : (i6) -> i3
    %186 = comb.xor bin %185, %c-1_i3 {sv.namehint = "_res_hit_T_34"} : i3
    %187 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_29"} : (i30) -> i29
    %188 = comb.icmp bin ult %8, %187 {sv.namehint = "res_hit_msbsLess_4"} : i29
    %189 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_33"} : (i30) -> i29
    %190 = comb.xor bin %8, %189 {sv.namehint = "_res_hit_msbsEqual_T_34"} : i29
    %191 = comb.icmp bin eq %190, %c0_i29 {sv.namehint = "res_hit_msbsEqual_4"} : i29
    %192 = comb.or bin %15, %186 {sv.namehint = "_res_hit_lsbsLess_T_29"} : i3
    %193 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %194 = comb.concat %193, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_34"} : i1, i2
    %195 = comb.icmp bin ult %192, %194 {sv.namehint = "res_hit_lsbsLess_4"} : i3
    %196 = comb.and bin %191, %195 {sv.namehint = "_res_hit_T_35"} : i1
    %197 = comb.or bin %188, %196 {sv.namehint = "_res_hit_T_36"} : i1
    %198 = comb.xor bin %197, %true {sv.namehint = "_res_hit_T_37"} : i1
    %199 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_35"} : (i30) -> i29
    %200 = comb.icmp bin ult %8, %199 {sv.namehint = "res_hit_msbsLess_5"} : i29
    %201 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_40"} : (i30) -> i29
    %202 = comb.xor bin %8, %201 {sv.namehint = "_res_hit_msbsEqual_T_41"} : i29
    %203 = comb.icmp bin eq %202, %c0_i29 {sv.namehint = "res_hit_msbsEqual_5"} : i29
    %204 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %205 = comb.concat %204, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_41"} : i1, i2
    %206 = comb.icmp bin ult %15, %205 {sv.namehint = "res_hit_lsbsLess_5"} : i3
    %207 = comb.and bin %203, %206 {sv.namehint = "_res_hit_T_38"} : i1
    %208 = comb.or bin %200, %207 {sv.namehint = "_res_hit_T_39"} : i1
    %209 = comb.and bin %183, %198, %208 {sv.namehint = "_res_hit_T_41"} : i1
    %210 = comb.mux bin %164, %182, %209 {sv.namehint = "res_hit_2"} : i1
    %211 = comb.xor bin %io_pmp_5_cfg_l, %true {sv.namehint = "_res_ignore_T_2"} : i1
    %212 = comb.and bin %0, %211 {sv.namehint = "res_ignore_2"} : i1
    %213 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_7"} : i6
    %214 = comb.extract %213 from 0 {sv.namehint = "_res_aligned_lsbMask_T_8"} : (i6) -> i3
    %215 = comb.xor bin %214, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_2"} : i3
    %216 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_39"} : (i30) -> i29
    %217 = comb.xor bin %8, %216 {sv.namehint = "_res_aligned_straddlesLowerBound_T_40"} : i29
    %218 = comb.icmp bin eq %217, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_41"} : i29
    %219 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %220 = comb.extract %io_addr from 2 : (i32) -> i1
    %221 = comb.xor %220, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_48"} : i1
    %222 = comb.and bin %218, %219, %221 {sv.namehint = "res_aligned_straddlesLowerBound_2"} : i1
    %223 = comb.extract %io_pmp_5_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_39"} : (i30) -> i29
    %224 = comb.xor bin %8, %223 {sv.namehint = "_res_aligned_straddlesUpperBound_T_40"} : i29
    %225 = comb.icmp bin eq %224, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_41"} : i29
    %226 = comb.extract %io_pmp_5_addr from 0 : (i30) -> i1
    %227 = comb.extract %io_addr from 2 : (i32) -> i1
    %228 = comb.extract %215 from 2 : (i3) -> i1
    %229 = comb.or %227, %228 {sv.namehint = "_res_aligned_straddlesUpperBound_T_48"} : i1
    %230 = comb.and bin %225, %226, %229 {sv.namehint = "res_aligned_straddlesUpperBound_2"} : i1
    %231 = comb.or bin %222, %230 {sv.namehint = "_res_aligned_rangeAligned_T_2"} : i1
    %232 = comb.xor bin %231, %true {sv.namehint = "res_aligned_rangeAligned_2"} : i1
    %233 = comb.extract %io_pmp_5_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_6"} : (i32) -> i3
    %234 = comb.xor bin %233, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_7"} : i3
    %235 = comb.and bin %215, %234 {sv.namehint = "_res_aligned_pow2Aligned_T_8"} : i3
    %236 = comb.icmp bin eq %235, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_2"} : i3
    %237 = comb.mux bin %164, %236, %232 {sv.namehint = "res_aligned_2"} : i1
    %238 = comb.or bin %io_pmp_5_cfg_r, %212 {sv.namehint = "_res_cur_cfg_r_T_4"} : i1
    %239 = comb.and bin %237, %238 {sv.namehint = "res_cur_2_cfg_r"} : i1
    %240 = comb.or bin %io_pmp_5_cfg_w, %212 {sv.namehint = "_res_cur_cfg_w_T_4"} : i1
    %241 = comb.and bin %237, %240 {sv.namehint = "res_cur_2_cfg_w"} : i1
    %242 = comb.mux bin %210, %241, %162 {sv.namehint = "_res_T_134_cfg_w"} : i1
    %243 = comb.mux bin %210, %239, %163 {sv.namehint = "_res_T_134_cfg_r"} : i1
    %244 = comb.extract %io_pmp_4_cfg_a from 1 {sv.namehint = "_res_aligned_T_3"} : (i2) -> i1
    %245 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_13"} : i6
    %246 = comb.extract %245 from 0 {sv.namehint = "_res_hit_lsbMask_T_14"} : (i6) -> i3
    %247 = comb.xor bin %246, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_15"} : i3
    %248 = comb.extract %io_pmp_4_mask from 0 : (i32) -> i3
    %249 = comb.or bin %248, %247 {sv.namehint = "_res_hit_lsbMatch_T_36"} : i3
    %250 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_35"} : (i30) -> i29
    %251 = comb.extract %io_pmp_4_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_36"} : (i32) -> i29
    %252 = comb.xor bin %8, %250 {sv.namehint = "_res_hit_msbMatch_T_37"} : i29
    %253 = comb.xor bin %251, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_38"} : i29
    %254 = comb.and bin %252, %253 {sv.namehint = "_res_hit_msbMatch_T_39"} : i29
    %255 = comb.icmp bin eq %254, %c0_i29 {sv.namehint = "res_hit_msbMatch_3"} : i29
    %256 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %257 = comb.concat %256, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_35"} : i1, i2
    %258 = comb.xor bin %15, %257 {sv.namehint = "_res_hit_lsbMatch_T_37"} : i3
    %259 = comb.xor bin %249, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_38"} : i3
    %260 = comb.and bin %258, %259 {sv.namehint = "_res_hit_lsbMatch_T_39"} : i3
    %261 = comb.icmp bin eq %260, %c0_i3 {sv.namehint = "res_hit_lsbMatch_3"} : i3
    %262 = comb.and bin %255, %261 {sv.namehint = "_res_hit_T_43"} : i1
    %263 = comb.extract %io_pmp_4_cfg_a from 0 {sv.namehint = "_res_hit_T_44"} : (i2) -> i1
    %264 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_46"} : i6
    %265 = comb.extract %264 from 0 {sv.namehint = "_res_hit_T_47"} : (i6) -> i3
    %266 = comb.xor bin %265, %c-1_i3 {sv.namehint = "_res_hit_T_48"} : i3
    %267 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_41"} : (i30) -> i29
    %268 = comb.icmp bin ult %8, %267 {sv.namehint = "res_hit_msbsLess_6"} : i29
    %269 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_47"} : (i30) -> i29
    %270 = comb.xor bin %8, %269 {sv.namehint = "_res_hit_msbsEqual_T_48"} : i29
    %271 = comb.icmp bin eq %270, %c0_i29 {sv.namehint = "res_hit_msbsEqual_6"} : i29
    %272 = comb.or bin %15, %266 {sv.namehint = "_res_hit_lsbsLess_T_43"} : i3
    %273 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %274 = comb.concat %273, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_48"} : i1, i2
    %275 = comb.icmp bin ult %272, %274 {sv.namehint = "res_hit_lsbsLess_6"} : i3
    %276 = comb.and bin %271, %275 {sv.namehint = "_res_hit_T_49"} : i1
    %277 = comb.or bin %268, %276 {sv.namehint = "_res_hit_T_50"} : i1
    %278 = comb.xor bin %277, %true {sv.namehint = "_res_hit_T_51"} : i1
    %279 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_47"} : (i30) -> i29
    %280 = comb.icmp bin ult %8, %279 {sv.namehint = "res_hit_msbsLess_7"} : i29
    %281 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_54"} : (i30) -> i29
    %282 = comb.xor bin %8, %281 {sv.namehint = "_res_hit_msbsEqual_T_55"} : i29
    %283 = comb.icmp bin eq %282, %c0_i29 {sv.namehint = "res_hit_msbsEqual_7"} : i29
    %284 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %285 = comb.concat %284, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_55"} : i1, i2
    %286 = comb.icmp bin ult %15, %285 {sv.namehint = "res_hit_lsbsLess_7"} : i3
    %287 = comb.and bin %283, %286 {sv.namehint = "_res_hit_T_52"} : i1
    %288 = comb.or bin %280, %287 {sv.namehint = "_res_hit_T_53"} : i1
    %289 = comb.and bin %263, %278, %288 {sv.namehint = "_res_hit_T_55"} : i1
    %290 = comb.mux bin %244, %262, %289 {sv.namehint = "res_hit_3"} : i1
    %291 = comb.xor bin %io_pmp_4_cfg_l, %true {sv.namehint = "_res_ignore_T_3"} : i1
    %292 = comb.and bin %0, %291 {sv.namehint = "res_ignore_3"} : i1
    %293 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_10"} : i6
    %294 = comb.extract %293 from 0 {sv.namehint = "_res_aligned_lsbMask_T_11"} : (i6) -> i3
    %295 = comb.xor bin %294, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_3"} : i3
    %296 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_56"} : (i30) -> i29
    %297 = comb.xor bin %8, %296 {sv.namehint = "_res_aligned_straddlesLowerBound_T_57"} : i29
    %298 = comb.icmp bin eq %297, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_58"} : i29
    %299 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %300 = comb.extract %io_addr from 2 : (i32) -> i1
    %301 = comb.xor %300, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_65"} : i1
    %302 = comb.and bin %298, %299, %301 {sv.namehint = "res_aligned_straddlesLowerBound_3"} : i1
    %303 = comb.extract %io_pmp_4_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_56"} : (i30) -> i29
    %304 = comb.xor bin %8, %303 {sv.namehint = "_res_aligned_straddlesUpperBound_T_57"} : i29
    %305 = comb.icmp bin eq %304, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_58"} : i29
    %306 = comb.extract %io_pmp_4_addr from 0 : (i30) -> i1
    %307 = comb.extract %io_addr from 2 : (i32) -> i1
    %308 = comb.extract %295 from 2 : (i3) -> i1
    %309 = comb.or %307, %308 {sv.namehint = "_res_aligned_straddlesUpperBound_T_65"} : i1
    %310 = comb.and bin %305, %306, %309 {sv.namehint = "res_aligned_straddlesUpperBound_3"} : i1
    %311 = comb.or bin %302, %310 {sv.namehint = "_res_aligned_rangeAligned_T_3"} : i1
    %312 = comb.xor bin %311, %true {sv.namehint = "res_aligned_rangeAligned_3"} : i1
    %313 = comb.extract %io_pmp_4_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_9"} : (i32) -> i3
    %314 = comb.xor bin %313, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_10"} : i3
    %315 = comb.and bin %295, %314 {sv.namehint = "_res_aligned_pow2Aligned_T_11"} : i3
    %316 = comb.icmp bin eq %315, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_3"} : i3
    %317 = comb.mux bin %244, %316, %312 {sv.namehint = "res_aligned_3"} : i1
    %318 = comb.or bin %io_pmp_4_cfg_r, %292 {sv.namehint = "_res_cur_cfg_r_T_6"} : i1
    %319 = comb.and bin %317, %318 {sv.namehint = "res_cur_3_cfg_r"} : i1
    %320 = comb.or bin %io_pmp_4_cfg_w, %292 {sv.namehint = "_res_cur_cfg_w_T_6"} : i1
    %321 = comb.and bin %317, %320 {sv.namehint = "res_cur_3_cfg_w"} : i1
    %322 = comb.mux bin %290, %321, %242 {sv.namehint = "_res_T_179_cfg_w"} : i1
    %323 = comb.mux bin %290, %319, %243 {sv.namehint = "_res_T_179_cfg_r"} : i1
    %324 = comb.extract %io_pmp_3_cfg_a from 1 {sv.namehint = "_res_aligned_T_4"} : (i2) -> i1
    %325 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_17"} : i6
    %326 = comb.extract %325 from 0 {sv.namehint = "_res_hit_lsbMask_T_18"} : (i6) -> i3
    %327 = comb.xor bin %326, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_19"} : i3
    %328 = comb.extract %io_pmp_3_mask from 0 : (i32) -> i3
    %329 = comb.or bin %328, %327 {sv.namehint = "_res_hit_lsbMatch_T_46"} : i3
    %330 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_45"} : (i30) -> i29
    %331 = comb.extract %io_pmp_3_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_46"} : (i32) -> i29
    %332 = comb.xor bin %8, %330 {sv.namehint = "_res_hit_msbMatch_T_47"} : i29
    %333 = comb.xor bin %331, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_48"} : i29
    %334 = comb.and bin %332, %333 {sv.namehint = "_res_hit_msbMatch_T_49"} : i29
    %335 = comb.icmp bin eq %334, %c0_i29 {sv.namehint = "res_hit_msbMatch_4"} : i29
    %336 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %337 = comb.concat %336, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_45"} : i1, i2
    %338 = comb.xor bin %15, %337 {sv.namehint = "_res_hit_lsbMatch_T_47"} : i3
    %339 = comb.xor bin %329, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_48"} : i3
    %340 = comb.and bin %338, %339 {sv.namehint = "_res_hit_lsbMatch_T_49"} : i3
    %341 = comb.icmp bin eq %340, %c0_i3 {sv.namehint = "res_hit_lsbMatch_4"} : i3
    %342 = comb.and bin %335, %341 {sv.namehint = "_res_hit_T_57"} : i1
    %343 = comb.extract %io_pmp_3_cfg_a from 0 {sv.namehint = "_res_hit_T_58"} : (i2) -> i1
    %344 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_60"} : i6
    %345 = comb.extract %344 from 0 {sv.namehint = "_res_hit_T_61"} : (i6) -> i3
    %346 = comb.xor bin %345, %c-1_i3 {sv.namehint = "_res_hit_T_62"} : i3
    %347 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_53"} : (i30) -> i29
    %348 = comb.icmp bin ult %8, %347 {sv.namehint = "res_hit_msbsLess_8"} : i29
    %349 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_61"} : (i30) -> i29
    %350 = comb.xor bin %8, %349 {sv.namehint = "_res_hit_msbsEqual_T_62"} : i29
    %351 = comb.icmp bin eq %350, %c0_i29 {sv.namehint = "res_hit_msbsEqual_8"} : i29
    %352 = comb.or bin %15, %346 {sv.namehint = "_res_hit_lsbsLess_T_57"} : i3
    %353 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %354 = comb.concat %353, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_62"} : i1, i2
    %355 = comb.icmp bin ult %352, %354 {sv.namehint = "res_hit_lsbsLess_8"} : i3
    %356 = comb.and bin %351, %355 {sv.namehint = "_res_hit_T_63"} : i1
    %357 = comb.or bin %348, %356 {sv.namehint = "_res_hit_T_64"} : i1
    %358 = comb.xor bin %357, %true {sv.namehint = "_res_hit_T_65"} : i1
    %359 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_59"} : (i30) -> i29
    %360 = comb.icmp bin ult %8, %359 {sv.namehint = "res_hit_msbsLess_9"} : i29
    %361 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_68"} : (i30) -> i29
    %362 = comb.xor bin %8, %361 {sv.namehint = "_res_hit_msbsEqual_T_69"} : i29
    %363 = comb.icmp bin eq %362, %c0_i29 {sv.namehint = "res_hit_msbsEqual_9"} : i29
    %364 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %365 = comb.concat %364, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_69"} : i1, i2
    %366 = comb.icmp bin ult %15, %365 {sv.namehint = "res_hit_lsbsLess_9"} : i3
    %367 = comb.and bin %363, %366 {sv.namehint = "_res_hit_T_66"} : i1
    %368 = comb.or bin %360, %367 {sv.namehint = "_res_hit_T_67"} : i1
    %369 = comb.and bin %343, %358, %368 {sv.namehint = "_res_hit_T_69"} : i1
    %370 = comb.mux bin %324, %342, %369 {sv.namehint = "res_hit_4"} : i1
    %371 = comb.xor bin %io_pmp_3_cfg_l, %true {sv.namehint = "_res_ignore_T_4"} : i1
    %372 = comb.and bin %0, %371 {sv.namehint = "res_ignore_4"} : i1
    %373 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_13"} : i6
    %374 = comb.extract %373 from 0 {sv.namehint = "_res_aligned_lsbMask_T_14"} : (i6) -> i3
    %375 = comb.xor bin %374, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_4"} : i3
    %376 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_73"} : (i30) -> i29
    %377 = comb.xor bin %8, %376 {sv.namehint = "_res_aligned_straddlesLowerBound_T_74"} : i29
    %378 = comb.icmp bin eq %377, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_75"} : i29
    %379 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %380 = comb.extract %io_addr from 2 : (i32) -> i1
    %381 = comb.xor %380, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_82"} : i1
    %382 = comb.and bin %378, %379, %381 {sv.namehint = "res_aligned_straddlesLowerBound_4"} : i1
    %383 = comb.extract %io_pmp_3_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_73"} : (i30) -> i29
    %384 = comb.xor bin %8, %383 {sv.namehint = "_res_aligned_straddlesUpperBound_T_74"} : i29
    %385 = comb.icmp bin eq %384, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_75"} : i29
    %386 = comb.extract %io_pmp_3_addr from 0 : (i30) -> i1
    %387 = comb.extract %io_addr from 2 : (i32) -> i1
    %388 = comb.extract %375 from 2 : (i3) -> i1
    %389 = comb.or %387, %388 {sv.namehint = "_res_aligned_straddlesUpperBound_T_82"} : i1
    %390 = comb.and bin %385, %386, %389 {sv.namehint = "res_aligned_straddlesUpperBound_4"} : i1
    %391 = comb.or bin %382, %390 {sv.namehint = "_res_aligned_rangeAligned_T_4"} : i1
    %392 = comb.xor bin %391, %true {sv.namehint = "res_aligned_rangeAligned_4"} : i1
    %393 = comb.extract %io_pmp_3_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_12"} : (i32) -> i3
    %394 = comb.xor bin %393, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_13"} : i3
    %395 = comb.and bin %375, %394 {sv.namehint = "_res_aligned_pow2Aligned_T_14"} : i3
    %396 = comb.icmp bin eq %395, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_4"} : i3
    %397 = comb.mux bin %324, %396, %392 {sv.namehint = "res_aligned_4"} : i1
    %398 = comb.or bin %io_pmp_3_cfg_r, %372 {sv.namehint = "_res_cur_cfg_r_T_8"} : i1
    %399 = comb.and bin %397, %398 {sv.namehint = "res_cur_4_cfg_r"} : i1
    %400 = comb.or bin %io_pmp_3_cfg_w, %372 {sv.namehint = "_res_cur_cfg_w_T_8"} : i1
    %401 = comb.and bin %397, %400 {sv.namehint = "res_cur_4_cfg_w"} : i1
    %402 = comb.mux bin %370, %401, %322 {sv.namehint = "_res_T_224_cfg_w"} : i1
    %403 = comb.mux bin %370, %399, %323 {sv.namehint = "_res_T_224_cfg_r"} : i1
    %404 = comb.extract %io_pmp_2_cfg_a from 1 {sv.namehint = "_res_aligned_T_5"} : (i2) -> i1
    %405 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_21"} : i6
    %406 = comb.extract %405 from 0 {sv.namehint = "_res_hit_lsbMask_T_22"} : (i6) -> i3
    %407 = comb.xor bin %406, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_23"} : i3
    %408 = comb.extract %io_pmp_2_mask from 0 : (i32) -> i3
    %409 = comb.or bin %408, %407 {sv.namehint = "_res_hit_lsbMatch_T_56"} : i3
    %410 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_55"} : (i30) -> i29
    %411 = comb.extract %io_pmp_2_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_56"} : (i32) -> i29
    %412 = comb.xor bin %8, %410 {sv.namehint = "_res_hit_msbMatch_T_57"} : i29
    %413 = comb.xor bin %411, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_58"} : i29
    %414 = comb.and bin %412, %413 {sv.namehint = "_res_hit_msbMatch_T_59"} : i29
    %415 = comb.icmp bin eq %414, %c0_i29 {sv.namehint = "res_hit_msbMatch_5"} : i29
    %416 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %417 = comb.concat %416, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_55"} : i1, i2
    %418 = comb.xor bin %15, %417 {sv.namehint = "_res_hit_lsbMatch_T_57"} : i3
    %419 = comb.xor bin %409, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_58"} : i3
    %420 = comb.and bin %418, %419 {sv.namehint = "_res_hit_lsbMatch_T_59"} : i3
    %421 = comb.icmp bin eq %420, %c0_i3 {sv.namehint = "res_hit_lsbMatch_5"} : i3
    %422 = comb.and bin %415, %421 {sv.namehint = "_res_hit_T_71"} : i1
    %423 = comb.extract %io_pmp_2_cfg_a from 0 {sv.namehint = "_res_hit_T_72"} : (i2) -> i1
    %424 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_74"} : i6
    %425 = comb.extract %424 from 0 {sv.namehint = "_res_hit_T_75"} : (i6) -> i3
    %426 = comb.xor bin %425, %c-1_i3 {sv.namehint = "_res_hit_T_76"} : i3
    %427 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_65"} : (i30) -> i29
    %428 = comb.icmp bin ult %8, %427 {sv.namehint = "res_hit_msbsLess_10"} : i29
    %429 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_75"} : (i30) -> i29
    %430 = comb.xor bin %8, %429 {sv.namehint = "_res_hit_msbsEqual_T_76"} : i29
    %431 = comb.icmp bin eq %430, %c0_i29 {sv.namehint = "res_hit_msbsEqual_10"} : i29
    %432 = comb.or bin %15, %426 {sv.namehint = "_res_hit_lsbsLess_T_71"} : i3
    %433 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %434 = comb.concat %433, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_76"} : i1, i2
    %435 = comb.icmp bin ult %432, %434 {sv.namehint = "res_hit_lsbsLess_10"} : i3
    %436 = comb.and bin %431, %435 {sv.namehint = "_res_hit_T_77"} : i1
    %437 = comb.or bin %428, %436 {sv.namehint = "_res_hit_T_78"} : i1
    %438 = comb.xor bin %437, %true {sv.namehint = "_res_hit_T_79"} : i1
    %439 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_71"} : (i30) -> i29
    %440 = comb.icmp bin ult %8, %439 {sv.namehint = "res_hit_msbsLess_11"} : i29
    %441 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_82"} : (i30) -> i29
    %442 = comb.xor bin %8, %441 {sv.namehint = "_res_hit_msbsEqual_T_83"} : i29
    %443 = comb.icmp bin eq %442, %c0_i29 {sv.namehint = "res_hit_msbsEqual_11"} : i29
    %444 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %445 = comb.concat %444, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_83"} : i1, i2
    %446 = comb.icmp bin ult %15, %445 {sv.namehint = "res_hit_lsbsLess_11"} : i3
    %447 = comb.and bin %443, %446 {sv.namehint = "_res_hit_T_80"} : i1
    %448 = comb.or bin %440, %447 {sv.namehint = "_res_hit_T_81"} : i1
    %449 = comb.and bin %423, %438, %448 {sv.namehint = "_res_hit_T_83"} : i1
    %450 = comb.mux bin %404, %422, %449 {sv.namehint = "res_hit_5"} : i1
    %451 = comb.xor bin %io_pmp_2_cfg_l, %true {sv.namehint = "_res_ignore_T_5"} : i1
    %452 = comb.and bin %0, %451 {sv.namehint = "res_ignore_5"} : i1
    %453 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_16"} : i6
    %454 = comb.extract %453 from 0 {sv.namehint = "_res_aligned_lsbMask_T_17"} : (i6) -> i3
    %455 = comb.xor bin %454, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_5"} : i3
    %456 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_90"} : (i30) -> i29
    %457 = comb.xor bin %8, %456 {sv.namehint = "_res_aligned_straddlesLowerBound_T_91"} : i29
    %458 = comb.icmp bin eq %457, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_92"} : i29
    %459 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %460 = comb.extract %io_addr from 2 : (i32) -> i1
    %461 = comb.xor %460, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_99"} : i1
    %462 = comb.and bin %458, %459, %461 {sv.namehint = "res_aligned_straddlesLowerBound_5"} : i1
    %463 = comb.extract %io_pmp_2_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_90"} : (i30) -> i29
    %464 = comb.xor bin %8, %463 {sv.namehint = "_res_aligned_straddlesUpperBound_T_91"} : i29
    %465 = comb.icmp bin eq %464, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_92"} : i29
    %466 = comb.extract %io_pmp_2_addr from 0 : (i30) -> i1
    %467 = comb.extract %io_addr from 2 : (i32) -> i1
    %468 = comb.extract %455 from 2 : (i3) -> i1
    %469 = comb.or %467, %468 {sv.namehint = "_res_aligned_straddlesUpperBound_T_99"} : i1
    %470 = comb.and bin %465, %466, %469 {sv.namehint = "res_aligned_straddlesUpperBound_5"} : i1
    %471 = comb.or bin %462, %470 {sv.namehint = "_res_aligned_rangeAligned_T_5"} : i1
    %472 = comb.xor bin %471, %true {sv.namehint = "res_aligned_rangeAligned_5"} : i1
    %473 = comb.extract %io_pmp_2_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_15"} : (i32) -> i3
    %474 = comb.xor bin %473, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_16"} : i3
    %475 = comb.and bin %455, %474 {sv.namehint = "_res_aligned_pow2Aligned_T_17"} : i3
    %476 = comb.icmp bin eq %475, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_5"} : i3
    %477 = comb.mux bin %404, %476, %472 {sv.namehint = "res_aligned_5"} : i1
    %478 = comb.or bin %io_pmp_2_cfg_r, %452 {sv.namehint = "_res_cur_cfg_r_T_10"} : i1
    %479 = comb.and bin %477, %478 {sv.namehint = "res_cur_5_cfg_r"} : i1
    %480 = comb.or bin %io_pmp_2_cfg_w, %452 {sv.namehint = "_res_cur_cfg_w_T_10"} : i1
    %481 = comb.and bin %477, %480 {sv.namehint = "res_cur_5_cfg_w"} : i1
    %482 = comb.mux bin %450, %481, %402 {sv.namehint = "_res_T_269_cfg_w"} : i1
    %483 = comb.mux bin %450, %479, %403 {sv.namehint = "_res_T_269_cfg_r"} : i1
    %484 = comb.extract %io_pmp_1_cfg_a from 1 {sv.namehint = "_res_aligned_T_6"} : (i2) -> i1
    %485 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_25"} : i6
    %486 = comb.extract %485 from 0 {sv.namehint = "_res_hit_lsbMask_T_26"} : (i6) -> i3
    %487 = comb.xor bin %486, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_27"} : i3
    %488 = comb.extract %io_pmp_1_mask from 0 : (i32) -> i3
    %489 = comb.or bin %488, %487 {sv.namehint = "_res_hit_lsbMatch_T_66"} : i3
    %490 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_65"} : (i30) -> i29
    %491 = comb.extract %io_pmp_1_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_66"} : (i32) -> i29
    %492 = comb.xor bin %8, %490 {sv.namehint = "_res_hit_msbMatch_T_67"} : i29
    %493 = comb.xor bin %491, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_68"} : i29
    %494 = comb.and bin %492, %493 {sv.namehint = "_res_hit_msbMatch_T_69"} : i29
    %495 = comb.icmp bin eq %494, %c0_i29 {sv.namehint = "res_hit_msbMatch_6"} : i29
    %496 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %497 = comb.concat %496, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_65"} : i1, i2
    %498 = comb.xor bin %15, %497 {sv.namehint = "_res_hit_lsbMatch_T_67"} : i3
    %499 = comb.xor bin %489, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_68"} : i3
    %500 = comb.and bin %498, %499 {sv.namehint = "_res_hit_lsbMatch_T_69"} : i3
    %501 = comb.icmp bin eq %500, %c0_i3 {sv.namehint = "res_hit_lsbMatch_6"} : i3
    %502 = comb.and bin %495, %501 {sv.namehint = "_res_hit_T_85"} : i1
    %503 = comb.extract %io_pmp_1_cfg_a from 0 {sv.namehint = "_res_hit_T_86"} : (i2) -> i1
    %504 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_T_88"} : i6
    %505 = comb.extract %504 from 0 {sv.namehint = "_res_hit_T_89"} : (i6) -> i3
    %506 = comb.xor bin %505, %c-1_i3 {sv.namehint = "_res_hit_T_90"} : i3
    %507 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_77"} : (i30) -> i29
    %508 = comb.icmp bin ult %8, %507 {sv.namehint = "res_hit_msbsLess_12"} : i29
    %509 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_89"} : (i30) -> i29
    %510 = comb.xor bin %8, %509 {sv.namehint = "_res_hit_msbsEqual_T_90"} : i29
    %511 = comb.icmp bin eq %510, %c0_i29 {sv.namehint = "res_hit_msbsEqual_12"} : i29
    %512 = comb.or bin %15, %506 {sv.namehint = "_res_hit_lsbsLess_T_85"} : i3
    %513 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %514 = comb.concat %513, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_90"} : i1, i2
    %515 = comb.icmp bin ult %512, %514 {sv.namehint = "res_hit_lsbsLess_12"} : i3
    %516 = comb.and bin %511, %515 {sv.namehint = "_res_hit_T_91"} : i1
    %517 = comb.or bin %508, %516 {sv.namehint = "_res_hit_T_92"} : i1
    %518 = comb.xor bin %517, %true {sv.namehint = "_res_hit_T_93"} : i1
    %519 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_83"} : (i30) -> i29
    %520 = comb.icmp bin ult %8, %519 {sv.namehint = "res_hit_msbsLess_13"} : i29
    %521 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_96"} : (i30) -> i29
    %522 = comb.xor bin %8, %521 {sv.namehint = "_res_hit_msbsEqual_T_97"} : i29
    %523 = comb.icmp bin eq %522, %c0_i29 {sv.namehint = "res_hit_msbsEqual_13"} : i29
    %524 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %525 = comb.concat %524, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_97"} : i1, i2
    %526 = comb.icmp bin ult %15, %525 {sv.namehint = "res_hit_lsbsLess_13"} : i3
    %527 = comb.and bin %523, %526 {sv.namehint = "_res_hit_T_94"} : i1
    %528 = comb.or bin %520, %527 {sv.namehint = "_res_hit_T_95"} : i1
    %529 = comb.and bin %503, %518, %528 {sv.namehint = "_res_hit_T_97"} : i1
    %530 = comb.mux bin %484, %502, %529 {sv.namehint = "res_hit_6"} : i1
    %531 = comb.xor bin %io_pmp_1_cfg_l, %true {sv.namehint = "_res_ignore_T_6"} : i1
    %532 = comb.and bin %0, %531 {sv.namehint = "res_ignore_6"} : i1
    %533 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_19"} : i6
    %534 = comb.extract %533 from 0 {sv.namehint = "_res_aligned_lsbMask_T_20"} : (i6) -> i3
    %535 = comb.xor bin %534, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_6"} : i3
    %536 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_aligned_straddlesLowerBound_T_107"} : (i30) -> i29
    %537 = comb.xor bin %8, %536 {sv.namehint = "_res_aligned_straddlesLowerBound_T_108"} : i29
    %538 = comb.icmp bin eq %537, %c0_i29 {sv.namehint = "_res_aligned_straddlesLowerBound_T_109"} : i29
    %539 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %540 = comb.extract %io_addr from 2 : (i32) -> i1
    %541 = comb.xor %540, %true {sv.namehint = "_res_aligned_straddlesLowerBound_T_116"} : i1
    %542 = comb.and bin %538, %539, %541 {sv.namehint = "res_aligned_straddlesLowerBound_6"} : i1
    %543 = comb.extract %io_pmp_1_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_107"} : (i30) -> i29
    %544 = comb.xor bin %8, %543 {sv.namehint = "_res_aligned_straddlesUpperBound_T_108"} : i29
    %545 = comb.icmp bin eq %544, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_109"} : i29
    %546 = comb.extract %io_pmp_1_addr from 0 : (i30) -> i1
    %547 = comb.extract %io_addr from 2 : (i32) -> i1
    %548 = comb.extract %535 from 2 : (i3) -> i1
    %549 = comb.or %547, %548 {sv.namehint = "_res_aligned_straddlesUpperBound_T_116"} : i1
    %550 = comb.and bin %545, %546, %549 {sv.namehint = "res_aligned_straddlesUpperBound_6"} : i1
    %551 = comb.or bin %542, %550 {sv.namehint = "_res_aligned_rangeAligned_T_6"} : i1
    %552 = comb.xor bin %551, %true {sv.namehint = "res_aligned_rangeAligned_6"} : i1
    %553 = comb.extract %io_pmp_1_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_18"} : (i32) -> i3
    %554 = comb.xor bin %553, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_19"} : i3
    %555 = comb.and bin %535, %554 {sv.namehint = "_res_aligned_pow2Aligned_T_20"} : i3
    %556 = comb.icmp bin eq %555, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_6"} : i3
    %557 = comb.mux bin %484, %556, %552 {sv.namehint = "res_aligned_6"} : i1
    %558 = comb.or bin %io_pmp_1_cfg_r, %532 {sv.namehint = "_res_cur_cfg_r_T_12"} : i1
    %559 = comb.and bin %557, %558 {sv.namehint = "res_cur_6_cfg_r"} : i1
    %560 = comb.or bin %io_pmp_1_cfg_w, %532 {sv.namehint = "_res_cur_cfg_w_T_12"} : i1
    %561 = comb.and bin %557, %560 {sv.namehint = "res_cur_6_cfg_w"} : i1
    %562 = comb.mux bin %530, %561, %482 {sv.namehint = "_res_T_314_cfg_w"} : i1
    %563 = comb.mux bin %530, %559, %483 {sv.namehint = "_res_T_314_cfg_r"} : i1
    %564 = comb.extract %io_pmp_0_cfg_a from 1 {sv.namehint = "_res_aligned_T_7"} : (i2) -> i1
    %565 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_hit_lsbMask_T_29"} : i6
    %566 = comb.extract %565 from 0 {sv.namehint = "_res_hit_lsbMask_T_30"} : (i6) -> i3
    %567 = comb.xor bin %566, %c-1_i3 {sv.namehint = "_res_hit_lsbMask_T_31"} : i3
    %568 = comb.extract %io_pmp_0_mask from 0 : (i32) -> i3
    %569 = comb.or bin %568, %567 {sv.namehint = "_res_hit_lsbMatch_T_76"} : i3
    %570 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbMatch_T_75"} : (i30) -> i29
    %571 = comb.extract %io_pmp_0_mask from 3 {sv.namehint = "_res_hit_msbMatch_T_76"} : (i32) -> i29
    %572 = comb.xor bin %8, %570 {sv.namehint = "_res_hit_msbMatch_T_77"} : i29
    %573 = comb.xor bin %571, %c-1_i29 {sv.namehint = "_res_hit_msbMatch_T_78"} : i29
    %574 = comb.and bin %572, %573 {sv.namehint = "_res_hit_msbMatch_T_79"} : i29
    %575 = comb.icmp bin eq %574, %c0_i29 {sv.namehint = "res_hit_msbMatch_7"} : i29
    %576 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %577 = comb.concat %576, %c0_i2 {sv.namehint = "_res_hit_lsbMatch_T_75"} : i1, i2
    %578 = comb.xor bin %15, %577 {sv.namehint = "_res_hit_lsbMatch_T_77"} : i3
    %579 = comb.xor bin %569, %c-1_i3 {sv.namehint = "_res_hit_lsbMatch_T_78"} : i3
    %580 = comb.and bin %578, %579 {sv.namehint = "_res_hit_lsbMatch_T_79"} : i3
    %581 = comb.icmp bin eq %580, %c0_i3 {sv.namehint = "res_hit_lsbMatch_7"} : i3
    %582 = comb.and bin %575, %581 {sv.namehint = "_res_hit_T_99"} : i1
    %583 = comb.extract %io_pmp_0_cfg_a from 0 {sv.namehint = "_res_hit_T_100"} : (i2) -> i1
    %584 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsLess_T_95"} : (i30) -> i29
    %585 = comb.icmp bin ult %8, %584 {sv.namehint = "res_hit_msbsLess_15"} : i29
    %586 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_hit_msbsEqual_T_110"} : (i30) -> i29
    %587 = comb.xor bin %8, %586 {sv.namehint = "_res_hit_msbsEqual_T_111"} : i29
    %588 = comb.icmp bin eq %587, %c0_i29 {sv.namehint = "res_hit_msbsEqual_15"} : i29
    %589 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %590 = comb.concat %589, %c0_i2 {sv.namehint = "_res_hit_lsbsLess_T_111"} : i1, i2
    %591 = comb.icmp bin ult %15, %590 {sv.namehint = "res_hit_lsbsLess_15"} : i3
    %592 = comb.and bin %588, %591 {sv.namehint = "_res_hit_T_108"} : i1
    %593 = comb.or bin %585, %592 {sv.namehint = "_res_hit_T_110"} : i1
    %594 = comb.and bin %583, %593 {sv.namehint = "_res_hit_T_111"} : i1
    %595 = comb.mux bin %564, %582, %594 {sv.namehint = "res_hit_7"} : i1
    %596 = comb.xor bin %io_pmp_0_cfg_l, %true {sv.namehint = "_res_ignore_T_7"} : i1
    %597 = comb.and bin %0, %596 {sv.namehint = "res_ignore_7"} : i1
    %598 = comb.shl bin %c7_i6, %2 {sv.namehint = "_res_aligned_lsbMask_T_22"} : i6
    %599 = comb.extract %598 from 0 {sv.namehint = "_res_aligned_lsbMask_T_23"} : (i6) -> i3
    %600 = comb.xor bin %599, %c-1_i3 {sv.namehint = "res_aligned_lsbMask_7"} : i3
    %601 = comb.extract %io_pmp_0_addr from 1 {sv.namehint = "_res_aligned_straddlesUpperBound_T_124"} : (i30) -> i29
    %602 = comb.xor bin %8, %601 {sv.namehint = "_res_aligned_straddlesUpperBound_T_125"} : i29
    %603 = comb.icmp bin eq %602, %c0_i29 {sv.namehint = "_res_aligned_straddlesUpperBound_T_126"} : i29
    %604 = comb.extract %io_pmp_0_addr from 0 : (i30) -> i1
    %605 = comb.extract %io_addr from 2 : (i32) -> i1
    %606 = comb.extract %600 from 2 : (i3) -> i1
    %607 = comb.or %605, %606 {sv.namehint = "_res_aligned_straddlesUpperBound_T_133"} : i1
    %608 = comb.and bin %603, %604, %607 {sv.namehint = "res_aligned_straddlesUpperBound_7"} : i1
    %609 = comb.xor bin %608, %true {sv.namehint = "res_aligned_rangeAligned_7"} : i1
    %610 = comb.extract %io_pmp_0_mask from 0 {sv.namehint = "_res_aligned_pow2Aligned_T_21"} : (i32) -> i3
    %611 = comb.xor bin %610, %c-1_i3 {sv.namehint = "_res_aligned_pow2Aligned_T_22"} : i3
    %612 = comb.and bin %600, %611 {sv.namehint = "_res_aligned_pow2Aligned_T_23"} : i3
    %613 = comb.icmp bin eq %612, %c0_i3 {sv.namehint = "res_aligned_pow2Aligned_7"} : i3
    %614 = comb.mux bin %564, %613, %609 {sv.namehint = "res_aligned_7"} : i1
    %615 = comb.or bin %io_pmp_0_cfg_r, %597 {sv.namehint = "_res_cur_cfg_r_T_14"} : i1
    %616 = comb.and bin %614, %615 {sv.namehint = "res_cur_7_cfg_r"} : i1
    %617 = comb.or bin %io_pmp_0_cfg_w, %597 {sv.namehint = "_res_cur_cfg_w_T_14"} : i1
    %618 = comb.and bin %614, %617 {sv.namehint = "res_cur_7_cfg_w"} : i1
    %619 = comb.mux bin %595, %618, %562 {sv.namehint = "io_w"} : i1
    %620 = comb.mux bin %595, %616, %563 {sv.namehint = "io_r"} : i1
    hw.output %620, %619 : i1, i1
  }
  hw.module private @TLB(in %io_req_bits_vaddr : i34, in %io_req_bits_size : i2, in %io_req_bits_cmd : i5, out io_resp_paddr : i32, out io_resp_pf_ld : i1, out io_resp_pf_st : i1, out io_resp_ae_ld : i1, out io_resp_ae_st : i1, out io_resp_ma_ld : i1, out io_resp_ma_st : i1, out io_resp_cacheable : i1, in %io_ptw_status_debug : i1, in %io_ptw_status_dprv : i2, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_w : i1, in %io_ptw_pmp_0_cfg_r : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_w : i1, in %io_ptw_pmp_1_cfg_r : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_w : i1, in %io_ptw_pmp_2_cfg_r : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_w : i1, in %io_ptw_pmp_3_cfg_r : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_w : i1, in %io_ptw_pmp_4_cfg_r : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_w : i1, in %io_ptw_pmp_5_cfg_r : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_w : i1, in %io_ptw_pmp_6_cfg_r : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_w : i1, in %io_ptw_pmp_7_cfg_r : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32) {
    %c-8_i4 = hw.constant -8 : i4
    %c-512_i10 = hw.constant -512 : i10
    %c-1_i2 = hw.constant -1 : i2
    %c-1_i4 = hw.constant -1 : i4
    %false = hw.constant false {sv.namehint = "entries_barrier.io_x_c"}
    %c0_i3 = hw.constant 0 : i3
    %c0_i6 = hw.constant 0 : i6
    %c0_i18 = hw.constant 0 : i18
    %c0_i8 = hw.constant 0 : i8
    %c0_i22 = hw.constant 0 : i22
    %c5_i5 = hw.constant 5 : i5
    %c15_i5 = hw.constant 15 : i5
    %c14_i5 = hw.constant 14 : i5
    %c13_i5 = hw.constant 13 : i5
    %c12_i5 = hw.constant 12 : i5
    %c8_i5 = hw.constant 8 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c4_i5 = hw.constant 4 : i5
    %c7_i5 = hw.constant 7 : i5
    %c6_i5 = hw.constant 6 : i5
    %c1_i5 = hw.constant 1 : i5
    %c1_i4 = hw.constant 1 : i4
    %c0_i5 = hw.constant 0 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i2 = hw.constant 0 : i2
    %true = hw.constant true
    %c-15_i5 = hw.constant -15 : i5
    %c-9_i5 = hw.constant -9 : i5
    %pmp.io_r, %pmp.io_w = hw.instance "pmp" @PMPChecker(io_prv: %io_ptw_status_dprv: i2, io_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_pmp_0_cfg_w: %io_ptw_pmp_0_cfg_w: i1, io_pmp_0_cfg_r: %io_ptw_pmp_0_cfg_r: i1, io_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_pmp_1_cfg_w: %io_ptw_pmp_1_cfg_w: i1, io_pmp_1_cfg_r: %io_ptw_pmp_1_cfg_r: i1, io_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_pmp_2_cfg_w: %io_ptw_pmp_2_cfg_w: i1, io_pmp_2_cfg_r: %io_ptw_pmp_2_cfg_r: i1, io_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_pmp_3_cfg_w: %io_ptw_pmp_3_cfg_w: i1, io_pmp_3_cfg_r: %io_ptw_pmp_3_cfg_r: i1, io_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_pmp_4_cfg_w: %io_ptw_pmp_4_cfg_w: i1, io_pmp_4_cfg_r: %io_ptw_pmp_4_cfg_r: i1, io_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_pmp_5_cfg_w: %io_ptw_pmp_5_cfg_w: i1, io_pmp_5_cfg_r: %io_ptw_pmp_5_cfg_r: i1, io_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_pmp_6_cfg_w: %io_ptw_pmp_6_cfg_w: i1, io_pmp_6_cfg_r: %io_ptw_pmp_6_cfg_r: i1, io_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_pmp_7_cfg_w: %io_ptw_pmp_7_cfg_w: i1, io_pmp_7_cfg_r: %io_ptw_pmp_7_cfg_r: i1, io_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_pmp_7_mask: %io_ptw_pmp_7_mask: i32, io_addr: %0: i32, io_size: %io_req_bits_size: i2) -> (io_r: i1, io_w: i1) {sv.namehint = "pmp.io_w"}
    %0 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "pmp.io_addr"} : (i34) -> i32
    %1 = comb.extract %io_req_bits_vaddr from 14 : (i34) -> i20
    %2 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i2
    %3 = comb.xor %2, %c-1_i2 : i2
    %4 = comb.concat %1, %3 : i20, i2
    %5 = comb.icmp bin eq %4, %c0_i22 {sv.namehint = "_legal_address_T_4"} : i22
    %6 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i6
    %7 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i2
    %8 = comb.xor %7, %c-1_i2 : i2
    %9 = comb.concat %6, %8 : i6, i2
    %10 = comb.icmp bin eq %9, %c0_i8 {sv.namehint = "_legal_address_T_9"} : i8
    %11 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i8
    %12 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i10
    %13 = comb.xor %12, %c-512_i10 : i10
    %14 = comb.concat %11, %13 : i8, i10
    %15 = comb.icmp bin eq %14, %c0_i18 {sv.namehint = "_legal_address_T_14"} : i18
    %16 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i22
    %17 = comb.icmp bin ne %16, %c0_i22 : i22
    %18 = comb.xor bin %17, %true {sv.namehint = "_legal_address_T_19"} : i1
    %19 = comb.extract %io_req_bits_vaddr from 17 : (i34) -> i17
    %20 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.concat %19, %21 : i17, i1
    %23 = comb.icmp bin eq %22, %c0_i18 {sv.namehint = "_legal_address_T_24"} : i18
    %24 = comb.extract %io_req_bits_vaddr from 32 : (i34) -> i2
    %25 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i4
    %26 = comb.xor %25, %c-8_i4 : i4
    %27 = comb.concat %24, %26 : i2, i4
    %28 = comb.icmp bin eq %27, %c0_i6 {sv.namehint = "_legal_address_T_29"} : i6
    %29 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i3
    %30 = comb.extract %io_req_bits_vaddr from 29 : (i34) -> i2
    %31 = comb.xor %30, %c-1_i2 : i2
    %32 = comb.concat %29, %31 : i3, i2
    %33 = comb.icmp bin eq %32, %c0_i5 {sv.namehint = "_legal_address_T_34"} : i5
    %34 = comb.or bin %5, %10, %15, %18, %23, %28, %33 {sv.namehint = "legal_address"} : i1
    %35 = comb.extract %26 from 3 : (i4) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "_cacheable_T_12"} : i1
    %37 = comb.and bin %34, %36 {sv.namehint = "cacheable"} : i1
    %38 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %39 = comb.xor %38, %true : i1
    %40 = comb.xor bin %io_ptw_status_debug, %true {sv.namehint = "_deny_access_to_debug_T"} : i1
    %41 = comb.xor bin %17, %true {sv.namehint = "_deny_access_to_debug_T_5"} : i1
    %42 = comb.and bin %40, %41 {sv.namehint = "deny_access_to_debug"} : i1
    %43 = comb.xor bin %42, %true {sv.namehint = "_prot_x_T_32"} : i1
    %44 = comb.and bin %34, %43, %pmp.io_r {sv.namehint = "prot_r"} : i1
    %45 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %46 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %47 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %48 = comb.concat %45, %46, %47 : i2, i1, i1
    %49 = comb.icmp bin ne %48, %c0_i4 : i4
    %50 = comb.xor bin %49, %true {sv.namehint = "_prot_w_T_4"} : i1
    %51 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %52 = comb.concat %51, %39 : i2, i1
    %53 = comb.icmp bin ne %52, %c0_i3 : i3
    %54 = comb.xor bin %53, %true {sv.namehint = "_prot_w_T_9"} : i1
    %55 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i1
    %56 = comb.xor %55, %true : i1
    %57 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i1
    %58 = comb.concat %57, %56 : i1, i1
    %59 = comb.icmp bin ne %58, %c0_i2 : i2
    %60 = comb.xor bin %59, %true {sv.namehint = "_prot_w_T_14"} : i1
    %61 = comb.extract %26 from 2 : (i4) -> i2
    %62 = comb.icmp bin ne %61, %c0_i2 : i2
    %63 = comb.xor bin %62, %true {sv.namehint = "_prot_w_T_19"} : i1
    %64 = comb.or bin %50, %54, %60, %63 {sv.namehint = "_prot_w_T_30"} : i1
    %65 = comb.and bin %34, %64, %43, %pmp.io_w {sv.namehint = "prot_w"} : i1
    %66 = comb.xor bin %49, %true {sv.namehint = "_prot_pp_T_4"} : i1
    %67 = comb.xor bin %53, %true {sv.namehint = "_prot_pp_T_9"} : i1
    %68 = comb.xor bin %59, %true {sv.namehint = "_prot_pp_T_14"} : i1
    %69 = comb.xor bin %62, %true {sv.namehint = "_prot_pp_T_19"} : i1
    %70 = comb.or bin %66, %67, %68, %69 {sv.namehint = "_prot_pp_T_30"} : i1
    %71 = comb.and bin %34, %70 {sv.namehint = "prot_pp"} : i1
    %72 = comb.xor bin %49, %true {sv.namehint = "_prot_al_T_4"} : i1
    %73 = comb.xor bin %53, %true {sv.namehint = "_prot_al_T_9"} : i1
    %74 = comb.or bin %72, %73 {sv.namehint = "_prot_al_T_30"} : i1
    %75 = comb.and bin %34, %74 {sv.namehint = "prot_al"} : i1
    %76 = comb.xor bin %49, %true {sv.namehint = "_prot_aa_T_4"} : i1
    %77 = comb.xor bin %53, %true {sv.namehint = "_prot_aa_T_9"} : i1
    %78 = comb.or bin %76, %77 {sv.namehint = "_prot_aa_T_30"} : i1
    %79 = comb.and bin %34, %78 {sv.namehint = "prot_aa"} : i1
    %80 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %81 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %82 = comb.extract %io_req_bits_vaddr from 25 : (i34) -> i1
    %83 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %84 = comb.extract %io_req_bits_vaddr from 13 : (i34) -> i1
    %85 = comb.concat %80, %81, %82, %83, %84 : i2, i1, i1, i1, i1
    %86 = comb.icmp bin eq %85, %c0_i6 {sv.namehint = "_prot_eff_T_21"} : i6
    %87 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %88 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %89 = comb.extract %13 from 9 : (i10) -> i1
    %90 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %91 = comb.concat %87, %88, %89, %90 : i2, i1, i1, i1
    %92 = comb.icmp bin eq %91, %c0_i5 {sv.namehint = "_prot_eff_T_26"} : i5
    %93 = comb.xor bin %53, %true {sv.namehint = "_prot_eff_T_31"} : i1
    %94 = comb.xor bin %59, %true {sv.namehint = "_prot_eff_T_36"} : i1
    %95 = comb.or bin %86, %92, %93, %94 {sv.namehint = "_prot_eff_T_42"} : i1
    %96 = comb.and bin %34, %95 {sv.namehint = "prot_eff"} : i1
    %entries_barrier.io_y_u, %entries_barrier.io_y_ae, %entries_barrier.io_y_sw, %entries_barrier.io_y_sx, %entries_barrier.io_y_sr, %entries_barrier.io_y_pw, %entries_barrier.io_y_px, %entries_barrier.io_y_pr, %entries_barrier.io_y_ppp, %entries_barrier.io_y_pal, %entries_barrier.io_y_paa, %entries_barrier.io_y_eff, %entries_barrier.io_y_c = hw.instance "entries_barrier" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier.io_y_u"}
    %entries_barrier_1.io_y_u, %entries_barrier_1.io_y_ae, %entries_barrier_1.io_y_sw, %entries_barrier_1.io_y_sx, %entries_barrier_1.io_y_sr, %entries_barrier_1.io_y_pw, %entries_barrier_1.io_y_px, %entries_barrier_1.io_y_pr, %entries_barrier_1.io_y_ppp, %entries_barrier_1.io_y_pal, %entries_barrier_1.io_y_paa, %entries_barrier_1.io_y_eff, %entries_barrier_1.io_y_c = hw.instance "entries_barrier_1" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_1.io_y_u"}
    %entries_barrier_2.io_y_u, %entries_barrier_2.io_y_ae, %entries_barrier_2.io_y_sw, %entries_barrier_2.io_y_sx, %entries_barrier_2.io_y_sr, %entries_barrier_2.io_y_pw, %entries_barrier_2.io_y_px, %entries_barrier_2.io_y_pr, %entries_barrier_2.io_y_ppp, %entries_barrier_2.io_y_pal, %entries_barrier_2.io_y_paa, %entries_barrier_2.io_y_eff, %entries_barrier_2.io_y_c = hw.instance "entries_barrier_2" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_2.io_y_u"}
    %entries_barrier_3.io_y_u, %entries_barrier_3.io_y_ae, %entries_barrier_3.io_y_sw, %entries_barrier_3.io_y_sx, %entries_barrier_3.io_y_sr, %entries_barrier_3.io_y_pw, %entries_barrier_3.io_y_px, %entries_barrier_3.io_y_pr, %entries_barrier_3.io_y_ppp, %entries_barrier_3.io_y_pal, %entries_barrier_3.io_y_paa, %entries_barrier_3.io_y_eff, %entries_barrier_3.io_y_c = hw.instance "entries_barrier_3" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_3.io_y_u"}
    %entries_barrier_4.io_y_u, %entries_barrier_4.io_y_ae, %entries_barrier_4.io_y_sw, %entries_barrier_4.io_y_sx, %entries_barrier_4.io_y_sr, %entries_barrier_4.io_y_pw, %entries_barrier_4.io_y_px, %entries_barrier_4.io_y_pr, %entries_barrier_4.io_y_ppp, %entries_barrier_4.io_y_pal, %entries_barrier_4.io_y_paa, %entries_barrier_4.io_y_eff, %entries_barrier_4.io_y_c = hw.instance "entries_barrier_4" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_4.io_y_u"}
    %entries_barrier_5.io_y_u, %entries_barrier_5.io_y_ae, %entries_barrier_5.io_y_sw, %entries_barrier_5.io_y_sx, %entries_barrier_5.io_y_sr, %entries_barrier_5.io_y_pw, %entries_barrier_5.io_y_px, %entries_barrier_5.io_y_pr, %entries_barrier_5.io_y_ppp, %entries_barrier_5.io_y_pal, %entries_barrier_5.io_y_paa, %entries_barrier_5.io_y_eff, %entries_barrier_5.io_y_c = hw.instance "entries_barrier_5" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_5.io_y_u"}
    %normal_entries_barrier.io_y_u, %normal_entries_barrier.io_y_ae, %normal_entries_barrier.io_y_sw, %normal_entries_barrier.io_y_sx, %normal_entries_barrier.io_y_sr, %normal_entries_barrier.io_y_pw, %normal_entries_barrier.io_y_px, %normal_entries_barrier.io_y_pr, %normal_entries_barrier.io_y_ppp, %normal_entries_barrier.io_y_pal, %normal_entries_barrier.io_y_paa, %normal_entries_barrier.io_y_eff, %normal_entries_barrier.io_y_c = hw.instance "normal_entries_barrier" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier.io_y_c"}
    %normal_entries_barrier_1.io_y_u, %normal_entries_barrier_1.io_y_ae, %normal_entries_barrier_1.io_y_sw, %normal_entries_barrier_1.io_y_sx, %normal_entries_barrier_1.io_y_sr, %normal_entries_barrier_1.io_y_pw, %normal_entries_barrier_1.io_y_px, %normal_entries_barrier_1.io_y_pr, %normal_entries_barrier_1.io_y_ppp, %normal_entries_barrier_1.io_y_pal, %normal_entries_barrier_1.io_y_paa, %normal_entries_barrier_1.io_y_eff, %normal_entries_barrier_1.io_y_c = hw.instance "normal_entries_barrier_1" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_1.io_y_c"}
    %normal_entries_barrier_2.io_y_u, %normal_entries_barrier_2.io_y_ae, %normal_entries_barrier_2.io_y_sw, %normal_entries_barrier_2.io_y_sx, %normal_entries_barrier_2.io_y_sr, %normal_entries_barrier_2.io_y_pw, %normal_entries_barrier_2.io_y_px, %normal_entries_barrier_2.io_y_pr, %normal_entries_barrier_2.io_y_ppp, %normal_entries_barrier_2.io_y_pal, %normal_entries_barrier_2.io_y_paa, %normal_entries_barrier_2.io_y_eff, %normal_entries_barrier_2.io_y_c = hw.instance "normal_entries_barrier_2" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_2.io_y_c"}
    %normal_entries_barrier_3.io_y_u, %normal_entries_barrier_3.io_y_ae, %normal_entries_barrier_3.io_y_sw, %normal_entries_barrier_3.io_y_sx, %normal_entries_barrier_3.io_y_sr, %normal_entries_barrier_3.io_y_pw, %normal_entries_barrier_3.io_y_px, %normal_entries_barrier_3.io_y_pr, %normal_entries_barrier_3.io_y_ppp, %normal_entries_barrier_3.io_y_pal, %normal_entries_barrier_3.io_y_paa, %normal_entries_barrier_3.io_y_eff, %normal_entries_barrier_3.io_y_c = hw.instance "normal_entries_barrier_3" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_3.io_y_c"}
    %normal_entries_barrier_4.io_y_u, %normal_entries_barrier_4.io_y_ae, %normal_entries_barrier_4.io_y_sw, %normal_entries_barrier_4.io_y_sx, %normal_entries_barrier_4.io_y_sr, %normal_entries_barrier_4.io_y_pw, %normal_entries_barrier_4.io_y_px, %normal_entries_barrier_4.io_y_pr, %normal_entries_barrier_4.io_y_ppp, %normal_entries_barrier_4.io_y_pal, %normal_entries_barrier_4.io_y_paa, %normal_entries_barrier_4.io_y_eff, %normal_entries_barrier_4.io_y_c = hw.instance "normal_entries_barrier_4" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_4.io_y_c"}
    %97 = comb.or %71, %37 {sv.namehint = "ppp_array_if_cached"} : i1
    %98 = comb.or %79, %37 {sv.namehint = "paa_array_if_cached"} : i1
    %99 = comb.or %75, %37 {sv.namehint = "pal_array_if_cached"} : i1
    %100 = comb.concat %c0_i2, %io_req_bits_size : i2, i2
    %101 = comb.shl bin %c1_i4, %100 {sv.namehint = "_misaligned_T"} : i4
    %102 = comb.add %101, %c-1_i4 {sv.namehint = "_misaligned_T_1"} : i4
    %103 = comb.extract %io_req_bits_vaddr from 0 : (i34) -> i4
    %104 = comb.and bin %103, %102 : i4
    %105 = comb.icmp bin ne %104, %c0_i4 {sv.namehint = "misaligned"} : i4
    %106 = comb.icmp bin eq %io_req_bits_cmd, %c6_i5 {sv.namehint = "_cmd_read_T_1"} : i5
    %107 = comb.icmp bin eq %io_req_bits_cmd, %c7_i5 {sv.namehint = "_cmd_write_T_3"} : i5
    %108 = comb.or bin %106, %107 {sv.namehint = "cmd_lrsc"} : i1
    %109 = comb.icmp bin eq %io_req_bits_cmd, %c4_i5 {sv.namehint = "_cmd_write_T_5"} : i5
    %110 = comb.icmp bin eq %io_req_bits_cmd, %c9_i5 {sv.namehint = "_cmd_write_T_6"} : i5
    %111 = comb.icmp bin eq %io_req_bits_cmd, %c10_i5 {sv.namehint = "_cmd_write_T_7"} : i5
    %112 = comb.icmp bin eq %io_req_bits_cmd, %c11_i5 {sv.namehint = "_cmd_write_T_8"} : i5
    %113 = comb.or bin %109, %110, %111, %112 {sv.namehint = "cmd_amo_logical"} : i1
    %114 = comb.icmp bin eq %io_req_bits_cmd, %c8_i5 {sv.namehint = "_cmd_write_T_12"} : i5
    %115 = comb.icmp bin eq %io_req_bits_cmd, %c12_i5 {sv.namehint = "_cmd_write_T_13"} : i5
    %116 = comb.icmp bin eq %io_req_bits_cmd, %c13_i5 {sv.namehint = "_cmd_write_T_14"} : i5
    %117 = comb.icmp bin eq %io_req_bits_cmd, %c14_i5 {sv.namehint = "_cmd_write_T_15"} : i5
    %118 = comb.icmp bin eq %io_req_bits_cmd, %c15_i5 {sv.namehint = "_cmd_write_T_16"} : i5
    %119 = comb.or bin %114, %115, %116, %117, %118 {sv.namehint = "cmd_amo_arithmetic"} : i1
    %120 = comb.icmp bin eq %io_req_bits_cmd, %c-15_i5 {sv.namehint = "cmd_put_partial"} : i5
    %121 = comb.icmp bin eq %io_req_bits_cmd, %c0_i5 {sv.namehint = "_cmd_read_T"} : i5
    %122 = comb.or bin %121, %106, %107, %109, %110, %111, %112, %114, %115, %116, %117, %118 {sv.namehint = "cmd_read"} : i1
    %123 = comb.icmp bin eq %io_req_bits_cmd, %c1_i5 {sv.namehint = "_cmd_write_T"} : i5
    %124 = comb.or bin %123, %120, %107, %109, %110, %111, %112, %114, %115, %116, %117, %118 {sv.namehint = "cmd_write"} : i1
    %125 = comb.icmp bin eq %io_req_bits_cmd, %c5_i5 {sv.namehint = "_cmd_write_perms_T"} : i5
    %126 = comb.icmp bin eq %io_req_bits_cmd, %c-9_i5 {sv.namehint = "_cmd_write_perms_T_1"} : i5
    %127 = comb.or bin %124, %125, %126 {sv.namehint = "cmd_write_perms"} : i1
    %128 = comb.and %105, %96 {sv.namehint = "_ae_array_T"} : i1
    %129 = comb.xor %37, %true {sv.namehint = "_ae_array_T_1"} : i1
    %130 = comb.and %108, %129 {sv.namehint = "_ae_array_T_2"} : i1
    %131 = comb.or %128, %130 {sv.namehint = "ae_array"} : i1
    %132 = comb.xor %44, %true {sv.namehint = "_ae_ld_array_T"} : i1
    %133 = comb.or %131, %132 {sv.namehint = "_ae_ld_array_T_1"} : i1
    %134 = comb.and %122, %133 {sv.namehint = "ae_ld_array"} : i1
    %135 = comb.xor %65, %true {sv.namehint = "_ae_st_array_T"} : i1
    %136 = comb.or %131, %135 {sv.namehint = "_ae_st_array_T_1"} : i1
    %137 = comb.and %127, %136 {sv.namehint = "_ae_st_array_T_2"} : i1
    %138 = comb.xor %97, %true {sv.namehint = "_ae_st_array_T_3"} : i1
    %139 = comb.and %120, %138 {sv.namehint = "_ae_st_array_T_4"} : i1
    %140 = comb.xor %99, %true {sv.namehint = "_ae_st_array_T_6"} : i1
    %141 = comb.and %113, %140 {sv.namehint = "_ae_st_array_T_7"} : i1
    %142 = comb.xor %98, %true {sv.namehint = "_ae_st_array_T_9"} : i1
    %143 = comb.and %119, %142 {sv.namehint = "_ae_st_array_T_10"} : i1
    %144 = comb.or %137, %139, %141, %143 {sv.namehint = "ae_st_array"} : i1
    %145 = comb.xor %96, %true {sv.namehint = "_ma_st_array_T_1"} : i1
    %146 = comb.and %105, %122, %145 {sv.namehint = "ma_ld_array"} : i1
    %147 = comb.and %105, %124, %145 {sv.namehint = "ma_st_array"} : i1
    %148 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "io_resp_paddr"} : (i34) -> i32
    hw.output %148, %false, %false, %134, %144, %146, %147, %37 : i32, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module private @DCacheModuleImpl_Anon_1(in %io_in_0_valid : i1, in %io_in_0_bits_addr : i34, in %io_in_0_bits_idx : i6, in %io_in_2_valid : i1, in %io_in_2_bits_addr : i34, in %io_in_2_bits_idx : i6, in %io_in_2_bits_data : i22, in %io_in_3_valid : i1, in %io_in_3_bits_addr : i34, in %io_in_3_bits_idx : i6, in %io_in_3_bits_data : i22, out io_in_4_ready : i1, in %io_in_4_valid : i1, in %io_in_4_bits_addr : i34, in %io_in_4_bits_idx : i6, in %io_in_4_bits_data : i22, in %io_in_5_bits_addr : i34, in %io_in_5_bits_idx : i6, in %io_in_5_bits_data : i22, out io_in_6_ready : i1, in %io_in_6_valid : i1, in %io_in_6_bits_addr : i34, in %io_in_6_bits_idx : i6, in %io_in_6_bits_data : i22, out io_in_7_ready : i1, in %io_in_7_valid : i1, in %io_in_7_bits_addr : i34, in %io_in_7_bits_idx : i6, in %io_in_7_bits_data : i22, out io_out_valid : i1, out io_out_bits_write : i1, out io_out_bits_addr : i34, out io_out_bits_idx : i6, out io_out_bits_data : i22) {
    %c0_i22 = hw.constant 0 : i22
    %true = hw.constant true
    %0 = comb.mux bin %io_in_6_valid, %io_in_6_bits_data, %io_in_7_bits_data : i22
    %1 = comb.mux bin %io_in_6_valid, %io_in_6_bits_idx, %io_in_7_bits_idx : i6
    %2 = comb.mux bin %io_in_6_valid, %io_in_6_bits_addr, %io_in_7_bits_addr : i34
    %3 = comb.mux bin %io_in_4_valid, %io_in_4_bits_data, %0 : i22
    %4 = comb.mux bin %io_in_4_valid, %io_in_4_bits_idx, %1 : i6
    %5 = comb.mux bin %io_in_4_valid, %io_in_4_bits_addr, %2 : i34
    %6 = comb.mux bin %io_in_3_valid, %io_in_3_bits_data, %3 : i22
    %7 = comb.mux bin %io_in_3_valid, %io_in_3_bits_idx, %4 : i6
    %8 = comb.mux bin %io_in_3_valid, %io_in_3_bits_addr, %5 : i34
    %9 = comb.mux bin %io_in_2_valid, %io_in_2_bits_data, %6 : i22
    %10 = comb.mux bin %io_in_2_valid, %io_in_2_bits_idx, %7 : i6
    %11 = comb.mux bin %io_in_2_valid, %io_in_2_bits_addr, %8 : i34
    %12 = comb.mux bin %io_in_0_valid, %c0_i22, %9 {sv.namehint = "io_out_bits_data"} : i22
    %13 = comb.mux bin %io_in_0_valid, %io_in_0_bits_idx, %10 {sv.namehint = "io_out_bits_idx"} : i6
    %14 = comb.mux bin %io_in_0_valid, %io_in_0_bits_addr, %11 {sv.namehint = "io_out_bits_addr"} : i34
    %15 = comb.or %io_in_0_valid, %io_in_2_valid, %io_in_3_valid, %io_in_4_valid {sv.namehint = "io_out_bits_write"} : i1
    %16 = comb.or bin %io_in_0_valid, %io_in_2_valid, %io_in_3_valid {sv.namehint = "_grant_T_2"} : i1
    %17 = comb.or bin %16, %io_in_4_valid {sv.namehint = "_grant_T_3"} : i1
    %18 = comb.or bin %17, %io_in_6_valid {sv.namehint = "_io_out_valid_T"} : i1
    %19 = comb.xor bin %16, %true {sv.namehint = "grant_4"} : i1
    %20 = comb.xor bin %17, %true {sv.namehint = "grant_6"} : i1
    %21 = comb.xor bin %18, %true {sv.namehint = "grant_7"} : i1
    %22 = comb.or bin %18, %io_in_7_valid {sv.namehint = "io_out_valid"} : i1
    hw.output %19, %20, %21, %22, %15, %14, %13, %12 : i1, i1, i1, i1, i1, i34, i6, i22
  }
  hw.module private @DCacheDataArray(in %clock : !seq.clock, in %io_req_valid : i1, in %io_req_bits_addr : i12, in %io_req_bits_write : i1, in %io_req_bits_wdata : i64, in %io_req_bits_eccMask : i8, out io_resp_0 : i64) {
    %true = hw.constant true
    %0 = comb.extract %io_req_bits_addr from 3 {sv.namehint = "addr"} : (i12) -> i9
    %data_arrays_0 = seq.firmem 1, 1, undefined, port_order {prefix = ""} : <512 x 64, mask 8>
    %1 = seq.firmem.read_write_port %data_arrays_0[%0] = %io_req_bits_wdata if %io_req_bits_write, clock %clock enable %2 mask %io_req_bits_eccMask : <512 x 64, mask 8>, i8
    %2 = comb.or bin %5, %3 : i1
    %3 = comb.and bin %io_req_valid, %io_req_bits_write {sv.namehint = "data_arrays_0_rdata_MPORT_en"} : i1
    %4 = comb.xor bin %io_req_bits_write, %true {sv.namehint = "_rdata_data_T"} : i1
    %5 = comb.and bin %io_req_valid, %4 {sv.namehint = "data_arrays_0_rdata_data_en"} : i1
    hw.output %1 : i64
  }
  hw.module private @DCacheModuleImpl_Anon_2(in %io_in_0_valid : i1, in %io_in_0_bits_addr : i12, in %io_in_0_bits_write : i1, in %io_in_0_bits_wdata : i64, in %io_in_0_bits_eccMask : i8, out io_in_1_ready : i1, in %io_in_1_valid : i1, in %io_in_1_bits_addr : i12, in %io_in_1_bits_write : i1, in %io_in_1_bits_wdata : i64, out io_in_2_ready : i1, in %io_in_2_valid : i1, in %io_in_2_bits_addr : i12, in %io_in_2_bits_wdata : i64, out io_in_3_ready : i1, in %io_in_3_valid : i1, in %io_in_3_bits_addr : i12, in %io_in_3_bits_wdata : i64, out io_out_valid : i1, out io_out_bits_addr : i12, out io_out_bits_write : i1, out io_out_bits_wdata : i64, out io_out_bits_eccMask : i8) {
    %true = hw.constant true
    %c-1_i8 = hw.constant -1 : i8
    %0 = comb.mux bin %io_in_2_valid, %io_in_2_bits_wdata, %io_in_3_bits_wdata : i64
    %1 = comb.mux bin %io_in_2_valid, %io_in_2_bits_addr, %io_in_3_bits_addr : i12
    %2 = comb.mux bin %io_in_1_valid, %io_in_1_bits_wdata, %0 : i64
    %3 = comb.and %io_in_1_valid, %io_in_1_bits_write : i1
    %4 = comb.mux bin %io_in_1_valid, %io_in_1_bits_addr, %1 : i12
    %5 = comb.mux bin %io_in_0_valid, %io_in_0_bits_eccMask, %c-1_i8 {sv.namehint = "io_out_bits_eccMask"} : i8
    %6 = comb.mux bin %io_in_0_valid, %io_in_0_bits_wdata, %2 {sv.namehint = "io_out_bits_wdata"} : i64
    %7 = comb.mux bin %io_in_0_valid, %io_in_0_bits_write, %3 {sv.namehint = "io_out_bits_write"} : i1
    %8 = comb.mux bin %io_in_0_valid, %io_in_0_bits_addr, %4 {sv.namehint = "io_out_bits_addr"} : i12
    %9 = comb.or bin %io_in_0_valid, %io_in_1_valid {sv.namehint = "_grant_T"} : i1
    %10 = comb.or bin %9, %io_in_2_valid {sv.namehint = "_io_out_valid_T"} : i1
    %11 = comb.xor bin %io_in_0_valid, %true {sv.namehint = "grant_1"} : i1
    %12 = comb.xor bin %9, %true {sv.namehint = "grant_2"} : i1
    %13 = comb.xor bin %10, %true {sv.namehint = "grant_3"} : i1
    %14 = comb.or bin %10, %io_in_3_valid {sv.namehint = "io_out_valid"} : i1
    hw.output %11, %12, %13, %14, %8, %7, %6, %5 : i1, i1, i1, i1, i12, i1, i64, i8
  }
  hw.module private @AMOALU(in %io_mask : i8, in %io_cmd : i5, in %io_lhs : i64, in %io_rhs : i64, out io_out : i64) {
    %c-1_i31 = hw.constant -1 : i31
    %c-1_i32 = hw.constant -1 : i32
    %c9_i5 = hw.constant 9 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c8_i5 = hw.constant 8 : i5
    %c14_i5 = hw.constant 14 : i5
    %c12_i5 = hw.constant 12 : i5
    %c15_i5 = hw.constant 15 : i5
    %c13_i5 = hw.constant 13 : i5
    %c-1_i64 = hw.constant -1 : i64
    %c0_i64 = hw.constant 0 : i64
    %0 = comb.icmp bin eq %io_cmd, %c13_i5 {sv.namehint = "_max_T"} : i5
    %1 = comb.icmp bin eq %io_cmd, %c15_i5 {sv.namehint = "_max_T_1"} : i5
    %2 = comb.or bin %0, %1 {sv.namehint = "max"} : i1
    %3 = comb.icmp bin eq %io_cmd, %c12_i5 {sv.namehint = "_min_T"} : i5
    %4 = comb.icmp bin eq %io_cmd, %c14_i5 {sv.namehint = "_min_T_1"} : i5
    %5 = comb.or bin %3, %4 {sv.namehint = "min"} : i1
    %6 = comb.icmp bin eq %io_cmd, %c8_i5 {sv.namehint = "add"} : i5
    %7 = comb.icmp bin eq %io_cmd, %c10_i5 {sv.namehint = "_logic_xor_T_1"} : i5
    %8 = comb.icmp bin eq %io_cmd, %c11_i5 {sv.namehint = "_logic_and_T_1"} : i5
    %9 = comb.or bin %7, %8 {sv.namehint = "logic_and"} : i1
    %10 = comb.icmp bin eq %io_cmd, %c9_i5 {sv.namehint = "_logic_xor_T"} : i5
    %11 = comb.or bin %10, %7 {sv.namehint = "logic_xor"} : i1
    %12 = comb.extract %io_mask from 3 {sv.namehint = "_wmask_T_11"} : (i8) -> i1
    %13 = comb.concat %c-1_i32, %12, %c-1_i31 {sv.namehint = "adder_out_mask"} : i32, i1, i31
    %14 = comb.and bin %io_lhs, %13 {sv.namehint = "_adder_out_T"} : i64
    %15 = comb.and bin %io_rhs, %13 {sv.namehint = "_adder_out_T_1"} : i64
    %16 = comb.add %14, %15 {sv.namehint = "_adder_out_T_2"} : i64
    %17 = comb.extract %io_mask from 4 {sv.namehint = "_wmask_T_12"} : (i8) -> i1
    %18 = comb.extract %io_cmd from 1 : (i5) -> i1
    %19 = comb.extract %io_lhs from 63 {sv.namehint = "_less_T_15"} : (i64) -> i1
    %20 = comb.extract %io_rhs from 63 {sv.namehint = "_less_T_16"} : (i64) -> i1
    %21 = comb.icmp bin eq %19, %20 {sv.namehint = "_less_T_3"} : i1
    %22 = comb.extract %io_lhs from 32 {sv.namehint = "_less_T_7"} : (i64) -> i32
    %23 = comb.extract %io_rhs from 32 {sv.namehint = "_less_T_8"} : (i64) -> i32
    %24 = comb.icmp bin ult %22, %23 {sv.namehint = "_less_T_6"} : i32
    %25 = comb.icmp bin eq %22, %23 {sv.namehint = "_less_T_9"} : i32
    %26 = comb.extract %io_lhs from 0 {sv.namehint = "_less_T_23"} : (i64) -> i32
    %27 = comb.extract %io_rhs from 0 {sv.namehint = "_less_T_24"} : (i64) -> i32
    %28 = comb.icmp bin ult %26, %27 {sv.namehint = "_less_T_12"} : i32
    %29 = comb.and bin %25, %28 {sv.namehint = "_less_T_13"} : i1
    %30 = comb.or bin %24, %29 {sv.namehint = "_less_T_14"} : i1
    %31 = comb.mux bin %18, %20, %19 {sv.namehint = "_less_T_17"} : i1
    %32 = comb.mux bin %21, %30, %31 {sv.namehint = "_less_T_18"} : i1
    %33 = comb.extract %io_mask from 2 {sv.namehint = "_wmask_T_10"} : (i8) -> i1
    %34 = comb.extract %io_lhs from 31 {sv.namehint = "_less_T_26"} : (i64) -> i1
    %35 = comb.extract %io_rhs from 31 {sv.namehint = "_less_T_27"} : (i64) -> i1
    %36 = comb.icmp bin eq %34, %35 {sv.namehint = "_less_T_22"} : i1
    %37 = comb.icmp bin ult %26, %27 {sv.namehint = "_less_T_25"} : i32
    %38 = comb.mux bin %18, %35, %34 {sv.namehint = "_less_T_28"} : i1
    %39 = comb.mux bin %36, %37, %38 {sv.namehint = "_less_T_29"} : i1
    %40 = comb.mux bin %17, %32, %39 {sv.namehint = "less"} : i1
    %41 = comb.mux bin %40, %5, %2 {sv.namehint = "_minmax_T"} : i1
    %42 = comb.mux bin %41, %io_lhs, %io_rhs {sv.namehint = "minmax"} : i64
    %43 = comb.and bin %io_lhs, %io_rhs {sv.namehint = "_logic_T"} : i64
    %44 = comb.mux bin %9, %43, %c0_i64 {sv.namehint = "_logic_T_1"} : i64
    %45 = comb.xor bin %io_lhs, %io_rhs {sv.namehint = "_logic_T_2"} : i64
    %46 = comb.mux bin %11, %45, %c0_i64 {sv.namehint = "_logic_T_3"} : i64
    %47 = comb.or bin %44, %46 {sv.namehint = "logic"} : i64
    %48 = comb.or bin %9, %11 {sv.namehint = "_out_T"} : i1
    %49 = comb.mux bin %48, %47, %42 {sv.namehint = "_out_T_1"} : i64
    %50 = comb.mux bin %6, %16, %49 {sv.namehint = "out"} : i64
    %51 = comb.extract %io_mask from 0 {sv.namehint = "_wmask_T_8"} : (i8) -> i1
    %52 = comb.extract %io_mask from 1 {sv.namehint = "_wmask_T_9"} : (i8) -> i1
    %53 = comb.extract %io_mask from 5 {sv.namehint = "_wmask_T_13"} : (i8) -> i1
    %54 = comb.extract %io_mask from 6 {sv.namehint = "_wmask_T_14"} : (i8) -> i1
    %55 = comb.extract %io_mask from 7 {sv.namehint = "_wmask_T_15"} : (i8) -> i1
    %56 = comb.replicate %51 {sv.namehint = "wmask_lo_lo_lo"} : (i1) -> i8
    %57 = comb.replicate %52 {sv.namehint = "wmask_lo_lo_hi"} : (i1) -> i8
    %58 = comb.replicate %33 {sv.namehint = "wmask_lo_hi_lo"} : (i1) -> i8
    %59 = comb.replicate %12 {sv.namehint = "wmask_lo_hi_hi"} : (i1) -> i8
    %60 = comb.replicate %17 {sv.namehint = "wmask_hi_lo_lo"} : (i1) -> i8
    %61 = comb.replicate %53 {sv.namehint = "wmask_hi_lo_hi"} : (i1) -> i8
    %62 = comb.replicate %54 {sv.namehint = "wmask_hi_hi_lo"} : (i1) -> i8
    %63 = comb.replicate %55 {sv.namehint = "wmask_hi_hi_hi"} : (i1) -> i8
    %64 = comb.concat %63, %62, %61, %60, %59, %58, %57, %56 {sv.namehint = "wmask"} : i8, i8, i8, i8, i8, i8, i8, i8
    %65 = comb.and bin %64, %50 {sv.namehint = "_io_out_T"} : i64
    %66 = comb.xor bin %64, %c-1_i64 {sv.namehint = "_io_out_T_1"} : i64
    %67 = comb.and bin %66, %io_lhs {sv.namehint = "_io_out_T_2"} : i64
    %68 = comb.or bin %65, %67 {sv.namehint = "io_out"} : i64
    hw.output %68 : i64
  }
  hw.module private @DCache(in %gated_clock : !seq.clock, in %reset : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i1, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_size : i4, in %auto_out_b_bits_source : i1, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i1, out auto_out_c_bits_address : i32, out auto_out_c_bits_user_amba_prot_bufferable : i1, out auto_out_c_bits_user_amba_prot_modifiable : i1, out auto_out_c_bits_user_amba_prot_readalloc : i1, out auto_out_c_bits_user_amba_prot_writealloc : i1, out auto_out_c_bits_user_amba_prot_privileged : i1, out auto_out_c_bits_user_amba_prot_secure : i1, out auto_out_c_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i1, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_e_ready : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2, out io_cpu_req_ready : i1, in %io_cpu_req_valid : i1, in %io_cpu_req_bits_addr : i34, in %io_cpu_req_bits_tag : i6, in %io_cpu_req_bits_cmd : i5, in %io_cpu_req_bits_size : i2, in %io_cpu_req_bits_signed : i1, in %io_cpu_req_bits_dprv : i2, in %io_cpu_s1_kill : i1, in %io_cpu_s1_data_data : i64, out io_cpu_s2_nack : i1, out io_cpu_resp_valid : i1, out io_cpu_resp_bits_tag : i6, out io_cpu_resp_bits_data : i64, out io_cpu_resp_bits_replay : i1, out io_cpu_resp_bits_has_data : i1, out io_cpu_resp_bits_data_word_bypass : i64, out io_cpu_replay_next : i1, out io_cpu_s2_xcpt_ma_ld : i1, out io_cpu_s2_xcpt_ma_st : i1, out io_cpu_s2_xcpt_pf_ld : i1, out io_cpu_s2_xcpt_pf_st : i1, out io_cpu_s2_xcpt_ae_ld : i1, out io_cpu_s2_xcpt_ae_st : i1, out io_cpu_ordered : i1, out io_cpu_perf_release : i1, out io_cpu_perf_grant : i1, in %io_ptw_status_debug : i1, in %io_ptw_status_dprv : i2, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_w : i1, in %io_ptw_pmp_0_cfg_r : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_w : i1, in %io_ptw_pmp_1_cfg_r : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_w : i1, in %io_ptw_pmp_2_cfg_r : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_w : i1, in %io_ptw_pmp_3_cfg_r : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_w : i1, in %io_ptw_pmp_4_cfg_r : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_w : i1, in %io_ptw_pmp_5_cfg_r : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_w : i1, in %io_ptw_pmp_6_cfg_r : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_w : i1, in %io_ptw_pmp_7_cfg_r : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32) {
    %c-1_i7 = hw.constant -1 : i7
    %c1_i7 = hw.constant 1 : i7
    %c8_i10 = hw.constant 8 : i10
    %c1_i9 = hw.constant 1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %c3_i5 = hw.constant 3 : i5
    %c5_i5 = hw.constant 5 : i5
    %c1_i5 = hw.constant 1 : i5
    %c15_i5 = hw.constant 15 : i5
    %c14_i5 = hw.constant 14 : i5
    %c13_i5 = hw.constant 13 : i5
    %c12_i5 = hw.constant 12 : i5
    %c8_i5 = hw.constant 8 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c4_i5 = hw.constant 4 : i5
    %c7_i5 = hw.constant 7 : i5
    %c6_i5 = hw.constant 6 : i5
    %false = hw.constant false {sv.namehint = "_a_source_T_2"}
    %true = hw.constant true {sv.namehint = "get_a_mask_size_2"}
    %c0_i8 = hw.constant 0 : i8
    %c0_i2 = hw.constant 0 : i2 {sv.namehint = "voluntaryNewCoh_state"}
    %c0_i34 = hw.constant 0 : i34
    %c0_i5 = hw.constant 0 : i5
    %c3_i7 = hw.constant 3 : i7
    %c0_i7 = hw.constant 0 : i7
    %c0_i32 = hw.constant 0 : i32
    %c-1_i8 = hw.constant -1 : i8
    %c0_i64 = hw.constant 0 : i64
    %c6_i4 = hw.constant 6 : i4
    %c-1_i3 = hw.constant -1 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c0_i4 = hw.constant 0 : i4
    %c0_i3 = hw.constant 0 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c3_i3 = hw.constant 3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i30 = hw.constant 0 : i30
    %c5_i4 = hw.constant 5 : i4
    %c3_i4 = hw.constant 3 : i4
    %c7_i4 = hw.constant 7 : i4
    %c4_i4 = hw.constant 4 : i4
    %c0_i9 = hw.constant 0 : i9
    %c-49_i7 = hw.constant -49 : i7
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-9_i5 = hw.constant -9 : i5
    %c-1_i2 = hw.constant -1 : i2
    %c2_i4 = hw.constant 2 : i4
    %c1_i4 = hw.constant 1 : i4
    %c0_i6 = hw.constant 0 : i6
    %c-12_i5 = hw.constant -12 : i5
    %c-15_i5 = hw.constant -15 : i5
    %c-1_i4 = hw.constant -1 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c-4_i4 = hw.constant -4 : i4
    %c-8_i4 = hw.constant -8 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c-1_i9 = hw.constant -1 : i9
    %c0_i23 = hw.constant 0 : i23
    %0 = seq.from_clock %gated_clock
    %tlb.io_resp_paddr, %tlb.io_resp_pf_ld, %tlb.io_resp_pf_st, %tlb.io_resp_ae_ld, %tlb.io_resp_ae_st, %tlb.io_resp_ma_ld, %tlb.io_resp_ma_st, %tlb.io_resp_cacheable = hw.instance "tlb" @TLB(io_req_bits_vaddr: %s1_tlb_req_vaddr: i34, io_req_bits_size: %s1_tlb_req_size: i2, io_req_bits_cmd: %s1_tlb_req_cmd: i5, io_ptw_status_debug: %io_ptw_status_debug: i1, io_ptw_status_dprv: %io_ptw_status_dprv: i2, io_ptw_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_w: %io_ptw_pmp_0_cfg_w: i1, io_ptw_pmp_0_cfg_r: %io_ptw_pmp_0_cfg_r: i1, io_ptw_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_ptw_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_w: %io_ptw_pmp_1_cfg_w: i1, io_ptw_pmp_1_cfg_r: %io_ptw_pmp_1_cfg_r: i1, io_ptw_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_ptw_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_w: %io_ptw_pmp_2_cfg_w: i1, io_ptw_pmp_2_cfg_r: %io_ptw_pmp_2_cfg_r: i1, io_ptw_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_ptw_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_w: %io_ptw_pmp_3_cfg_w: i1, io_ptw_pmp_3_cfg_r: %io_ptw_pmp_3_cfg_r: i1, io_ptw_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_ptw_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_w: %io_ptw_pmp_4_cfg_w: i1, io_ptw_pmp_4_cfg_r: %io_ptw_pmp_4_cfg_r: i1, io_ptw_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_ptw_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_w: %io_ptw_pmp_5_cfg_w: i1, io_ptw_pmp_5_cfg_r: %io_ptw_pmp_5_cfg_r: i1, io_ptw_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_ptw_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_w: %io_ptw_pmp_6_cfg_w: i1, io_ptw_pmp_6_cfg_r: %io_ptw_pmp_6_cfg_r: i1, io_ptw_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_ptw_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_w: %io_ptw_pmp_7_cfg_w: i1, io_ptw_pmp_7_cfg_r: %io_ptw_pmp_7_cfg_r: i1, io_ptw_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_ptw_pmp_7_mask: %io_ptw_pmp_7_mask: i32) -> (io_resp_paddr: i32, io_resp_pf_ld: i1, io_resp_pf_st: i1, io_resp_ae_ld: i1, io_resp_ae_st: i1, io_resp_ma_ld: i1, io_resp_ma_st: i1, io_resp_cacheable: i1) {sv.namehint = "tlb.io_resp_paddr"}
    %pma_checker.io_resp_paddr, %pma_checker.io_resp_pf_ld, %pma_checker.io_resp_pf_st, %pma_checker.io_resp_ae_ld, %pma_checker.io_resp_ae_st, %pma_checker.io_resp_ma_ld, %pma_checker.io_resp_ma_st, %pma_checker.io_resp_cacheable = hw.instance "pma_checker" @TLB(io_req_bits_vaddr: %c0_i34: i34, io_req_bits_size: %s1_req_size: i2, io_req_bits_cmd: %s1_req_cmd: i5, io_ptw_status_debug: %false: i1, io_ptw_status_dprv: %c0_i2: i2, io_ptw_pmp_0_cfg_l: %false: i1, io_ptw_pmp_0_cfg_a: %c0_i2: i2, io_ptw_pmp_0_cfg_w: %false: i1, io_ptw_pmp_0_cfg_r: %false: i1, io_ptw_pmp_0_addr: %c0_i30: i30, io_ptw_pmp_0_mask: %c0_i32: i32, io_ptw_pmp_1_cfg_l: %false: i1, io_ptw_pmp_1_cfg_a: %c0_i2: i2, io_ptw_pmp_1_cfg_w: %false: i1, io_ptw_pmp_1_cfg_r: %false: i1, io_ptw_pmp_1_addr: %c0_i30: i30, io_ptw_pmp_1_mask: %c0_i32: i32, io_ptw_pmp_2_cfg_l: %false: i1, io_ptw_pmp_2_cfg_a: %c0_i2: i2, io_ptw_pmp_2_cfg_w: %false: i1, io_ptw_pmp_2_cfg_r: %false: i1, io_ptw_pmp_2_addr: %c0_i30: i30, io_ptw_pmp_2_mask: %c0_i32: i32, io_ptw_pmp_3_cfg_l: %false: i1, io_ptw_pmp_3_cfg_a: %c0_i2: i2, io_ptw_pmp_3_cfg_w: %false: i1, io_ptw_pmp_3_cfg_r: %false: i1, io_ptw_pmp_3_addr: %c0_i30: i30, io_ptw_pmp_3_mask: %c0_i32: i32, io_ptw_pmp_4_cfg_l: %false: i1, io_ptw_pmp_4_cfg_a: %c0_i2: i2, io_ptw_pmp_4_cfg_w: %false: i1, io_ptw_pmp_4_cfg_r: %false: i1, io_ptw_pmp_4_addr: %c0_i30: i30, io_ptw_pmp_4_mask: %c0_i32: i32, io_ptw_pmp_5_cfg_l: %false: i1, io_ptw_pmp_5_cfg_a: %c0_i2: i2, io_ptw_pmp_5_cfg_w: %false: i1, io_ptw_pmp_5_cfg_r: %false: i1, io_ptw_pmp_5_addr: %c0_i30: i30, io_ptw_pmp_5_mask: %c0_i32: i32, io_ptw_pmp_6_cfg_l: %false: i1, io_ptw_pmp_6_cfg_a: %c0_i2: i2, io_ptw_pmp_6_cfg_w: %false: i1, io_ptw_pmp_6_cfg_r: %false: i1, io_ptw_pmp_6_addr: %c0_i30: i30, io_ptw_pmp_6_mask: %c0_i32: i32, io_ptw_pmp_7_cfg_l: %false: i1, io_ptw_pmp_7_cfg_a: %c0_i2: i2, io_ptw_pmp_7_cfg_w: %false: i1, io_ptw_pmp_7_cfg_r: %false: i1, io_ptw_pmp_7_addr: %c0_i30: i30, io_ptw_pmp_7_mask: %c0_i32: i32) -> (io_resp_paddr: i32, io_resp_pf_ld: i1, io_resp_pf_st: i1, io_resp_ae_ld: i1, io_resp_ae_st: i1, io_resp_ma_ld: i1, io_resp_ma_st: i1, io_resp_cacheable: i1) {sv.namehint = "pma_checker.io_resp_cacheable"}
    %metaArb.io_in_4_ready, %metaArb.io_in_6_ready, %metaArb.io_in_7_ready, %metaArb.io_out_valid, %metaArb.io_out_bits_write, %metaArb.io_out_bits_addr, %metaArb.io_out_bits_idx, %metaArb.io_out_bits_data = hw.instance "metaArb" @DCacheModuleImpl_Anon_1(io_in_0_valid: %resetting: i1, io_in_0_bits_addr: %1230: i34, io_in_0_bits_idx: %flushCounter: i6, io_in_2_valid: %266: i1, io_in_2_bits_addr: %270: i34, io_in_2_bits_idx: %269: i6, io_in_2_bits_data: %272: i22, io_in_3_valid: %1000: i1, io_in_3_bits_addr: %1001: i34, io_in_3_bits_idx: %269: i6, io_in_3_bits_data: %1013: i22, io_in_4_valid: %1165: i1, io_in_4_bits_addr: %1167: i34, io_in_4_bits_idx: %268: i6, io_in_4_bits_data: %1169: i22, io_in_5_bits_addr: %1230: i34, io_in_5_bits_idx: %flushCounter: i6, io_in_5_bits_data: %1169: i22, io_in_6_valid: %1115: i1, io_in_6_bits_addr: %1118: i34, io_in_6_bits_idx: %1116: i6, io_in_6_bits_data: %1169: i22, io_in_7_valid: %io_cpu_req_valid: i1, io_in_7_bits_addr: %io_cpu_req_bits_addr: i34, io_in_7_bits_idx: %87: i6, io_in_7_bits_data: %1169: i22) -> (io_in_4_ready: i1, io_in_6_ready: i1, io_in_7_ready: i1, io_out_valid: i1, io_out_bits_write: i1, io_out_bits_addr: i34, io_out_bits_idx: i6, io_out_bits_data: i22) {sv.namehint = "readAddr"}
    %tag_array_0 = seq.firmem 1, 1, undefined, port_order {prefix = ""} : <64 x 22>
    %1 = seq.firmem.read_write_port %tag_array_0[%metaArb.io_out_bits_idx] = %metaArb.io_out_bits_data if %metaArb.io_out_bits_write, clock %gated_clock enable %2 {sv.namehint = "tag_array_s1_meta_data_0"} : <64 x 22>
    %2 = comb.or bin %95, %94 : i1
    %data.io_resp_0 = hw.instance "data" @DCacheDataArray(clock: %gated_clock: !seq.clock, io_req_valid: %dataArb.io_out_valid: i1, io_req_bits_addr: %dataArb.io_out_bits_addr: i12, io_req_bits_write: %dataArb.io_out_bits_write: i1, io_req_bits_wdata: %dataArb.io_out_bits_wdata: i64, io_req_bits_eccMask: %dataArb.io_out_bits_eccMask: i8) -> (io_resp_0: i64) {sv.namehint = "data.io_resp_0"}
    %dataArb.io_in_1_ready, %dataArb.io_in_2_ready, %dataArb.io_in_3_ready, %dataArb.io_out_valid, %dataArb.io_out_bits_addr, %dataArb.io_out_bits_write, %dataArb.io_out_bits_wdata, %dataArb.io_out_bits_eccMask = hw.instance "dataArb" @DCacheModuleImpl_Anon_2(io_in_0_valid: %364: i1, io_in_0_bits_addr: %367: i12, io_in_0_bits_write: %332: i1, io_in_0_bits_wdata: %368: i64, io_in_0_bits_eccMask: %369: i8, io_in_1_valid: %1024: i1, io_in_1_bits_addr: %998: i12, io_in_1_bits_write: %1027: i1, io_in_1_bits_wdata: %auto_out_d_bits_data: i64, io_in_2_valid: %1161: i1, io_in_2_bits_addr: %1163: i12, io_in_2_bits_wdata: %auto_out_d_bits_data: i64, io_in_3_valid: %77: i1, io_in_3_bits_addr: %79: i12, io_in_3_bits_wdata: %auto_out_d_bits_data: i64) -> (io_in_1_ready: i1, io_in_2_ready: i1, io_in_3_ready: i1, io_out_valid: i1, io_out_bits_addr: i12, io_out_bits_write: i1, io_out_bits_wdata: i64, io_out_bits_eccMask: i8) {sv.namehint = "dataArb.io_out_valid"}
    %3 = comb.and bin %1022, %io_cpu_req_valid {sv.namehint = "s1_valid_x9"} : i1
    %s1_valid = seq.firreg %3 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %4 = comb.and bin %1040, %auto_out_b_valid {sv.namehint = "s1_probe_x12"} : i1
    %s1_probe = seq.firreg %1121 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %probe_bits_param = seq.firreg %1086 clock %gated_clock {firrtl.random_init_start = 6 : ui64} : i2
    %probe_bits_size = seq.firreg %1087 clock %gated_clock {firrtl.random_init_start = 8 : ui64, sv.namehint = "dirtyReleaseMessage_size"} : i4
    %probe_bits_source = seq.firreg %1089 clock %gated_clock {firrtl.random_init_start = 12 : ui64, sv.namehint = "probe_bits_source"} : i1
    %probe_bits_address = seq.firreg %1090 clock %gated_clock {firrtl.random_init_start = 13 : ui64, sv.namehint = "probe_bits_address"} : i32
    %5 = comb.mux bin %4, %auto_out_b_bits_address, %probe_bits_address : i32
    %6 = comb.mux bin %4, %auto_out_b_bits_source, %probe_bits_source : i1
    %7 = comb.mux bin %4, %auto_out_b_bits_size, %probe_bits_size : i4
    %8 = comb.mux bin %4, %auto_out_b_bits_param, %probe_bits_param : i2
    %9 = comb.xor bin %io_cpu_s1_kill, %true {sv.namehint = "_tlb_io_sfence_valid_T"} : i1
    %10 = comb.xor bin %1113, %true {sv.namehint = "_s1_xcpt_valid_T_2"} : i1
    %11 = comb.and bin %s1_valid, %10 {sv.namehint = "s1_valid_not_nacked"} : i1
    %12 = comb.xor bin %metaArb.io_out_bits_write, %true {sv.namehint = "_s0_clk_en_T"} : i1
    %13 = comb.and bin %metaArb.io_out_valid, %12 {sv.namehint = "s0_clk_en"} : i1
    %14 = comb.extract %metaArb.io_out_bits_addr from 6 {sv.namehint = "s0_req_addr_hi"} : (i34) -> i28
    %15 = comb.extract %io_cpu_req_bits_addr from 0 {sv.namehint = "s0_req_addr_lo"} : (i34) -> i6
    %16 = comb.concat %14, %15 {sv.namehint = "s0_req_addr"} : i28, i6
    %17 = comb.xor bin %metaArb.io_in_7_ready, %true : i1
    %s1_vaddr = seq.firreg %23 clock %gated_clock {firrtl.random_init_start = 120 : ui64} : i34
    %s1_req_tag = seq.firreg %22 clock %gated_clock {firrtl.random_init_start = 154 : ui64} : i6
    %s1_req_cmd = seq.firreg %21 clock %gated_clock {firrtl.random_init_start = 160 : ui64, sv.namehint = "s1_req_cmd"} : i5
    %s1_req_size = seq.firreg %20 clock %gated_clock {firrtl.random_init_start = 165 : ui64, sv.namehint = "s1_req_size"} : i2
    %s1_req_signed = seq.firreg %19 clock %gated_clock {firrtl.random_init_start = 167 : ui64} : i1
    %s1_req_dprv = seq.firreg %18 clock %gated_clock {firrtl.random_init_start = 168 : ui64} : i2
    %18 = comb.mux bin %13, %io_cpu_req_bits_dprv, %s1_req_dprv : i2
    %19 = comb.mux bin %13, %io_cpu_req_bits_signed, %s1_req_signed : i1
    %20 = comb.mux bin %13, %io_cpu_req_bits_size, %s1_req_size : i2
    %21 = comb.mux bin %13, %io_cpu_req_bits_cmd, %s1_req_cmd : i5
    %22 = comb.mux bin %13, %io_cpu_req_bits_tag, %s1_req_tag : i6
    %23 = comb.mux bin %13, %16, %s1_vaddr : i34
    %24 = comb.extract %s1_vaddr from 0 {sv.namehint = "s1_vaddr_lo"} : (i34) -> i12
    %s1_tlb_req_vaddr = seq.firreg %27 clock %gated_clock {firrtl.random_init_start = 245 : ui64, sv.namehint = "s1_tlb_req_vaddr"} : i34
    %s1_tlb_req_size = seq.firreg %26 clock %gated_clock {firrtl.random_init_start = 280 : ui64, sv.namehint = "s1_tlb_req_size"} : i2
    %s1_tlb_req_cmd = seq.firreg %25 clock %gated_clock {firrtl.random_init_start = 282 : ui64, sv.namehint = "s1_tlb_req_cmd"} : i5
    %25 = comb.mux bin %13, %io_cpu_req_bits_cmd, %s1_tlb_req_cmd : i5
    %26 = comb.mux bin %13, %io_cpu_req_bits_size, %s1_tlb_req_size : i2
    %27 = comb.mux bin %13, %16, %s1_tlb_req_vaddr : i34
    %28 = comb.icmp bin eq %s1_req_cmd, %c0_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_1"} : i5
    %29 = comb.icmp bin eq %s1_req_cmd, %c6_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_2"} : i5
    %30 = comb.icmp bin eq %s1_req_cmd, %c7_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_27"} : i5
    %31 = comb.icmp bin eq %s1_req_cmd, %c4_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_29"} : i5
    %32 = comb.icmp bin eq %s1_req_cmd, %c9_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_30"} : i5
    %33 = comb.icmp bin eq %s1_req_cmd, %c10_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_31"} : i5
    %34 = comb.icmp bin eq %s1_req_cmd, %c11_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_32"} : i5
    %35 = comb.icmp bin eq %s1_req_cmd, %c8_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_36"} : i5
    %36 = comb.icmp bin eq %s1_req_cmd, %c12_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_37"} : i5
    %37 = comb.icmp bin eq %s1_req_cmd, %c13_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_38"} : i5
    %38 = comb.icmp bin eq %s1_req_cmd, %c14_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_39"} : i5
    %39 = comb.icmp bin eq %s1_req_cmd, %c15_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_40"} : i5
    %40 = comb.or bin %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39 {sv.namehint = "s1_read"} : i1
    %41 = comb.icmp bin eq %s1_req_cmd, %c1_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_24"} : i5
    %42 = comb.icmp bin eq %s1_req_cmd, %c-15_i5 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_49"} : i5
    %43 = comb.or bin %41, %42, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39 {sv.namehint = "s1_write"} : i1
    %44 = comb.icmp bin eq %s1_req_cmd, %c5_i5 {sv.namehint = "_s1_flush_line_T"} : i5
    %45 = comb.extract %s1_req_size from 0 {sv.namehint = "_tlb_io_sfence_bits_rs1_T"} : (i2) -> i1
    %46 = comb.and bin %44, %45 {sv.namehint = "s1_flush_line"} : i1
    %s1_flush_valid = seq.firreg %false clock %gated_clock {firrtl.random_init_start = 287 : ui64} : i1
    %cached_grant_wait = seq.firreg %929 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 415 : ui64} : i1
    %resetting = seq.firreg %1235 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 416 : ui64, sv.namehint = "resetting"} : i1
    %flushCounter = seq.firreg %1232 clock %gated_clock reset sync %reset, %c0_i6 {firrtl.random_init_start = 417 : ui64, sv.namehint = "flushCounter"} : i6
    %release_ack_wait = seq.firreg %1157 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 423 : ui64} : i1
    %release_ack_dirty = seq.firreg %1158 clock %gated_clock {firrtl.random_init_start = 424 : ui64} : i1
    %release_ack_addr = seq.firreg %1159 clock %gated_clock {firrtl.random_init_start = 425 : ui64} : i32
    %release_state = seq.firreg %1171 clock %gated_clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 457 : ui64} : i4
    %47 = comb.icmp bin eq %release_state, %c1_i4 {sv.namehint = "_canAcceptCachedGrant_T"} : i4
    %48 = comb.icmp bin eq %release_state, %c2_i4 {sv.namehint = "_inWriteback_T_1"} : i4
    %49 = comb.or bin %47, %48 {sv.namehint = "inWriteback"} : i1
    %50 = comb.icmp bin eq %release_state, %c0_i4 {sv.namehint = "_s1_flush_valid_T_5"} : i4
    %51 = comb.xor bin %cached_grant_wait, %true {sv.namehint = "_io_cpu_req_ready_T_1"} : i1
    %52 = comb.and bin %50, %51, %10 {sv.namehint = "_io_cpu_req_ready_T_4"} : i1
    %uncachedInFlight_0 = seq.firreg %945 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 463 : ui64} : i1
    %uncachedReqs_0_addr = seq.firreg %881 clock %gated_clock {firrtl.random_init_start = 464 : ui64, sv.namehint = "uncachedResp_addr"} : i34
    %uncachedReqs_0_tag = seq.firreg %882 clock %gated_clock {firrtl.random_init_start = 498 : ui64, sv.namehint = "uncachedResp_tag"} : i6
    %uncachedReqs_0_size = seq.firreg %883 clock %gated_clock {firrtl.random_init_start = 509 : ui64, sv.namehint = "uncachedResp_size"} : i2
    %uncachedReqs_0_signed = seq.firreg %884 clock %gated_clock {firrtl.random_init_start = 511 : ui64, sv.namehint = "uncachedResp_signed"} : i1
    %53 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c0_i5 {sv.namehint = "_pstore_drain_opportunistic_T"} : i5
    %54 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c6_i5 {sv.namehint = "_pstore_drain_opportunistic_T_1"} : i5
    %55 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c7_i5 {sv.namehint = "_pstore_drain_opportunistic_T_26"} : i5
    %56 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c4_i5 {sv.namehint = "_pstore_drain_opportunistic_T_28"} : i5
    %57 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c9_i5 {sv.namehint = "_pstore_drain_opportunistic_T_29"} : i5
    %58 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c10_i5 {sv.namehint = "_pstore_drain_opportunistic_T_30"} : i5
    %59 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c11_i5 {sv.namehint = "_pstore_drain_opportunistic_T_31"} : i5
    %60 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c8_i5 {sv.namehint = "_pstore_drain_opportunistic_T_35"} : i5
    %61 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c12_i5 {sv.namehint = "_pstore_drain_opportunistic_T_36"} : i5
    %62 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c13_i5 {sv.namehint = "_pstore_drain_opportunistic_T_37"} : i5
    %63 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c14_i5 {sv.namehint = "_pstore_drain_opportunistic_T_38"} : i5
    %64 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c15_i5 {sv.namehint = "_pstore_drain_opportunistic_T_39"} : i5
    %65 = comb.or bin %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64 {sv.namehint = "s0_read"} : i1
    %66 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c1_i5 {sv.namehint = "_pstore_drain_opportunistic_T_23"} : i5
    %67 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c3_i5 {sv.namehint = "_pstore_drain_opportunistic_res_T_1"} : i5
    %68 = comb.or bin %66, %67 {sv.namehint = "_dataArb_io_in_3_valid_res_T_2"} : i1
    %69 = comb.xor bin %68, %true {sv.namehint = "res"} : i1
    %70 = comb.icmp bin eq %io_cpu_req_bits_cmd, %c-15_i5 {sv.namehint = "_pstore_drain_opportunistic_T_48"} : i5
    %71 = comb.or bin %66, %70, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64 {sv.namehint = "_dataArb_io_in_3_valid_T_45"} : i1
    %72 = comb.and bin %71, %70 {sv.namehint = "_dataArb_io_in_3_valid_T_49"} : i1
    %73 = comb.or bin %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %72 {sv.namehint = "_dataArb_io_in_3_valid_T_50"} : i1
    %74 = comb.xor bin %73, %true {sv.namehint = "_dataArb_io_in_3_valid_T_51"} : i1
    %75 = comb.or bin %74, %69, %reset {sv.namehint = "_dataArb_io_in_3_valid_T_54"} : i1
    %76 = comb.xor bin %75, %true {sv.namehint = "_dataArb_io_in_3_valid_T_55"} : i1
    %77 = comb.and bin %io_cpu_req_valid, %69 {sv.namehint = "dataArb.io_in_3_valid"} : i1
    %78 = comb.extract %io_cpu_req_bits_addr from 12 {sv.namehint = "dataArb_io_in_3_bits_addr_hi"} : (i34) -> i22
    %79 = comb.extract %io_cpu_req_bits_addr from 0 {sv.namehint = "dataArb.io_in_3_bits_addr"} : (i34) -> i12
    %80 = comb.xor bin %dataArb.io_in_3_ready, %true : i1
    %81 = comb.and bin %80, %65 : i1
    %82 = comb.or bin %66, %70, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64 {sv.namehint = "_s1_did_read_T_45"} : i1
    %83 = comb.and bin %82, %70 {sv.namehint = "_s1_did_read_T_49"} : i1
    %84 = comb.or bin %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %83 {sv.namehint = "_s1_did_read_T_50"} : i1
    %85 = comb.and bin %dataArb.io_in_3_ready, %io_cpu_req_valid, %84 {sv.namehint = "_s1_did_read_T_52"} : i1
    %s1_did_read = seq.firreg %86 clock %gated_clock {firrtl.random_init_start = 589 : ui64} : i1
    %86 = comb.mux bin %13, %85, %s1_did_read : i1
    %87 = comb.extract %io_cpu_req_bits_addr from 6 {sv.namehint = "metaArb.io_in_7_bits_idx"} : (i34) -> i6
    %88 = comb.icmp bin eq %s1_req_cmd, %c-9_i5 {sv.namehint = "_s1_cmd_uses_tlb_T_1"} : i5
    %89 = comb.or bin %40, %43, %46, %88 {sv.namehint = "s1_cmd_uses_tlb"} : i1
    %90 = comb.or bin %17, %81 : i1
    %91 = comb.xor %90, %true : i1
    %92 = comb.and %91, %52 : i1
    %93 = comb.extract %tlb.io_resp_paddr from 12 {sv.namehint = "_s1_paddr_T_1"} : (i32) -> i20
    %94 = comb.and bin %metaArb.io_out_valid, %metaArb.io_out_bits_write {sv.namehint = "writeEnable"} : i1
    %95 = comb.and bin %metaArb.io_out_valid, %12 {sv.namehint = "readEnable"} : i1
    %96 = comb.extract %1 from 0 {sv.namehint = "s1_meta_uncorrected_0_tag"} : (i22) -> i20
    %97 = comb.extract %1 from 20 {sv.namehint = "s1_meta_uncorrected_0_coh_state"} : (i22) -> i2
    %98 = comb.icmp bin eq %96, %93 : i20
    %99 = comb.xor bin %s1_flush_valid, %true {sv.namehint = "_s1_flush_valid_T_1"} : i1
    %100 = comb.and bin %98, %99 : i1
    %101 = comb.mux bin %100, %97, %c0_i2 {sv.namehint = "s1_meta_hit_state_state"} : i2
    %102 = comb.extract %s1_vaddr from 0 {sv.namehint = "_s1_mask_xwr_lower_T"} : (i34) -> i1
    %103 = comb.icmp bin ne %s1_req_size, %c0_i2 {sv.namehint = "_s1_mask_xwr_upper_T_3"} : i2
    %104 = comb.or bin %102, %103 {sv.namehint = "s1_mask_xwr_hi"} : i1
    %105 = comb.xor bin %102, %true {sv.namehint = "s1_mask_xwr_lo"} : i1
    %106 = comb.concat %104, %105 {sv.namehint = "_s1_mask_xwr_T"} : i1, i1
    %107 = comb.extract %s1_vaddr from 1 {sv.namehint = "_s1_mask_xwr_lower_T_1"} : (i34) -> i1
    %108 = comb.mux bin %107, %106, %c0_i2 {sv.namehint = "_s1_mask_xwr_upper_T_5"} : i2
    %109 = comb.extract %s1_req_size from 1 {sv.namehint = "_s1_mask_xwr_upper_T_6"} : (i2) -> i1
    %110 = comb.replicate %109 {sv.namehint = "_s1_mask_xwr_upper_T_7"} : (i1) -> i2
    %111 = comb.or bin %108, %110 {sv.namehint = "s1_mask_xwr_hi_1"} : i2
    %112 = comb.mux bin %107, %c0_i2, %106 {sv.namehint = "s1_mask_xwr_lo_1"} : i2
    %113 = comb.concat %111, %112 {sv.namehint = "_s1_mask_xwr_T_1"} : i2, i2
    %114 = comb.extract %s1_vaddr from 2 {sv.namehint = "_s1_mask_xwr_lower_T_2"} : (i34) -> i1
    %115 = comb.mux bin %114, %113, %c0_i4 {sv.namehint = "_s1_mask_xwr_upper_T_9"} : i4
    %116 = comb.icmp bin eq %s1_req_size, %c-1_i2 {sv.namehint = "_s1_mask_xwr_upper_T_10"} : i2
    %117 = comb.replicate %116 {sv.namehint = "_s1_mask_xwr_upper_T_11"} : (i1) -> i4
    %118 = comb.or bin %115, %117 {sv.namehint = "s1_mask_xwr_hi_2"} : i4
    %119 = comb.mux bin %114, %c0_i4, %113 {sv.namehint = "s1_mask_xwr_lo_2"} : i4
    %120 = comb.concat %118, %119 {sv.namehint = "s1_mask_xwr"} : i4, i4
    %121 = comb.mux bin %42, %c0_i8, %120 {sv.namehint = "s1_mask"} : i8
    %122 = comb.icmp bin ne %s1_req_cmd, %c-12_i5 {sv.namehint = "_s2_valid_x37_T"} : i5
    %123 = comb.and bin %s1_valid, %9, %122 {sv.namehint = "s2_valid_x37"} : i1
    %s2_valid = seq.firreg %123 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 591 : ui64} : i1
    %124 = comb.concat %1179, %1180, %1175, %1176, %1177, %1178 {sv.namehint = "_s2_valid_no_xcpt_T"} : i1, i1, i1, i1, i1, i1
    %125 = comb.icmp bin eq %124, %c0_i6 {sv.namehint = "_s2_valid_no_xcpt_T_2"} : i6
    %126 = comb.and bin %s2_valid, %125 {sv.namehint = "s2_valid_no_xcpt"} : i1
    %s2_probe = seq.firreg %s1_probe clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 592 : ui64} : i1
    %127 = comb.icmp bin ne %release_state, %c0_i4 {sv.namehint = "_clock_en_reg_T_13"} : i4
    %128 = comb.or bin %s1_probe, %s2_probe, %127 {sv.namehint = "releaseInFlight"} : i1
    %s2_not_nacked_in_s1 = seq.firreg %10 clock %gated_clock {firrtl.random_init_start = 593 : ui64} : i1
    %129 = comb.and bin %126, %s2_not_nacked_in_s1 {sv.namehint = "s2_valid_masked"} : i1
    %s2_req_addr = seq.firreg %973 clock %gated_clock {firrtl.random_init_start = 594 : ui64} : i34
    %s2_req_tag = seq.firreg %966 clock %gated_clock {firrtl.random_init_start = 628 : ui64, sv.namehint = "s2_req_tag"} : i6
    %s2_req_cmd = seq.firreg %954 clock %gated_clock {firrtl.random_init_start = 634 : ui64} : i5
    %size = seq.firreg %958 clock %gated_clock {firrtl.random_init_start = 639 : ui64} : i2
    %s2_req_signed = seq.firreg %962 clock %gated_clock {firrtl.random_init_start = 641 : ui64} : i1
    %s2_req_dprv = seq.firreg %137 clock %gated_clock {firrtl.random_init_start = 642 : ui64} : i2
    %130 = comb.icmp bin eq %s2_req_cmd, %c5_i5 {sv.namehint = "_s2_cmd_flush_line_T"} : i5
    %131 = comb.extract %size from 0 {sv.namehint = "_s2_cmd_flush_line_T_1"} : (i2) -> i1
    %s2_tlb_xcpt_pf_ld = seq.firreg %140 clock %gated_clock {firrtl.random_init_start = 752 : ui64} : i1
    %s2_tlb_xcpt_pf_st = seq.firreg %141 clock %gated_clock {firrtl.random_init_start = 753 : ui64} : i1
    %s2_tlb_xcpt_ae_ld = seq.firreg %142 clock %gated_clock {firrtl.random_init_start = 755 : ui64} : i1
    %s2_tlb_xcpt_ae_st = seq.firreg %143 clock %gated_clock {firrtl.random_init_start = 756 : ui64} : i1
    %s2_tlb_xcpt_ma_ld = seq.firreg %144 clock %gated_clock {firrtl.random_init_start = 758 : ui64} : i1
    %s2_tlb_xcpt_ma_st = seq.firreg %145 clock %gated_clock {firrtl.random_init_start = 759 : ui64} : i1
    %s2_pma_cacheable = seq.firreg %146 clock %gated_clock {firrtl.random_init_start = 806 : ui64, sv.namehint = "s2_pma_cacheable"} : i1
    %132 = comb.or bin %11, %s1_flush_valid {sv.namehint = "_s2_victim_way_T"} : i1
    %133 = comb.mux bin %132, %s1_req_tag, %s2_req_tag : i6
    %134 = comb.mux bin %132, %s1_req_cmd, %s2_req_cmd : i5
    %135 = comb.mux bin %132, %s1_req_size, %size : i2
    %136 = comb.mux bin %132, %s1_req_signed, %s2_req_signed : i1
    %137 = comb.mux bin %132, %s1_req_dprv, %s2_req_dprv : i2
    %138 = comb.concat %c0_i2, %93, %24 : i2, i20, i12
    %139 = comb.mux bin %132, %138, %s2_req_addr : i34
    %140 = comb.mux bin %132, %tlb.io_resp_pf_ld, %s2_tlb_xcpt_pf_ld : i1
    %141 = comb.mux bin %132, %tlb.io_resp_pf_st, %s2_tlb_xcpt_pf_st : i1
    %142 = comb.mux bin %132, %tlb.io_resp_ae_ld, %s2_tlb_xcpt_ae_ld : i1
    %143 = comb.mux bin %132, %tlb.io_resp_ae_st, %s2_tlb_xcpt_ae_st : i1
    %144 = comb.mux bin %132, %tlb.io_resp_ma_ld, %s2_tlb_xcpt_ma_ld : i1
    %145 = comb.mux bin %132, %tlb.io_resp_ma_st, %s2_tlb_xcpt_ma_st : i1
    %146 = comb.mux bin %132, %tlb.io_resp_cacheable, %s2_pma_cacheable : i1
    %s2_vaddr_r = seq.firreg %147 clock %gated_clock {firrtl.random_init_start = 843 : ui64} : i34
    %147 = comb.mux bin %132, %s1_vaddr, %s2_vaddr_r : i34
    %148 = comb.extract %s2_req_addr from 0 {sv.namehint = "s2_vaddr_lo"} : (i34) -> i12
    %149 = comb.icmp bin eq %s2_req_cmd, %c0_i5 {sv.namehint = "_s2_read_T"} : i5
    %150 = comb.icmp bin eq %s2_req_cmd, %c6_i5 {sv.namehint = "s2_lr"} : i5
    %151 = comb.icmp bin eq %s2_req_cmd, %c7_i5 {sv.namehint = "s2_sc"} : i5
    %152 = comb.icmp bin eq %s2_req_cmd, %c4_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_27"} : i5
    %153 = comb.icmp bin eq %s2_req_cmd, %c9_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_28"} : i5
    %154 = comb.icmp bin eq %s2_req_cmd, %c10_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_29"} : i5
    %155 = comb.icmp bin eq %s2_req_cmd, %c11_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_30"} : i5
    %156 = comb.icmp bin eq %s2_req_cmd, %c8_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_34"} : i5
    %157 = comb.icmp bin eq %s2_req_cmd, %c12_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_35"} : i5
    %158 = comb.icmp bin eq %s2_req_cmd, %c13_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_36"} : i5
    %159 = comb.icmp bin eq %s2_req_cmd, %c14_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_37"} : i5
    %160 = comb.icmp bin eq %s2_req_cmd, %c15_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_38"} : i5
    %161 = comb.or bin %149, %150, %151, %152, %153, %154, %155, %156, %157, %158, %159, %160 {sv.namehint = "s2_read"} : i1
    %162 = comb.icmp bin eq %s2_req_cmd, %c1_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_22"} : i5
    %163 = comb.icmp bin eq %s2_req_cmd, %c-15_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_23"} : i5
    %164 = comb.or bin %162, %163, %151, %152, %153, %154, %155, %156, %157, %158, %159, %160 {sv.namehint = "s2_write"} : i1
    %165 = comb.or bin %161, %164 {sv.namehint = "s2_readwrite"} : i1
    %s2_flush_valid = seq.firreg %s1_flush_valid clock %gated_clock {firrtl.random_init_start = 877 : ui64} : i1
    %166 = comb.or bin %132, %s1_probe {sv.namehint = "s1_meta_clk_en"} : i1
    %s2_meta_corrected_r = seq.firreg %167 clock %gated_clock {firrtl.random_init_start = 880 : ui64, sv.namehint = "s2_meta_corrected_r"} : i22
    %167 = comb.mux bin %166, %1, %s2_meta_corrected_r : i22
    %168 = comb.extract %s2_meta_corrected_r from 0 {sv.namehint = "s2_meta_corrected_0_tag"} : (i22) -> i20
    %169 = comb.extract %s2_meta_corrected_r from 20 {sv.namehint = "s2_meta_corrected_0_coh_state"} : (i22) -> i2
    %170 = comb.or bin %s1_valid, %49, %1182 {sv.namehint = "en"} : i1
    %171 = comb.or %1182, %49, %s1_did_read {sv.namehint = "s1_word_en"} : i1
    %172 = comb.mux bin %171, %950, %c0_i2 {sv.namehint = "_s2_data_T_1"} : i2
    %173 = comb.extract %172 from 0 {sv.namehint = "_s2_data_T_2"} : (i2) -> i1
    %174 = comb.extract %172 from 1 {sv.namehint = "_s2_data_T_3"} : (i2) -> i1
    %175 = comb.mux bin %173, %data.io_resp_0, %c0_i64 {sv.namehint = "_s2_data_T_4"} : i64
    %176 = comb.mux bin %174, %auto_out_d_bits_data, %c0_i64 {sv.namehint = "_s2_data_T_5"} : i64
    %177 = comb.or bin %175, %176 {sv.namehint = "_s2_data_T_6"} : i64
    %s2_data = seq.firreg %178 clock %gated_clock {firrtl.random_init_start = 902 : ui64, sv.namehint = "s2_data"} : i64
    %178 = comb.mux bin %170, %177, %s2_data : i64
    %s2_probe_state_state = seq.firreg %179 clock %gated_clock {firrtl.random_init_start = 967 : ui64} : i2
    %179 = comb.mux bin %s1_probe, %101, %s2_probe_state_state : i2
    %s2_hit_state_state = seq.firreg %180 clock %gated_clock {firrtl.random_init_start = 970 : ui64} : i2
    %180 = comb.mux bin %132, %101, %s2_hit_state_state : i2
    %181 = comb.icmp bin ne %s2_hit_state_state, %c0_i2 {sv.namehint = "s2_hit_valid"} : i2
    %182 = comb.or bin %162, %163, %151, %152, %153, %154, %155, %156, %157, %158, %159, %160 {sv.namehint = "c_cat_hi"} : i1
    %183 = comb.icmp bin eq %s2_req_cmd, %c3_i5 {sv.namehint = "_metaArb_io_in_3_bits_data_c_cat_T_45"} : i5
    %184 = comb.or bin %162, %163, %151, %152, %153, %154, %155, %156, %157, %158, %159, %160, %183, %150 {sv.namehint = "c_cat_lo"} : i1
    %185 = comb.concat %182, %184, %s2_hit_state_state : i1, i1, i2
    %186 = comb.icmp bin eq %185, %c-4_i4 : i4
    %187 = comb.concat %false, %186 : i1, i1
    %188 = comb.icmp bin eq %185, %c-2_i4 : i4
    %189 = comb.icmp bin eq %185, %c-1_i4 : i4
    %190 = comb.icmp bin eq %185, %c6_i4 : i4
    %191 = comb.icmp bin eq %185, %c7_i4 : i4
    %192 = comb.icmp bin eq %185, %c1_i4 : i4
    %193 = comb.icmp bin eq %185, %c2_i4 : i4
    %194 = comb.icmp bin eq %185, %c3_i4 : i4
    %195 = comb.or %194, %193, %192, %191, %190, %189, %188 {sv.namehint = "s2_hit"} : i1
    %196 = hw.array_create %c-1_i2, %c-1_i2, %c-2_i2, %187, %187, %187, %187, %187, %c-1_i2, %c-2_i2, %c-2_i2, %c1_i2, %c-1_i2, %c-2_i2, %c1_i2, %c0_i2 : i2
    %197 = hw.array_get %196[%185] {sv.namehint = "s2_grow_param"} : !hw.array<16xi2>, i4
    %198 = comb.and bin %129, %195 {sv.namehint = "s2_valid_hit_maybe_flush_pre_data_ecc_and_waw"} : i1
    %199 = comb.and bin %198, %165 {sv.namehint = "s2_valid_hit_pre_data_ecc_and_waw"} : i1
    %200 = comb.and bin %198, %130, %131 {sv.namehint = "s2_valid_flush_line"} : i1
    %201 = comb.xor bin %195, %true {sv.namehint = "_io_cpu_s2_uncached_T"} : i1
    %202 = comb.and bin %129, %165, %201 {sv.namehint = "s2_valid_miss"} : i1
    %203 = comb.xor bin %s2_pma_cacheable, %true {sv.namehint = "_s2_uncached_T"} : i1
    %204 = comb.xor bin %uncachedInFlight_0, %true {sv.namehint = "_s2_valid_cached_miss_T_3"} : i1
    %205 = comb.and bin %202, %s2_pma_cacheable, %204 {sv.namehint = "s2_valid_cached_miss"} : i1
    %206 = comb.or bin %205, %200, %s2_flush_valid {sv.namehint = "s2_want_victimize"} : i1
    %207 = comb.xor bin %uncachedInFlight_0, %true {sv.namehint = "_s2_valid_uncached_pending_T_2"} : i1
    %208 = comb.and bin %202, %203, %207 {sv.namehint = "s2_valid_uncached_pending"} : i1
    %209 = comb.extract %s2_req_addr from 12 {sv.namehint = "_s2_victim_tag_T_1"} : (i34) -> i20
    %210 = comb.mux bin %200, %209, %168 {sv.namehint = "s2_victim_tag"} : i20
    %211 = comb.mux bin %181, %s2_hit_state_state, %169 {sv.namehint = "s2_victim_state_state"} : i2
    %212 = comb.concat %probe_bits_param, %s2_probe_state_state : i2, i2
    %213 = comb.icmp bin eq %212, %c-8_i4 : i4
    %214 = comb.mux bin %213, %c-3_i3, %c0_i3 : i3
    %215 = comb.icmp bin eq %212, %c-7_i4 : i4
    %216 = comb.mux bin %215, %c2_i3, %214 : i3
    %217 = comb.icmp bin eq %212, %c-6_i4 : i4
    %218 = comb.icmp bin eq %212, %c-5_i4 : i4
    %219 = comb.or bin %218, %217 : i1
    %220 = comb.mux bin %219, %c1_i3, %216 : i3
    %221 = comb.icmp bin eq %212, %c4_i4 : i4
    %222 = comb.mux bin %221, %c-3_i3, %220 : i3
    %223 = comb.icmp bin eq %212, %c5_i4 : i4
    %224 = comb.mux bin %223, %c-4_i3, %222 : i3
    %225 = comb.icmp bin eq %212, %c6_i4 : i4
    %226 = comb.or bin %225, %223, %221 : i1
    %227 = comb.xor %226, %true : i1
    %228 = comb.and %227, %218 : i1
    %229 = comb.icmp bin eq %212, %c7_i4 : i4
    %230 = comb.or %229, %228 : i1
    %231 = comb.or bin %229, %225 : i1
    %232 = comb.mux bin %231, %c0_i3, %224 : i3
    %233 = comb.or bin %229, %225, %223 : i1
    %234 = comb.concat %false, %233 : i1, i1
    %235 = comb.icmp bin eq %212, %c0_i4 : i4
    %236 = comb.mux bin %235, %c-3_i3, %232 : i3
    %237 = comb.mux bin %235, %c0_i2, %234 : i2
    %238 = comb.icmp bin eq %212, %c1_i4 : i4
    %239 = comb.mux bin %238, %c-4_i3, %236 : i3
    %240 = comb.mux bin %238, %c1_i2, %237 : i2
    %241 = comb.icmp bin eq %212, %c2_i4 : i4
    %242 = comb.or bin %241, %238, %235 : i1
    %243 = comb.xor %242, %true : i1
    %244 = comb.and %243, %230 : i1
    %245 = comb.icmp bin eq %212, %c3_i4 : i4
    %246 = comb.or %245, %244 {sv.namehint = "s2_prb_ack_data"} : i1
    %247 = comb.or bin %245, %241 : i1
    %248 = comb.mux bin %247, %c3_i3, %239 {sv.namehint = "dirtyReleaseMessage_param"} : i3
    %249 = comb.mux bin %247, %c-2_i2, %240 {sv.namehint = "probeNewCoh_state"} : i2
    %250 = comb.icmp bin eq %211, %c0_i2 : i2
    %251 = comb.mux bin %250, %c-3_i3, %c0_i3 : i3
    %252 = comb.icmp bin eq %211, %c1_i2 : i2
    %253 = comb.mux bin %252, %c2_i3, %251 : i3
    %254 = comb.icmp bin eq %211, %c-2_i2 : i2
    %255 = comb.icmp bin eq %211, %c-1_i2 : i2
    %256 = comb.or bin %255, %254 : i1
    %257 = comb.mux bin %256, %c1_i3, %253 {sv.namehint = "bundleOut_0_c_bits_c_param"} : i3
    %258 = comb.icmp bin ne %s2_hit_state_state, %197 {sv.namehint = "s2_update_meta"} : i2
    %259 = comb.and bin %208, %auto_out_a_ready {sv.namehint = "s2_dont_nack_uncached"} : i1
    %260 = comb.icmp bin eq %s2_req_cmd, %c-9_i5 {sv.namehint = "_s2_dont_nack_misc_T_11"} : i5
    %261 = comb.and bin %129, %260 {sv.namehint = "s2_dont_nack_misc"} : i1
    %262 = comb.xor bin %259, %true {sv.namehint = "_io_cpu_s2_nack_T"} : i1
    %263 = comb.xor bin %261, %true {sv.namehint = "_io_cpu_s2_nack_T_2"} : i1
    %264 = comb.xor bin %199, %true {sv.namehint = "_io_cpu_s2_nack_T_4"} : i1
    %265 = comb.and bin %126, %262, %263, %264 {sv.namehint = "io_cpu_s2_nack"} : i1
    %266 = comb.and bin %199, %258 {sv.namehint = "metaArb.io_in_2_valid"} : i1
    %267 = comb.or bin %265, %266 : i1
    %268 = comb.extract %probe_bits_address from 6 {sv.namehint = "metaArb.io_in_4_bits_idx"} : (i32) -> i6
    %269 = comb.extract %s2_req_addr from 6 {sv.namehint = "metaArb.io_in_3_bits_idx"} : (i34) -> i6
    %270 = comb.concat %78, %148 {sv.namehint = "metaArb.io_in_2_bits_addr"} : i22, i12
    %271 = comb.extract %s2_req_addr from 12 {sv.namehint = "metaArb_io_in_2_bits_data_meta_tag"} : (i34) -> i20
    %272 = comb.concat %197, %271 {sv.namehint = "metaArb.io_in_2_bits_data"} : i2, i20
    %lrscCount = seq.firreg %292 clock %gated_clock reset sync %reset, %c0_i7 {firrtl.random_init_start = 974 : ui64} : i7
    %273 = comb.extract %lrscCount from 2 : (i7) -> i5
    %274 = comb.icmp bin ne %273, %c0_i5 {sv.namehint = "lrscValid"} : i5
    %275 = comb.icmp bin ne %lrscCount, %c0_i7 {sv.namehint = "_clock_en_reg_T_23"} : i7
    %276 = comb.xor bin %274, %true {sv.namehint = "_lrscBackingOff_T_1"} : i1
    %277 = comb.and bin %275, %276 {sv.namehint = "lrscBackingOff"} : i1
    %lrscAddr = seq.firreg %287 clock %gated_clock {firrtl.random_init_start = 981 : ui64} : i28
    %278 = comb.extract %s2_req_addr from 6 {sv.namehint = "_io_errors_bus_bits_T"} : (i34) -> i28
    %279 = comb.icmp bin eq %lrscAddr, %278 {sv.namehint = "lrscAddrMatch"} : i28
    %280 = comb.and bin %274, %279 {sv.namehint = "_s2_sc_fail_T"} : i1
    %281 = comb.xor bin %280, %true {sv.namehint = "_s2_sc_fail_T_1"} : i1
    %282 = comb.and bin %151, %281 {sv.namehint = "s2_sc_fail"} : i1
    %283 = comb.and bin %199, %150, %51 : i1
    %284 = comb.or bin %283, %205 : i1
    %285 = comb.mux bin %195, %c-49_i7, %c0_i7 {sv.namehint = "_lrscCount_T"} : i7
    %286 = comb.mux bin %284, %285, %lrscCount : i7
    %287 = comb.mux bin %284, %278, %lrscAddr : i28
    %288 = comb.add %lrscCount, %c-1_i7 {sv.namehint = "_lrscCount_T_1"} : i7
    %289 = comb.mux bin %275, %288, %286 : i7
    %290 = comb.and bin %129, %274 : i1
    %291 = comb.mux bin %290, %c3_i7, %289 : i7
    %292 = comb.mux bin %s1_probe, %c0_i7, %291 : i7
    %293 = comb.and bin %11, %43 {sv.namehint = "_pstore1_rmw_T_51"} : i1
    %pstore1_cmd = seq.firreg %294 clock %gated_clock {firrtl.random_init_start = 1010 : ui64, sv.namehint = "pstore1_cmd"} : i5
    %294 = comb.mux bin %293, %s1_req_cmd, %pstore1_cmd : i5
    %pstore1_addr = seq.firreg %295 clock %gated_clock {firrtl.random_init_start = 1015 : ui64} : i34
    %295 = comb.mux bin %293, %s1_vaddr, %pstore1_addr : i34
    %pstore1_data = seq.firreg %296 clock %gated_clock {firrtl.random_init_start = 1049 : ui64, sv.namehint = "pstore1_data"} : i64
    %296 = comb.mux bin %293, %io_cpu_s1_data_data, %pstore1_data : i64
    %mergedMask = seq.firreg %297 clock %gated_clock {firrtl.random_init_start = 1114 : ui64, sv.namehint = "mergedMask"} : i8
    %297 = comb.mux bin %293, %121, %mergedMask : i8
    %298 = comb.or bin %41, %42, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39 {sv.namehint = "_pstore1_rmw_T_45"} : i1
    %299 = comb.and bin %298, %42 {sv.namehint = "_pstore1_rmw_T_49"} : i1
    %300 = comb.or bin %28, %29, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %299 {sv.namehint = "_pstore1_rmw_T_50"} : i1
    %pstore1_rmw = seq.firreg %301 clock %gated_clock {firrtl.random_init_start = 1122 : ui64} : i1
    %301 = comb.mux bin %293, %300, %pstore1_rmw : i1
    %302 = comb.and bin %199, %164 {sv.namehint = "_pstore1_held_T"} : i1
    %303 = comb.xor bin %282, %true {sv.namehint = "_pstore1_held_T_1"} : i1
    %pstore2_valid = seq.firreg %340 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 1123 : ui64} : i1
    %304 = comb.or bin %66, %67 {sv.namehint = "_pstore_drain_opportunistic_res_T_2"} : i1
    %305 = comb.xor bin %304, %true {sv.namehint = "res_1"} : i1
    %306 = comb.or bin %66, %70, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64 {sv.namehint = "_pstore_drain_opportunistic_T_45"} : i1
    %307 = comb.and bin %306, %70 {sv.namehint = "_pstore_drain_opportunistic_T_49"} : i1
    %308 = comb.or bin %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %307 {sv.namehint = "_pstore_drain_opportunistic_T_50"} : i1
    %309 = comb.xor bin %308, %true {sv.namehint = "_pstore_drain_opportunistic_T_51"} : i1
    %310 = comb.or bin %309, %305, %reset {sv.namehint = "_pstore_drain_opportunistic_T_54"} : i1
    %311 = comb.xor bin %310, %true {sv.namehint = "_pstore_drain_opportunistic_T_55"} : i1
    %312 = comb.and bin %io_cpu_req_valid, %305 {sv.namehint = "_pstore_drain_opportunistic_T_56"} : i1
    %313 = comb.xor bin %312, %true {sv.namehint = "pstore_drain_opportunistic"} : i1
    %pstore_drain_on_miss_REG = seq.firreg %265 clock %gated_clock {firrtl.random_init_start = 1124 : ui64} : i1
    %pstore1_held = seq.firreg %336 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 1125 : ui64} : i1
    %314 = comb.and bin %s2_valid, %164 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T_53"} : i1
    %315 = comb.or bin %314, %pstore1_held {sv.namehint = "pstore1_valid_likely"} : i1
    %316 = comb.and bin %302, %303 {sv.namehint = "_pstore1_valid_T_2"} : i1
    %317 = comb.or bin %316, %pstore1_held {sv.namehint = "pstore1_valid"} : i1
    %318 = comb.and bin %s1_valid, %43 {sv.namehint = "_io_cpu_perf_canAcceptLoadThenLoad_T"} : i1
    %319 = comb.or bin %318, %pstore1_rmw {sv.namehint = "_pstore_drain_structural_T_2"} : i1
    %320 = comb.and bin %315, %pstore2_valid, %319 {sv.namehint = "pstore_drain_structural"} : i1
    %321 = comb.and bin %199, %164 {sv.namehint = "_dataArb_io_in_0_valid_T_4"} : i1
    %322 = comb.or bin %321, %pstore1_held : i1
    %323 = comb.icmp bin eq %322, %317 : i1
    %324 = comb.or bin %pstore1_rmw, %323, %reset : i1
    %325 = comb.xor bin %324, %true : i1
    %326 = comb.or bin %321, %pstore1_held {sv.namehint = "_pstore_drain_T_5"} : i1
    %327 = comb.xor bin %pstore1_rmw, %true {sv.namehint = "_dataArb_io_in_0_valid_T_6"} : i1
    %328 = comb.and bin %326, %327 {sv.namehint = "_pstore_drain_T_7"} : i1
    %329 = comb.or bin %328, %pstore2_valid {sv.namehint = "_pstore_drain_T_8"} : i1
    %330 = comb.or bin %313, %128, %pstore_drain_on_miss_REG {sv.namehint = "_dataArb_io_in_0_valid_T_9"} : i1
    %331 = comb.and bin %329, %330 {sv.namehint = "_pstore_drain_T_10"} : i1
    %332 = comb.or bin %320, %331 {sv.namehint = "pstore_drain"} : i1
    %333 = comb.and bin %302, %303 {sv.namehint = "_pstore1_held_T_2"} : i1
    %334 = comb.or bin %333, %pstore1_held {sv.namehint = "_pstore1_held_T_7"} : i1
    %335 = comb.xor bin %332, %true {sv.namehint = "_pstore2_valid_T"} : i1
    %336 = comb.and bin %334, %pstore2_valid, %335 {sv.namehint = "_pstore1_held_T_10"} : i1
    %337 = comb.icmp bin eq %pstore2_valid, %332 {sv.namehint = "_advance_pstore1_T_1"} : i1
    %338 = comb.and bin %317, %337 {sv.namehint = "advance_pstore1"} : i1
    %339 = comb.and bin %pstore2_valid, %335 {sv.namehint = "_pstore2_valid_T_1"} : i1
    %340 = comb.or bin %339, %338 {sv.namehint = "_pstore2_valid_T_2"} : i1
    %pstore2_addr = seq.firreg %341 clock %gated_clock {firrtl.random_init_start = 1126 : ui64} : i34
    %341 = comb.mux bin %338, %pstore1_addr, %pstore2_addr : i34
    %342 = comb.extract %amoalu.io_out from 0 {sv.namehint = "_pstore2_storegen_data_T"} : (i64) -> i8
    %pstore2_storegen_data_lo_lo_lo = seq.firreg %343 clock %gated_clock {firrtl.random_init_start = 1161 : ui64} : i8
    %343 = comb.mux bin %338, %342, %pstore2_storegen_data_lo_lo_lo : i8
    %344 = comb.extract %amoalu.io_out from 8 {sv.namehint = "_pstore2_storegen_data_T_4"} : (i64) -> i8
    %pstore2_storegen_data_lo_lo_hi = seq.firreg %345 clock %gated_clock {firrtl.random_init_start = 1169 : ui64} : i8
    %345 = comb.mux bin %338, %344, %pstore2_storegen_data_lo_lo_hi : i8
    %346 = comb.extract %amoalu.io_out from 16 {sv.namehint = "_pstore2_storegen_data_T_8"} : (i64) -> i8
    %pstore2_storegen_data_lo_hi_lo = seq.firreg %347 clock %gated_clock {firrtl.random_init_start = 1177 : ui64} : i8
    %347 = comb.mux bin %338, %346, %pstore2_storegen_data_lo_hi_lo : i8
    %348 = comb.extract %amoalu.io_out from 24 {sv.namehint = "_pstore2_storegen_data_T_12"} : (i64) -> i8
    %pstore2_storegen_data_lo_hi_hi = seq.firreg %349 clock %gated_clock {firrtl.random_init_start = 1185 : ui64} : i8
    %349 = comb.mux bin %338, %348, %pstore2_storegen_data_lo_hi_hi : i8
    %350 = comb.extract %amoalu.io_out from 32 {sv.namehint = "_pstore2_storegen_data_T_16"} : (i64) -> i8
    %pstore2_storegen_data_hi_lo_lo = seq.firreg %351 clock %gated_clock {firrtl.random_init_start = 1193 : ui64} : i8
    %351 = comb.mux bin %338, %350, %pstore2_storegen_data_hi_lo_lo : i8
    %352 = comb.extract %amoalu.io_out from 40 {sv.namehint = "_pstore2_storegen_data_T_20"} : (i64) -> i8
    %pstore2_storegen_data_hi_lo_hi = seq.firreg %353 clock %gated_clock {firrtl.random_init_start = 1201 : ui64} : i8
    %353 = comb.mux bin %338, %352, %pstore2_storegen_data_hi_lo_hi : i8
    %354 = comb.extract %amoalu.io_out from 48 {sv.namehint = "_pstore2_storegen_data_T_24"} : (i64) -> i8
    %pstore2_storegen_data_hi_hi_lo = seq.firreg %355 clock %gated_clock {firrtl.random_init_start = 1209 : ui64} : i8
    %355 = comb.mux bin %338, %354, %pstore2_storegen_data_hi_hi_lo : i8
    %356 = comb.extract %amoalu.io_out from 56 {sv.namehint = "_pstore2_storegen_data_T_28"} : (i64) -> i8
    %pstore2_storegen_data_hi_hi_hi = seq.firreg %357 clock %gated_clock {firrtl.random_init_start = 1217 : ui64} : i8
    %357 = comb.mux bin %338, %356, %pstore2_storegen_data_hi_hi_hi : i8
    %358 = comb.concat %pstore2_storegen_data_hi_hi_hi, %pstore2_storegen_data_hi_hi_lo, %pstore2_storegen_data_hi_lo_hi, %pstore2_storegen_data_hi_lo_lo, %pstore2_storegen_data_lo_hi_hi, %pstore2_storegen_data_lo_hi_lo, %pstore2_storegen_data_lo_lo_hi, %pstore2_storegen_data_lo_lo_lo {sv.namehint = "pstore2_storegen_data"} : i8, i8, i8, i8, i8, i8, i8, i8
    %mask = seq.firreg %359 clock %gated_clock {firrtl.random_init_start = 1225 : ui64} : i8
    %359 = comb.mux bin %338, %mergedMask, %mask : i8
    %360 = comb.or bin %321, %pstore1_held {sv.namehint = "_dataArb_io_in_0_valid_T_5"} : i1
    %361 = comb.and bin %360, %327 {sv.namehint = "_dataArb_io_in_0_valid_T_7"} : i1
    %362 = comb.or bin %361, %pstore2_valid {sv.namehint = "_dataArb_io_in_0_valid_T_8"} : i1
    %363 = comb.and bin %362, %330 {sv.namehint = "_dataArb_io_in_0_valid_T_10"} : i1
    %364 = comb.or bin %320, %363 {sv.namehint = "dataArb.io_in_0_valid"} : i1
    %365 = comb.extract %pstore2_addr from 0 : (i34) -> i12
    %366 = comb.extract %pstore1_addr from 0 : (i34) -> i12
    %367 = comb.mux %pstore2_valid, %365, %366 {sv.namehint = "_dataArb_io_in_0_bits_wordMask_wordMask_T"} : i12
    %368 = comb.mux bin %pstore2_valid, %358, %pstore1_data {sv.namehint = "dataArb.io_in_0_bits_wdata"} : i64
    %369 = comb.mux bin %pstore2_valid, %mask, %mergedMask {sv.namehint = "dataArb.io_in_0_bits_eccMask"} : i8
    %370 = comb.extract %pstore1_addr from 3 {sv.namehint = "_s1_hazard_T"} : (i34) -> i9
    %371 = comb.extract %s1_vaddr from 3 {sv.namehint = "_s1_hazard_T_31"} : (i34) -> i9
    %372 = comb.icmp bin eq %370, %371 {sv.namehint = "_s1_hazard_T_2"} : i9
    %373 = comb.and bin %mergedMask, %120 {sv.namehint = "_s1_hazard_T_23"} : i8
    %374 = comb.icmp bin ne %373, %c0_i8 {sv.namehint = "_s1_hazard_T_24"} : i8
    %375 = comb.and bin %mergedMask, %120 {sv.namehint = "_s1_hazard_T_25"} : i8
    %376 = comb.icmp bin ne %375, %c0_i8 {sv.namehint = "_s1_hazard_T_26"} : i8
    %377 = comb.mux bin %43, %374, %376 {sv.namehint = "_s1_hazard_T_27"} : i1
    %378 = comb.and bin %315, %372, %377 {sv.namehint = "_s1_hazard_T_29"} : i1
    %379 = comb.extract %pstore2_addr from 3 {sv.namehint = "_s1_hazard_T_30"} : (i34) -> i9
    %380 = comb.icmp bin eq %379, %371 {sv.namehint = "_s1_hazard_T_32"} : i9
    %381 = comb.and bin %mask, %120 {sv.namehint = "_s1_hazard_T_53"} : i8
    %382 = comb.icmp bin ne %381, %c0_i8 {sv.namehint = "_s1_hazard_T_54"} : i8
    %383 = comb.and bin %mask, %120 {sv.namehint = "_s1_hazard_T_55"} : i8
    %384 = comb.icmp bin ne %383, %c0_i8 {sv.namehint = "_s1_hazard_T_56"} : i8
    %385 = comb.mux bin %43, %382, %384 {sv.namehint = "_s1_hazard_T_57"} : i1
    %386 = comb.and bin %pstore2_valid, %380, %385 {sv.namehint = "_s1_hazard_T_59"} : i1
    %387 = comb.or bin %378, %386 {sv.namehint = "s1_hazard"} : i1
    %388 = comb.and bin %s1_valid, %40, %387 : i1
    %389 = comb.or bin %388, %267 : i1
    %390 = comb.concat %c0_i2, %size {sv.namehint = "put_size"} : i2, i2
    %391 = comb.extract %s2_req_addr from 0 {sv.namehint = "put_address"} : (i34) -> i32
    %392 = comb.icmp bin eq %size, %c-1_i2 {sv.namehint = "_atomics_a_mask_T_16"} : i2
    %393 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "get_a_mask_size"} : i2
    %394 = comb.extract %s2_req_addr from 2 {sv.namehint = "get_a_mask_bit"} : (i34) -> i1
    %395 = comb.xor bin %394, %true {sv.namehint = "get_a_mask_eq"} : i1
    %396 = comb.and bin %393, %395 {sv.namehint = "_get_a_mask_acc_T"} : i1
    %397 = comb.or bin %392, %396 {sv.namehint = "get_a_mask_acc"} : i1
    %398 = comb.and bin %393, %394 {sv.namehint = "_get_a_mask_acc_T_1"} : i1
    %399 = comb.or bin %392, %398 {sv.namehint = "get_a_mask_acc_1"} : i1
    %400 = comb.icmp eq %size, %c1_i2 {sv.namehint = "get_a_mask_size_1"} : i2
    %401 = comb.extract %s2_req_addr from 1 {sv.namehint = "get_a_mask_bit_1"} : (i34) -> i1
    %402 = comb.xor bin %401, %true {sv.namehint = "get_a_mask_nbit_1"} : i1
    %403 = comb.and bin %395, %402 {sv.namehint = "get_a_mask_eq_2"} : i1
    %404 = comb.and bin %400, %403 {sv.namehint = "_get_a_mask_acc_T_2"} : i1
    %405 = comb.or bin %397, %404 {sv.namehint = "get_a_mask_acc_2"} : i1
    %406 = comb.and bin %395, %401 {sv.namehint = "get_a_mask_eq_3"} : i1
    %407 = comb.and bin %400, %406 {sv.namehint = "_get_a_mask_acc_T_3"} : i1
    %408 = comb.or bin %397, %407 {sv.namehint = "get_a_mask_acc_3"} : i1
    %409 = comb.and bin %394, %402 {sv.namehint = "get_a_mask_eq_4"} : i1
    %410 = comb.and bin %400, %409 {sv.namehint = "_get_a_mask_acc_T_4"} : i1
    %411 = comb.or bin %399, %410 {sv.namehint = "get_a_mask_acc_4"} : i1
    %412 = comb.and bin %394, %401 {sv.namehint = "get_a_mask_eq_5"} : i1
    %413 = comb.and bin %400, %412 {sv.namehint = "_get_a_mask_acc_T_5"} : i1
    %414 = comb.or bin %399, %413 {sv.namehint = "get_a_mask_acc_5"} : i1
    %415 = comb.extract %s2_req_addr from 0 {sv.namehint = "get_a_mask_bit_2"} : (i34) -> i1
    %416 = comb.xor bin %415, %true {sv.namehint = "get_a_mask_nbit_2"} : i1
    %417 = comb.and bin %403, %416 {sv.namehint = "get_a_mask_eq_6"} : i1
    %418 = comb.or bin %405, %417 {sv.namehint = "get_a_mask_lo_lo_lo"} : i1
    %419 = comb.and bin %403, %415 {sv.namehint = "get_a_mask_eq_7"} : i1
    %420 = comb.or bin %405, %419 {sv.namehint = "get_a_mask_lo_lo_hi"} : i1
    %421 = comb.and bin %406, %416 {sv.namehint = "get_a_mask_eq_8"} : i1
    %422 = comb.or bin %408, %421 {sv.namehint = "get_a_mask_lo_hi_lo"} : i1
    %423 = comb.and bin %406, %415 {sv.namehint = "get_a_mask_eq_9"} : i1
    %424 = comb.or bin %408, %423 {sv.namehint = "get_a_mask_lo_hi_hi"} : i1
    %425 = comb.and bin %409, %416 {sv.namehint = "get_a_mask_eq_10"} : i1
    %426 = comb.or bin %411, %425 {sv.namehint = "get_a_mask_hi_lo_lo"} : i1
    %427 = comb.and bin %409, %415 {sv.namehint = "get_a_mask_eq_11"} : i1
    %428 = comb.or bin %411, %427 {sv.namehint = "get_a_mask_hi_lo_hi"} : i1
    %429 = comb.and bin %412, %416 {sv.namehint = "get_a_mask_eq_12"} : i1
    %430 = comb.or bin %414, %429 {sv.namehint = "get_a_mask_hi_hi_lo"} : i1
    %431 = comb.and bin %412, %415 {sv.namehint = "get_a_mask_eq_13"} : i1
    %432 = comb.or bin %414, %431 {sv.namehint = "get_a_mask_hi_hi_hi"} : i1
    %433 = comb.concat %432, %430, %428, %426, %424, %422, %420, %418 {sv.namehint = "get_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %434 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "put_a_mask_size"} : i2
    %435 = comb.xor bin %394, %true {sv.namehint = "put_a_mask_eq"} : i1
    %436 = comb.and bin %434, %435 {sv.namehint = "_put_a_mask_acc_T"} : i1
    %437 = comb.or bin %392, %436 {sv.namehint = "put_a_mask_acc"} : i1
    %438 = comb.and bin %434, %394 {sv.namehint = "_put_a_mask_acc_T_1"} : i1
    %439 = comb.or bin %392, %438 {sv.namehint = "put_a_mask_acc_1"} : i1
    %440 = comb.icmp eq %size, %c1_i2 {sv.namehint = "put_a_mask_size_1"} : i2
    %441 = comb.xor bin %401, %true {sv.namehint = "put_a_mask_nbit_1"} : i1
    %442 = comb.and bin %435, %441 {sv.namehint = "put_a_mask_eq_2"} : i1
    %443 = comb.and bin %440, %442 {sv.namehint = "_put_a_mask_acc_T_2"} : i1
    %444 = comb.or bin %437, %443 {sv.namehint = "put_a_mask_acc_2"} : i1
    %445 = comb.and bin %435, %401 {sv.namehint = "put_a_mask_eq_3"} : i1
    %446 = comb.and bin %440, %445 {sv.namehint = "_put_a_mask_acc_T_3"} : i1
    %447 = comb.or bin %437, %446 {sv.namehint = "put_a_mask_acc_3"} : i1
    %448 = comb.and bin %394, %441 {sv.namehint = "put_a_mask_eq_4"} : i1
    %449 = comb.and bin %440, %448 {sv.namehint = "_put_a_mask_acc_T_4"} : i1
    %450 = comb.or bin %439, %449 {sv.namehint = "put_a_mask_acc_4"} : i1
    %451 = comb.and bin %394, %401 {sv.namehint = "put_a_mask_eq_5"} : i1
    %452 = comb.and bin %440, %451 {sv.namehint = "_put_a_mask_acc_T_5"} : i1
    %453 = comb.or bin %439, %452 {sv.namehint = "put_a_mask_acc_5"} : i1
    %454 = comb.xor bin %415, %true {sv.namehint = "put_a_mask_nbit_2"} : i1
    %455 = comb.and bin %442, %454 {sv.namehint = "put_a_mask_eq_6"} : i1
    %456 = comb.or bin %444, %455 {sv.namehint = "put_a_mask_lo_lo_lo"} : i1
    %457 = comb.and bin %442, %415 {sv.namehint = "put_a_mask_eq_7"} : i1
    %458 = comb.or bin %444, %457 {sv.namehint = "put_a_mask_lo_lo_hi"} : i1
    %459 = comb.and bin %445, %454 {sv.namehint = "put_a_mask_eq_8"} : i1
    %460 = comb.or bin %447, %459 {sv.namehint = "put_a_mask_lo_hi_lo"} : i1
    %461 = comb.and bin %445, %415 {sv.namehint = "put_a_mask_eq_9"} : i1
    %462 = comb.or bin %447, %461 {sv.namehint = "put_a_mask_lo_hi_hi"} : i1
    %463 = comb.and bin %448, %454 {sv.namehint = "put_a_mask_eq_10"} : i1
    %464 = comb.or bin %450, %463 {sv.namehint = "put_a_mask_hi_lo_lo"} : i1
    %465 = comb.and bin %448, %415 {sv.namehint = "put_a_mask_eq_11"} : i1
    %466 = comb.or bin %450, %465 {sv.namehint = "put_a_mask_hi_lo_hi"} : i1
    %467 = comb.and bin %451, %454 {sv.namehint = "put_a_mask_eq_12"} : i1
    %468 = comb.or bin %453, %467 {sv.namehint = "put_a_mask_hi_hi_lo"} : i1
    %469 = comb.and bin %451, %415 {sv.namehint = "put_a_mask_eq_13"} : i1
    %470 = comb.or bin %453, %469 {sv.namehint = "put_a_mask_hi_hi_hi"} : i1
    %471 = comb.concat %470, %468, %466, %464, %462, %460, %458, %456 {sv.namehint = "put_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %472 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size"} : i2
    %473 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq"} : i1
    %474 = comb.and bin %472, %473 {sv.namehint = "_atomics_a_mask_acc_T"} : i1
    %475 = comb.or bin %392, %474 {sv.namehint = "atomics_a_mask_acc"} : i1
    %476 = comb.and bin %472, %394 {sv.namehint = "_atomics_a_mask_acc_T_1"} : i1
    %477 = comb.or bin %392, %476 {sv.namehint = "atomics_a_mask_acc_1"} : i1
    %478 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_1"} : i2
    %479 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_1"} : i1
    %480 = comb.and bin %473, %479 {sv.namehint = "atomics_a_mask_eq_2"} : i1
    %481 = comb.and bin %478, %480 {sv.namehint = "_atomics_a_mask_acc_T_2"} : i1
    %482 = comb.or bin %475, %481 {sv.namehint = "atomics_a_mask_acc_2"} : i1
    %483 = comb.and bin %473, %401 {sv.namehint = "atomics_a_mask_eq_3"} : i1
    %484 = comb.and bin %478, %483 {sv.namehint = "_atomics_a_mask_acc_T_3"} : i1
    %485 = comb.or bin %475, %484 {sv.namehint = "atomics_a_mask_acc_3"} : i1
    %486 = comb.and bin %394, %479 {sv.namehint = "atomics_a_mask_eq_4"} : i1
    %487 = comb.and bin %478, %486 {sv.namehint = "_atomics_a_mask_acc_T_4"} : i1
    %488 = comb.or bin %477, %487 {sv.namehint = "atomics_a_mask_acc_4"} : i1
    %489 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_5"} : i1
    %490 = comb.and bin %478, %489 {sv.namehint = "_atomics_a_mask_acc_T_5"} : i1
    %491 = comb.or bin %477, %490 {sv.namehint = "atomics_a_mask_acc_5"} : i1
    %492 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_2"} : i1
    %493 = comb.and bin %480, %492 {sv.namehint = "atomics_a_mask_eq_6"} : i1
    %494 = comb.or bin %482, %493 {sv.namehint = "atomics_a_mask_lo_lo_lo"} : i1
    %495 = comb.and bin %480, %415 {sv.namehint = "atomics_a_mask_eq_7"} : i1
    %496 = comb.or bin %482, %495 {sv.namehint = "atomics_a_mask_lo_lo_hi"} : i1
    %497 = comb.and bin %483, %492 {sv.namehint = "atomics_a_mask_eq_8"} : i1
    %498 = comb.or bin %485, %497 {sv.namehint = "atomics_a_mask_lo_hi_lo"} : i1
    %499 = comb.and bin %483, %415 {sv.namehint = "atomics_a_mask_eq_9"} : i1
    %500 = comb.or bin %485, %499 {sv.namehint = "atomics_a_mask_lo_hi_hi"} : i1
    %501 = comb.and bin %486, %492 {sv.namehint = "atomics_a_mask_eq_10"} : i1
    %502 = comb.or bin %488, %501 {sv.namehint = "atomics_a_mask_hi_lo_lo"} : i1
    %503 = comb.and bin %486, %415 {sv.namehint = "atomics_a_mask_eq_11"} : i1
    %504 = comb.or bin %488, %503 {sv.namehint = "atomics_a_mask_hi_lo_hi"} : i1
    %505 = comb.and bin %489, %492 {sv.namehint = "atomics_a_mask_eq_12"} : i1
    %506 = comb.or bin %491, %505 {sv.namehint = "atomics_a_mask_hi_hi_lo"} : i1
    %507 = comb.and bin %489, %415 {sv.namehint = "atomics_a_mask_eq_13"} : i1
    %508 = comb.or bin %491, %507 {sv.namehint = "atomics_a_mask_hi_hi_hi"} : i1
    %509 = comb.concat %508, %506, %504, %502, %500, %498, %496, %494 {sv.namehint = "atomics_a_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %510 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_3"} : i2
    %511 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_14"} : i1
    %512 = comb.and bin %510, %511 {sv.namehint = "_atomics_a_mask_acc_T_14"} : i1
    %513 = comb.or bin %392, %512 {sv.namehint = "atomics_a_mask_acc_6"} : i1
    %514 = comb.and bin %510, %394 {sv.namehint = "_atomics_a_mask_acc_T_15"} : i1
    %515 = comb.or bin %392, %514 {sv.namehint = "atomics_a_mask_acc_7"} : i1
    %516 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_4"} : i2
    %517 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_4"} : i1
    %518 = comb.and bin %511, %517 {sv.namehint = "atomics_a_mask_eq_16"} : i1
    %519 = comb.and bin %516, %518 {sv.namehint = "_atomics_a_mask_acc_T_16"} : i1
    %520 = comb.or bin %513, %519 {sv.namehint = "atomics_a_mask_acc_8"} : i1
    %521 = comb.and bin %511, %401 {sv.namehint = "atomics_a_mask_eq_17"} : i1
    %522 = comb.and bin %516, %521 {sv.namehint = "_atomics_a_mask_acc_T_17"} : i1
    %523 = comb.or bin %513, %522 {sv.namehint = "atomics_a_mask_acc_9"} : i1
    %524 = comb.and bin %394, %517 {sv.namehint = "atomics_a_mask_eq_18"} : i1
    %525 = comb.and bin %516, %524 {sv.namehint = "_atomics_a_mask_acc_T_18"} : i1
    %526 = comb.or bin %515, %525 {sv.namehint = "atomics_a_mask_acc_10"} : i1
    %527 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_19"} : i1
    %528 = comb.and bin %516, %527 {sv.namehint = "_atomics_a_mask_acc_T_19"} : i1
    %529 = comb.or bin %515, %528 {sv.namehint = "atomics_a_mask_acc_11"} : i1
    %530 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_5"} : i1
    %531 = comb.and bin %518, %530 {sv.namehint = "atomics_a_mask_eq_20"} : i1
    %532 = comb.or bin %520, %531 {sv.namehint = "atomics_a_mask_lo_lo_lo_1"} : i1
    %533 = comb.and bin %518, %415 {sv.namehint = "atomics_a_mask_eq_21"} : i1
    %534 = comb.or bin %520, %533 {sv.namehint = "atomics_a_mask_lo_lo_hi_1"} : i1
    %535 = comb.and bin %521, %530 {sv.namehint = "atomics_a_mask_eq_22"} : i1
    %536 = comb.or bin %523, %535 {sv.namehint = "atomics_a_mask_lo_hi_lo_1"} : i1
    %537 = comb.and bin %521, %415 {sv.namehint = "atomics_a_mask_eq_23"} : i1
    %538 = comb.or bin %523, %537 {sv.namehint = "atomics_a_mask_lo_hi_hi_1"} : i1
    %539 = comb.and bin %524, %530 {sv.namehint = "atomics_a_mask_eq_24"} : i1
    %540 = comb.or bin %526, %539 {sv.namehint = "atomics_a_mask_hi_lo_lo_1"} : i1
    %541 = comb.and bin %524, %415 {sv.namehint = "atomics_a_mask_eq_25"} : i1
    %542 = comb.or bin %526, %541 {sv.namehint = "atomics_a_mask_hi_lo_hi_1"} : i1
    %543 = comb.and bin %527, %530 {sv.namehint = "atomics_a_mask_eq_26"} : i1
    %544 = comb.or bin %529, %543 {sv.namehint = "atomics_a_mask_hi_hi_lo_1"} : i1
    %545 = comb.and bin %527, %415 {sv.namehint = "atomics_a_mask_eq_27"} : i1
    %546 = comb.or bin %529, %545 {sv.namehint = "atomics_a_mask_hi_hi_hi_1"} : i1
    %547 = comb.concat %546, %544, %542, %540, %538, %536, %534, %532 {sv.namehint = "atomics_a_1_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %548 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_6"} : i2
    %549 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_28"} : i1
    %550 = comb.and bin %548, %549 {sv.namehint = "_atomics_a_mask_acc_T_28"} : i1
    %551 = comb.or bin %392, %550 {sv.namehint = "atomics_a_mask_acc_12"} : i1
    %552 = comb.and bin %548, %394 {sv.namehint = "_atomics_a_mask_acc_T_29"} : i1
    %553 = comb.or bin %392, %552 {sv.namehint = "atomics_a_mask_acc_13"} : i1
    %554 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_7"} : i2
    %555 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_7"} : i1
    %556 = comb.and bin %549, %555 {sv.namehint = "atomics_a_mask_eq_30"} : i1
    %557 = comb.and bin %554, %556 {sv.namehint = "_atomics_a_mask_acc_T_30"} : i1
    %558 = comb.or bin %551, %557 {sv.namehint = "atomics_a_mask_acc_14"} : i1
    %559 = comb.and bin %549, %401 {sv.namehint = "atomics_a_mask_eq_31"} : i1
    %560 = comb.and bin %554, %559 {sv.namehint = "_atomics_a_mask_acc_T_31"} : i1
    %561 = comb.or bin %551, %560 {sv.namehint = "atomics_a_mask_acc_15"} : i1
    %562 = comb.and bin %394, %555 {sv.namehint = "atomics_a_mask_eq_32"} : i1
    %563 = comb.and bin %554, %562 {sv.namehint = "_atomics_a_mask_acc_T_32"} : i1
    %564 = comb.or bin %553, %563 {sv.namehint = "atomics_a_mask_acc_16"} : i1
    %565 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_33"} : i1
    %566 = comb.and bin %554, %565 {sv.namehint = "_atomics_a_mask_acc_T_33"} : i1
    %567 = comb.or bin %553, %566 {sv.namehint = "atomics_a_mask_acc_17"} : i1
    %568 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_8"} : i1
    %569 = comb.and bin %556, %568 {sv.namehint = "atomics_a_mask_eq_34"} : i1
    %570 = comb.or bin %558, %569 {sv.namehint = "atomics_a_mask_lo_lo_lo_2"} : i1
    %571 = comb.and bin %556, %415 {sv.namehint = "atomics_a_mask_eq_35"} : i1
    %572 = comb.or bin %558, %571 {sv.namehint = "atomics_a_mask_lo_lo_hi_2"} : i1
    %573 = comb.and bin %559, %568 {sv.namehint = "atomics_a_mask_eq_36"} : i1
    %574 = comb.or bin %561, %573 {sv.namehint = "atomics_a_mask_lo_hi_lo_2"} : i1
    %575 = comb.and bin %559, %415 {sv.namehint = "atomics_a_mask_eq_37"} : i1
    %576 = comb.or bin %561, %575 {sv.namehint = "atomics_a_mask_lo_hi_hi_2"} : i1
    %577 = comb.and bin %562, %568 {sv.namehint = "atomics_a_mask_eq_38"} : i1
    %578 = comb.or bin %564, %577 {sv.namehint = "atomics_a_mask_hi_lo_lo_2"} : i1
    %579 = comb.and bin %562, %415 {sv.namehint = "atomics_a_mask_eq_39"} : i1
    %580 = comb.or bin %564, %579 {sv.namehint = "atomics_a_mask_hi_lo_hi_2"} : i1
    %581 = comb.and bin %565, %568 {sv.namehint = "atomics_a_mask_eq_40"} : i1
    %582 = comb.or bin %567, %581 {sv.namehint = "atomics_a_mask_hi_hi_lo_2"} : i1
    %583 = comb.and bin %565, %415 {sv.namehint = "atomics_a_mask_eq_41"} : i1
    %584 = comb.or bin %567, %583 {sv.namehint = "atomics_a_mask_hi_hi_hi_2"} : i1
    %585 = comb.concat %584, %582, %580, %578, %576, %574, %572, %570 {sv.namehint = "atomics_a_2_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %586 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_9"} : i2
    %587 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_42"} : i1
    %588 = comb.and bin %586, %587 {sv.namehint = "_atomics_a_mask_acc_T_42"} : i1
    %589 = comb.or bin %392, %588 {sv.namehint = "atomics_a_mask_acc_18"} : i1
    %590 = comb.and bin %586, %394 {sv.namehint = "_atomics_a_mask_acc_T_43"} : i1
    %591 = comb.or bin %392, %590 {sv.namehint = "atomics_a_mask_acc_19"} : i1
    %592 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_10"} : i2
    %593 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_10"} : i1
    %594 = comb.and bin %587, %593 {sv.namehint = "atomics_a_mask_eq_44"} : i1
    %595 = comb.and bin %592, %594 {sv.namehint = "_atomics_a_mask_acc_T_44"} : i1
    %596 = comb.or bin %589, %595 {sv.namehint = "atomics_a_mask_acc_20"} : i1
    %597 = comb.and bin %587, %401 {sv.namehint = "atomics_a_mask_eq_45"} : i1
    %598 = comb.and bin %592, %597 {sv.namehint = "_atomics_a_mask_acc_T_45"} : i1
    %599 = comb.or bin %589, %598 {sv.namehint = "atomics_a_mask_acc_21"} : i1
    %600 = comb.and bin %394, %593 {sv.namehint = "atomics_a_mask_eq_46"} : i1
    %601 = comb.and bin %592, %600 {sv.namehint = "_atomics_a_mask_acc_T_46"} : i1
    %602 = comb.or bin %591, %601 {sv.namehint = "atomics_a_mask_acc_22"} : i1
    %603 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_47"} : i1
    %604 = comb.and bin %592, %603 {sv.namehint = "_atomics_a_mask_acc_T_47"} : i1
    %605 = comb.or bin %591, %604 {sv.namehint = "atomics_a_mask_acc_23"} : i1
    %606 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_11"} : i1
    %607 = comb.and bin %594, %606 {sv.namehint = "atomics_a_mask_eq_48"} : i1
    %608 = comb.or bin %596, %607 {sv.namehint = "atomics_a_mask_lo_lo_lo_3"} : i1
    %609 = comb.and bin %594, %415 {sv.namehint = "atomics_a_mask_eq_49"} : i1
    %610 = comb.or bin %596, %609 {sv.namehint = "atomics_a_mask_lo_lo_hi_3"} : i1
    %611 = comb.and bin %597, %606 {sv.namehint = "atomics_a_mask_eq_50"} : i1
    %612 = comb.or bin %599, %611 {sv.namehint = "atomics_a_mask_lo_hi_lo_3"} : i1
    %613 = comb.and bin %597, %415 {sv.namehint = "atomics_a_mask_eq_51"} : i1
    %614 = comb.or bin %599, %613 {sv.namehint = "atomics_a_mask_lo_hi_hi_3"} : i1
    %615 = comb.and bin %600, %606 {sv.namehint = "atomics_a_mask_eq_52"} : i1
    %616 = comb.or bin %602, %615 {sv.namehint = "atomics_a_mask_hi_lo_lo_3"} : i1
    %617 = comb.and bin %600, %415 {sv.namehint = "atomics_a_mask_eq_53"} : i1
    %618 = comb.or bin %602, %617 {sv.namehint = "atomics_a_mask_hi_lo_hi_3"} : i1
    %619 = comb.and bin %603, %606 {sv.namehint = "atomics_a_mask_eq_54"} : i1
    %620 = comb.or bin %605, %619 {sv.namehint = "atomics_a_mask_hi_hi_lo_3"} : i1
    %621 = comb.and bin %603, %415 {sv.namehint = "atomics_a_mask_eq_55"} : i1
    %622 = comb.or bin %605, %621 {sv.namehint = "atomics_a_mask_hi_hi_hi_3"} : i1
    %623 = comb.concat %622, %620, %618, %616, %614, %612, %610, %608 {sv.namehint = "atomics_a_3_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %624 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_12"} : i2
    %625 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_56"} : i1
    %626 = comb.and bin %624, %625 {sv.namehint = "_atomics_a_mask_acc_T_56"} : i1
    %627 = comb.or bin %392, %626 {sv.namehint = "atomics_a_mask_acc_24"} : i1
    %628 = comb.and bin %624, %394 {sv.namehint = "_atomics_a_mask_acc_T_57"} : i1
    %629 = comb.or bin %392, %628 {sv.namehint = "atomics_a_mask_acc_25"} : i1
    %630 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_13"} : i2
    %631 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_13"} : i1
    %632 = comb.and bin %625, %631 {sv.namehint = "atomics_a_mask_eq_58"} : i1
    %633 = comb.and bin %630, %632 {sv.namehint = "_atomics_a_mask_acc_T_58"} : i1
    %634 = comb.or bin %627, %633 {sv.namehint = "atomics_a_mask_acc_26"} : i1
    %635 = comb.and bin %625, %401 {sv.namehint = "atomics_a_mask_eq_59"} : i1
    %636 = comb.and bin %630, %635 {sv.namehint = "_atomics_a_mask_acc_T_59"} : i1
    %637 = comb.or bin %627, %636 {sv.namehint = "atomics_a_mask_acc_27"} : i1
    %638 = comb.and bin %394, %631 {sv.namehint = "atomics_a_mask_eq_60"} : i1
    %639 = comb.and bin %630, %638 {sv.namehint = "_atomics_a_mask_acc_T_60"} : i1
    %640 = comb.or bin %629, %639 {sv.namehint = "atomics_a_mask_acc_28"} : i1
    %641 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_61"} : i1
    %642 = comb.and bin %630, %641 {sv.namehint = "_atomics_a_mask_acc_T_61"} : i1
    %643 = comb.or bin %629, %642 {sv.namehint = "atomics_a_mask_acc_29"} : i1
    %644 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_14"} : i1
    %645 = comb.and bin %632, %644 {sv.namehint = "atomics_a_mask_eq_62"} : i1
    %646 = comb.or bin %634, %645 {sv.namehint = "atomics_a_mask_lo_lo_lo_4"} : i1
    %647 = comb.and bin %632, %415 {sv.namehint = "atomics_a_mask_eq_63"} : i1
    %648 = comb.or bin %634, %647 {sv.namehint = "atomics_a_mask_lo_lo_hi_4"} : i1
    %649 = comb.and bin %635, %644 {sv.namehint = "atomics_a_mask_eq_64"} : i1
    %650 = comb.or bin %637, %649 {sv.namehint = "atomics_a_mask_lo_hi_lo_4"} : i1
    %651 = comb.and bin %635, %415 {sv.namehint = "atomics_a_mask_eq_65"} : i1
    %652 = comb.or bin %637, %651 {sv.namehint = "atomics_a_mask_lo_hi_hi_4"} : i1
    %653 = comb.and bin %638, %644 {sv.namehint = "atomics_a_mask_eq_66"} : i1
    %654 = comb.or bin %640, %653 {sv.namehint = "atomics_a_mask_hi_lo_lo_4"} : i1
    %655 = comb.and bin %638, %415 {sv.namehint = "atomics_a_mask_eq_67"} : i1
    %656 = comb.or bin %640, %655 {sv.namehint = "atomics_a_mask_hi_lo_hi_4"} : i1
    %657 = comb.and bin %641, %644 {sv.namehint = "atomics_a_mask_eq_68"} : i1
    %658 = comb.or bin %643, %657 {sv.namehint = "atomics_a_mask_hi_hi_lo_4"} : i1
    %659 = comb.and bin %641, %415 {sv.namehint = "atomics_a_mask_eq_69"} : i1
    %660 = comb.or bin %643, %659 {sv.namehint = "atomics_a_mask_hi_hi_hi_4"} : i1
    %661 = comb.concat %660, %658, %656, %654, %652, %650, %648, %646 {sv.namehint = "atomics_a_4_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %662 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_15"} : i2
    %663 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_70"} : i1
    %664 = comb.and bin %662, %663 {sv.namehint = "_atomics_a_mask_acc_T_70"} : i1
    %665 = comb.or bin %392, %664 {sv.namehint = "atomics_a_mask_acc_30"} : i1
    %666 = comb.and bin %662, %394 {sv.namehint = "_atomics_a_mask_acc_T_71"} : i1
    %667 = comb.or bin %392, %666 {sv.namehint = "atomics_a_mask_acc_31"} : i1
    %668 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_16"} : i2
    %669 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_16"} : i1
    %670 = comb.and bin %663, %669 {sv.namehint = "atomics_a_mask_eq_72"} : i1
    %671 = comb.and bin %668, %670 {sv.namehint = "_atomics_a_mask_acc_T_72"} : i1
    %672 = comb.or bin %665, %671 {sv.namehint = "atomics_a_mask_acc_32"} : i1
    %673 = comb.and bin %663, %401 {sv.namehint = "atomics_a_mask_eq_73"} : i1
    %674 = comb.and bin %668, %673 {sv.namehint = "_atomics_a_mask_acc_T_73"} : i1
    %675 = comb.or bin %665, %674 {sv.namehint = "atomics_a_mask_acc_33"} : i1
    %676 = comb.and bin %394, %669 {sv.namehint = "atomics_a_mask_eq_74"} : i1
    %677 = comb.and bin %668, %676 {sv.namehint = "_atomics_a_mask_acc_T_74"} : i1
    %678 = comb.or bin %667, %677 {sv.namehint = "atomics_a_mask_acc_34"} : i1
    %679 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_75"} : i1
    %680 = comb.and bin %668, %679 {sv.namehint = "_atomics_a_mask_acc_T_75"} : i1
    %681 = comb.or bin %667, %680 {sv.namehint = "atomics_a_mask_acc_35"} : i1
    %682 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_17"} : i1
    %683 = comb.and bin %670, %682 {sv.namehint = "atomics_a_mask_eq_76"} : i1
    %684 = comb.or bin %672, %683 {sv.namehint = "atomics_a_mask_lo_lo_lo_5"} : i1
    %685 = comb.and bin %670, %415 {sv.namehint = "atomics_a_mask_eq_77"} : i1
    %686 = comb.or bin %672, %685 {sv.namehint = "atomics_a_mask_lo_lo_hi_5"} : i1
    %687 = comb.and bin %673, %682 {sv.namehint = "atomics_a_mask_eq_78"} : i1
    %688 = comb.or bin %675, %687 {sv.namehint = "atomics_a_mask_lo_hi_lo_5"} : i1
    %689 = comb.and bin %673, %415 {sv.namehint = "atomics_a_mask_eq_79"} : i1
    %690 = comb.or bin %675, %689 {sv.namehint = "atomics_a_mask_lo_hi_hi_5"} : i1
    %691 = comb.and bin %676, %682 {sv.namehint = "atomics_a_mask_eq_80"} : i1
    %692 = comb.or bin %678, %691 {sv.namehint = "atomics_a_mask_hi_lo_lo_5"} : i1
    %693 = comb.and bin %676, %415 {sv.namehint = "atomics_a_mask_eq_81"} : i1
    %694 = comb.or bin %678, %693 {sv.namehint = "atomics_a_mask_hi_lo_hi_5"} : i1
    %695 = comb.and bin %679, %682 {sv.namehint = "atomics_a_mask_eq_82"} : i1
    %696 = comb.or bin %681, %695 {sv.namehint = "atomics_a_mask_hi_hi_lo_5"} : i1
    %697 = comb.and bin %679, %415 {sv.namehint = "atomics_a_mask_eq_83"} : i1
    %698 = comb.or bin %681, %697 {sv.namehint = "atomics_a_mask_hi_hi_hi_5"} : i1
    %699 = comb.concat %698, %696, %694, %692, %690, %688, %686, %684 {sv.namehint = "atomics_a_5_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %700 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_18"} : i2
    %701 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_84"} : i1
    %702 = comb.and bin %700, %701 {sv.namehint = "_atomics_a_mask_acc_T_84"} : i1
    %703 = comb.or bin %392, %702 {sv.namehint = "atomics_a_mask_acc_36"} : i1
    %704 = comb.and bin %700, %394 {sv.namehint = "_atomics_a_mask_acc_T_85"} : i1
    %705 = comb.or bin %392, %704 {sv.namehint = "atomics_a_mask_acc_37"} : i1
    %706 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_19"} : i2
    %707 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_19"} : i1
    %708 = comb.and bin %701, %707 {sv.namehint = "atomics_a_mask_eq_86"} : i1
    %709 = comb.and bin %706, %708 {sv.namehint = "_atomics_a_mask_acc_T_86"} : i1
    %710 = comb.or bin %703, %709 {sv.namehint = "atomics_a_mask_acc_38"} : i1
    %711 = comb.and bin %701, %401 {sv.namehint = "atomics_a_mask_eq_87"} : i1
    %712 = comb.and bin %706, %711 {sv.namehint = "_atomics_a_mask_acc_T_87"} : i1
    %713 = comb.or bin %703, %712 {sv.namehint = "atomics_a_mask_acc_39"} : i1
    %714 = comb.and bin %394, %707 {sv.namehint = "atomics_a_mask_eq_88"} : i1
    %715 = comb.and bin %706, %714 {sv.namehint = "_atomics_a_mask_acc_T_88"} : i1
    %716 = comb.or bin %705, %715 {sv.namehint = "atomics_a_mask_acc_40"} : i1
    %717 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_89"} : i1
    %718 = comb.and bin %706, %717 {sv.namehint = "_atomics_a_mask_acc_T_89"} : i1
    %719 = comb.or bin %705, %718 {sv.namehint = "atomics_a_mask_acc_41"} : i1
    %720 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_20"} : i1
    %721 = comb.and bin %708, %720 {sv.namehint = "atomics_a_mask_eq_90"} : i1
    %722 = comb.or bin %710, %721 {sv.namehint = "atomics_a_mask_lo_lo_lo_6"} : i1
    %723 = comb.and bin %708, %415 {sv.namehint = "atomics_a_mask_eq_91"} : i1
    %724 = comb.or bin %710, %723 {sv.namehint = "atomics_a_mask_lo_lo_hi_6"} : i1
    %725 = comb.and bin %711, %720 {sv.namehint = "atomics_a_mask_eq_92"} : i1
    %726 = comb.or bin %713, %725 {sv.namehint = "atomics_a_mask_lo_hi_lo_6"} : i1
    %727 = comb.and bin %711, %415 {sv.namehint = "atomics_a_mask_eq_93"} : i1
    %728 = comb.or bin %713, %727 {sv.namehint = "atomics_a_mask_lo_hi_hi_6"} : i1
    %729 = comb.and bin %714, %720 {sv.namehint = "atomics_a_mask_eq_94"} : i1
    %730 = comb.or bin %716, %729 {sv.namehint = "atomics_a_mask_hi_lo_lo_6"} : i1
    %731 = comb.and bin %714, %415 {sv.namehint = "atomics_a_mask_eq_95"} : i1
    %732 = comb.or bin %716, %731 {sv.namehint = "atomics_a_mask_hi_lo_hi_6"} : i1
    %733 = comb.and bin %717, %720 {sv.namehint = "atomics_a_mask_eq_96"} : i1
    %734 = comb.or bin %719, %733 {sv.namehint = "atomics_a_mask_hi_hi_lo_6"} : i1
    %735 = comb.and bin %717, %415 {sv.namehint = "atomics_a_mask_eq_97"} : i1
    %736 = comb.or bin %719, %735 {sv.namehint = "atomics_a_mask_hi_hi_hi_6"} : i1
    %737 = comb.concat %736, %734, %732, %730, %728, %726, %724, %722 {sv.namehint = "atomics_a_6_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %738 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_21"} : i2
    %739 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_98"} : i1
    %740 = comb.and bin %738, %739 {sv.namehint = "_atomics_a_mask_acc_T_98"} : i1
    %741 = comb.or bin %392, %740 {sv.namehint = "atomics_a_mask_acc_42"} : i1
    %742 = comb.and bin %738, %394 {sv.namehint = "_atomics_a_mask_acc_T_99"} : i1
    %743 = comb.or bin %392, %742 {sv.namehint = "atomics_a_mask_acc_43"} : i1
    %744 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_22"} : i2
    %745 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_22"} : i1
    %746 = comb.and bin %739, %745 {sv.namehint = "atomics_a_mask_eq_100"} : i1
    %747 = comb.and bin %744, %746 {sv.namehint = "_atomics_a_mask_acc_T_100"} : i1
    %748 = comb.or bin %741, %747 {sv.namehint = "atomics_a_mask_acc_44"} : i1
    %749 = comb.and bin %739, %401 {sv.namehint = "atomics_a_mask_eq_101"} : i1
    %750 = comb.and bin %744, %749 {sv.namehint = "_atomics_a_mask_acc_T_101"} : i1
    %751 = comb.or bin %741, %750 {sv.namehint = "atomics_a_mask_acc_45"} : i1
    %752 = comb.and bin %394, %745 {sv.namehint = "atomics_a_mask_eq_102"} : i1
    %753 = comb.and bin %744, %752 {sv.namehint = "_atomics_a_mask_acc_T_102"} : i1
    %754 = comb.or bin %743, %753 {sv.namehint = "atomics_a_mask_acc_46"} : i1
    %755 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_103"} : i1
    %756 = comb.and bin %744, %755 {sv.namehint = "_atomics_a_mask_acc_T_103"} : i1
    %757 = comb.or bin %743, %756 {sv.namehint = "atomics_a_mask_acc_47"} : i1
    %758 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_23"} : i1
    %759 = comb.and bin %746, %758 {sv.namehint = "atomics_a_mask_eq_104"} : i1
    %760 = comb.or bin %748, %759 {sv.namehint = "atomics_a_mask_lo_lo_lo_7"} : i1
    %761 = comb.and bin %746, %415 {sv.namehint = "atomics_a_mask_eq_105"} : i1
    %762 = comb.or bin %748, %761 {sv.namehint = "atomics_a_mask_lo_lo_hi_7"} : i1
    %763 = comb.and bin %749, %758 {sv.namehint = "atomics_a_mask_eq_106"} : i1
    %764 = comb.or bin %751, %763 {sv.namehint = "atomics_a_mask_lo_hi_lo_7"} : i1
    %765 = comb.and bin %749, %415 {sv.namehint = "atomics_a_mask_eq_107"} : i1
    %766 = comb.or bin %751, %765 {sv.namehint = "atomics_a_mask_lo_hi_hi_7"} : i1
    %767 = comb.and bin %752, %758 {sv.namehint = "atomics_a_mask_eq_108"} : i1
    %768 = comb.or bin %754, %767 {sv.namehint = "atomics_a_mask_hi_lo_lo_7"} : i1
    %769 = comb.and bin %752, %415 {sv.namehint = "atomics_a_mask_eq_109"} : i1
    %770 = comb.or bin %754, %769 {sv.namehint = "atomics_a_mask_hi_lo_hi_7"} : i1
    %771 = comb.and bin %755, %758 {sv.namehint = "atomics_a_mask_eq_110"} : i1
    %772 = comb.or bin %757, %771 {sv.namehint = "atomics_a_mask_hi_hi_lo_7"} : i1
    %773 = comb.and bin %755, %415 {sv.namehint = "atomics_a_mask_eq_111"} : i1
    %774 = comb.or bin %757, %773 {sv.namehint = "atomics_a_mask_hi_hi_hi_7"} : i1
    %775 = comb.concat %774, %772, %770, %768, %766, %764, %762, %760 {sv.namehint = "atomics_a_7_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %776 = comb.icmp eq %size, %c-2_i2 {sv.namehint = "atomics_a_mask_size_24"} : i2
    %777 = comb.xor bin %394, %true {sv.namehint = "atomics_a_mask_eq_112"} : i1
    %778 = comb.and bin %776, %777 {sv.namehint = "_atomics_a_mask_acc_T_112"} : i1
    %779 = comb.or bin %392, %778 {sv.namehint = "atomics_a_mask_acc_48"} : i1
    %780 = comb.and bin %776, %394 {sv.namehint = "_atomics_a_mask_acc_T_113"} : i1
    %781 = comb.or bin %392, %780 {sv.namehint = "atomics_a_mask_acc_49"} : i1
    %782 = comb.icmp eq %size, %c1_i2 {sv.namehint = "atomics_a_mask_size_25"} : i2
    %783 = comb.xor bin %401, %true {sv.namehint = "atomics_a_mask_nbit_25"} : i1
    %784 = comb.and bin %777, %783 {sv.namehint = "atomics_a_mask_eq_114"} : i1
    %785 = comb.and bin %782, %784 {sv.namehint = "_atomics_a_mask_acc_T_114"} : i1
    %786 = comb.or bin %779, %785 {sv.namehint = "atomics_a_mask_acc_50"} : i1
    %787 = comb.and bin %777, %401 {sv.namehint = "atomics_a_mask_eq_115"} : i1
    %788 = comb.and bin %782, %787 {sv.namehint = "_atomics_a_mask_acc_T_115"} : i1
    %789 = comb.or bin %779, %788 {sv.namehint = "atomics_a_mask_acc_51"} : i1
    %790 = comb.and bin %394, %783 {sv.namehint = "atomics_a_mask_eq_116"} : i1
    %791 = comb.and bin %782, %790 {sv.namehint = "_atomics_a_mask_acc_T_116"} : i1
    %792 = comb.or bin %781, %791 {sv.namehint = "atomics_a_mask_acc_52"} : i1
    %793 = comb.and bin %394, %401 {sv.namehint = "atomics_a_mask_eq_117"} : i1
    %794 = comb.and bin %782, %793 {sv.namehint = "_atomics_a_mask_acc_T_117"} : i1
    %795 = comb.or bin %781, %794 {sv.namehint = "atomics_a_mask_acc_53"} : i1
    %796 = comb.xor bin %415, %true {sv.namehint = "atomics_a_mask_nbit_26"} : i1
    %797 = comb.and bin %784, %796 {sv.namehint = "atomics_a_mask_eq_118"} : i1
    %798 = comb.or bin %786, %797 {sv.namehint = "atomics_a_mask_lo_lo_lo_8"} : i1
    %799 = comb.and bin %784, %415 {sv.namehint = "atomics_a_mask_eq_119"} : i1
    %800 = comb.or bin %786, %799 {sv.namehint = "atomics_a_mask_lo_lo_hi_8"} : i1
    %801 = comb.and bin %787, %796 {sv.namehint = "atomics_a_mask_eq_120"} : i1
    %802 = comb.or bin %789, %801 {sv.namehint = "atomics_a_mask_lo_hi_lo_8"} : i1
    %803 = comb.and bin %787, %415 {sv.namehint = "atomics_a_mask_eq_121"} : i1
    %804 = comb.or bin %789, %803 {sv.namehint = "atomics_a_mask_lo_hi_hi_8"} : i1
    %805 = comb.and bin %790, %796 {sv.namehint = "atomics_a_mask_eq_122"} : i1
    %806 = comb.or bin %792, %805 {sv.namehint = "atomics_a_mask_hi_lo_lo_8"} : i1
    %807 = comb.and bin %790, %415 {sv.namehint = "atomics_a_mask_eq_123"} : i1
    %808 = comb.or bin %792, %807 {sv.namehint = "atomics_a_mask_hi_lo_hi_8"} : i1
    %809 = comb.and bin %793, %796 {sv.namehint = "atomics_a_mask_eq_124"} : i1
    %810 = comb.or bin %795, %809 {sv.namehint = "atomics_a_mask_hi_hi_lo_8"} : i1
    %811 = comb.and bin %793, %415 {sv.namehint = "atomics_a_mask_eq_125"} : i1
    %812 = comb.or bin %795, %811 {sv.namehint = "atomics_a_mask_hi_hi_hi_8"} : i1
    %813 = comb.concat %812, %810, %808, %806, %804, %802, %800, %798 {sv.namehint = "atomics_a_8_mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %814 = comb.mux bin %152, %509, %c0_i8 {sv.namehint = "_atomics_T_1_mask"} : i8
    %815 = comb.xor %152, %true : i1
    %816 = comb.or %153, %815 : i1
    %817 = comb.mux bin %816, %c0_i3, %c3_i3 {sv.namehint = "_atomics_T_3_param"} : i3
    %818 = comb.mux bin %153, %547, %814 {sv.namehint = "_atomics_T_3_mask"} : i8
    %819 = comb.mux bin %154, %c1_i3, %817 {sv.namehint = "_atomics_T_5_param"} : i3
    %820 = comb.mux bin %154, %585, %818 {sv.namehint = "_atomics_T_5_mask"} : i8
    %821 = comb.or bin %155, %154, %153, %152 : i1
    %822 = comb.mux bin %821, %c3_i3, %c0_i3 {sv.namehint = "_atomics_T_7_opcode"} : i3
    %823 = comb.mux bin %155, %c2_i3, %819 {sv.namehint = "_atomics_T_7_param"} : i3
    %824 = comb.mux bin %155, %623, %820 {sv.namehint = "_atomics_T_7_mask"} : i8
    %825 = comb.mux bin %156, %c-4_i3, %823 {sv.namehint = "_atomics_T_9_param"} : i3
    %826 = comb.mux bin %156, %661, %824 {sv.namehint = "_atomics_T_9_mask"} : i8
    %827 = comb.mux bin %157, %c0_i3, %825 {sv.namehint = "_atomics_T_11_param"} : i3
    %828 = comb.mux bin %157, %699, %826 {sv.namehint = "_atomics_T_11_mask"} : i8
    %829 = comb.mux bin %158, %c1_i3, %827 {sv.namehint = "_atomics_T_13_param"} : i3
    %830 = comb.mux bin %158, %737, %828 {sv.namehint = "_atomics_T_13_mask"} : i8
    %831 = comb.mux bin %159, %c2_i3, %829 {sv.namehint = "_atomics_T_15_param"} : i3
    %832 = comb.mux bin %159, %775, %830 {sv.namehint = "_atomics_T_15_mask"} : i8
    %833 = comb.or bin %160, %159, %158, %157, %156 : i1
    %834 = comb.mux bin %833, %c2_i3, %822 {sv.namehint = "atomics_opcode"} : i3
    %835 = comb.mux bin %160, %c3_i3, %831 {sv.namehint = "atomics_param"} : i3
    %836 = comb.mux bin %160, %813, %832 {sv.namehint = "atomics_mask"} : i8
    %837 = comb.and bin %release_ack_wait, %release_ack_dirty {sv.namehint = "_block_probe_for_pending_release_ack_T"} : i1
    %838 = comb.xor bin %837, %true {sv.namehint = "_tl_out_a_valid_T_2"} : i1
    %839 = comb.xor bin %255, %true {sv.namehint = "_tl_out_a_valid_T_8"} : i1
    %840 = comb.and bin %205, %838, %839 {sv.namehint = "_tl_out_a_valid_T_9"} : i1
    %841 = comb.or bin %208, %840 {sv.namehint = "deq_valid"} : i1
    %842 = comb.concat %false, %197 {sv.namehint = "tl_out_a_bits_a_param"} : i1, i2
    %843 = comb.extract %s2_req_addr from 6 : (i34) -> i26
    %844 = comb.concat %843, %c0_i6 {sv.namehint = "tl_out_a_bits_a_address"} : i26, i6
    %845 = comb.xor bin %164, %true {sv.namehint = "_tl_out_a_bits_T_3"} : i1
    %846 = comb.xor bin %161, %true {sv.namehint = "_tl_out_a_bits_T_5"} : i1
    %847 = comb.mux bin %161, %834, %c0_i3 {sv.namehint = "_tl_out_a_bits_T_6_opcode"} : i3
    %848 = comb.xor %161, %true : i1
    %849 = comb.xor %161, %true : i1
    %850 = comb.mux bin %161, %836, %471 {sv.namehint = "_tl_out_a_bits_T_6_mask"} : i8
    %851 = comb.xor %161, %true : i1
    %852 = comb.mux bin %163, %c1_i3, %847 {sv.namehint = "_tl_out_a_bits_T_7_opcode"} : i3
    %853 = comb.mux bin %163, %mergedMask, %850 {sv.namehint = "_tl_out_a_bits_T_7_mask"} : i8
    %854 = comb.or %163, %851, %160, %159, %158, %157, %156, %155, %154, %153, %152 : i1
    %855 = comb.mux bin %164, %852, %c-4_i3 {sv.namehint = "_tl_out_a_bits_T_8_opcode"} : i3
    %856 = comb.or bin %845, %163, %846 : i1
    %857 = comb.mux bin %856, %c0_i3, %835 {sv.namehint = "_tl_out_a_bits_T_8_param"} : i3
    %858 = comb.xor %164, %true : i1
    %859 = comb.or %858, %163, %848, %160, %159, %158, %157, %156, %155, %154, %153, %152 : i1
    %860 = comb.mux bin %859, %390, %c0_i4 {sv.namehint = "_tl_out_a_bits_T_8_size"} : i4
    %861 = comb.or %845, %163, %846, %160, %159, %158, %157, %156, %155, %154, %153, %152 {sv.namehint = "_tl_out_a_bits_T_8_source"} : i1
    %862 = comb.xor %164, %true : i1
    %863 = comb.or %862, %163, %849, %160, %159, %158, %157, %156, %155, %154, %153, %152 : i1
    %864 = comb.mux bin %863, %391, %c0_i32 {sv.namehint = "_tl_out_a_bits_T_8_address"} : i32
    %865 = comb.mux bin %164, %853, %433 {sv.namehint = "_tl_out_a_bits_T_8_mask"} : i8
    %866 = comb.mux bin %s2_pma_cacheable, %c-2_i3, %855 {sv.namehint = "deq_bits_opcode"} : i3
    %867 = comb.mux bin %s2_pma_cacheable, %842, %857 {sv.namehint = "deq_bits_param"} : i3
    %868 = comb.mux bin %s2_pma_cacheable, %c6_i4, %860 {sv.namehint = "deq_bits_size"} : i4
    %869 = comb.xor %s2_pma_cacheable, %true : i1
    %870 = comb.and %869, %861 {sv.namehint = "deq_bits_source"} : i1
    %871 = comb.mux bin %s2_pma_cacheable, %844, %864 {sv.namehint = "deq_bits_address"} : i32
    %872 = comb.mux bin %s2_pma_cacheable, %c-1_i8, %865 {sv.namehint = "deq_bits_mask"} : i8
    %873 = comb.xor %854, %true : i1
    %874 = comb.or %s2_pma_cacheable, %845, %873 : i1
    %875 = comb.mux bin %874, %c0_i64, %pstore1_data {sv.namehint = "deq_bits_data"} : i64
    %876 = comb.icmp bin eq %s2_req_dprv, %c-1_i2 {sv.namehint = "_tl_out_a_bits_user_amba_prot_privileged_T"} : i2
    %877 = comb.or bin %876, %s2_pma_cacheable {sv.namehint = "deq_bits_user_amba_prot_privileged"} : i1
    %878 = comb.and bin %auto_out_a_ready, %841 {sv.namehint = "_io_cpu_perf_acquire_T"} : i1
    %879 = comb.and bin %878, %203 : i1
    %880 = comb.or %879, %uncachedInFlight_0 : i1
    %881 = comb.mux bin %879, %s2_req_addr, %uncachedReqs_0_addr : i34
    %882 = comb.mux bin %879, %s2_req_tag, %uncachedReqs_0_tag : i6
    %883 = comb.mux bin %879, %size, %uncachedReqs_0_size : i2
    %884 = comb.mux bin %879, %s2_req_signed, %uncachedReqs_0_signed : i1
    %885 = comb.and %878, %s2_pma_cacheable : i1
    %886 = comb.or %885, %cached_grant_wait : i1
    %887 = comb.and bin %1018, %auto_out_d_valid {sv.namehint = "_io_errors_bus_valid_T"} : i1
    %888 = comb.concat %c0_i23, %auto_out_d_bits_size : i23, i4
    %889 = comb.shl bin %c4095_i27, %888 {sv.namehint = "_beats1_decode_T_1"} : i27
    %890 = comb.extract %889 from 3 : (i27) -> i9
    %891 = comb.xor %890, %c-1_i9 {sv.namehint = "_beats1_decode_T_3"} : i9
    %892 = comb.extract %auto_out_d_bits_opcode from 0 {sv.namehint = "beats1_opdata"} : (i3) -> i1
    %893 = comb.mux bin %892, %891, %c0_i9 {sv.namehint = "beats1"} : i9
    %counter = seq.firreg %903 clock %gated_clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1234 : ui64} : i9
    %894 = comb.add %counter, %c-1_i9 {sv.namehint = "_counter1_T"} : i9
    %895 = comb.icmp bin ne %counter, %c0_i9 {sv.namehint = "_bundleOut_0_d_ready_T"} : i9
    %896 = comb.xor bin %895, %true {sv.namehint = "d_first"} : i1
    %897 = comb.icmp bin eq %counter, %c1_i9 {sv.namehint = "_last_T"} : i9
    %898 = comb.icmp bin eq %893, %c0_i9 {sv.namehint = "_last_T_1"} : i9
    %899 = comb.or bin %897, %898 {sv.namehint = "d_last"} : i1
    %900 = comb.xor bin %894, %c-1_i9 {sv.namehint = "_count_T"} : i9
    %901 = comb.and bin %893, %900 {sv.namehint = "count"} : i9
    %902 = comb.mux bin %895, %894, %893 {sv.namehint = "_counter_T"} : i9
    %903 = comb.mux bin %887, %902, %counter : i9
    %904 = comb.icmp bin eq %auto_out_d_bits_opcode, %c1_i3 {sv.namehint = "grantIsUncachedData"} : i3
    %905 = comb.icmp bin eq %auto_out_d_bits_opcode, %c0_i3 : i3
    %906 = comb.icmp bin eq %auto_out_d_bits_opcode, %c2_i3 : i3
    %907 = comb.or bin %904, %905, %906 {sv.namehint = "grantIsUncached"} : i1
    %908 = comb.icmp bin eq %auto_out_d_bits_opcode, %c-4_i3 {sv.namehint = "_grantIsCached_T"} : i3
    %909 = comb.icmp bin eq %auto_out_d_bits_opcode, %c-3_i3 {sv.namehint = "grantIsRefill"} : i3
    %910 = comb.or bin %908, %909 {sv.namehint = "grantIsCached"} : i1
    %911 = comb.icmp bin eq %auto_out_d_bits_opcode, %c-2_i3 {sv.namehint = "grantIsVoluntary"} : i3
    %grantInProgress = seq.firreg %931 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 1243 : ui64} : i1
    %blockProbeAfterGrantCount = seq.firreg %932 clock %gated_clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 1244 : ui64} : i3
    %912 = comb.icmp bin ne %blockProbeAfterGrantCount, %c0_i3 {sv.namehint = "_clock_en_reg_T_25"} : i3
    %913 = comb.add %blockProbeAfterGrantCount, %c-1_i3 {sv.namehint = "_blockProbeAfterGrantCount_T"} : i3
    %914 = comb.mux bin %912, %913, %blockProbeAfterGrantCount : i3
    %915 = comb.icmp bin eq %release_state, %c6_i4 {sv.namehint = "_metaArb_io_in_4_valid_T"} : i4
    %916 = comb.icmp bin eq %release_state, %c-7_i4 {sv.namehint = "_bundleOut_0_c_valid_T"} : i4
    %917 = comb.or bin %47, %915, %916 {sv.namehint = "_canAcceptCachedGrant_T_4"} : i1
    %918 = comb.xor bin %917, %true {sv.namehint = "canAcceptCachedGrant"} : i1
    %919 = comb.or bin %895, %auto_out_e_ready {sv.namehint = "_bundleOut_0_d_ready_T_1"} : i1
    %920 = comb.and bin %919, %918 {sv.namehint = "_bundleOut_0_d_ready_T_2"} : i1
    %921 = comb.xor %910, %true : i1
    %922 = comb.or %921, %920 {sv.namehint = "_bundleOut_0_d_ready_T_3"} : i1
    %923 = comb.and bin %887, %910 : i1
    %924 = comb.or bin %cached_grant_wait, %reset : i1
    %925 = comb.xor bin %924, %true : i1
    %926 = comb.and bin %923, %925 : i1
    %927 = comb.and bin %887, %910, %899 : i1
    %928 = comb.xor %927, %true : i1
    %929 = comb.and %928, %886 : i1
    %930 = comb.xor bin %899, %true : i1
    %931 = comb.mux bin %923, %930, %grantInProgress : i1
    %932 = comb.mux bin %927, %c-1_i3, %914 : i3
    %933 = comb.xor bin %910, %true : i1
    %934 = comb.and bin %887, %933 : i1
    %935 = comb.and bin %934, %907 : i1
    %936 = comb.and bin %auto_out_d_bits_source, %899 : i1
    %937 = comb.and bin %935, %936 : i1
    %938 = comb.or bin %uncachedInFlight_0, %reset : i1
    %939 = comb.xor bin %938, %true : i1
    %940 = comb.and bin %937, %939 : i1
    %941 = comb.and bin %907, %936 : i1
    %942 = comb.xor %941, %true : i1
    %943 = comb.xor %887, %true : i1
    %944 = comb.or %943, %910, %942 : i1
    %945 = comb.and %944, %880 : i1
    %946 = comb.and bin %907, %904 : i1
    %947 = comb.xor %946, %true : i1
    %948 = comb.xor %887, %true : i1
    %949 = comb.or %948, %910, %947 : i1
    %950 = comb.mux bin %949, %c1_i2, %c-2_i2 {sv.namehint = "s1_data_way"} : i2
    %951 = comb.xor %946, %true : i1
    %952 = comb.xor %887, %true : i1
    %953 = comb.or %952, %910, %951 : i1
    %954 = comb.mux bin %953, %134, %c0_i5 : i5
    %955 = comb.xor %946, %true : i1
    %956 = comb.xor %887, %true : i1
    %957 = comb.or %956, %910, %955 : i1
    %958 = comb.mux bin %957, %135, %uncachedReqs_0_size : i2
    %959 = comb.xor %946, %true : i1
    %960 = comb.xor %887, %true : i1
    %961 = comb.or %960, %910, %959 : i1
    %962 = comb.mux bin %961, %136, %uncachedReqs_0_signed : i1
    %963 = comb.xor %946, %true : i1
    %964 = comb.xor %887, %true : i1
    %965 = comb.or %964, %910, %963 : i1
    %966 = comb.mux bin %965, %133, %uncachedReqs_0_tag : i6
    %967 = comb.extract %s1_vaddr from 3 : (i34) -> i9
    %968 = comb.extract %uncachedReqs_0_addr from 0 {sv.namehint = "_s2_req_addr_T"} : (i34) -> i3
    %969 = comb.concat %c0_i2, %93, %967, %968 : i2, i20, i9, i3
    %970 = comb.xor %946, %true : i1
    %971 = comb.xor %887, %true : i1
    %972 = comb.or %971, %910, %970 : i1
    %973 = comb.mux bin %972, %139, %969 : i34
    %974 = comb.xor bin %907, %true : i1
    %975 = comb.and bin %934, %974 : i1
    %976 = comb.and bin %975, %911 : i1
    %977 = comb.or bin %release_ack_wait, %reset : i1
    %978 = comb.xor bin %977, %true : i1
    %979 = comb.and bin %976, %978 : i1
    %980 = comb.xor %911, %true : i1
    %981 = comb.xor %887, %true : i1
    %982 = comb.or %981, %910, %907, %980 : i1
    %983 = comb.and %982, %release_ack_wait : i1
    %984 = comb.and bin %auto_out_e_ready, %993 : i1
    %985 = comb.and bin %887, %896, %910 : i1
    %986 = comb.icmp bin eq %984, %985 : i1
    %987 = comb.or bin %986, %reset : i1
    %988 = comb.xor bin %987, %true : i1
    %989 = comb.and bin %auto_out_d_valid, %909, %918 {sv.namehint = "_dataArb_io_in_1_valid_T_1"} : i1
    %990 = comb.xor bin %dataArb.io_in_1_ready, %true {sv.namehint = "_blockUncachedGrant_T"} : i1
    %991 = comb.and bin %909, %990 : i1
    %992 = comb.xor %991, %true : i1
    %993 = comb.and %992, %auto_out_d_valid, %896, %910, %918 {sv.namehint = "tl_out_e_valid"} : i1
    %994 = comb.extract %s2_req_addr from 6 : (i34) -> i6
    %995 = comb.extract %901 from 3 : (i9) -> i6
    %996 = comb.or %994, %995 : i6
    %997 = comb.extract %901 from 0 : (i9) -> i3
    %998 = comb.concat %996, %997, %c0_i3 {sv.namehint = "dataArb.io_in_1_bits_addr"} : i6, i3, i3
    %999 = comb.xor bin %auto_out_d_bits_denied, %true {sv.namehint = "_metaArb_io_in_3_valid_T_1"} : i1
    %1000 = comb.and bin %910, %899, %887, %999 {sv.namehint = "metaArb.io_in_3_valid"} : i1
    %1001 = comb.concat %78, %148 {sv.namehint = "metaArb.io_in_3_bits_addr"} : i22, i12
    %1002 = comb.or bin %162, %163, %151, %152, %153, %154, %155, %156, %157, %158, %159, %160 {sv.namehint = "metaArb_io_in_3_bits_data_c_cat_hi"} : i1
    %1003 = comb.or bin %162, %163, %151, %152, %153, %154, %155, %156, %157, %158, %159, %160, %183, %150 {sv.namehint = "metaArb_io_in_3_bits_data_c_cat_lo"} : i1
    %1004 = comb.concat %1002, %1003, %auto_out_d_bits_param {sv.namehint = "_metaArb_io_in_3_bits_data_T_1"} : i1, i1, i2
    %1005 = comb.icmp bin eq %1004, %c1_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_6"} : i4
    %1006 = comb.concat %false, %1005 {sv.namehint = "_metaArb_io_in_3_bits_data_T_7"} : i1, i1
    %1007 = comb.icmp bin eq %1004, %c0_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_8"} : i4
    %1008 = comb.icmp bin eq %1004, %c4_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_10"} : i4
    %1009 = comb.or bin %1008, %1007 : i1
    %1010 = comb.mux bin %1009, %c-2_i2, %1006 {sv.namehint = "_metaArb_io_in_3_bits_data_T_11"} : i2
    %1011 = comb.icmp bin eq %1004, %c-4_i4 {sv.namehint = "_metaArb_io_in_3_bits_data_T_12"} : i4
    %1012 = comb.mux bin %1011, %c-1_i2, %1010 {sv.namehint = "metaArb_io_in_3_bits_data_meta_state"} : i2
    %1013 = comb.concat %1012, %271 {sv.namehint = "metaArb.io_in_3_bits_data"} : i2, i20
    %blockUncachedGrant = seq.firreg %1028 clock %gated_clock {firrtl.random_init_start = 1247 : ui64} : i1
    %1014 = comb.or bin %blockUncachedGrant, %s1_valid : i1
    %1015 = comb.and bin %904, %1014 : i1
    %1016 = comb.or bin %1015, %991 : i1
    %1017 = comb.xor %1016, %true : i1
    %1018 = comb.and %1017, %922 {sv.namehint = "tl_out_d_ready"} : i1
    %1019 = comb.or bin %auto_out_d_valid, %17, %81 : i1
    %1020 = comb.xor %1019, %true : i1
    %1021 = comb.and %1020, %52 : i1
    %1022 = comb.mux bin %1015, %1021, %92 {sv.namehint = "io_cpu_req_ready"} : i1
    %1023 = comb.and bin %1015, %auto_out_d_valid : i1
    %1024 = comb.or %1023, %989 {sv.namehint = "dataArb.io_in_1_valid"} : i1
    %1025 = comb.xor bin %auto_out_d_valid, %true : i1
    %1026 = comb.xor %1015, %true : i1
    %1027 = comb.or %1026, %1025 {sv.namehint = "dataArb.io_in_1_bits_write"} : i1
    %1028 = comb.mux bin %1023, %990, %dataArb.io_out_valid : i1
    %1029 = comb.or bin %912, %274 {sv.namehint = "block_probe_for_core_progress"} : i1
    %1030 = comb.extract %auto_out_b_bits_address from 6 : (i32) -> i6
    %1031 = comb.extract %release_ack_addr from 6 : (i32) -> i6
    %1032 = comb.xor %1030, %1031 {sv.namehint = "_block_probe_for_pending_release_ack_T_1"} : i6
    %1033 = comb.icmp bin eq %1032, %c0_i6 {sv.namehint = "_block_probe_for_pending_release_ack_T_3"} : i6
    %1034 = comb.and bin %837, %1033 {sv.namehint = "block_probe_for_pending_release_ack"} : i1
    %1035 = comb.xor bin %1029, %true {sv.namehint = "_metaArb_io_in_6_valid_T"} : i1
    %1036 = comb.or bin %1035, %277 {sv.namehint = "_metaArb_io_in_6_valid_T_1"} : i1
    %1037 = comb.and bin %auto_out_b_valid, %1036 {sv.namehint = "_metaArb_io_in_6_valid_T_2"} : i1
    %1038 = comb.or bin %1029, %128, %1034, %grantInProgress, %s1_valid, %s2_valid {sv.namehint = "_bundleOut_0_b_ready_T_2"} : i1
    %1039 = comb.xor bin %1038, %true {sv.namehint = "_bundleOut_0_b_ready_T_3"} : i1
    %1040 = comb.and bin %metaArb.io_in_6_ready, %1039 {sv.namehint = "tl_out_b_ready"} : i1
    %1041 = comb.extract %auto_out_b_bits_address from 6 {sv.namehint = "_metaArb_io_in_6_bits_idx_T"} : (i32) -> i6
    %1042 = comb.extract %io_cpu_req_bits_addr from 32 {sv.namehint = "metaArb_io_in_6_bits_addr_hi"} : (i34) -> i2
    %1043 = comb.and bin %auto_out_c_ready, %1133 {sv.namehint = "_io_cpu_perf_release_T"} : i1
    %1044 = comb.concat %c0_i23, %1149 : i23, i4
    %1045 = comb.shl bin %c4095_i27, %1044 {sv.namehint = "_beats1_decode_T_5"} : i27
    %1046 = comb.extract %1045 from 3 : (i27) -> i9
    %1047 = comb.xor %1046, %c-1_i9 {sv.namehint = "_beats1_decode_T_7"} : i9
    %1048 = comb.extract %1147 from 0 {sv.namehint = "beats1_opdata_1"} : (i3) -> i1
    %1049 = comb.mux bin %1048, %1047, %c0_i9 {sv.namehint = "beats1_1"} : i9
    %counter_1 = seq.firreg %1059 clock %gated_clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1248 : ui64} : i9
    %1050 = comb.add %counter_1, %c-1_i9 {sv.namehint = "_counter1_T_1"} : i9
    %1051 = comb.icmp bin eq %counter_1, %c0_i9 {sv.namehint = "c_first"} : i9
    %1052 = comb.icmp bin eq %counter_1, %c1_i9 {sv.namehint = "_last_T_2"} : i9
    %1053 = comb.icmp bin eq %1049, %c0_i9 {sv.namehint = "_last_T_3"} : i9
    %1054 = comb.or bin %1052, %1053 {sv.namehint = "c_last"} : i1
    %1055 = comb.and bin %1054, %1043 {sv.namehint = "releaseDone"} : i1
    %1056 = comb.xor bin %1050, %c-1_i9 {sv.namehint = "_count_T_1"} : i9
    %1057 = comb.and bin %1049, %1056 {sv.namehint = "c_count"} : i9
    %1058 = comb.mux bin %1051, %1049, %1050 {sv.namehint = "_counter_T_1"} : i9
    %1059 = comb.mux bin %1043, %1058, %counter_1 : i9
    %1060 = comb.and bin %dataArb.io_in_2_ready, %1161 {sv.namehint = "s1_release_data_valid_x58"} : i1
    %s1_release_data_valid = seq.firreg %1060 clock %gated_clock {firrtl.random_init_start = 1257 : ui64} : i1
    %1061 = comb.xor bin %1064, %true {sv.namehint = "_s2_release_data_valid_x61_T"} : i1
    %1062 = comb.and bin %s1_release_data_valid, %1061 {sv.namehint = "s2_release_data_valid_x61"} : i1
    %s2_release_data_valid = seq.firreg %1062 clock %gated_clock {firrtl.random_init_start = 1258 : ui64} : i1
    %1063 = comb.xor bin %1043, %true {sv.namehint = "_releaseRejected_T_1"} : i1
    %1064 = comb.and bin %s2_release_data_valid, %1063 {sv.namehint = "releaseRejected"} : i1
    %1065 = comb.concat %false, %s1_release_data_valid : i1, i1
    %1066 = comb.concat %false, %s2_release_data_valid : i1, i1
    %1067 = comb.add %1065, %1066 {sv.namehint = "_releaseDataBeat_T_2"} : i2
    %1068 = comb.mux bin %1064, %c0_i2, %1067 {sv.namehint = "_releaseDataBeat_T_4"} : i2
    %1069 = comb.concat %false, %1057 : i1, i9
    %1070 = comb.concat %c0_i8, %1068 : i8, i2
    %1071 = comb.add %1069, %1070 {sv.namehint = "_releaseDataBeat_T_5"} : i10
    %1072 = comb.and bin %1051, %release_ack_wait {sv.namehint = "_bundleOut_0_c_valid_T_3"} : i1
    %1073 = comb.xor bin %1072, %true {sv.namehint = "_bundleOut_0_c_valid_T_4"} : i1
    %1074 = comb.and bin %s2_release_data_valid, %1073 {sv.namehint = "_bundleOut_0_c_valid_T_5"} : i1
    %1075 = comb.or bin %200, %s2_flush_valid, %265, %reset : i1
    %1076 = comb.xor bin %1075, %true : i1
    %1077 = comb.and bin %206, %1076 : i1
    %1078 = comb.extract %size from 1 {sv.namehint = "_discard_line_T"} : (i2) -> i1
    %1079 = comb.and bin %200, %1078 {sv.namehint = "_discard_line_T_1"} : i1
    %1080 = comb.xor bin %1079, %true {sv.namehint = "_release_state_T"} : i1
    %1081 = comb.and bin %255, %1080 {sv.namehint = "_release_state_T_1"} : i1
    %1082 = comb.mux bin %1081, %c1_i4, %c6_i4 {sv.namehint = "_release_state_T_13"} : i4
    %1083 = comb.mux bin %206, %1082, %release_state : i4
    %1084 = comb.extract %s2_req_addr from 6 {sv.namehint = "probe_bits_lo"} : (i34) -> i6
    %1085 = comb.concat %210, %1084, %c0_i6 {sv.namehint = "res_2_address"} : i20, i6, i6
    %1086 = comb.mux bin %206, %c0_i2, %8 : i2
    %1087 = comb.mux bin %206, %c0_i4, %7 : i4
    %1088 = comb.xor %206, %true : i1
    %1089 = comb.and %1088, %6 : i1
    %1090 = comb.mux bin %206, %1085, %5 : i32
    %1091 = comb.icmp bin ne %s2_probe_state_state, %c0_i2 : i2
    %1092 = comb.xor %1091, %true : i1
    %1093 = comb.xor %s2_probe, %true : i1
    %1094 = comb.or %1093, %246, %1092 : i1
    %1095 = comb.xor bin %1091, %true : i1
    %1096 = comb.xor %s2_probe, %true : i1
    %1097 = comb.or %1096, %246, %1095 : i1
    %1098 = comb.concat %false, %1055, %c-1_i2 {sv.namehint = "_release_state_T_14"} : i1, i1, i2
    %1099 = comb.xor %246, %true : i1
    %1100 = comb.and %s2_probe, %1099 : i1
    %1101 = comb.xor bin %1055, %true {sv.namehint = "_probeNack_T"} : i1
    %1102 = comb.mux bin %1055, %c0_i4, %c5_i4 {sv.namehint = "_release_state_T_15"} : i4
    %1103 = comb.mux bin %1091, %1098, %1102 : i4
    %1104 = comb.mux bin %1091, %c3_i4, %c5_i4 : i4
    %1105 = comb.mux bin %1091, %c3_i4, %1102 : i4
    %1106 = comb.mux bin %246, %c2_i4, %1103 : i4
    %1107 = comb.mux bin %246, %c2_i4, %1104 : i4
    %1108 = comb.mux bin %246, %c2_i4, %1105 : i4
    %1109 = comb.mux bin %s2_probe, %1106, %1083 : i4
    %1110 = comb.mux bin %s2_probe, %1107, %1083 : i4
    %1111 = comb.mux bin %s2_probe, %1108, %1083 : i4
    %1112 = comb.or bin %246, %1091, %1101, %388, %267 : i1
    %1113 = comb.mux bin %s2_probe, %1112, %389 {sv.namehint = "s1_nack"} : i1
    %1114 = comb.icmp bin eq %release_state, %c4_i4 : i4
    %1115 = comb.or %1114, %1037 {sv.namehint = "metaArb.io_in_6_valid"} : i1
    %1116 = comb.mux bin %1114, %268, %1041 {sv.namehint = "metaArb.io_in_6_bits_idx"} : i6
    %1117 = comb.mux bin %1114, %probe_bits_address, %auto_out_b_bits_address : i32
    %1118 = comb.concat %1042, %1117 {sv.namehint = "metaArb.io_in_6_bits_addr"} : i2, i32
    %1119 = comb.and bin %1114, %metaArb.io_in_6_ready : i1
    %1120 = comb.mux bin %1119, %c0_i4, %1111 : i4
    %1121 = comb.or %1119, %4 : i1
    %1122 = comb.icmp bin eq %release_state, %c5_i4 : i4
    %1123 = comb.or bin %1055, %1119 : i1
    %1124 = comb.mux bin %1123, %c0_i4, %1110 : i4
    %1125 = comb.and %1122, %1055 : i1
    %1126 = comb.or %1125, %1119 : i1
    %1127 = comb.mux bin %1126, %c0_i4, %1109 : i4
    %1128 = comb.and %1122, %1055 : i1
    %1129 = comb.or %1128, %1119 : i1
    %1130 = comb.mux bin %1129, %c0_i4, %1110 : i4
    %1131 = comb.mux bin %1122, %1124, %1120 : i4
    %1132 = comb.icmp bin eq %release_state, %c3_i4 : i4
    %1133 = comb.or %1132, %1122, %1100, %1074 {sv.namehint = "tl_out_c_valid"} : i1
    %1134 = comb.xor %1094, %true : i1
    %1135 = comb.mux bin %1055, %c7_i4, %1130 : i4
    %1136 = comb.mux bin %1132, %1135, %1127 : i4
    %1137 = comb.concat %c-2_i2, %48 : i2, i1
    %1138 = comb.or %48, %1132, %1134 : i1
    %1139 = comb.mux bin %1138, %248, %c-3_i3 : i3
    %1140 = comb.mux bin %1055, %c7_i4, %1130 : i4
    %1141 = comb.mux bin %48, %1140, %1136 : i4
    %1142 = comb.mux %48, %1130, %1131 : i4
    %1143 = comb.mux bin %1132, %1142, %1127 : i4
    %1144 = comb.or bin %47, %915, %916 : i1
    %1145 = comb.xor %916, %true : i1
    %1146 = comb.concat %c-1_i2, %1145 : i2, i1
    %1147 = comb.mux bin %1144, %1146, %1137 {sv.namehint = "tl_out_c_bits_opcode"} : i3
    %1148 = comb.mux bin %1144, %257, %1139 {sv.namehint = "tl_out_c_bits_param"} : i3
    %1149 = comb.mux bin %1144, %c6_i4, %probe_bits_size {sv.namehint = "tl_out_c_bits_size"} : i4
    %1150 = comb.or bin %1144, %48, %1132 : i1
    %1151 = comb.xor %1150, %true : i1
    %1152 = comb.and %1151, %1097 {sv.namehint = "tl_out_c_bits_user_amba_prot_secure"} : i1
    %1153 = comb.mux bin %1144, %c0_i2, %249 {sv.namehint = "newCoh_state"} : i2
    %1154 = comb.mux bin %1055, %c6_i4, %1143 : i4
    %1155 = comb.mux bin %1144, %1154, %1141 : i4
    %1156 = comb.and bin %1144, %1043, %1051 : i1
    %1157 = comb.or %1156, %983 : i1
    %1158 = comb.mux bin %1156, %49, %release_ack_dirty : i1
    %1159 = comb.mux bin %1156, %probe_bits_address, %release_ack_addr : i32
    %1160 = comb.icmp bin ult %1071, %c8_i10 {sv.namehint = "_dataArb_io_in_2_valid_T"} : i10
    %1161 = comb.and bin %49, %1160 {sv.namehint = "dataArb.io_in_2_valid"} : i1
    %1162 = comb.extract %1071 from 0 {sv.namehint = "_dataArb_io_in_2_bits_addr_T_2"} : (i10) -> i3
    %1163 = comb.concat %268, %1162, %c0_i3 {sv.namehint = "dataArb.io_in_2_bits_addr"} : i6, i3, i3
    %1164 = comb.icmp bin eq %release_state, %c7_i4 {sv.namehint = "_metaArb_io_in_4_valid_T_1"} : i4
    %1165 = comb.or bin %915, %1164 {sv.namehint = "metaArb.io_in_4_valid"} : i1
    %1166 = comb.extract %probe_bits_address from 0 {sv.namehint = "metaArb_io_in_4_bits_addr_lo"} : (i32) -> i12
    %1167 = comb.concat %78, %1166 {sv.namehint = "metaArb.io_in_4_bits_addr"} : i22, i12
    %1168 = comb.extract %probe_bits_address from 12 {sv.namehint = "metaArb_io_in_4_bits_data_meta_tag"} : (i32) -> i20
    %1169 = comb.concat %1153, %1168 {sv.namehint = "metaArb.io_in_7_bits_data"} : i2, i20
    %1170 = comb.and bin %metaArb.io_in_4_ready, %1165 : i1
    %1171 = comb.mux bin %1170, %c0_i4, %1155 : i4
    %1172 = comb.or bin %s1_valid, %s2_valid, %cached_grant_wait, %uncachedInFlight_0 {sv.namehint = "_io_cpu_ordered_T_7"} : i1
    %1173 = comb.xor bin %1172, %true {sv.namehint = "io_cpu_ordered"} : i1
    %1174 = comb.and bin %s1_valid, %9, %89, %10 {sv.namehint = "s1_xcpt_valid"} : i1
    %io_cpu_s2_xcpt_REG = seq.firreg %1174 clock %gated_clock {firrtl.random_init_start = 1259 : ui64} : i1
    %1175 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_pf_ld {sv.namehint = "io_cpu_s2_xcpt_pf_ld"} : i1
    %1176 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_pf_st {sv.namehint = "io_cpu_s2_xcpt_pf_st"} : i1
    %1177 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ae_ld {sv.namehint = "io_cpu_s2_xcpt_ae_ld"} : i1
    %1178 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ae_st {sv.namehint = "io_cpu_s2_xcpt_ae_st"} : i1
    %1179 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ma_ld {sv.namehint = "io_cpu_s2_xcpt_ma_ld"} : i1
    %1180 = comb.and %io_cpu_s2_xcpt_REG, %s2_tlb_xcpt_ma_st {sv.namehint = "io_cpu_s2_xcpt_ma_st"} : i1
    %doUncachedResp = seq.firreg %1182 clock %gated_clock {firrtl.random_init_start = 1324 : ui64, sv.namehint = "doUncachedResp"} : i1
    %1181 = comb.or bin %199, %doUncachedResp {sv.namehint = "io_cpu_resp_valid"} : i1
    %1182 = comb.and bin %887, %904 {sv.namehint = "io_cpu_replay_next"} : i1
    %1183 = comb.or bin %264, %reset : i1
    %1184 = comb.xor bin %1183, %true : i1
    %1185 = comb.and bin %doUncachedResp, %1184 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %1249 = comb.and bin %STOP_COND_, %76 : i1
        sv.if %1249 {
          sv.fatal 1
        }
        %1250 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1250 {
          sv.fatal 1
        }
        %1251 = comb.and bin %STOP_COND_, %311 : i1
        sv.if %1251 {
          sv.fatal 1
        }
        %1252 = comb.and bin %STOP_COND_, %325 : i1
        sv.if %1252 {
          sv.fatal 1
        }
        %1253 = comb.and bin %STOP_COND_, %926 : i1
        sv.if %1253 {
          sv.fatal 1
        }
        %1254 = comb.and bin %STOP_COND_, %940 : i1
        sv.if %1254 {
          sv.fatal 1
        }
        %1255 = comb.and bin %STOP_COND_, %979 : i1
        sv.if %1255 {
          sv.fatal 1
        }
        %1256 = comb.and bin %STOP_COND_, %988 : i1
        sv.if %1256 {
          sv.fatal 1
        }
        %1257 = comb.and bin %STOP_COND_, %1077 : i1
        sv.if %1257 {
          sv.fatal 1
        }
        %1258 = comb.and bin %STOP_COND_, %1185 : i1
        sv.if %1258 {
          sv.fatal 1
        }
      }
    }
    %1186 = comb.extract %s2_data from 32 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_6"} : (i64) -> i32
    %1187 = comb.extract %s2_data from 0 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_shifted_T_2"} : (i64) -> i32
    %1188 = comb.mux bin %394, %1186, %1187 {sv.namehint = "io_cpu_resp_bits_data_lo"} : i32
    %1189 = comb.icmp bin eq %size, %c-2_i2 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_1"} : i2
    %1190 = comb.extract %1188 from 31 {sv.namehint = "_io_cpu_resp_bits_data_T_2"} : (i32) -> i1
    %1191 = comb.and bin %s2_req_signed, %1190 {sv.namehint = "_io_cpu_resp_bits_data_T_4"} : i1
    %1192 = comb.replicate %1191 {sv.namehint = "_io_cpu_resp_bits_data_T_5"} : (i1) -> i32
    %1193 = comb.mux bin %1189, %1192, %1186 {sv.namehint = "io_cpu_resp_bits_data_hi"} : i32
    %1194 = comb.extract %1188 from 16 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_4"} : (i32) -> i16
    %1195 = comb.extract %1188 from 0 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_5"} : (i32) -> i16
    %1196 = comb.mux bin %401, %1194, %1195 {sv.namehint = "io_cpu_resp_bits_data_lo_1"} : i16
    %1197 = comb.icmp bin eq %size, %c1_i2 {sv.namehint = "_io_cpu_resp_bits_data_T_9"} : i2
    %1198 = comb.extract %1196 from 15 {sv.namehint = "_io_cpu_resp_bits_data_T_10"} : (i16) -> i1
    %1199 = comb.and bin %s2_req_signed, %1198 {sv.namehint = "_io_cpu_resp_bits_data_T_12"} : i1
    %1200 = comb.replicate %1199 {sv.namehint = "_io_cpu_resp_bits_data_T_13"} : (i1) -> i48
    %1201 = comb.extract %1188 from 16 : (i32) -> i16
    %1202 = comb.concat %1193, %1201 {sv.namehint = "_io_cpu_resp_bits_data_T_14"} : i32, i16
    %1203 = comb.mux bin %1197, %1200, %1202 {sv.namehint = "io_cpu_resp_bits_data_hi_1"} : i48
    %1204 = comb.extract %1196 from 8 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_7"} : (i16) -> i8
    %1205 = comb.extract %1196 from 0 {sv.namehint = "_io_cpu_resp_bits_data_shifted_T_8"} : (i16) -> i8
    %1206 = comb.mux bin %415, %1204, %1205 {sv.namehint = "io_cpu_resp_bits_data_shifted_2"} : i8
    %1207 = comb.mux bin %151, %c0_i8, %1206 {sv.namehint = "io_cpu_resp_bits_data_lo_2"} : i8
    %1208 = comb.icmp bin eq %size, %c0_i2 {sv.namehint = "_io_cpu_resp_bits_data_T_16"} : i2
    %1209 = comb.or bin %1208, %151 {sv.namehint = "_io_cpu_resp_bits_data_T_17"} : i1
    %1210 = comb.extract %1207 from 7 {sv.namehint = "_io_cpu_resp_bits_data_T_18"} : (i8) -> i1
    %1211 = comb.and bin %s2_req_signed, %1210 {sv.namehint = "_io_cpu_resp_bits_data_T_20"} : i1
    %1212 = comb.replicate %1211 {sv.namehint = "_io_cpu_resp_bits_data_T_21"} : (i1) -> i56
    %1213 = comb.extract %1196 from 8 : (i16) -> i8
    %1214 = comb.concat %1203, %1213 {sv.namehint = "_io_cpu_resp_bits_data_T_22"} : i48, i8
    %1215 = comb.mux bin %1209, %1212, %1214 {sv.namehint = "io_cpu_resp_bits_data_hi_2"} : i56
    %1216 = comb.extract %1207 from 1 : (i8) -> i7
    %1217 = comb.extract %1207 from 0 : (i8) -> i1
    %1218 = comb.or bin %1217, %282 : i1
    %1219 = comb.concat %1215, %1216, %1218 {sv.namehint = "io_cpu_resp_bits_data"} : i56, i7, i1
    %1220 = comb.mux bin %394, %1186, %1187 {sv.namehint = "io_cpu_resp_bits_data_word_bypass_lo"} : i32
    %1221 = comb.extract %1220 from 31 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_2"} : (i32) -> i1
    %1222 = comb.and bin %s2_req_signed, %1221 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_4"} : i1
    %1223 = comb.replicate %1222 {sv.namehint = "_io_cpu_resp_bits_data_word_bypass_T_5"} : (i1) -> i32
    %1224 = comb.mux bin %1189, %1223, %1186 {sv.namehint = "io_cpu_resp_bits_data_word_bypass_hi"} : i32
    %1225 = comb.concat %1224, %1220 {sv.namehint = "io_cpu_resp_bits_data_word_bypass"} : i32, i32
    %amoalu.io_out = hw.instance "amoalu" @AMOALU(io_mask: %mergedMask: i8, io_cmd: %pstore1_cmd: i5, io_lhs: %s2_data: i64, io_rhs: %pstore1_data: i64) -> (io_out: i64) {sv.namehint = "amoalu.io_out"}
    %REG = seq.firreg %reset clock %gated_clock {firrtl.random_init_start = 1325 : ui64} : i1
    %1226 = comb.or %REG, %resetting : i1
    %1227 = comb.concat %false, %flushCounter : i1, i6
    %1228 = comb.add bin %1227, %c1_i7 {sv.namehint = "flushCounterNext"} : i7
    %1229 = comb.extract %1228 from 6 {sv.namehint = "flushDone"} : (i7) -> i1
    %1230 = comb.concat %78, %flushCounter, %c0_i6 {sv.namehint = "metaArb.io_in_5_bits_addr"} : i22, i6, i6
    %1231 = comb.extract %1228 from 0 : (i7) -> i6
    %1232 = comb.mux bin %resetting, %1231, %flushCounter : i6
    %1233 = comb.and bin %resetting, %1229 : i1
    %1234 = comb.xor %1233, %true : i1
    %1235 = comb.and %1234, %1226 : i1
    %1236 = comb.shl bin %c4095_i27, %1044 {sv.namehint = "_io_cpu_perf_release_beats1_decode_T_1"} : i27
    %1237 = comb.extract %1236 from 3 : (i27) -> i9
    %1238 = comb.xor %1237, %c-1_i9 {sv.namehint = "_io_cpu_perf_release_beats1_decode_T_3"} : i9
    %1239 = comb.mux bin %1048, %1238, %c0_i9 {sv.namehint = "io_cpu_perf_release_beats1"} : i9
    %io_cpu_perf_release_counter = seq.firreg %1247 clock %gated_clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 1335 : ui64} : i9
    %1240 = comb.add %io_cpu_perf_release_counter, %c-1_i9 {sv.namehint = "_io_cpu_perf_release_counter1_T"} : i9
    %1241 = comb.icmp bin eq %io_cpu_perf_release_counter, %c0_i9 {sv.namehint = "io_cpu_perf_release_first"} : i9
    %1242 = comb.icmp bin eq %io_cpu_perf_release_counter, %c1_i9 {sv.namehint = "_io_cpu_perf_release_last_T"} : i9
    %1243 = comb.icmp bin eq %1239, %c0_i9 {sv.namehint = "_io_cpu_perf_release_last_T_1"} : i9
    %1244 = comb.or bin %1242, %1243 {sv.namehint = "io_cpu_perf_release_last"} : i1
    %1245 = comb.and bin %1244, %1043 {sv.namehint = "io_cpu_perf_release"} : i1
    %1246 = comb.mux bin %1241, %1239, %1240 {sv.namehint = "_io_cpu_perf_release_counter_T"} : i9
    %1247 = comb.mux bin %1043, %1246, %io_cpu_perf_release_counter : i9
    %1248 = comb.and bin %auto_out_d_valid, %899 {sv.namehint = "io_cpu_perf_grant"} : i1
    hw.output %841, %866, %867, %868, %870, %871, %s2_pma_cacheable, %s2_pma_cacheable, %s2_pma_cacheable, %s2_pma_cacheable, %877, %872, %875, %1040, %1133, %1147, %1148, %1149, %probe_bits_source, %probe_bits_address, %1152, %1152, %1152, %1152, %1152, %1152, %s2_data, %1018, %993, %auto_out_d_bits_sink, %1022, %265, %1181, %s2_req_tag, %1219, %doUncachedResp, %161, %1225, %1182, %1179, %1180, %1175, %1176, %1177, %1178, %1173, %1245, %1248 : i1, i3, i3, i4, i1, i32, i1, i1, i1, i1, i1, i8, i64, i1, i1, i3, i3, i4, i1, i32, i1, i1, i1, i1, i1, i1, i64, i1, i1, i2, i1, i1, i1, i6, i64, i1, i1, i64, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1
  }
  hw.module private @ICache(in %clock : !seq.clock, in %reset : i1, in %auto_master_out_a_ready : i1, out auto_master_out_a_valid : i1, out auto_master_out_a_bits_address : i32, in %auto_master_out_d_valid : i1, in %auto_master_out_d_bits_opcode : i3, in %auto_master_out_d_bits_size : i4, in %auto_master_out_d_bits_data : i64, in %auto_master_out_d_bits_corrupt : i1, in %io_req_valid : i1, in %io_req_bits_addr : i33, in %io_s1_paddr : i32, in %io_s1_kill : i1, in %io_s2_kill : i1, out io_resp_valid : i1, out io_resp_bits_data : i32, out io_resp_bits_ae : i1, in %io_invalidate : i1) {
    %c0_i58 = hw.constant 0 : i58
    %c0_i122 = hw.constant 0 : i122
    %c1_i128 = hw.constant 1 : i128
    %c1_i9 = hw.constant 1 : i9
    %c4095_i27 = hw.constant 4095 : i27
    %true = hw.constant true
    %false = hw.constant false
    %c0_i64 = hw.constant 0 : i64
    %c0_i9 = hw.constant 0 : i9
    %c0_i23 = hw.constant 0 : i23
    %c-1_i9 = hw.constant -1 : i9
    %c-1_i64 = hw.constant -1 : i64
    %c0_i6 = hw.constant 0 : i6
    %c0_i3 = hw.constant 0 : i3
    %0 = seq.from_clock %clock
    %1 = comb.and bin %17, %io_req_valid {sv.namehint = "s0_valid"} : i1
    %s1_valid = seq.firreg %1 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %2 = comb.xor bin %io_s1_kill, %true {sv.namehint = "_s2_valid_T"} : i1
    %3 = comb.and bin %s1_valid, %2 {sv.namehint = "_s2_valid_T_1"} : i1
    %s2_valid = seq.firreg %3 clock %clock reset sync %reset, %false {firrtl.random_init_start = 38 : ui64} : i1
    %s2_hit = seq.firreg %67 clock %clock {firrtl.random_init_start = 39 : ui64} : i1
    %invalidated = seq.firreg %96 clock %clock {firrtl.random_init_start = 40 : ui64} : i1
    %refill_valid = seq.firreg %99 clock %clock reset sync %reset, %false {firrtl.random_init_start = 41 : ui64} : i1
    %4 = comb.and bin %auto_master_out_a_ready, %10 {sv.namehint = "_refill_fire_T"} : i1
    %5 = comb.xor bin %s2_hit, %true {sv.namehint = "_s2_miss_T"} : i1
    %6 = comb.xor bin %io_s2_kill, %true {sv.namehint = "_s2_miss_T_2"} : i1
    %7 = comb.and bin %s2_valid, %5, %6 {sv.namehint = "s2_miss"} : i1
    %8 = comb.or bin %7, %refill_valid {sv.namehint = "_s1_can_request_refill_T"} : i1
    %9 = comb.xor bin %8, %true {sv.namehint = "s1_can_request_refill"} : i1
    %s2_request_refill_REG = seq.firreg %9 clock %clock {firrtl.random_init_start = 44 : ui64} : i1
    %10 = comb.and bin %7, %s2_request_refill_REG {sv.namehint = "s2_request_refill"} : i1
    %11 = comb.and bin %s1_valid, %9 {sv.namehint = "_refill_vaddr_T"} : i1
    %refill_paddr = seq.firreg %12 clock %clock {firrtl.random_init_start = 45 : ui64} : i32
    %12 = comb.mux bin %11, %io_s1_paddr, %refill_paddr : i32
    %13 = comb.extract %refill_paddr from 12 {sv.namehint = "refill_tag"} : (i32) -> i20
    %14 = comb.extract %refill_paddr from 6 {sv.namehint = "writeAddr"} : (i32) -> i6
    %15 = comb.extract %auto_master_out_d_bits_opcode from 0 {sv.namehint = "beats1_opdata"} : (i3) -> i1
    %16 = comb.and bin %auto_master_out_d_valid, %15 {sv.namehint = "refill_one_beat"} : i1
    %17 = comb.xor bin %16, %true {sv.namehint = "io_req_ready"} : i1
    %18 = comb.concat %c0_i23, %auto_master_out_d_bits_size : i23, i4
    %19 = comb.shl bin %c4095_i27, %18 {sv.namehint = "_beats1_decode_T_1"} : i27
    %20 = comb.extract %19 from 3 : (i27) -> i9
    %21 = comb.xor %20, %c-1_i9 {sv.namehint = "_beats1_decode_T_3"} : i9
    %22 = comb.mux bin %15, %21, %c0_i9 {sv.namehint = "beats1"} : i9
    %counter = seq.firreg %31 clock %clock reset sync %reset, %c0_i9 {firrtl.random_init_start = 110 : ui64} : i9
    %23 = comb.add %counter, %c-1_i9 {sv.namehint = "_counter1_T"} : i9
    %24 = comb.icmp bin eq %counter, %c0_i9 {sv.namehint = "first"} : i9
    %25 = comb.icmp bin eq %counter, %c1_i9 {sv.namehint = "_last_T"} : i9
    %26 = comb.icmp bin eq %22, %c0_i9 {sv.namehint = "_last_T_1"} : i9
    %27 = comb.or bin %25, %26 {sv.namehint = "last"} : i1
    %28 = comb.xor bin %23, %c-1_i9 {sv.namehint = "_count_T"} : i9
    %29 = comb.and bin %22, %28 {sv.namehint = "refill_cnt"} : i9
    %30 = comb.mux bin %24, %22, %23 {sv.namehint = "_counter_T"} : i9
    %31 = comb.mux bin %auto_master_out_d_valid, %30, %counter : i9
    %32 = comb.and bin %16, %27, %auto_master_out_d_valid {sv.namehint = "writeEnable"} : i1
    %tag_array_0 = seq.firmem 1, 1, undefined, port_order {prefix = ""} : <64 x 21>
    %33 = seq.firmem.read_write_port %tag_array_0[%34] = %42 if %16, clock %clock enable %35 {sv.namehint = "tag_array_tag_rdata_data_0"} : <64 x 21>
    %34 = comb.mux bin %32, %14, %36 : i6
    %35 = comb.or bin %38, %32 : i1
    %36 = comb.extract %io_req_bits_addr from 6 {sv.namehint = "_tag_rdata_T"} : (i33) -> i6
    %37 = comb.xor bin %32, %true {sv.namehint = "_tag_rdata_T_1"} : i1
    %38 = comb.and bin %37, %1 {sv.namehint = "readEnable"} : i1
    %accruedRefillError = seq.firreg %44 clock %clock {firrtl.random_init_start = 119 : ui64} : i1
    %39 = comb.icmp bin ne %29, %c0_i9 {sv.namehint = "_refillError_T"} : i9
    %40 = comb.and bin %39, %accruedRefillError {sv.namehint = "_refillError_T_1"} : i1
    %41 = comb.or bin %auto_master_out_d_bits_corrupt, %40 {sv.namehint = "refillError"} : i1
    %42 = comb.concat %41, %13 {sv.namehint = "enc_tag"} : i1, i20
    %43 = comb.extract %refill_paddr from 6 {sv.namehint = "_bundleOut_0_a_bits_T"} : (i32) -> i26
    %vb_array = seq.firreg %57 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 120 : ui64} : i64
    %44 = comb.mux bin %16, %41, %accruedRefillError : i1
    %45 = comb.xor bin %invalidated, %true {sv.namehint = "_vb_array_T_1"} : i1
    %46 = comb.and bin %32, %45 {sv.namehint = "_vb_array_T_2"} : i1
    %47 = comb.concat %c0_i122, %14 : i122, i6
    %48 = comb.shl bin %c1_i128, %47 {sv.namehint = "_vb_array_T_3"} : i128
    %49 = comb.extract %48 from 0 : (i128) -> i64
    %50 = comb.or %vb_array, %49 {sv.namehint = "_vb_array_T_4"} : i64
    %51 = comb.xor bin %vb_array, %c-1_i64 {sv.namehint = "_vb_array_T_5"} : i64
    %52 = comb.extract %48 from 0 : (i128) -> i64
    %53 = comb.or %51, %52 {sv.namehint = "_vb_array_T_6"} : i64
    %54 = comb.xor %53, %c-1_i64 {sv.namehint = "_vb_array_T_7"} : i64
    %55 = comb.mux %46, %50, %54 {sv.namehint = "_vb_array_T_8"} : i64
    %56 = comb.mux bin %16, %55, %vb_array : i64
    %57 = comb.mux bin %io_invalidate, %c0_i64, %56 : i64
    %58 = comb.or %io_invalidate, %invalidated : i1
    %59 = comb.extract %io_s1_paddr from 6 {sv.namehint = "s1_vb_lo"} : (i32) -> i6
    %60 = comb.extract %io_s1_paddr from 12 {sv.namehint = "s1_tag"} : (i32) -> i20
    %61 = comb.concat %c0_i58, %59 : i58, i6
    %62 = comb.shru bin %vb_array, %61 {sv.namehint = "_s1_vb_T_1"} : i64
    %63 = comb.extract %62 from 0 {sv.namehint = "_s1_vb_T_2"} : (i64) -> i1
    %64 = comb.extract %33 from 20 {sv.namehint = "tl_error"} : (i21) -> i1
    %65 = comb.extract %33 from 0 {sv.namehint = "tag"} : (i21) -> i20
    %66 = comb.icmp bin eq %65, %60 {sv.namehint = "_tagMatch_T"} : i20
    %67 = comb.and bin %63, %66 {sv.namehint = "tagMatch"} : i1
    %68 = comb.and bin %67, %64 {sv.namehint = "s1_tl_error_0"} : i1
    %data_arrays_0_0 = seq.firmem 1, 1, undefined, port_order {prefix = ""} : <512 x 32>
    %69 = seq.firmem.read_write_port %data_arrays_0_0[%80] = %81 if %16, clock %clock enable %70 {sv.namehint = "data_arrays_0_dout_data_0"} : <512 x 32>
    %70 = comb.or bin %83, %76 : i1
    %data_arrays_1_0 = seq.firmem 1, 1, undefined, port_order {prefix = ""} : <512 x 32>
    %71 = seq.firmem.read_write_port %data_arrays_1_0[%86] = %87 if %16, clock %clock enable %72 {sv.namehint = "data_arrays_1_dout_1_data_0"} : <512 x 32>
    %72 = comb.or bin %89, %84 : i1
    %73 = comb.extract %io_req_bits_addr from 2 {sv.namehint = "_s0_ren_T_6"} : (i33) -> i1
    %74 = comb.xor bin %73, %true {sv.namehint = "_s0_ren_T_1"} : i1
    %75 = comb.xor bin %invalidated, %true {sv.namehint = "_wen_T_5"} : i1
    %76 = comb.and bin %16, %75 {sv.namehint = "wen"} : i1
    %77 = comb.concat %14, %c0_i3 {sv.namehint = "_mem_idx_T_6"} : i6, i3
    %78 = comb.or bin %77, %29 {sv.namehint = "_mem_idx_T_1"} : i9
    %79 = comb.extract %io_req_bits_addr from 3 {sv.namehint = "_mem_idx_T_11"} : (i33) -> i9
    %80 = comb.mux bin %16, %78, %79 {sv.namehint = "writeAddr"} : i9
    %81 = comb.extract %auto_master_out_d_bits_data from 0 {sv.namehint = "data"} : (i64) -> i32
    %82 = comb.xor bin %76, %true {sv.namehint = "_dout_T"} : i1
    %83 = comb.and bin %82, %1, %74 {sv.namehint = "readEnable"} : i1
    %84 = comb.and bin %16, %75 {sv.namehint = "writeEnable"} : i1
    %85 = comb.or bin %77, %29 {sv.namehint = "_mem_idx_T_7"} : i9
    %86 = comb.mux bin %16, %85, %79 {sv.namehint = "writeAddr"} : i9
    %87 = comb.extract %auto_master_out_d_bits_data from 32 {sv.namehint = "data_1"} : (i64) -> i32
    %88 = comb.xor bin %84, %true {sv.namehint = "_dout_T_4"} : i1
    %89 = comb.and bin %88, %1, %73 {sv.namehint = "readEnable"} : i1
    %90 = comb.extract %io_s1_paddr from 2 : (i32) -> i1
    %91 = comb.mux bin %90, %71, %69 {sv.namehint = "s1_dout_0"} : i32
    %s2_dout_0 = seq.firreg %92 clock %clock {firrtl.random_init_start = 229 : ui64, sv.namehint = "s2_dout_0"} : i32
    %92 = comb.mux bin %s1_valid, %91, %s2_dout_0 : i32
    %s2_tl_error = seq.firreg %93 clock %clock {firrtl.random_init_start = 262 : ui64, sv.namehint = "s2_tl_error"} : i1
    %93 = comb.mux bin %s1_valid, %68, %s2_tl_error : i1
    %94 = comb.and bin %s2_valid, %s2_hit {sv.namehint = "io_resp_valid"} : i1
    %95 = comb.concat %43, %c0_i6 {sv.namehint = "bundleOut_0_a_bits_a_address"} : i26, i6
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %100 = comb.and bin %STOP_COND_, %false : i1
        sv.if %100 {
          sv.fatal 1
        }
        sv.if %100 {
          sv.fatal 1
        }
      }
    }
    %96 = comb.and %refill_valid, %58 : i1
    %97 = comb.or %4, %refill_valid : i1
    %98 = comb.xor %32, %true : i1
    %99 = comb.and %98, %97 : i1
    hw.output %10, %95, %94, %s2_dout_0, %s2_tl_error : i1, i32, i1, i32, i1
  }
  hw.module private @ShiftQueue(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_pc : i34, in %io_enq_bits_data : i32, in %io_enq_bits_xcpt_pf_inst : i1, in %io_enq_bits_xcpt_ae_inst : i1, in %io_enq_bits_replay : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_pc : i34, out io_deq_bits_data : i32, out io_deq_bits_xcpt_pf_inst : i1, out io_deq_bits_xcpt_ae_inst : i1, out io_deq_bits_replay : i1, out io_mask : i5) {
    %true = hw.constant true
    %false = hw.constant false
    %valid_0 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %valid_1 = seq.firreg %39 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %valid_2 = seq.firreg %59 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %valid_3 = seq.firreg %79 clock %clock reset sync %reset, %false {firrtl.random_init_start = 3 : ui64} : i1
    %valid_4 = seq.firreg %92 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %elts_0_pc = seq.firreg %15 clock %clock {firrtl.random_init_start = 54 : ui64} : i34
    %elts_0_data = seq.firreg %14 clock %clock {firrtl.random_init_start = 88 : ui64} : i32
    %elts_0_xcpt_pf_inst = seq.firreg %13 clock %clock {firrtl.random_init_start = 122 : ui64} : i1
    %elts_0_xcpt_ae_inst = seq.firreg %12 clock %clock {firrtl.random_init_start = 123 : ui64} : i1
    %elts_0_replay = seq.firreg %11 clock %clock {firrtl.random_init_start = 124 : ui64} : i1
    %elts_1_pc = seq.firreg %34 clock %clock {firrtl.random_init_start = 174 : ui64} : i34
    %elts_1_data = seq.firreg %33 clock %clock {firrtl.random_init_start = 208 : ui64} : i32
    %elts_1_xcpt_pf_inst = seq.firreg %32 clock %clock {firrtl.random_init_start = 242 : ui64} : i1
    %elts_1_xcpt_ae_inst = seq.firreg %31 clock %clock {firrtl.random_init_start = 243 : ui64} : i1
    %elts_1_replay = seq.firreg %30 clock %clock {firrtl.random_init_start = 244 : ui64} : i1
    %elts_2_pc = seq.firreg %54 clock %clock {firrtl.random_init_start = 294 : ui64} : i34
    %elts_2_data = seq.firreg %53 clock %clock {firrtl.random_init_start = 328 : ui64} : i32
    %elts_2_xcpt_pf_inst = seq.firreg %52 clock %clock {firrtl.random_init_start = 362 : ui64} : i1
    %elts_2_xcpt_ae_inst = seq.firreg %51 clock %clock {firrtl.random_init_start = 363 : ui64} : i1
    %elts_2_replay = seq.firreg %50 clock %clock {firrtl.random_init_start = 364 : ui64} : i1
    %elts_3_pc = seq.firreg %74 clock %clock {firrtl.random_init_start = 414 : ui64} : i34
    %elts_3_data = seq.firreg %73 clock %clock {firrtl.random_init_start = 448 : ui64} : i32
    %elts_3_xcpt_pf_inst = seq.firreg %72 clock %clock {firrtl.random_init_start = 482 : ui64} : i1
    %elts_3_xcpt_ae_inst = seq.firreg %71 clock %clock {firrtl.random_init_start = 483 : ui64} : i1
    %elts_3_replay = seq.firreg %70 clock %clock {firrtl.random_init_start = 484 : ui64} : i1
    %elts_4_pc = seq.firreg %88 clock %clock {firrtl.random_init_start = 534 : ui64} : i34
    %elts_4_data = seq.firreg %87 clock %clock {firrtl.random_init_start = 568 : ui64} : i32
    %elts_4_xcpt_pf_inst = seq.firreg %86 clock %clock {firrtl.random_init_start = 602 : ui64} : i1
    %elts_4_xcpt_ae_inst = seq.firreg %85 clock %clock {firrtl.random_init_start = 603 : ui64} : i1
    %elts_4_replay = seq.firreg %84 clock %clock {firrtl.random_init_start = 604 : ui64} : i1
    %0 = comb.mux bin %valid_1, %elts_1_pc, %io_enq_bits_pc {sv.namehint = "wdata_pc"} : i34
    %1 = comb.mux bin %valid_1, %elts_1_data, %io_enq_bits_data {sv.namehint = "wdata_data"} : i32
    %2 = comb.mux bin %valid_1, %elts_1_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_xcpt_pf_inst"} : i1
    %3 = comb.mux bin %valid_1, %elts_1_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_xcpt_ae_inst"} : i1
    %4 = comb.mux bin %valid_1, %elts_1_replay, %io_enq_bits_replay {sv.namehint = "wdata_replay"} : i1
    %5 = comb.and bin %81, %io_enq_valid {sv.namehint = "_valid_4_T_4"} : i1
    %6 = comb.and bin %5, %valid_0 {sv.namehint = "_wen_T_2"} : i1
    %7 = comb.or bin %valid_1, %6 {sv.namehint = "_wen_T_3"} : i1
    %8 = comb.xor bin %valid_0, %true {sv.namehint = "_wen_T_6"} : i1
    %9 = comb.and bin %5, %8 {sv.namehint = "_wen_T_7"} : i1
    %10 = comb.mux bin %io_deq_ready, %7, %9 {sv.namehint = "wen"} : i1
    %11 = comb.mux bin %10, %4, %elts_0_replay : i1
    %12 = comb.mux bin %10, %3, %elts_0_xcpt_ae_inst : i1
    %13 = comb.mux bin %10, %2, %elts_0_xcpt_pf_inst : i1
    %14 = comb.mux bin %10, %1, %elts_0_data : i32
    %15 = comb.mux bin %10, %0, %elts_0_pc : i34
    %16 = comb.and bin %5, %valid_0 {sv.namehint = "_valid_0_T_2"} : i1
    %17 = comb.or bin %valid_1, %16 {sv.namehint = "_valid_0_T_3"} : i1
    %18 = comb.or bin %5, %valid_0 {sv.namehint = "_valid_0_T_6"} : i1
    %19 = comb.mux bin %io_deq_ready, %17, %18 {sv.namehint = "_valid_0_T_7"} : i1
    %20 = comb.mux bin %valid_2, %elts_2_pc, %io_enq_bits_pc {sv.namehint = "wdata_1_pc"} : i34
    %21 = comb.mux bin %valid_2, %elts_2_data, %io_enq_bits_data {sv.namehint = "wdata_1_data"} : i32
    %22 = comb.mux bin %valid_2, %elts_2_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_1_xcpt_pf_inst"} : i1
    %23 = comb.mux bin %valid_2, %elts_2_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_1_xcpt_ae_inst"} : i1
    %24 = comb.mux bin %valid_2, %elts_2_replay, %io_enq_bits_replay {sv.namehint = "wdata_1_replay"} : i1
    %25 = comb.and bin %5, %valid_1 {sv.namehint = "_wen_T_10"} : i1
    %26 = comb.or bin %valid_2, %25 {sv.namehint = "_wen_T_11"} : i1
    %27 = comb.xor bin %valid_1, %true {sv.namehint = "_wen_T_14"} : i1
    %28 = comb.and bin %5, %valid_0, %27 {sv.namehint = "_wen_T_15"} : i1
    %29 = comb.mux bin %io_deq_ready, %26, %28 {sv.namehint = "wen_1"} : i1
    %30 = comb.mux bin %29, %24, %elts_1_replay : i1
    %31 = comb.mux bin %29, %23, %elts_1_xcpt_ae_inst : i1
    %32 = comb.mux bin %29, %22, %elts_1_xcpt_pf_inst : i1
    %33 = comb.mux bin %29, %21, %elts_1_data : i32
    %34 = comb.mux bin %29, %20, %elts_1_pc : i34
    %35 = comb.and bin %5, %valid_1 {sv.namehint = "_valid_1_T_2"} : i1
    %36 = comb.or bin %valid_2, %35 {sv.namehint = "_valid_1_T_3"} : i1
    %37 = comb.and bin %5, %valid_0 {sv.namehint = "_valid_1_T_5"} : i1
    %38 = comb.or bin %37, %valid_1 {sv.namehint = "_valid_1_T_6"} : i1
    %39 = comb.mux bin %io_deq_ready, %36, %38 {sv.namehint = "_valid_1_T_7"} : i1
    %40 = comb.mux bin %valid_3, %elts_3_pc, %io_enq_bits_pc {sv.namehint = "wdata_2_pc"} : i34
    %41 = comb.mux bin %valid_3, %elts_3_data, %io_enq_bits_data {sv.namehint = "wdata_2_data"} : i32
    %42 = comb.mux bin %valid_3, %elts_3_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_2_xcpt_pf_inst"} : i1
    %43 = comb.mux bin %valid_3, %elts_3_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_2_xcpt_ae_inst"} : i1
    %44 = comb.mux bin %valid_3, %elts_3_replay, %io_enq_bits_replay {sv.namehint = "wdata_2_replay"} : i1
    %45 = comb.and bin %5, %valid_2 {sv.namehint = "_wen_T_18"} : i1
    %46 = comb.or bin %valid_3, %45 {sv.namehint = "_wen_T_19"} : i1
    %47 = comb.xor bin %valid_2, %true {sv.namehint = "_wen_T_22"} : i1
    %48 = comb.and bin %5, %valid_1, %47 {sv.namehint = "_wen_T_23"} : i1
    %49 = comb.mux bin %io_deq_ready, %46, %48 {sv.namehint = "wen_2"} : i1
    %50 = comb.mux bin %49, %44, %elts_2_replay : i1
    %51 = comb.mux bin %49, %43, %elts_2_xcpt_ae_inst : i1
    %52 = comb.mux bin %49, %42, %elts_2_xcpt_pf_inst : i1
    %53 = comb.mux bin %49, %41, %elts_2_data : i32
    %54 = comb.mux bin %49, %40, %elts_2_pc : i34
    %55 = comb.and bin %5, %valid_2 {sv.namehint = "_valid_2_T_2"} : i1
    %56 = comb.or bin %valid_3, %55 {sv.namehint = "_valid_2_T_3"} : i1
    %57 = comb.and bin %5, %valid_1 {sv.namehint = "_valid_2_T_5"} : i1
    %58 = comb.or bin %57, %valid_2 {sv.namehint = "_valid_2_T_6"} : i1
    %59 = comb.mux bin %io_deq_ready, %56, %58 {sv.namehint = "_valid_2_T_7"} : i1
    %60 = comb.mux bin %valid_4, %elts_4_pc, %io_enq_bits_pc {sv.namehint = "wdata_3_pc"} : i34
    %61 = comb.mux bin %valid_4, %elts_4_data, %io_enq_bits_data {sv.namehint = "wdata_3_data"} : i32
    %62 = comb.mux bin %valid_4, %elts_4_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "wdata_3_xcpt_pf_inst"} : i1
    %63 = comb.mux bin %valid_4, %elts_4_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "wdata_3_xcpt_ae_inst"} : i1
    %64 = comb.mux bin %valid_4, %elts_4_replay, %io_enq_bits_replay {sv.namehint = "wdata_3_replay"} : i1
    %65 = comb.and bin %5, %valid_3 {sv.namehint = "_wen_T_26"} : i1
    %66 = comb.or bin %valid_4, %65 {sv.namehint = "_wen_T_27"} : i1
    %67 = comb.xor bin %valid_3, %true {sv.namehint = "_wen_T_30"} : i1
    %68 = comb.and bin %5, %valid_2, %67 {sv.namehint = "_wen_T_31"} : i1
    %69 = comb.mux bin %io_deq_ready, %66, %68 {sv.namehint = "wen_3"} : i1
    %70 = comb.mux bin %69, %64, %elts_3_replay : i1
    %71 = comb.mux bin %69, %63, %elts_3_xcpt_ae_inst : i1
    %72 = comb.mux bin %69, %62, %elts_3_xcpt_pf_inst : i1
    %73 = comb.mux bin %69, %61, %elts_3_data : i32
    %74 = comb.mux bin %69, %60, %elts_3_pc : i34
    %75 = comb.and bin %5, %valid_3 {sv.namehint = "_valid_3_T_2"} : i1
    %76 = comb.or bin %valid_4, %75 {sv.namehint = "_valid_3_T_3"} : i1
    %77 = comb.and bin %5, %valid_2 {sv.namehint = "_valid_3_T_5"} : i1
    %78 = comb.or bin %77, %valid_3 {sv.namehint = "_valid_3_T_6"} : i1
    %79 = comb.mux bin %io_deq_ready, %76, %78 {sv.namehint = "_valid_3_T_7"} : i1
    %80 = comb.and bin %5, %valid_4 {sv.namehint = "_wen_T_35"} : i1
    %81 = comb.xor bin %valid_4, %true {sv.namehint = "io_enq_ready"} : i1
    %82 = comb.and bin %5, %valid_3, %81 {sv.namehint = "_wen_T_39"} : i1
    %83 = comb.mux bin %io_deq_ready, %80, %82 {sv.namehint = "wen_4"} : i1
    %84 = comb.mux bin %83, %io_enq_bits_replay, %elts_4_replay : i1
    %85 = comb.mux bin %83, %io_enq_bits_xcpt_ae_inst, %elts_4_xcpt_ae_inst : i1
    %86 = comb.mux bin %83, %io_enq_bits_xcpt_pf_inst, %elts_4_xcpt_pf_inst : i1
    %87 = comb.mux bin %83, %io_enq_bits_data, %elts_4_data : i32
    %88 = comb.mux bin %83, %io_enq_bits_pc, %elts_4_pc : i34
    %89 = comb.and bin %5, %valid_4 {sv.namehint = "_valid_4_T_3"} : i1
    %90 = comb.and bin %5, %valid_3 {sv.namehint = "_valid_4_T_5"} : i1
    %91 = comb.or bin %90, %valid_4 {sv.namehint = "_valid_4_T_6"} : i1
    %92 = comb.mux bin %io_deq_ready, %89, %91 {sv.namehint = "_valid_4_T_7"} : i1
    %93 = comb.or %io_enq_valid, %valid_0 {sv.namehint = "io_deq_valid"} : i1
    %94 = comb.mux bin %valid_0, %elts_0_replay, %io_enq_bits_replay {sv.namehint = "io_deq_bits_replay"} : i1
    %95 = comb.mux bin %valid_0, %elts_0_xcpt_ae_inst, %io_enq_bits_xcpt_ae_inst {sv.namehint = "io_deq_bits_xcpt_ae_inst"} : i1
    %96 = comb.mux bin %valid_0, %elts_0_xcpt_pf_inst, %io_enq_bits_xcpt_pf_inst {sv.namehint = "io_deq_bits_xcpt_pf_inst"} : i1
    %97 = comb.mux bin %valid_0, %elts_0_data, %io_enq_bits_data {sv.namehint = "io_deq_bits_data"} : i32
    %98 = comb.mux bin %valid_0, %elts_0_pc, %io_enq_bits_pc {sv.namehint = "io_deq_bits_pc"} : i34
    %99 = comb.concat %valid_4, %valid_3, %valid_2, %valid_1, %valid_0 {sv.namehint = "io_mask"} : i1, i1, i1, i1, i1
    hw.output %81, %93, %98, %97, %96, %95, %94, %99 : i1, i1, i34, i32, i1, i1, i1, i5
  }
  hw.module private @PMPChecker_2(in %io_prv : i2, in %io_pmp_0_cfg_l : i1, in %io_pmp_0_cfg_a : i2, in %io_pmp_0_cfg_x : i1, in %io_pmp_0_addr : i30, in %io_pmp_0_mask : i32, in %io_pmp_1_cfg_l : i1, in %io_pmp_1_cfg_a : i2, in %io_pmp_1_cfg_x : i1, in %io_pmp_1_addr : i30, in %io_pmp_1_mask : i32, in %io_pmp_2_cfg_l : i1, in %io_pmp_2_cfg_a : i2, in %io_pmp_2_cfg_x : i1, in %io_pmp_2_addr : i30, in %io_pmp_2_mask : i32, in %io_pmp_3_cfg_l : i1, in %io_pmp_3_cfg_a : i2, in %io_pmp_3_cfg_x : i1, in %io_pmp_3_addr : i30, in %io_pmp_3_mask : i32, in %io_pmp_4_cfg_l : i1, in %io_pmp_4_cfg_a : i2, in %io_pmp_4_cfg_x : i1, in %io_pmp_4_addr : i30, in %io_pmp_4_mask : i32, in %io_pmp_5_cfg_l : i1, in %io_pmp_5_cfg_a : i2, in %io_pmp_5_cfg_x : i1, in %io_pmp_5_addr : i30, in %io_pmp_5_mask : i32, in %io_pmp_6_cfg_l : i1, in %io_pmp_6_cfg_a : i2, in %io_pmp_6_cfg_x : i1, in %io_pmp_6_addr : i30, in %io_pmp_6_mask : i32, in %io_pmp_7_cfg_l : i1, in %io_pmp_7_cfg_a : i2, in %io_pmp_7_cfg_x : i1, in %io_pmp_7_addr : i30, in %io_pmp_7_mask : i32, in %io_addr : i32, out io_x : i1) {
    %c0_i2 = hw.constant 0 : i2
    %c0_i32 = hw.constant 0 : i32
    %c-1_i32 = hw.constant -1 : i32
    %true = hw.constant true
    %0 = comb.extract %io_prv from 1 {sv.namehint = "default"} : (i2) -> i1
    %1 = comb.extract %io_pmp_7_cfg_a from 1 {sv.namehint = "_res_hit_T"} : (i2) -> i1
    %2 = comb.concat %io_pmp_7_addr, %c0_i2 {sv.namehint = "_res_hit_T_4"} : i30, i2
    %3 = comb.xor bin %io_addr, %2 {sv.namehint = "_res_hit_T_5"} : i32
    %4 = comb.xor bin %io_pmp_7_mask, %c-1_i32 {sv.namehint = "_res_hit_T_6"} : i32
    %5 = comb.and bin %3, %4 {sv.namehint = "_res_hit_T_7"} : i32
    %6 = comb.icmp bin eq %5, %c0_i32 {sv.namehint = "_res_hit_T_8"} : i32
    %7 = comb.extract %io_pmp_7_cfg_a from 0 {sv.namehint = "_res_hit_T_9"} : (i2) -> i1
    %8 = comb.concat %io_pmp_6_addr, %c0_i2 {sv.namehint = "_res_hit_T_17"} : i30, i2
    %9 = comb.icmp bin uge %io_addr, %8 {sv.namehint = "_res_hit_T_19"} : i32
    %10 = comb.concat %io_pmp_7_addr, %c0_i2 {sv.namehint = "_res_hit_T_23"} : i30, i2
    %11 = comb.icmp bin ult %io_addr, %10 {sv.namehint = "_res_hit_T_24"} : i32
    %12 = comb.and bin %7, %9, %11 {sv.namehint = "_res_hit_T_26"} : i1
    %13 = comb.mux bin %1, %6, %12 {sv.namehint = "res_hit"} : i1
    %14 = comb.xor bin %io_pmp_7_cfg_l, %true {sv.namehint = "_res_ignore_T"} : i1
    %15 = comb.and bin %0, %14 {sv.namehint = "res_ignore"} : i1
    %16 = comb.or bin %io_pmp_7_cfg_x, %15 {sv.namehint = "res_cur_cfg_x"} : i1
    %17 = comb.mux bin %13, %16, %0 {sv.namehint = "_res_T_44_cfg_x"} : i1
    %18 = comb.extract %io_pmp_6_cfg_a from 1 {sv.namehint = "_res_hit_T_27"} : (i2) -> i1
    %19 = comb.concat %io_pmp_6_addr, %c0_i2 {sv.namehint = "_res_hit_T_31"} : i30, i2
    %20 = comb.xor bin %io_addr, %19 {sv.namehint = "_res_hit_T_32"} : i32
    %21 = comb.xor bin %io_pmp_6_mask, %c-1_i32 {sv.namehint = "_res_hit_T_33"} : i32
    %22 = comb.and bin %20, %21 {sv.namehint = "_res_hit_T_34"} : i32
    %23 = comb.icmp bin eq %22, %c0_i32 {sv.namehint = "_res_hit_T_35"} : i32
    %24 = comb.extract %io_pmp_6_cfg_a from 0 {sv.namehint = "_res_hit_T_36"} : (i2) -> i1
    %25 = comb.concat %io_pmp_5_addr, %c0_i2 {sv.namehint = "_res_hit_T_44"} : i30, i2
    %26 = comb.icmp bin uge %io_addr, %25 {sv.namehint = "_res_hit_T_46"} : i32
    %27 = comb.concat %io_pmp_6_addr, %c0_i2 {sv.namehint = "_res_hit_T_50"} : i30, i2
    %28 = comb.icmp bin ult %io_addr, %27 {sv.namehint = "_res_hit_T_51"} : i32
    %29 = comb.and bin %24, %26, %28 {sv.namehint = "_res_hit_T_53"} : i1
    %30 = comb.mux bin %18, %23, %29 {sv.namehint = "res_hit_1"} : i1
    %31 = comb.xor bin %io_pmp_6_cfg_l, %true {sv.namehint = "_res_ignore_T_1"} : i1
    %32 = comb.and bin %0, %31 {sv.namehint = "res_ignore_1"} : i1
    %33 = comb.or bin %io_pmp_6_cfg_x, %32 {sv.namehint = "res_cur_1_cfg_x"} : i1
    %34 = comb.mux bin %30, %33, %17 {sv.namehint = "_res_T_89_cfg_x"} : i1
    %35 = comb.extract %io_pmp_5_cfg_a from 1 {sv.namehint = "_res_hit_T_54"} : (i2) -> i1
    %36 = comb.concat %io_pmp_5_addr, %c0_i2 {sv.namehint = "_res_hit_T_58"} : i30, i2
    %37 = comb.xor bin %io_addr, %36 {sv.namehint = "_res_hit_T_59"} : i32
    %38 = comb.xor bin %io_pmp_5_mask, %c-1_i32 {sv.namehint = "_res_hit_T_60"} : i32
    %39 = comb.and bin %37, %38 {sv.namehint = "_res_hit_T_61"} : i32
    %40 = comb.icmp bin eq %39, %c0_i32 {sv.namehint = "_res_hit_T_62"} : i32
    %41 = comb.extract %io_pmp_5_cfg_a from 0 {sv.namehint = "_res_hit_T_63"} : (i2) -> i1
    %42 = comb.concat %io_pmp_4_addr, %c0_i2 {sv.namehint = "_res_hit_T_71"} : i30, i2
    %43 = comb.icmp bin uge %io_addr, %42 {sv.namehint = "_res_hit_T_73"} : i32
    %44 = comb.concat %io_pmp_5_addr, %c0_i2 {sv.namehint = "_res_hit_T_77"} : i30, i2
    %45 = comb.icmp bin ult %io_addr, %44 {sv.namehint = "_res_hit_T_78"} : i32
    %46 = comb.and bin %41, %43, %45 {sv.namehint = "_res_hit_T_80"} : i1
    %47 = comb.mux bin %35, %40, %46 {sv.namehint = "res_hit_2"} : i1
    %48 = comb.xor bin %io_pmp_5_cfg_l, %true {sv.namehint = "_res_ignore_T_2"} : i1
    %49 = comb.and bin %0, %48 {sv.namehint = "res_ignore_2"} : i1
    %50 = comb.or bin %io_pmp_5_cfg_x, %49 {sv.namehint = "res_cur_2_cfg_x"} : i1
    %51 = comb.mux bin %47, %50, %34 {sv.namehint = "_res_T_134_cfg_x"} : i1
    %52 = comb.extract %io_pmp_4_cfg_a from 1 {sv.namehint = "_res_hit_T_81"} : (i2) -> i1
    %53 = comb.concat %io_pmp_4_addr, %c0_i2 {sv.namehint = "_res_hit_T_85"} : i30, i2
    %54 = comb.xor bin %io_addr, %53 {sv.namehint = "_res_hit_T_86"} : i32
    %55 = comb.xor bin %io_pmp_4_mask, %c-1_i32 {sv.namehint = "_res_hit_T_87"} : i32
    %56 = comb.and bin %54, %55 {sv.namehint = "_res_hit_T_88"} : i32
    %57 = comb.icmp bin eq %56, %c0_i32 {sv.namehint = "_res_hit_T_89"} : i32
    %58 = comb.extract %io_pmp_4_cfg_a from 0 {sv.namehint = "_res_hit_T_90"} : (i2) -> i1
    %59 = comb.concat %io_pmp_3_addr, %c0_i2 {sv.namehint = "_res_hit_T_98"} : i30, i2
    %60 = comb.icmp bin uge %io_addr, %59 {sv.namehint = "_res_hit_T_100"} : i32
    %61 = comb.concat %io_pmp_4_addr, %c0_i2 {sv.namehint = "_res_hit_T_104"} : i30, i2
    %62 = comb.icmp bin ult %io_addr, %61 {sv.namehint = "_res_hit_T_105"} : i32
    %63 = comb.and bin %58, %60, %62 {sv.namehint = "_res_hit_T_107"} : i1
    %64 = comb.mux bin %52, %57, %63 {sv.namehint = "res_hit_3"} : i1
    %65 = comb.xor bin %io_pmp_4_cfg_l, %true {sv.namehint = "_res_ignore_T_3"} : i1
    %66 = comb.and bin %0, %65 {sv.namehint = "res_ignore_3"} : i1
    %67 = comb.or bin %io_pmp_4_cfg_x, %66 {sv.namehint = "res_cur_3_cfg_x"} : i1
    %68 = comb.mux bin %64, %67, %51 {sv.namehint = "_res_T_179_cfg_x"} : i1
    %69 = comb.extract %io_pmp_3_cfg_a from 1 {sv.namehint = "_res_hit_T_108"} : (i2) -> i1
    %70 = comb.concat %io_pmp_3_addr, %c0_i2 {sv.namehint = "_res_hit_T_112"} : i30, i2
    %71 = comb.xor bin %io_addr, %70 {sv.namehint = "_res_hit_T_113"} : i32
    %72 = comb.xor bin %io_pmp_3_mask, %c-1_i32 {sv.namehint = "_res_hit_T_114"} : i32
    %73 = comb.and bin %71, %72 {sv.namehint = "_res_hit_T_115"} : i32
    %74 = comb.icmp bin eq %73, %c0_i32 {sv.namehint = "_res_hit_T_116"} : i32
    %75 = comb.extract %io_pmp_3_cfg_a from 0 {sv.namehint = "_res_hit_T_117"} : (i2) -> i1
    %76 = comb.concat %io_pmp_2_addr, %c0_i2 {sv.namehint = "_res_hit_T_125"} : i30, i2
    %77 = comb.icmp bin uge %io_addr, %76 {sv.namehint = "_res_hit_T_127"} : i32
    %78 = comb.concat %io_pmp_3_addr, %c0_i2 {sv.namehint = "_res_hit_T_131"} : i30, i2
    %79 = comb.icmp bin ult %io_addr, %78 {sv.namehint = "_res_hit_T_132"} : i32
    %80 = comb.and bin %75, %77, %79 {sv.namehint = "_res_hit_T_134"} : i1
    %81 = comb.mux bin %69, %74, %80 {sv.namehint = "res_hit_4"} : i1
    %82 = comb.xor bin %io_pmp_3_cfg_l, %true {sv.namehint = "_res_ignore_T_4"} : i1
    %83 = comb.and bin %0, %82 {sv.namehint = "res_ignore_4"} : i1
    %84 = comb.or bin %io_pmp_3_cfg_x, %83 {sv.namehint = "res_cur_4_cfg_x"} : i1
    %85 = comb.mux bin %81, %84, %68 {sv.namehint = "_res_T_224_cfg_x"} : i1
    %86 = comb.extract %io_pmp_2_cfg_a from 1 {sv.namehint = "_res_hit_T_135"} : (i2) -> i1
    %87 = comb.concat %io_pmp_2_addr, %c0_i2 {sv.namehint = "_res_hit_T_139"} : i30, i2
    %88 = comb.xor bin %io_addr, %87 {sv.namehint = "_res_hit_T_140"} : i32
    %89 = comb.xor bin %io_pmp_2_mask, %c-1_i32 {sv.namehint = "_res_hit_T_141"} : i32
    %90 = comb.and bin %88, %89 {sv.namehint = "_res_hit_T_142"} : i32
    %91 = comb.icmp bin eq %90, %c0_i32 {sv.namehint = "_res_hit_T_143"} : i32
    %92 = comb.extract %io_pmp_2_cfg_a from 0 {sv.namehint = "_res_hit_T_144"} : (i2) -> i1
    %93 = comb.concat %io_pmp_1_addr, %c0_i2 {sv.namehint = "_res_hit_T_152"} : i30, i2
    %94 = comb.icmp bin uge %io_addr, %93 {sv.namehint = "_res_hit_T_154"} : i32
    %95 = comb.concat %io_pmp_2_addr, %c0_i2 {sv.namehint = "_res_hit_T_158"} : i30, i2
    %96 = comb.icmp bin ult %io_addr, %95 {sv.namehint = "_res_hit_T_159"} : i32
    %97 = comb.and bin %92, %94, %96 {sv.namehint = "_res_hit_T_161"} : i1
    %98 = comb.mux bin %86, %91, %97 {sv.namehint = "res_hit_5"} : i1
    %99 = comb.xor bin %io_pmp_2_cfg_l, %true {sv.namehint = "_res_ignore_T_5"} : i1
    %100 = comb.and bin %0, %99 {sv.namehint = "res_ignore_5"} : i1
    %101 = comb.or bin %io_pmp_2_cfg_x, %100 {sv.namehint = "res_cur_5_cfg_x"} : i1
    %102 = comb.mux bin %98, %101, %85 {sv.namehint = "_res_T_269_cfg_x"} : i1
    %103 = comb.extract %io_pmp_1_cfg_a from 1 {sv.namehint = "_res_hit_T_162"} : (i2) -> i1
    %104 = comb.concat %io_pmp_1_addr, %c0_i2 {sv.namehint = "_res_hit_T_166"} : i30, i2
    %105 = comb.xor bin %io_addr, %104 {sv.namehint = "_res_hit_T_167"} : i32
    %106 = comb.xor bin %io_pmp_1_mask, %c-1_i32 {sv.namehint = "_res_hit_T_168"} : i32
    %107 = comb.and bin %105, %106 {sv.namehint = "_res_hit_T_169"} : i32
    %108 = comb.icmp bin eq %107, %c0_i32 {sv.namehint = "_res_hit_T_170"} : i32
    %109 = comb.extract %io_pmp_1_cfg_a from 0 {sv.namehint = "_res_hit_T_171"} : (i2) -> i1
    %110 = comb.concat %io_pmp_0_addr, %c0_i2 {sv.namehint = "_res_hit_T_179"} : i30, i2
    %111 = comb.icmp bin uge %io_addr, %110 {sv.namehint = "_res_hit_T_181"} : i32
    %112 = comb.concat %io_pmp_1_addr, %c0_i2 {sv.namehint = "_res_hit_T_185"} : i30, i2
    %113 = comb.icmp bin ult %io_addr, %112 {sv.namehint = "_res_hit_T_186"} : i32
    %114 = comb.and bin %109, %111, %113 {sv.namehint = "_res_hit_T_188"} : i1
    %115 = comb.mux bin %103, %108, %114 {sv.namehint = "res_hit_6"} : i1
    %116 = comb.xor bin %io_pmp_1_cfg_l, %true {sv.namehint = "_res_ignore_T_6"} : i1
    %117 = comb.and bin %0, %116 {sv.namehint = "res_ignore_6"} : i1
    %118 = comb.or bin %io_pmp_1_cfg_x, %117 {sv.namehint = "res_cur_6_cfg_x"} : i1
    %119 = comb.mux bin %115, %118, %102 {sv.namehint = "_res_T_314_cfg_x"} : i1
    %120 = comb.extract %io_pmp_0_cfg_a from 1 {sv.namehint = "_res_hit_T_189"} : (i2) -> i1
    %121 = comb.concat %io_pmp_0_addr, %c0_i2 {sv.namehint = "_res_hit_T_193"} : i30, i2
    %122 = comb.xor bin %io_addr, %121 {sv.namehint = "_res_hit_T_194"} : i32
    %123 = comb.xor bin %io_pmp_0_mask, %c-1_i32 {sv.namehint = "_res_hit_T_195"} : i32
    %124 = comb.and bin %122, %123 {sv.namehint = "_res_hit_T_196"} : i32
    %125 = comb.icmp bin eq %124, %c0_i32 {sv.namehint = "_res_hit_T_197"} : i32
    %126 = comb.extract %io_pmp_0_cfg_a from 0 {sv.namehint = "_res_hit_T_198"} : (i2) -> i1
    %127 = comb.concat %io_pmp_0_addr, %c0_i2 {sv.namehint = "_res_hit_T_212"} : i30, i2
    %128 = comb.icmp bin ult %io_addr, %127 {sv.namehint = "_res_hit_T_214"} : i32
    %129 = comb.and bin %126, %128 {sv.namehint = "_res_hit_T_215"} : i1
    %130 = comb.mux bin %120, %125, %129 {sv.namehint = "res_hit_7"} : i1
    %131 = comb.xor bin %io_pmp_0_cfg_l, %true {sv.namehint = "_res_ignore_T_7"} : i1
    %132 = comb.and bin %0, %131 {sv.namehint = "res_ignore_7"} : i1
    %133 = comb.or bin %io_pmp_0_cfg_x, %132 {sv.namehint = "res_cur_7_cfg_x"} : i1
    %134 = comb.mux bin %130, %133, %119 {sv.namehint = "io_x"} : i1
    hw.output %134 : i1
  }
  hw.module private @TLB_1(in %io_req_bits_vaddr : i34, out io_resp_paddr : i32, out io_resp_pf_inst : i1, out io_resp_ae_inst : i1, out io_resp_cacheable : i1, in %io_ptw_status_debug : i1, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_x : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_x : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_x : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_x : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_x : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_x : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_x : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_x : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32) {
    %c-8_i4 = hw.constant -8 : i4
    %c-512_i10 = hw.constant -512 : i10
    %false = hw.constant false {sv.namehint = "entries_barrier.io_x_c"}
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i5 = hw.constant 0 : i5
    %c0_i6 = hw.constant 0 : i6
    %c0_i18 = hw.constant 0 : i18
    %c0_i8 = hw.constant 0 : i8
    %c0_i22 = hw.constant 0 : i22
    %true = hw.constant true
    %c-1_i2 = hw.constant -1 : i2 {sv.namehint = "pmp.io_prv"}
    %pmp.io_x = hw.instance "pmp" @PMPChecker_2(io_prv: %c-1_i2: i2, io_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_pmp_0_cfg_x: %io_ptw_pmp_0_cfg_x: i1, io_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_pmp_1_cfg_x: %io_ptw_pmp_1_cfg_x: i1, io_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_pmp_2_cfg_x: %io_ptw_pmp_2_cfg_x: i1, io_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_pmp_3_cfg_x: %io_ptw_pmp_3_cfg_x: i1, io_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_pmp_4_cfg_x: %io_ptw_pmp_4_cfg_x: i1, io_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_pmp_5_cfg_x: %io_ptw_pmp_5_cfg_x: i1, io_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_pmp_6_cfg_x: %io_ptw_pmp_6_cfg_x: i1, io_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_pmp_7_cfg_x: %io_ptw_pmp_7_cfg_x: i1, io_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_pmp_7_mask: %io_ptw_pmp_7_mask: i32, io_addr: %0: i32) -> (io_x: i1) {sv.namehint = "pmp.io_x"}
    %0 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "pmp.io_addr"} : (i34) -> i32
    %1 = comb.extract %io_req_bits_vaddr from 14 : (i34) -> i20
    %2 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i2
    %3 = comb.xor %2, %c-1_i2 : i2
    %4 = comb.concat %1, %3 : i20, i2
    %5 = comb.icmp bin eq %4, %c0_i22 {sv.namehint = "_legal_address_T_4"} : i22
    %6 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i6
    %7 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i2
    %8 = comb.xor %7, %c-1_i2 : i2
    %9 = comb.concat %6, %8 : i6, i2
    %10 = comb.icmp bin eq %9, %c0_i8 {sv.namehint = "_legal_address_T_9"} : i8
    %11 = comb.extract %io_req_bits_vaddr from 26 : (i34) -> i8
    %12 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i10
    %13 = comb.xor %12, %c-512_i10 : i10
    %14 = comb.concat %11, %13 : i8, i10
    %15 = comb.icmp bin eq %14, %c0_i18 {sv.namehint = "_legal_address_T_14"} : i18
    %16 = comb.extract %io_req_bits_vaddr from 12 : (i34) -> i22
    %17 = comb.icmp bin ne %16, %c0_i22 : i22
    %18 = comb.xor bin %17, %true {sv.namehint = "_legal_address_T_19"} : i1
    %19 = comb.extract %io_req_bits_vaddr from 17 : (i34) -> i17
    %20 = comb.extract %io_req_bits_vaddr from 16 : (i34) -> i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.concat %19, %21 : i17, i1
    %23 = comb.icmp bin eq %22, %c0_i18 {sv.namehint = "_legal_address_T_24"} : i18
    %24 = comb.extract %io_req_bits_vaddr from 32 : (i34) -> i2
    %25 = comb.extract %io_req_bits_vaddr from 28 : (i34) -> i4
    %26 = comb.xor %25, %c-8_i4 : i4
    %27 = comb.concat %24, %26 : i2, i4
    %28 = comb.icmp bin eq %27, %c0_i6 {sv.namehint = "_legal_address_T_29"} : i6
    %29 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i3
    %30 = comb.extract %io_req_bits_vaddr from 29 : (i34) -> i2
    %31 = comb.xor %30, %c-1_i2 : i2
    %32 = comb.concat %29, %31 : i3, i2
    %33 = comb.icmp bin eq %32, %c0_i5 {sv.namehint = "_legal_address_T_34"} : i5
    %34 = comb.or bin %5, %10, %15, %18, %23, %28, %33 {sv.namehint = "legal_address"} : i1
    %35 = comb.extract %26 from 3 : (i4) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "_cacheable_T_12"} : i1
    %37 = comb.and bin %34, %36 {sv.namehint = "cacheable"} : i1
    %38 = comb.xor bin %io_ptw_status_debug, %true {sv.namehint = "_deny_access_to_debug_T"} : i1
    %39 = comb.xor bin %17, %true {sv.namehint = "_deny_access_to_debug_T_5"} : i1
    %40 = comb.and bin %38, %39 {sv.namehint = "deny_access_to_debug"} : i1
    %41 = comb.xor bin %40, %true {sv.namehint = "_prot_x_T_32"} : i1
    %42 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i1
    %43 = comb.xor %42, %true : i1
    %44 = comb.extract %io_req_bits_vaddr from 30 : (i34) -> i2
    %45 = comb.extract %io_req_bits_vaddr from 27 : (i34) -> i1
    %46 = comb.extract %io_req_bits_vaddr from 25 : (i34) -> i1
    %47 = comb.concat %44, %45, %46 : i2, i1, i1
    %48 = comb.icmp bin eq %47, %c0_i4 {sv.namehint = "_prot_x_T_4"} : i4
    %49 = comb.extract %io_req_bits_vaddr from 31 : (i34) -> i1
    %50 = comb.concat %49, %43 : i1, i1
    %51 = comb.icmp bin eq %50, %c0_i2 {sv.namehint = "_prot_x_T_9"} : i2
    %52 = comb.extract %26 from 2 : (i4) -> i2
    %53 = comb.icmp bin eq %52, %c0_i2 {sv.namehint = "_prot_x_T_14"} : i2
    %54 = comb.or bin %48, %51, %53 {sv.namehint = "_prot_x_T_30"} : i1
    %55 = comb.and bin %34, %54, %41, %pmp.io_x {sv.namehint = "prot_x"} : i1
    %entries_barrier.io_y_u, %entries_barrier.io_y_ae, %entries_barrier.io_y_sw, %entries_barrier.io_y_sx, %entries_barrier.io_y_sr, %entries_barrier.io_y_pw, %entries_barrier.io_y_px, %entries_barrier.io_y_pr, %entries_barrier.io_y_ppp, %entries_barrier.io_y_pal, %entries_barrier.io_y_paa, %entries_barrier.io_y_eff, %entries_barrier.io_y_c = hw.instance "entries_barrier" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier.io_y_u"}
    %entries_barrier_1.io_y_u, %entries_barrier_1.io_y_ae, %entries_barrier_1.io_y_sw, %entries_barrier_1.io_y_sx, %entries_barrier_1.io_y_sr, %entries_barrier_1.io_y_pw, %entries_barrier_1.io_y_px, %entries_barrier_1.io_y_pr, %entries_barrier_1.io_y_ppp, %entries_barrier_1.io_y_pal, %entries_barrier_1.io_y_paa, %entries_barrier_1.io_y_eff, %entries_barrier_1.io_y_c = hw.instance "entries_barrier_1" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_1.io_y_u"}
    %entries_barrier_2.io_y_u, %entries_barrier_2.io_y_ae, %entries_barrier_2.io_y_sw, %entries_barrier_2.io_y_sx, %entries_barrier_2.io_y_sr, %entries_barrier_2.io_y_pw, %entries_barrier_2.io_y_px, %entries_barrier_2.io_y_pr, %entries_barrier_2.io_y_ppp, %entries_barrier_2.io_y_pal, %entries_barrier_2.io_y_paa, %entries_barrier_2.io_y_eff, %entries_barrier_2.io_y_c = hw.instance "entries_barrier_2" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_2.io_y_u"}
    %entries_barrier_3.io_y_u, %entries_barrier_3.io_y_ae, %entries_barrier_3.io_y_sw, %entries_barrier_3.io_y_sx, %entries_barrier_3.io_y_sr, %entries_barrier_3.io_y_pw, %entries_barrier_3.io_y_px, %entries_barrier_3.io_y_pr, %entries_barrier_3.io_y_ppp, %entries_barrier_3.io_y_pal, %entries_barrier_3.io_y_paa, %entries_barrier_3.io_y_eff, %entries_barrier_3.io_y_c = hw.instance "entries_barrier_3" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_3.io_y_u"}
    %entries_barrier_4.io_y_u, %entries_barrier_4.io_y_ae, %entries_barrier_4.io_y_sw, %entries_barrier_4.io_y_sx, %entries_barrier_4.io_y_sr, %entries_barrier_4.io_y_pw, %entries_barrier_4.io_y_px, %entries_barrier_4.io_y_pr, %entries_barrier_4.io_y_ppp, %entries_barrier_4.io_y_pal, %entries_barrier_4.io_y_paa, %entries_barrier_4.io_y_eff, %entries_barrier_4.io_y_c = hw.instance "entries_barrier_4" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_4.io_y_u"}
    %entries_barrier_5.io_y_u, %entries_barrier_5.io_y_ae, %entries_barrier_5.io_y_sw, %entries_barrier_5.io_y_sx, %entries_barrier_5.io_y_sr, %entries_barrier_5.io_y_pw, %entries_barrier_5.io_y_px, %entries_barrier_5.io_y_pr, %entries_barrier_5.io_y_ppp, %entries_barrier_5.io_y_pal, %entries_barrier_5.io_y_paa, %entries_barrier_5.io_y_eff, %entries_barrier_5.io_y_c = hw.instance "entries_barrier_5" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "entries_barrier_5.io_y_u"}
    %normal_entries_barrier.io_y_u, %normal_entries_barrier.io_y_ae, %normal_entries_barrier.io_y_sw, %normal_entries_barrier.io_y_sx, %normal_entries_barrier.io_y_sr, %normal_entries_barrier.io_y_pw, %normal_entries_barrier.io_y_px, %normal_entries_barrier.io_y_pr, %normal_entries_barrier.io_y_ppp, %normal_entries_barrier.io_y_pal, %normal_entries_barrier.io_y_paa, %normal_entries_barrier.io_y_eff, %normal_entries_barrier.io_y_c = hw.instance "normal_entries_barrier" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier.io_y_c"}
    %normal_entries_barrier_1.io_y_u, %normal_entries_barrier_1.io_y_ae, %normal_entries_barrier_1.io_y_sw, %normal_entries_barrier_1.io_y_sx, %normal_entries_barrier_1.io_y_sr, %normal_entries_barrier_1.io_y_pw, %normal_entries_barrier_1.io_y_px, %normal_entries_barrier_1.io_y_pr, %normal_entries_barrier_1.io_y_ppp, %normal_entries_barrier_1.io_y_pal, %normal_entries_barrier_1.io_y_paa, %normal_entries_barrier_1.io_y_eff, %normal_entries_barrier_1.io_y_c = hw.instance "normal_entries_barrier_1" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_1.io_y_c"}
    %normal_entries_barrier_2.io_y_u, %normal_entries_barrier_2.io_y_ae, %normal_entries_barrier_2.io_y_sw, %normal_entries_barrier_2.io_y_sx, %normal_entries_barrier_2.io_y_sr, %normal_entries_barrier_2.io_y_pw, %normal_entries_barrier_2.io_y_px, %normal_entries_barrier_2.io_y_pr, %normal_entries_barrier_2.io_y_ppp, %normal_entries_barrier_2.io_y_pal, %normal_entries_barrier_2.io_y_paa, %normal_entries_barrier_2.io_y_eff, %normal_entries_barrier_2.io_y_c = hw.instance "normal_entries_barrier_2" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_2.io_y_c"}
    %normal_entries_barrier_3.io_y_u, %normal_entries_barrier_3.io_y_ae, %normal_entries_barrier_3.io_y_sw, %normal_entries_barrier_3.io_y_sx, %normal_entries_barrier_3.io_y_sr, %normal_entries_barrier_3.io_y_pw, %normal_entries_barrier_3.io_y_px, %normal_entries_barrier_3.io_y_pr, %normal_entries_barrier_3.io_y_ppp, %normal_entries_barrier_3.io_y_pal, %normal_entries_barrier_3.io_y_paa, %normal_entries_barrier_3.io_y_eff, %normal_entries_barrier_3.io_y_c = hw.instance "normal_entries_barrier_3" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_3.io_y_c"}
    %normal_entries_barrier_4.io_y_u, %normal_entries_barrier_4.io_y_ae, %normal_entries_barrier_4.io_y_sw, %normal_entries_barrier_4.io_y_sx, %normal_entries_barrier_4.io_y_sr, %normal_entries_barrier_4.io_y_pw, %normal_entries_barrier_4.io_y_px, %normal_entries_barrier_4.io_y_pr, %normal_entries_barrier_4.io_y_ppp, %normal_entries_barrier_4.io_y_pal, %normal_entries_barrier_4.io_y_paa, %normal_entries_barrier_4.io_y_eff, %normal_entries_barrier_4.io_y_c = hw.instance "normal_entries_barrier_4" @OptimizationBarrier(io_x_u: %false: i1, io_x_ae: %false: i1, io_x_sw: %false: i1, io_x_sx: %false: i1, io_x_sr: %false: i1, io_x_pw: %false: i1, io_x_px: %false: i1, io_x_pr: %false: i1, io_x_ppp: %false: i1, io_x_pal: %false: i1, io_x_paa: %false: i1, io_x_eff: %false: i1, io_x_c: %false: i1) -> (io_y_u: i1, io_y_ae: i1, io_y_sw: i1, io_y_sx: i1, io_y_sr: i1, io_y_pw: i1, io_y_px: i1, io_y_pr: i1, io_y_ppp: i1, io_y_pal: i1, io_y_paa: i1, io_y_eff: i1, io_y_c: i1) {sv.namehint = "normal_entries_barrier_4.io_y_c"}
    %56 = comb.xor %55, %true {sv.namehint = "_io_resp_ae_inst_T"} : i1
    %57 = comb.extract %io_req_bits_vaddr from 0 {sv.namehint = "io_resp_paddr"} : (i34) -> i32
    hw.output %57, %false, %56, %37 : i32, i1, i1, i1
  }
  hw.module private @Frontend(in %gated_clock : !seq.clock, in %reset : i1, in %auto_icache_master_out_a_ready : i1, out auto_icache_master_out_a_valid : i1, out auto_icache_master_out_a_bits_address : i32, in %auto_icache_master_out_d_valid : i1, in %auto_icache_master_out_d_bits_opcode : i3, in %auto_icache_master_out_d_bits_size : i4, in %auto_icache_master_out_d_bits_data : i64, in %auto_icache_master_out_d_bits_corrupt : i1, in %io_cpu_might_request : i1, in %io_cpu_req_valid : i1, in %io_cpu_req_bits_pc : i34, in %io_cpu_req_bits_speculative : i1, in %io_cpu_resp_ready : i1, out io_cpu_resp_valid : i1, out io_cpu_resp_bits_pc : i34, out io_cpu_resp_bits_data : i32, out io_cpu_resp_bits_xcpt_pf_inst : i1, out io_cpu_resp_bits_xcpt_ae_inst : i1, out io_cpu_resp_bits_replay : i1, in %io_cpu_btb_update_valid : i1, in %io_cpu_bht_update_valid : i1, in %io_cpu_flush_icache : i1, in %io_ptw_status_debug : i1, in %io_ptw_pmp_0_cfg_l : i1, in %io_ptw_pmp_0_cfg_a : i2, in %io_ptw_pmp_0_cfg_x : i1, in %io_ptw_pmp_0_addr : i30, in %io_ptw_pmp_0_mask : i32, in %io_ptw_pmp_1_cfg_l : i1, in %io_ptw_pmp_1_cfg_a : i2, in %io_ptw_pmp_1_cfg_x : i1, in %io_ptw_pmp_1_addr : i30, in %io_ptw_pmp_1_mask : i32, in %io_ptw_pmp_2_cfg_l : i1, in %io_ptw_pmp_2_cfg_a : i2, in %io_ptw_pmp_2_cfg_x : i1, in %io_ptw_pmp_2_addr : i30, in %io_ptw_pmp_2_mask : i32, in %io_ptw_pmp_3_cfg_l : i1, in %io_ptw_pmp_3_cfg_a : i2, in %io_ptw_pmp_3_cfg_x : i1, in %io_ptw_pmp_3_addr : i30, in %io_ptw_pmp_3_mask : i32, in %io_ptw_pmp_4_cfg_l : i1, in %io_ptw_pmp_4_cfg_a : i2, in %io_ptw_pmp_4_cfg_x : i1, in %io_ptw_pmp_4_addr : i30, in %io_ptw_pmp_4_mask : i32, in %io_ptw_pmp_5_cfg_l : i1, in %io_ptw_pmp_5_cfg_a : i2, in %io_ptw_pmp_5_cfg_x : i1, in %io_ptw_pmp_5_addr : i30, in %io_ptw_pmp_5_mask : i32, in %io_ptw_pmp_6_cfg_l : i1, in %io_ptw_pmp_6_cfg_a : i2, in %io_ptw_pmp_6_cfg_x : i1, in %io_ptw_pmp_6_addr : i30, in %io_ptw_pmp_6_mask : i32, in %io_ptw_pmp_7_cfg_l : i1, in %io_ptw_pmp_7_cfg_a : i2, in %io_ptw_pmp_7_cfg_x : i1, in %io_ptw_pmp_7_addr : i30, in %io_ptw_pmp_7_mask : i32, in %io_ptw_customCSRs_csrs_0_value : i64) {
    %c4_i34 = hw.constant 4 : i34
    %c0_i2 = hw.constant 0 : i2
    %c65536_i34 = hw.constant 65536 : i34
    %false = hw.constant false
    %true = hw.constant true
    %0 = seq.from_clock %gated_clock
    %icache.auto_master_out_a_valid, %icache.auto_master_out_a_bits_address, %icache.io_resp_valid, %icache.io_resp_bits_data, %icache.io_resp_bits_ae = hw.instance "icache" @ICache(clock: %gated_clock: !seq.clock, reset: %reset: i1, auto_master_out_a_ready: %auto_icache_master_out_a_ready: i1, auto_master_out_d_valid: %auto_icache_master_out_d_valid: i1, auto_master_out_d_bits_opcode: %auto_icache_master_out_d_bits_opcode: i3, auto_master_out_d_bits_size: %auto_icache_master_out_d_bits_size: i4, auto_master_out_d_bits_data: %auto_icache_master_out_d_bits_data: i64, auto_master_out_d_bits_corrupt: %auto_icache_master_out_d_bits_corrupt: i1, io_req_valid: %17: i1, io_req_bits_addr: %45: i33, io_s1_paddr: %tlb.io_resp_paddr: i32, io_s1_kill: %46: i1, io_s2_kill: %52: i1, io_invalidate: %io_cpu_flush_icache: i1) -> (auto_master_out_a_valid: i1, auto_master_out_a_bits_address: i32, io_resp_valid: i1, io_resp_bits_data: i32, io_resp_bits_ae: i1) {sv.namehint = "icache.io_resp_valid"}
    %1 = comb.or bin %reset, %io_cpu_req_valid : i1
    %fq.io_enq_ready, %fq.io_deq_valid, %fq.io_deq_bits_pc, %fq.io_deq_bits_data, %fq.io_deq_bits_xcpt_pf_inst, %fq.io_deq_bits_xcpt_ae_inst, %fq.io_deq_bits_replay, %fq.io_mask = hw.instance "fq" @ShiftQueue(clock: %gated_clock: !seq.clock, reset: %1: i1, io_enq_valid: %54: i1, io_enq_bits_pc: %s2_pc: i34, io_enq_bits_data: %icache.io_resp_bits_data: i32, io_enq_bits_xcpt_pf_inst: %s2_tlb_resp_pf_inst: i1, io_enq_bits_xcpt_ae_inst: %67: i1, io_enq_bits_replay: %60: i1, io_deq_ready: %io_cpu_resp_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_pc: i34, io_deq_bits_data: i32, io_deq_bits_xcpt_pf_inst: i1, io_deq_bits_xcpt_ae_inst: i1, io_deq_bits_replay: i1, io_mask: i5) {sv.namehint = "fq.io_mask"}
    %2 = comb.or bin %io_cpu_req_valid, %io_cpu_flush_icache, %io_cpu_bht_update_valid, %io_cpu_btb_update_valid : i1
    %3 = comb.xor bin %2, %true : i1
    %4 = comb.or bin %3, %io_cpu_might_request, %reset : i1
    %5 = comb.xor bin %4, %true : i1
    %tlb.io_resp_paddr, %tlb.io_resp_pf_inst, %tlb.io_resp_ae_inst, %tlb.io_resp_cacheable = hw.instance "tlb" @TLB_1(io_req_bits_vaddr: %s1_pc: i34, io_ptw_status_debug: %io_ptw_status_debug: i1, io_ptw_pmp_0_cfg_l: %io_ptw_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %io_ptw_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_x: %io_ptw_pmp_0_cfg_x: i1, io_ptw_pmp_0_addr: %io_ptw_pmp_0_addr: i30, io_ptw_pmp_0_mask: %io_ptw_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %io_ptw_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %io_ptw_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_x: %io_ptw_pmp_1_cfg_x: i1, io_ptw_pmp_1_addr: %io_ptw_pmp_1_addr: i30, io_ptw_pmp_1_mask: %io_ptw_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %io_ptw_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %io_ptw_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_x: %io_ptw_pmp_2_cfg_x: i1, io_ptw_pmp_2_addr: %io_ptw_pmp_2_addr: i30, io_ptw_pmp_2_mask: %io_ptw_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %io_ptw_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %io_ptw_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_x: %io_ptw_pmp_3_cfg_x: i1, io_ptw_pmp_3_addr: %io_ptw_pmp_3_addr: i30, io_ptw_pmp_3_mask: %io_ptw_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %io_ptw_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %io_ptw_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_x: %io_ptw_pmp_4_cfg_x: i1, io_ptw_pmp_4_addr: %io_ptw_pmp_4_addr: i30, io_ptw_pmp_4_mask: %io_ptw_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %io_ptw_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %io_ptw_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_x: %io_ptw_pmp_5_cfg_x: i1, io_ptw_pmp_5_addr: %io_ptw_pmp_5_addr: i30, io_ptw_pmp_5_mask: %io_ptw_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %io_ptw_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %io_ptw_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_x: %io_ptw_pmp_6_cfg_x: i1, io_ptw_pmp_6_addr: %io_ptw_pmp_6_addr: i30, io_ptw_pmp_6_mask: %io_ptw_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %io_ptw_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %io_ptw_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_x: %io_ptw_pmp_7_cfg_x: i1, io_ptw_pmp_7_addr: %io_ptw_pmp_7_addr: i30, io_ptw_pmp_7_mask: %io_ptw_pmp_7_mask: i32) -> (io_resp_paddr: i32, io_resp_pf_inst: i1, io_resp_ae_inst: i1, io_resp_cacheable: i1) {sv.namehint = "tlb.io_resp_paddr"}
    %s1_valid = seq.firreg %17 clock %gated_clock {firrtl.random_init_start = 1 : ui64} : i1
    %s2_valid = seq.firreg %38 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %6 = comb.extract %fq.io_mask from 2 {sv.namehint = "_s0_fq_has_space_T"} : (i5) -> i1
    %7 = comb.xor bin %6, %true {sv.namehint = "_s0_fq_has_space_T_1"} : i1
    %8 = comb.extract %fq.io_mask from 3 {sv.namehint = "_s0_fq_has_space_T_2"} : (i5) -> i1
    %9 = comb.xor bin %8, %true {sv.namehint = "_s0_fq_has_space_T_3"} : i1
    %10 = comb.xor bin %s1_valid, %true {sv.namehint = "_s0_fq_has_space_T_11"} : i1
    %11 = comb.xor bin %s2_valid, %true {sv.namehint = "_tlb_io_kill_T"} : i1
    %12 = comb.or bin %10, %11 {sv.namehint = "_s0_fq_has_space_T_6"} : i1
    %13 = comb.and bin %9, %12 {sv.namehint = "_s0_fq_has_space_T_7"} : i1
    %14 = comb.extract %fq.io_mask from 4 {sv.namehint = "_clock_en_reg_T_6"} : (i5) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "_s0_fq_has_space_T_10"} : i1
    %16 = comb.and bin %15, %10, %11 {sv.namehint = "_s0_fq_has_space_T_14"} : i1
    %17 = comb.or bin %io_cpu_req_valid, %7, %13, %16 {sv.namehint = "s0_valid"} : i1
    %s1_pc = seq.firreg %57 clock %gated_clock {firrtl.random_init_start = 3 : ui64, sv.namehint = "s1_pc"} : i34
    %s1_speculative = seq.firreg %35 clock %gated_clock {firrtl.random_init_start = 37 : ui64} : i1
    %s2_pc = seq.firreg %39 clock %gated_clock reset sync %reset, %c65536_i34 {firrtl.random_init_start = 38 : ui64, sv.namehint = "s2_pc"} : i34
    %s2_tlb_resp_pf_inst = seq.firreg %41 clock %gated_clock {firrtl.random_init_start = 156 : ui64, sv.namehint = "s2_tlb_resp_pf_inst"} : i1
    %s2_tlb_resp_ae_inst = seq.firreg %42 clock %gated_clock {firrtl.random_init_start = 159 : ui64} : i1
    %s2_tlb_resp_cacheable = seq.firreg %43 clock %gated_clock {firrtl.random_init_start = 163 : ui64} : i1
    %18 = comb.or bin %s2_tlb_resp_ae_inst, %s2_tlb_resp_pf_inst {sv.namehint = "s2_xcpt"} : i1
    %s2_speculative = seq.firreg %40 clock %gated_clock reset sync %reset, %false {firrtl.random_init_start = 166 : ui64} : i1
    %19 = comb.extract %s1_pc from 2 : (i34) -> i32
    %20 = comb.concat %19, %c0_i2 : i32, i2
    %21 = comb.add %20, %c4_i34 {sv.namehint = "predicted_npc"} : i34
    %22 = comb.and bin %fq.io_enq_ready, %54 {sv.namehint = "_s2_replay_T"} : i1
    %23 = comb.xor bin %22, %true {sv.namehint = "_s2_replay_T_1"} : i1
    %24 = comb.and bin %s2_valid, %23 {sv.namehint = "_s2_replay_T_2"} : i1
    %25 = comb.xor bin %17, %true {sv.namehint = "_s2_replay_T_3"} : i1
    %26 = comb.and bin %27, %25 {sv.namehint = "_s2_replay_T_4"} : i1
    %s2_replay_REG = seq.firreg %26 clock %gated_clock reset sync %reset, %true {firrtl.random_init_start = 185 : ui64} : i1
    %27 = comb.or bin %24, %s2_replay_REG {sv.namehint = "s2_replay"} : i1
    %28 = comb.extract %s2_pc from 1 : (i34) -> i33
    %29 = comb.extract %21 from 1 : (i34) -> i33
    %30 = comb.mux %27, %28, %29 {sv.namehint = "npc"} : i33
    %31 = comb.xor bin %s2_speculative, %true {sv.namehint = "_s0_speculative_T"} : i1
    %32 = comb.and bin %s2_valid, %31 {sv.namehint = "_s0_speculative_T_1"} : i1
    %33 = comb.or bin %s1_speculative, %32 {sv.namehint = "s0_speculative"} : i1
    %34 = comb.mux bin %27, %s2_speculative, %33 {sv.namehint = "_s1_speculative_T"} : i1
    %35 = comb.mux bin %io_cpu_req_valid, %io_cpu_req_bits_speculative, %34 {sv.namehint = "_s1_speculative_T_1"} : i1
    %36 = comb.xor bin %27, %true {sv.namehint = "_tlb_io_req_valid_T"} : i1
    %37 = comb.xor bin %io_cpu_req_valid, %true {sv.namehint = "_s2_valid_T"} : i1
    %38 = comb.and %36, %37 : i1
    %39 = comb.mux bin %27, %s2_pc, %s1_pc : i34
    %40 = comb.mux bin %27, %s2_speculative, %s1_speculative : i1
    %41 = comb.mux bin %27, %s2_tlb_resp_pf_inst, %tlb.io_resp_pf_inst : i1
    %42 = comb.mux bin %27, %s2_tlb_resp_ae_inst, %tlb.io_resp_ae_inst : i1
    %43 = comb.mux bin %27, %s2_tlb_resp_cacheable, %tlb.io_resp_cacheable : i1
    %44 = comb.extract %56 from 0 : (i33) -> i32
    %45 = comb.concat %44, %false {sv.namehint = "icache.io_req_bits_addr"} : i32, i1
    %46 = comb.or bin %io_cpu_req_valid, %27 {sv.namehint = "icache.io_s1_kill"} : i1
    %47 = comb.extract %io_ptw_customCSRs_csrs_0_value from 3 {sv.namehint = "_s2_can_speculatively_refill_T"} : (i64) -> i1
    %48 = comb.xor bin %47, %true {sv.namehint = "_s2_can_speculatively_refill_T_1"} : i1
    %49 = comb.and bin %s2_tlb_resp_cacheable, %48 {sv.namehint = "s2_can_speculatively_refill"} : i1
    %50 = comb.xor bin %49, %true {sv.namehint = "_icache_io_s2_kill_T"} : i1
    %51 = comb.and bin %s2_speculative, %50 {sv.namehint = "_icache_io_s2_kill_T_1"} : i1
    %52 = comb.or bin %51, %18 {sv.namehint = "icache.io_s2_kill"} : i1
    %fq_io_enq_valid_REG = seq.firreg %s1_valid clock %gated_clock {firrtl.random_init_start = 186 : ui64} : i1
    %53 = comb.or bin %icache.io_resp_valid, %52 {sv.namehint = "_fq_io_enq_valid_T_3"} : i1
    %54 = comb.and bin %fq_io_enq_valid_REG, %s2_valid, %53 {sv.namehint = "fq.io_enq_valid"} : i1
    %55 = comb.extract %io_cpu_req_bits_pc from 1 : (i34) -> i33
    %56 = comb.mux %io_cpu_req_valid, %55, %30 {sv.namehint = "_io_cpu_npc_T"} : i33
    %57 = comb.concat %56, %false {sv.namehint = "io_cpu_npc"} : i33, i1
    %58 = comb.xor bin %icache.io_resp_valid, %true {sv.namehint = "_fq_io_enq_bits_replay_T"} : i1
    %59 = comb.xor bin %18, %true {sv.namehint = "_fq_io_enq_bits_replay_T_2"} : i1
    %60 = comb.and bin %52, %58, %59 {sv.namehint = "fq.io_enq_bits_replay"} : i1
    %61 = comb.xor bin %52, %true : i1
    %62 = comb.and bin %s2_speculative, %47, %61 : i1
    %63 = comb.xor bin %62, %true : i1
    %64 = comb.or bin %63, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %68 = comb.and bin %STOP_COND_, %5 : i1
        sv.if %68 {
          sv.fatal 1
        }
        %69 = comb.and bin %STOP_COND_, %65 : i1
        sv.if %69 {
          sv.fatal 1
        }
      }
    }
    %66 = comb.and bin %icache.io_resp_valid, %icache.io_resp_bits_ae : i1
    %67 = comb.or %66, %s2_tlb_resp_ae_inst {sv.namehint = "fq.io_enq_bits_xcpt_ae_inst"} : i1
    hw.output %icache.auto_master_out_a_valid, %icache.auto_master_out_a_bits_address, %fq.io_deq_valid, %fq.io_deq_bits_pc, %fq.io_deq_bits_data, %fq.io_deq_bits_xcpt_pf_inst, %fq.io_deq_bits_xcpt_ae_inst, %fq.io_deq_bits_replay : i1, i32, i1, i34, i32, i1, i1, i1
  }
  hw.module private @HellaCacheArbiter(out io_requestor_0_req_ready : i1, in %io_requestor_0_req_valid : i1, in %io_requestor_0_req_bits_addr : i34, in %io_requestor_0_req_bits_tag : i6, in %io_requestor_0_req_bits_cmd : i5, in %io_requestor_0_req_bits_size : i2, in %io_requestor_0_req_bits_signed : i1, in %io_requestor_0_req_bits_dprv : i2, in %io_requestor_0_s1_kill : i1, in %io_requestor_0_s1_data_data : i64, out io_requestor_0_s2_nack : i1, out io_requestor_0_resp_valid : i1, out io_requestor_0_resp_bits_tag : i6, out io_requestor_0_resp_bits_data : i64, out io_requestor_0_resp_bits_replay : i1, out io_requestor_0_resp_bits_has_data : i1, out io_requestor_0_resp_bits_data_word_bypass : i64, out io_requestor_0_replay_next : i1, out io_requestor_0_s2_xcpt_ma_ld : i1, out io_requestor_0_s2_xcpt_ma_st : i1, out io_requestor_0_s2_xcpt_pf_ld : i1, out io_requestor_0_s2_xcpt_pf_st : i1, out io_requestor_0_s2_xcpt_ae_ld : i1, out io_requestor_0_s2_xcpt_ae_st : i1, out io_requestor_0_ordered : i1, out io_requestor_0_perf_release : i1, out io_requestor_0_perf_grant : i1, in %io_mem_req_ready : i1, out io_mem_req_valid : i1, out io_mem_req_bits_addr : i34, out io_mem_req_bits_tag : i6, out io_mem_req_bits_cmd : i5, out io_mem_req_bits_size : i2, out io_mem_req_bits_signed : i1, out io_mem_req_bits_dprv : i2, out io_mem_s1_kill : i1, out io_mem_s1_data_data : i64, in %io_mem_s2_nack : i1, in %io_mem_resp_valid : i1, in %io_mem_resp_bits_tag : i6, in %io_mem_resp_bits_data : i64, in %io_mem_resp_bits_replay : i1, in %io_mem_resp_bits_has_data : i1, in %io_mem_resp_bits_data_word_bypass : i64, in %io_mem_replay_next : i1, in %io_mem_s2_xcpt_ma_ld : i1, in %io_mem_s2_xcpt_ma_st : i1, in %io_mem_s2_xcpt_pf_ld : i1, in %io_mem_s2_xcpt_pf_st : i1, in %io_mem_s2_xcpt_ae_ld : i1, in %io_mem_s2_xcpt_ae_st : i1, in %io_mem_ordered : i1, in %io_mem_perf_release : i1, in %io_mem_perf_grant : i1) {
    hw.output %io_mem_req_ready, %io_mem_s2_nack, %io_mem_resp_valid, %io_mem_resp_bits_tag, %io_mem_resp_bits_data, %io_mem_resp_bits_replay, %io_mem_resp_bits_has_data, %io_mem_resp_bits_data_word_bypass, %io_mem_replay_next, %io_mem_s2_xcpt_ma_ld, %io_mem_s2_xcpt_ma_st, %io_mem_s2_xcpt_pf_ld, %io_mem_s2_xcpt_pf_st, %io_mem_s2_xcpt_ae_ld, %io_mem_s2_xcpt_ae_st, %io_mem_ordered, %io_mem_perf_release, %io_mem_perf_grant, %io_requestor_0_req_valid, %io_requestor_0_req_bits_addr, %io_requestor_0_req_bits_tag, %io_requestor_0_req_bits_cmd, %io_requestor_0_req_bits_size, %io_requestor_0_req_bits_signed, %io_requestor_0_req_bits_dprv, %io_requestor_0_s1_kill, %io_requestor_0_s1_data_data : i1, i1, i1, i6, i64, i1, i1, i64, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i34, i6, i5, i2, i1, i2, i1, i64
  }
  hw.module private @PTW(in %clock : !seq.clock, out io_requestor_0_status_debug : i1, out io_requestor_0_status_dprv : i2, out io_requestor_0_pmp_0_cfg_l : i1, out io_requestor_0_pmp_0_cfg_a : i2, out io_requestor_0_pmp_0_cfg_w : i1, out io_requestor_0_pmp_0_cfg_r : i1, out io_requestor_0_pmp_0_addr : i30, out io_requestor_0_pmp_0_mask : i32, out io_requestor_0_pmp_1_cfg_l : i1, out io_requestor_0_pmp_1_cfg_a : i2, out io_requestor_0_pmp_1_cfg_w : i1, out io_requestor_0_pmp_1_cfg_r : i1, out io_requestor_0_pmp_1_addr : i30, out io_requestor_0_pmp_1_mask : i32, out io_requestor_0_pmp_2_cfg_l : i1, out io_requestor_0_pmp_2_cfg_a : i2, out io_requestor_0_pmp_2_cfg_w : i1, out io_requestor_0_pmp_2_cfg_r : i1, out io_requestor_0_pmp_2_addr : i30, out io_requestor_0_pmp_2_mask : i32, out io_requestor_0_pmp_3_cfg_l : i1, out io_requestor_0_pmp_3_cfg_a : i2, out io_requestor_0_pmp_3_cfg_w : i1, out io_requestor_0_pmp_3_cfg_r : i1, out io_requestor_0_pmp_3_addr : i30, out io_requestor_0_pmp_3_mask : i32, out io_requestor_0_pmp_4_cfg_l : i1, out io_requestor_0_pmp_4_cfg_a : i2, out io_requestor_0_pmp_4_cfg_w : i1, out io_requestor_0_pmp_4_cfg_r : i1, out io_requestor_0_pmp_4_addr : i30, out io_requestor_0_pmp_4_mask : i32, out io_requestor_0_pmp_5_cfg_l : i1, out io_requestor_0_pmp_5_cfg_a : i2, out io_requestor_0_pmp_5_cfg_w : i1, out io_requestor_0_pmp_5_cfg_r : i1, out io_requestor_0_pmp_5_addr : i30, out io_requestor_0_pmp_5_mask : i32, out io_requestor_0_pmp_6_cfg_l : i1, out io_requestor_0_pmp_6_cfg_a : i2, out io_requestor_0_pmp_6_cfg_w : i1, out io_requestor_0_pmp_6_cfg_r : i1, out io_requestor_0_pmp_6_addr : i30, out io_requestor_0_pmp_6_mask : i32, out io_requestor_0_pmp_7_cfg_l : i1, out io_requestor_0_pmp_7_cfg_a : i2, out io_requestor_0_pmp_7_cfg_w : i1, out io_requestor_0_pmp_7_cfg_r : i1, out io_requestor_0_pmp_7_addr : i30, out io_requestor_0_pmp_7_mask : i32, out io_requestor_1_status_debug : i1, out io_requestor_1_pmp_0_cfg_l : i1, out io_requestor_1_pmp_0_cfg_a : i2, out io_requestor_1_pmp_0_cfg_x : i1, out io_requestor_1_pmp_0_addr : i30, out io_requestor_1_pmp_0_mask : i32, out io_requestor_1_pmp_1_cfg_l : i1, out io_requestor_1_pmp_1_cfg_a : i2, out io_requestor_1_pmp_1_cfg_x : i1, out io_requestor_1_pmp_1_addr : i30, out io_requestor_1_pmp_1_mask : i32, out io_requestor_1_pmp_2_cfg_l : i1, out io_requestor_1_pmp_2_cfg_a : i2, out io_requestor_1_pmp_2_cfg_x : i1, out io_requestor_1_pmp_2_addr : i30, out io_requestor_1_pmp_2_mask : i32, out io_requestor_1_pmp_3_cfg_l : i1, out io_requestor_1_pmp_3_cfg_a : i2, out io_requestor_1_pmp_3_cfg_x : i1, out io_requestor_1_pmp_3_addr : i30, out io_requestor_1_pmp_3_mask : i32, out io_requestor_1_pmp_4_cfg_l : i1, out io_requestor_1_pmp_4_cfg_a : i2, out io_requestor_1_pmp_4_cfg_x : i1, out io_requestor_1_pmp_4_addr : i30, out io_requestor_1_pmp_4_mask : i32, out io_requestor_1_pmp_5_cfg_l : i1, out io_requestor_1_pmp_5_cfg_a : i2, out io_requestor_1_pmp_5_cfg_x : i1, out io_requestor_1_pmp_5_addr : i30, out io_requestor_1_pmp_5_mask : i32, out io_requestor_1_pmp_6_cfg_l : i1, out io_requestor_1_pmp_6_cfg_a : i2, out io_requestor_1_pmp_6_cfg_x : i1, out io_requestor_1_pmp_6_addr : i30, out io_requestor_1_pmp_6_mask : i32, out io_requestor_1_pmp_7_cfg_l : i1, out io_requestor_1_pmp_7_cfg_a : i2, out io_requestor_1_pmp_7_cfg_x : i1, out io_requestor_1_pmp_7_addr : i30, out io_requestor_1_pmp_7_mask : i32, out io_requestor_1_customCSRs_csrs_0_value : i64, in %io_dpath_status_debug : i1, in %io_dpath_status_dprv : i2, in %io_dpath_pmp_0_cfg_l : i1, in %io_dpath_pmp_0_cfg_a : i2, in %io_dpath_pmp_0_cfg_x : i1, in %io_dpath_pmp_0_cfg_w : i1, in %io_dpath_pmp_0_cfg_r : i1, in %io_dpath_pmp_0_addr : i30, in %io_dpath_pmp_0_mask : i32, in %io_dpath_pmp_1_cfg_l : i1, in %io_dpath_pmp_1_cfg_a : i2, in %io_dpath_pmp_1_cfg_x : i1, in %io_dpath_pmp_1_cfg_w : i1, in %io_dpath_pmp_1_cfg_r : i1, in %io_dpath_pmp_1_addr : i30, in %io_dpath_pmp_1_mask : i32, in %io_dpath_pmp_2_cfg_l : i1, in %io_dpath_pmp_2_cfg_a : i2, in %io_dpath_pmp_2_cfg_x : i1, in %io_dpath_pmp_2_cfg_w : i1, in %io_dpath_pmp_2_cfg_r : i1, in %io_dpath_pmp_2_addr : i30, in %io_dpath_pmp_2_mask : i32, in %io_dpath_pmp_3_cfg_l : i1, in %io_dpath_pmp_3_cfg_a : i2, in %io_dpath_pmp_3_cfg_x : i1, in %io_dpath_pmp_3_cfg_w : i1, in %io_dpath_pmp_3_cfg_r : i1, in %io_dpath_pmp_3_addr : i30, in %io_dpath_pmp_3_mask : i32, in %io_dpath_pmp_4_cfg_l : i1, in %io_dpath_pmp_4_cfg_a : i2, in %io_dpath_pmp_4_cfg_x : i1, in %io_dpath_pmp_4_cfg_w : i1, in %io_dpath_pmp_4_cfg_r : i1, in %io_dpath_pmp_4_addr : i30, in %io_dpath_pmp_4_mask : i32, in %io_dpath_pmp_5_cfg_l : i1, in %io_dpath_pmp_5_cfg_a : i2, in %io_dpath_pmp_5_cfg_x : i1, in %io_dpath_pmp_5_cfg_w : i1, in %io_dpath_pmp_5_cfg_r : i1, in %io_dpath_pmp_5_addr : i30, in %io_dpath_pmp_5_mask : i32, in %io_dpath_pmp_6_cfg_l : i1, in %io_dpath_pmp_6_cfg_a : i2, in %io_dpath_pmp_6_cfg_x : i1, in %io_dpath_pmp_6_cfg_w : i1, in %io_dpath_pmp_6_cfg_r : i1, in %io_dpath_pmp_6_addr : i30, in %io_dpath_pmp_6_mask : i32, in %io_dpath_pmp_7_cfg_l : i1, in %io_dpath_pmp_7_cfg_a : i2, in %io_dpath_pmp_7_cfg_x : i1, in %io_dpath_pmp_7_cfg_w : i1, in %io_dpath_pmp_7_cfg_r : i1, in %io_dpath_pmp_7_addr : i30, in %io_dpath_pmp_7_mask : i32, in %io_dpath_customCSRs_csrs_0_value : i64) {
    %false = hw.constant false
    %0 = seq.from_clock %clock
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %1 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1 {
          sv.fatal 1
        }
        sv.if %1 {
          sv.fatal 1
        }
        sv.if %1 {
          sv.fatal 1
        }
        sv.if %1 {
          sv.fatal 1
        }
      }
    }
    hw.output %io_dpath_status_debug, %io_dpath_status_dprv, %io_dpath_pmp_0_cfg_l, %io_dpath_pmp_0_cfg_a, %io_dpath_pmp_0_cfg_w, %io_dpath_pmp_0_cfg_r, %io_dpath_pmp_0_addr, %io_dpath_pmp_0_mask, %io_dpath_pmp_1_cfg_l, %io_dpath_pmp_1_cfg_a, %io_dpath_pmp_1_cfg_w, %io_dpath_pmp_1_cfg_r, %io_dpath_pmp_1_addr, %io_dpath_pmp_1_mask, %io_dpath_pmp_2_cfg_l, %io_dpath_pmp_2_cfg_a, %io_dpath_pmp_2_cfg_w, %io_dpath_pmp_2_cfg_r, %io_dpath_pmp_2_addr, %io_dpath_pmp_2_mask, %io_dpath_pmp_3_cfg_l, %io_dpath_pmp_3_cfg_a, %io_dpath_pmp_3_cfg_w, %io_dpath_pmp_3_cfg_r, %io_dpath_pmp_3_addr, %io_dpath_pmp_3_mask, %io_dpath_pmp_4_cfg_l, %io_dpath_pmp_4_cfg_a, %io_dpath_pmp_4_cfg_w, %io_dpath_pmp_4_cfg_r, %io_dpath_pmp_4_addr, %io_dpath_pmp_4_mask, %io_dpath_pmp_5_cfg_l, %io_dpath_pmp_5_cfg_a, %io_dpath_pmp_5_cfg_w, %io_dpath_pmp_5_cfg_r, %io_dpath_pmp_5_addr, %io_dpath_pmp_5_mask, %io_dpath_pmp_6_cfg_l, %io_dpath_pmp_6_cfg_a, %io_dpath_pmp_6_cfg_w, %io_dpath_pmp_6_cfg_r, %io_dpath_pmp_6_addr, %io_dpath_pmp_6_mask, %io_dpath_pmp_7_cfg_l, %io_dpath_pmp_7_cfg_a, %io_dpath_pmp_7_cfg_w, %io_dpath_pmp_7_cfg_r, %io_dpath_pmp_7_addr, %io_dpath_pmp_7_mask, %io_dpath_status_debug, %io_dpath_pmp_0_cfg_l, %io_dpath_pmp_0_cfg_a, %io_dpath_pmp_0_cfg_x, %io_dpath_pmp_0_addr, %io_dpath_pmp_0_mask, %io_dpath_pmp_1_cfg_l, %io_dpath_pmp_1_cfg_a, %io_dpath_pmp_1_cfg_x, %io_dpath_pmp_1_addr, %io_dpath_pmp_1_mask, %io_dpath_pmp_2_cfg_l, %io_dpath_pmp_2_cfg_a, %io_dpath_pmp_2_cfg_x, %io_dpath_pmp_2_addr, %io_dpath_pmp_2_mask, %io_dpath_pmp_3_cfg_l, %io_dpath_pmp_3_cfg_a, %io_dpath_pmp_3_cfg_x, %io_dpath_pmp_3_addr, %io_dpath_pmp_3_mask, %io_dpath_pmp_4_cfg_l, %io_dpath_pmp_4_cfg_a, %io_dpath_pmp_4_cfg_x, %io_dpath_pmp_4_addr, %io_dpath_pmp_4_mask, %io_dpath_pmp_5_cfg_l, %io_dpath_pmp_5_cfg_a, %io_dpath_pmp_5_cfg_x, %io_dpath_pmp_5_addr, %io_dpath_pmp_5_mask, %io_dpath_pmp_6_cfg_l, %io_dpath_pmp_6_cfg_a, %io_dpath_pmp_6_cfg_x, %io_dpath_pmp_6_addr, %io_dpath_pmp_6_mask, %io_dpath_pmp_7_cfg_l, %io_dpath_pmp_7_cfg_a, %io_dpath_pmp_7_cfg_x, %io_dpath_pmp_7_addr, %io_dpath_pmp_7_mask, %io_dpath_customCSRs_csrs_0_value : i1, i2, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i2, i1, i1, i30, i32, i1, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i1, i2, i1, i30, i32, i64
  }
  hw.module private @RVCExpander(in %io_in : i32, out io_out_bits : i32, out io_out_rd : i5, out io_out_rs1 : i5, out io_out_rs2 : i5, out io_rvc : i1) {
    %c18_i8 = hw.constant 18 : i8
    %c19_i8 = hw.constant 19 : i8
    %true = hw.constant true
    %c115_i15 = hw.constant 115 : i15
    %c231_i15 = hw.constant 231 : i15
    %c31_i15 = hw.constant 31 : i15
    %c103_i15 = hw.constant 103 : i15
    %c18_i10 = hw.constant 18 : i10
    %c19_i11 = hw.constant 19 : i11
    %c111_i12 = hw.constant 111 : i12
    %c3_i4 = hw.constant 3 : i4
    %c35_i10 = hw.constant 35 : i10
    %c35_i9 = hw.constant 35 : i9
    %c39_i10 = hw.constant 39 : i10
    %c63_i9 = hw.constant 63 : i9
    %c1_i4 = hw.constant 1 : i4
    %c65_i12 = hw.constant 65 : i12
    %c15_i5 = hw.constant 15 : i5
    %c14_i5 = hw.constant 14 : i5
    %c13_i5 = hw.constant 13 : i5
    %c12_i5 = hw.constant 12 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c8_i5 = hw.constant 8 : i5
    %c7_i5 = hw.constant 7 : i5
    %c6_i5 = hw.constant 6 : i5
    %c5_i5 = hw.constant 5 : i5
    %c4_i5 = hw.constant 4 : i5
    %c3_i5 = hw.constant 3 : i5
    %c0_i6 = hw.constant 0 : i6
    %c0_i8 = hw.constant 0 : i8
    %c-1_i2 = hw.constant -1 : i2
    %c19_i7 = hw.constant 19 : i7
    %c31_i7 = hw.constant 31 : i7
    %c0_i2 = hw.constant 0 : i2
    %c1_i2 = hw.constant 1 : i2
    %c0_i3 = hw.constant 0 : i3
    %c7_i7 = hw.constant 7 : i7
    %c3_i3 = hw.constant 3 : i3
    %c3_i7 = hw.constant 3 : i7
    %c2_i3 = hw.constant 2 : i3
    %c0_i7 = hw.constant 0 : i7
    %c0_i12 = hw.constant 0 : i12
    %c-1_i3 = hw.constant -1 : i3
    %c0_i4 = hw.constant 0 : i4
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i3 = hw.constant -2 : i3
    %c51_i7 = hw.constant 51 : i7
    %c-1_i5 = hw.constant -1 : i5
    %c-29_i7 = hw.constant -29 : i7
    %c1_i3 = hw.constant 1 : i3
    %c-16_i5 = hw.constant -16 : i5
    %c-15_i5 = hw.constant -15 : i5
    %c-14_i5 = hw.constant -14 : i5
    %c-13_i5 = hw.constant -13 : i5
    %c-12_i5 = hw.constant -12 : i5
    %c-11_i5 = hw.constant -11 : i5
    %c-10_i5 = hw.constant -10 : i5
    %c-9_i5 = hw.constant -9 : i5
    %c-8_i5 = hw.constant -8 : i5
    %c-7_i5 = hw.constant -7 : i5
    %c-6_i5 = hw.constant -6 : i5
    %c-5_i5 = hw.constant -5 : i5
    %c-4_i5 = hw.constant -4 : i5
    %c-3_i5 = hw.constant -3 : i5
    %c-2_i5 = hw.constant -2 : i5
    %c0_i5 = hw.constant 0 : i5
    %c1_i5 = hw.constant 1 : i5
    %c2_i5 = hw.constant 2 : i5
    %c1_i7 = hw.constant 1 : i7
    %0 = comb.extract %io_in from 0 {sv.namehint = "io_out_hi"} : (i32) -> i2
    %1 = comb.icmp bin ne %0, %c-1_i2 {sv.namehint = "io_rvc"} : i2
    %2 = comb.extract %io_in from 5 {sv.namehint = "_io_out_s_opc_T"} : (i32) -> i8
    %3 = comb.icmp bin ne %2, %c0_i8 {sv.namehint = "_io_out_s_opc_T_1"} : i8
    %4 = comb.mux bin %3, %c19_i7, %c31_i7 {sv.namehint = "io_out_s_lo_lo"} : i7
    %5 = comb.extract %io_in from 7 {sv.namehint = "io_out_s_hi_hi_hi"} : (i32) -> i4
    %6 = comb.extract %io_in from 11 {sv.namehint = "io_out_s_hi_hi_lo"} : (i32) -> i2
    %7 = comb.extract %io_in from 5 {sv.namehint = "io_out_s_hi_lo"} : (i32) -> i1
    %8 = comb.extract %io_in from 6 {sv.namehint = "io_out_s_lo_hi"} : (i32) -> i1
    %9 = comb.extract %io_in from 2 {sv.namehint = "io_out_s_lo_1"} : (i32) -> i3
    %10 = comb.concat %c0_i2, %5, %6, %7, %8, %c65_i12, %9, %4 {sv.namehint = "io_out_s_0_bits"} : i2, i4, i2, i1, i1, i12, i3, i7
    %11 = comb.extract %io_in from 5 {sv.namehint = "io_out_s_funct_lo"} : (i32) -> i2
    %12 = comb.extract %io_in from 10 {sv.namehint = "io_out_s_hi_lo_1"} : (i32) -> i3
    %13 = comb.extract %io_in from 7 {sv.namehint = "io_out_s_lo_5"} : (i32) -> i3
    %14 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_1_rs1"} : i2, i3
    %15 = comb.concat %c0_i4, %11, %12, %c1_i5, %13, %c13_i5, %9, %c7_i7 {sv.namehint = "io_out_s_1_bits"} : i4, i2, i3, i5, i3, i5, i3, i7
    %16 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_2_rs1"} : i2, i3
    %17 = comb.concat %c0_i5, %7, %12, %8, %c1_i4, %13, %c9_i5, %9, %c3_i7 {sv.namehint = "io_out_s_2_bits"} : i5, i1, i3, i1, i4, i3, i5, i3, i7
    %18 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_3_rs1"} : i2, i3
    %19 = comb.concat %c0_i4, %11, %12, %c1_i5, %13, %c13_i5, %9, %c3_i7 {sv.namehint = "io_out_s_3_bits"} : i4, i2, i3, i5, i3, i5, i3, i7
    %20 = comb.extract %io_in from 12 : (i32) -> i1
    %21 = comb.extract %io_in from 10 : (i32) -> i2
    %22 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_4_rs1"} : i2, i3
    %23 = comb.concat %c0_i5, %7, %20, %c1_i2, %9, %c1_i2, %13, %c2_i3, %21, %8, %c63_i9 {sv.namehint = "io_out_s_4_bits"} : i5, i1, i1, i2, i3, i2, i3, i3, i2, i1, i9
    %24 = comb.extract %io_in from 12 : (i32) -> i1
    %25 = comb.extract %io_in from 10 : (i32) -> i2
    %26 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_5_rs1"} : i2, i3
    %27 = comb.concat %c0_i4, %11, %24, %c1_i2, %9, %c1_i2, %13, %c3_i3, %25, %c39_i10 {sv.namehint = "io_out_s_5_bits"} : i4, i2, i1, i2, i3, i2, i3, i3, i2, i10
    %28 = comb.extract %io_in from 12 : (i32) -> i1
    %29 = comb.extract %io_in from 10 : (i32) -> i2
    %30 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_6_rs1"} : i2, i3
    %31 = comb.concat %c0_i5, %7, %28, %c1_i2, %9, %c1_i2, %13, %c2_i3, %29, %8, %c35_i9 {sv.namehint = "io_out_s_6_bits"} : i5, i1, i1, i2, i3, i2, i3, i3, i2, i1, i9
    %32 = comb.extract %io_in from 12 : (i32) -> i1
    %33 = comb.extract %io_in from 10 : (i32) -> i2
    %34 = comb.concat %c1_i2, %9 {sv.namehint = "io_out_s_7_rd"} : i2, i3
    %35 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_7_rs1"} : i2, i3
    %36 = comb.concat %c0_i4, %11, %32, %c1_i2, %9, %c1_i2, %13, %c3_i3, %33, %c35_i10 {sv.namehint = "io_out_s_7_bits"} : i4, i2, i1, i2, i3, i2, i3, i3, i2, i10
    %37 = comb.extract %io_in from 12 {sv.namehint = "io_out_s_hi_28"} : (i32) -> i1
    %38 = comb.replicate %37 {sv.namehint = "io_out_s_hi_20"} : (i1) -> i7
    %39 = comb.extract %io_in from 2 {sv.namehint = "io_out_s_lo_52"} : (i32) -> i5
    %40 = comb.extract %io_in from 7 {sv.namehint = "io_out_s_9_rd"} : (i32) -> i5
    %41 = comb.concat %38, %39, %40, %c0_i3, %40, %c19_i7 {sv.namehint = "io_out_s_8_bits"} : i7, i5, i5, i3, i5, i7
    %42 = comb.icmp bin eq %40, %c0_i5 : i5
    %43 = comb.replicate %37 {sv.namehint = "io_out_s_hi_22"} : (i1) -> i7
    %44 = comb.concat %43, %39, %40, %c0_i3, %40, %c3_i4, %42, %c-1_i2 {sv.namehint = "io_out_s_9_bits"} : i7, i5, i5, i3, i5, i4, i1, i2
    %45 = comb.replicate %37 {sv.namehint = "io_out_s_hi_24"} : (i1) -> i7
    %46 = comb.concat %45, %39, %c0_i8, %40, %c19_i7 {sv.namehint = "io_out_s_10_bits"} : i7, i5, i8, i5, i7
    %47 = comb.replicate %37 {sv.namehint = "io_out_s_opc_hi"} : (i1) -> i7
    %48 = comb.concat %47, %39 {sv.namehint = "_io_out_s_opc_T_6"} : i7, i5
    %49 = comb.icmp bin eq %48, %c0_i12 : i12
    %50 = comb.icmp bin eq %40, %c0_i5 {sv.namehint = "_io_out_s_T_68"} : i5
    %51 = comb.icmp bin eq %40, %c2_i5 {sv.namehint = "_io_out_s_T_70"} : i5
    %52 = comb.or bin %50, %51 {sv.namehint = "_io_out_s_T_71"} : i1
    %53 = comb.replicate %37 {sv.namehint = "io_out_s_opc_hi_1"} : (i1) -> i7
    %54 = comb.concat %53, %39 {sv.namehint = "_io_out_s_opc_T_10"} : i7, i5
    %55 = comb.icmp bin ne %54, %c0_i12 {sv.namehint = "_io_out_s_opc_T_11"} : i12
    %56 = comb.mux bin %55, %c19_i7, %c31_i7 {sv.namehint = "io_out_s_lo_lo_2"} : i7
    %57 = comb.extract %io_in from 3 {sv.namehint = "io_out_s_lo_hi_lo_9"} : (i32) -> i2
    %58 = comb.extract %io_in from 2 {sv.namehint = "io_out_s_lo_hi_hi"} : (i32) -> i1
    %59 = comb.replicate %37 : (i1) -> i3
    %60 = comb.concat %57, %7, %58, %8, %c0_i4, %40, %c0_i3, %40, %56 : i2, i1, i1, i1, i4, i5, i3, i5, i7
    %61 = comb.replicate %37 : (i1) -> i12
    %62 = comb.concat %61, %39, %40, %c3_i3, %49, %c-1_i3 : i12, i5, i5, i3, i1, i3
    %63 = comb.mux bin %52, %60, %62 : i29
    %64 = comb.concat %59, %63 {sv.namehint = "io_out_s_11_bits"} : i3, i29
    %65 = comb.concat %37, %11 {sv.namehint = "_io_out_s_funct_T"} : i1, i2
    %66 = comb.icmp bin eq %65, %c1_i3 {sv.namehint = "_io_out_s_funct_T_1"} : i3
    %67 = comb.concat %66, %c0_i2 {sv.namehint = "_io_out_s_funct_T_2"} : i1, i2
    %68 = hw.array_create %c3_i3, %c2_i3, %c0_i3, %c0_i3, %c-1_i3, %c-2_i3, %67, %67 : i3
    %69 = hw.array_get %68[%65] {sv.namehint = "io_out_s_hi_lo_17"} : !hw.array<8xi3>, i3
    %70 = comb.icmp bin eq %11, %c0_i2 {sv.namehint = "_io_out_s_sub_T_1"} : i2
    %71 = comb.extract %io_in from 10 {sv.namehint = "io_out_s_lo_hi_hi_6"} : (i32) -> i2
    %72 = comb.icmp bin eq %71, %c1_i2 {sv.namehint = "_io_out_s_T_88"} : i2
    %73 = comb.icmp bin eq %71, %c-2_i2 {sv.namehint = "_io_out_s_T_90"} : i2
    %74 = comb.replicate %37 : (i1) -> i7
    %75 = comb.concat %74, %39, %c1_i2, %13, %c-3_i5 : i7, i5, i2, i3, i5
    %76 = comb.concat %false, %72, %c0_i4, %37, %39, %c1_i2, %13, %c-11_i5 : i1, i1, i4, i1, i5, i2, i3, i5
    %77 = comb.mux bin %73, %75, %76 : i22
    %78 = comb.concat %77, %13, %c19_i7 {sv.namehint = "_io_out_s_T_91"} : i22, i3, i7
    %79 = comb.icmp bin eq %71, %c-1_i2 {sv.namehint = "_io_out_s_T_92"} : i2
    %80 = comb.concat %false, %70, %c1_i7, %9, %c1_i2, %13, %69, %c1_i2, %13, %c3_i3, %37, %c3_i3 : i1, i1, i7, i3, i2, i3, i3, i2, i3, i3, i1, i3
    %81 = comb.mux bin %79, %80, %78 {sv.namehint = "io_out_s_12_bits"} : i32
    %82 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_12_rd"} : i2, i3
    %83 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_12_rs1"} : i2, i3
    %84 = comb.extract %io_in from 8 {sv.namehint = "io_out_s_hi_hi_hi_lo"} : (i32) -> i1
    %85 = comb.extract %io_in from 9 {sv.namehint = "io_out_s_hi_hi_lo_16"} : (i32) -> i2
    %86 = comb.extract %io_in from 7 {sv.namehint = "io_out_s_hi_lo_lo"} : (i32) -> i1
    %87 = comb.extract %io_in from 11 {sv.namehint = "io_out_s_lo_hi_lo_5"} : (i32) -> i1
    %88 = comb.extract %io_in from 3 {sv.namehint = "io_out_s_lo_lo_hi"} : (i32) -> i3
    %89 = comb.replicate %37 : (i1) -> i9
    %90 = comb.concat %37, %84, %85, %8, %86, %58, %87, %88, %89, %c111_i12 {sv.namehint = "io_out_s_13_bits"} : i1, i1, i2, i1, i1, i1, i1, i3, i9, i12
    %91 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_13_rs1"} : i2, i3
    %92 = comb.concat %c1_i2, %9 {sv.namehint = "io_out_s_13_rs2"} : i2, i3
    %93 = comb.replicate %37 : (i1) -> i4
    %94 = comb.concat %93, %11, %58, %c1_i7, %13, %c0_i3, %71, %57, %37, %c-29_i7 {sv.namehint = "io_out_s_14_bits"} : i4, i2, i1, i7, i3, i3, i2, i2, i1, i7
    %95 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_14_rd"} : i2, i3
    %96 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_14_rs1"} : i2, i3
    %97 = comb.replicate %37 : (i1) -> i4
    %98 = comb.concat %97, %11, %58, %c1_i7, %13, %c1_i3, %71, %57, %37, %c-29_i7 {sv.namehint = "io_out_s_15_bits"} : i4, i2, i1, i7, i3, i3, i2, i2, i1, i7
    %99 = comb.concat %c1_i2, %13 {sv.namehint = "io_out_s_15_rs1"} : i2, i3
    %100 = comb.icmp bin ne %40, %c0_i5 {sv.namehint = "_io_out_s_load_opc_T_1"} : i5
    %101 = comb.mux bin %100, %c3_i7, %c31_i7 {sv.namehint = "io_out_s_lo_lo_10"} : i7
    %102 = comb.concat %c0_i6, %37, %39, %40, %c1_i3, %40, %c19_i7 {sv.namehint = "io_out_s_16_bits"} : i6, i1, i5, i5, i3, i5, i7
    %103 = comb.concat %c0_i3, %9, %37, %11, %c19_i11, %40, %c7_i7 {sv.namehint = "io_out_s_17_bits"} : i3, i3, i1, i2, i11, i5, i7
    %104 = comb.extract %io_in from 2 {sv.namehint = "io_out_s_hi_hi_47"} : (i32) -> i2
    %105 = comb.extract %io_in from 4 {sv.namehint = "io_out_s_lo_hi_41"} : (i32) -> i3
    %106 = comb.concat %c0_i4, %104, %37, %105, %c18_i10, %40, %101 {sv.namehint = "io_out_s_18_bits"} : i4, i2, i1, i3, i10, i5, i7
    %107 = comb.concat %c0_i3, %9, %37, %11, %c19_i11, %40, %101 {sv.namehint = "io_out_s_19_bits"} : i3, i3, i1, i2, i11, i5, i7
    %108 = comb.icmp bin ne %40, %c0_i5 {sv.namehint = "_io_out_s_jr_reserved_T_1"} : i5
    %109 = comb.mux bin %108, %c103_i15, %c31_i15 : i15
    %110 = comb.icmp bin ne %39, %c0_i5 {sv.namehint = "_io_out_s_jr_mv_T_1"} : i5
    %111 = comb.concat %c0_i8, %40, %c51_i7 : i8, i5, i7
    %112 = comb.concat %40, %109 : i5, i15
    %113 = comb.mux bin %110, %111, %112 : i20
    %114 = comb.mux bin %110, %40, %c0_i5 {sv.namehint = "io_out_s_jr_mv_rd"} : i5
    %115 = comb.concat %39, %40, %c231_i15 {sv.namehint = "io_out_s_jalr"} : i5, i5, i15
    %116 = comb.extract %io_in from 3 : (i32) -> i4
    %117 = comb.concat %116, %true, %40, %c115_i15 {sv.namehint = "io_out_s_ebreak"} : i4, i1, i5, i15
    %118 = comb.icmp bin ne %40, %c0_i5 {sv.namehint = "_io_out_s_jalr_ebreak_T_1"} : i5
    %119 = comb.mux bin %118, %115, %117 {sv.namehint = "_io_out_s_jalr_ebreak_T_2"} : i25
    %120 = comb.icmp bin ne %39, %c0_i5 {sv.namehint = "_io_out_s_jalr_add_T_1"} : i5
    %121 = comb.concat %39, %40, %c0_i3, %40, %c51_i7 : i5, i5, i3, i5, i7
    %122 = comb.mux bin %120, %121, %119 : i25
    %123 = comb.mux bin %120, %40, %c1_i5 {sv.namehint = "io_out_s_jalr_add_rd"} : i5
    %124 = comb.concat %39, %113 : i5, i20
    %125 = comb.mux bin %37, %122, %124 : i25
    %126 = comb.concat %c0_i7, %125 {sv.namehint = "io_out_s_20_bits"} : i7, i25
    %127 = comb.mux bin %37, %123, %114 {sv.namehint = "io_out_s_20_rd"} : i5
    %128 = comb.xor %110, %true : i1
    %129 = comb.or %37, %128 : i1
    %130 = comb.mux bin %129, %40, %c0_i5 {sv.namehint = "io_out_s_20_rs1"} : i5
    %131 = comb.extract %io_in from 12 : (i32) -> i1
    %132 = comb.extract %io_in from 10 : (i32) -> i2
    %133 = comb.concat %c0_i3, %13, %131, %39, %c19_i8, %132, %c39_i10 {sv.namehint = "io_out_s_21_bits"} : i3, i3, i1, i5, i8, i2, i10
    %134 = comb.extract %io_in from 7 {sv.namehint = "io_out_s_hi_hi_54"} : (i32) -> i2
    %135 = comb.extract %io_in from 12 : (i32) -> i1
    %136 = comb.extract %io_in from 9 : (i32) -> i3
    %137 = comb.concat %c0_i4, %134, %135, %39, %c18_i8, %136, %c35_i9 {sv.namehint = "io_out_s_22_bits"} : i4, i2, i1, i5, i8, i3, i9
    %138 = comb.extract %io_in from 12 : (i32) -> i1
    %139 = comb.extract %io_in from 10 : (i32) -> i2
    %140 = comb.concat %c0_i3, %13, %138, %39, %c19_i8, %139, %c35_i10 {sv.namehint = "io_out_s_23_bits"} : i3, i3, i1, i5, i8, i2, i10
    %141 = comb.extract %io_in from 15 {sv.namehint = "io_out_s_31_rs1"} : (i32) -> i5
    %142 = comb.extract %io_in from 20 {sv.namehint = "io_out_s_31_rs2"} : (i32) -> i5
    %143 = comb.extract %io_in from 13 {sv.namehint = "io_out_lo"} : (i32) -> i3
    %144 = comb.concat %0, %143 {sv.namehint = "_io_out_T"} : i2, i3
    %145 = comb.icmp bin eq %144, %c1_i5 {sv.namehint = "_io_out_T_1"} : i5
    %146 = comb.mux bin %145, %15, %10 {sv.namehint = "_io_out_T_2_bits"} : i32
    %147 = comb.icmp bin eq %144, %c2_i5 {sv.namehint = "_io_out_T_3"} : i5
    %148 = comb.mux bin %147, %17, %146 {sv.namehint = "_io_out_T_4_bits"} : i32
    %149 = comb.icmp bin eq %144, %c3_i5 {sv.namehint = "_io_out_T_5"} : i5
    %150 = comb.mux bin %149, %19, %148 {sv.namehint = "_io_out_T_6_bits"} : i32
    %151 = comb.icmp bin eq %144, %c4_i5 {sv.namehint = "_io_out_T_7"} : i5
    %152 = comb.mux bin %151, %23, %150 {sv.namehint = "_io_out_T_8_bits"} : i32
    %153 = comb.icmp bin eq %144, %c5_i5 {sv.namehint = "_io_out_T_9"} : i5
    %154 = comb.mux bin %153, %27, %152 {sv.namehint = "_io_out_T_10_bits"} : i32
    %155 = comb.icmp bin eq %144, %c6_i5 {sv.namehint = "_io_out_T_11"} : i5
    %156 = comb.mux bin %155, %31, %154 {sv.namehint = "_io_out_T_12_bits"} : i32
    %157 = comb.icmp bin eq %144, %c7_i5 {sv.namehint = "_io_out_T_13"} : i5
    %158 = comb.mux bin %157, %36, %156 {sv.namehint = "_io_out_T_14_bits"} : i32
    %159 = comb.icmp bin eq %144, %c8_i5 {sv.namehint = "_io_out_T_15"} : i5
    %160 = comb.mux bin %159, %41, %158 {sv.namehint = "_io_out_T_16_bits"} : i32
    %161 = comb.icmp bin eq %144, %c9_i5 {sv.namehint = "_io_out_T_17"} : i5
    %162 = comb.mux bin %161, %44, %160 {sv.namehint = "_io_out_T_18_bits"} : i32
    %163 = comb.icmp bin eq %144, %c10_i5 {sv.namehint = "_io_out_T_19"} : i5
    %164 = comb.mux bin %163, %46, %162 {sv.namehint = "_io_out_T_20_bits"} : i32
    %165 = comb.icmp bin eq %144, %c11_i5 {sv.namehint = "_io_out_T_21"} : i5
    %166 = comb.mux bin %165, %64, %164 {sv.namehint = "_io_out_T_22_bits"} : i32
    %167 = comb.icmp bin eq %144, %c12_i5 {sv.namehint = "_io_out_T_23"} : i5
    %168 = comb.mux bin %167, %81, %166 {sv.namehint = "_io_out_T_24_bits"} : i32
    %169 = comb.icmp bin eq %144, %c13_i5 {sv.namehint = "_io_out_T_25"} : i5
    %170 = comb.mux bin %169, %90, %168 {sv.namehint = "_io_out_T_26_bits"} : i32
    %171 = comb.icmp bin eq %144, %c14_i5 {sv.namehint = "_io_out_T_27"} : i5
    %172 = comb.mux bin %171, %94, %170 {sv.namehint = "_io_out_T_28_bits"} : i32
    %173 = comb.icmp bin eq %144, %c15_i5 {sv.namehint = "_io_out_T_29"} : i5
    %174 = comb.mux bin %173, %98, %172 {sv.namehint = "_io_out_T_30_bits"} : i32
    %175 = comb.or bin %173, %171 : i1
    %176 = comb.mux bin %175, %c0_i5, %92 {sv.namehint = "_io_out_T_30_rs2"} : i5
    %177 = comb.icmp bin eq %144, %c-16_i5 {sv.namehint = "_io_out_T_31"} : i5
    %178 = comb.mux bin %177, %102, %174 {sv.namehint = "_io_out_T_32_bits"} : i32
    %179 = comb.icmp bin eq %144, %c-15_i5 {sv.namehint = "_io_out_T_33"} : i5
    %180 = comb.mux bin %179, %103, %178 {sv.namehint = "_io_out_T_34_bits"} : i32
    %181 = comb.icmp bin eq %144, %c-14_i5 {sv.namehint = "_io_out_T_35"} : i5
    %182 = comb.mux bin %181, %106, %180 {sv.namehint = "_io_out_T_36_bits"} : i32
    %183 = comb.icmp bin eq %144, %c-13_i5 {sv.namehint = "_io_out_T_37"} : i5
    %184 = comb.mux bin %183, %107, %182 {sv.namehint = "_io_out_T_38_bits"} : i32
    %185 = comb.icmp bin eq %144, %c-12_i5 {sv.namehint = "_io_out_T_39"} : i5
    %186 = comb.mux bin %185, %126, %184 {sv.namehint = "_io_out_T_40_bits"} : i32
    %187 = comb.icmp bin eq %144, %c-11_i5 {sv.namehint = "_io_out_T_41"} : i5
    %188 = comb.mux bin %187, %133, %186 {sv.namehint = "_io_out_T_42_bits"} : i32
    %189 = comb.icmp bin eq %144, %c-10_i5 {sv.namehint = "_io_out_T_43"} : i5
    %190 = comb.mux bin %189, %137, %188 {sv.namehint = "_io_out_T_44_bits"} : i32
    %191 = comb.icmp bin eq %144, %c-9_i5 {sv.namehint = "_io_out_T_45"} : i5
    %192 = comb.mux bin %191, %140, %190 {sv.namehint = "_io_out_T_46_bits"} : i32
    %193 = comb.or %191, %189, %187, %185, %183, %181, %179, %177 : i1
    %194 = comb.mux bin %193, %39, %176 {sv.namehint = "_io_out_T_46_rs2"} : i5
    %195 = comb.icmp bin eq %144, %c-8_i5 {sv.namehint = "_io_out_T_47"} : i5
    %196 = comb.icmp bin eq %144, %c-7_i5 {sv.namehint = "_io_out_T_49"} : i5
    %197 = comb.icmp bin eq %144, %c-6_i5 {sv.namehint = "_io_out_T_51"} : i5
    %198 = comb.icmp bin eq %144, %c-5_i5 {sv.namehint = "_io_out_T_53"} : i5
    %199 = comb.icmp bin eq %144, %c-4_i5 {sv.namehint = "_io_out_T_55"} : i5
    %200 = comb.icmp bin eq %144, %c-3_i5 {sv.namehint = "_io_out_T_57"} : i5
    %201 = comb.icmp bin eq %144, %c-2_i5 {sv.namehint = "_io_out_T_59"} : i5
    %202 = comb.icmp bin eq %144, %c-1_i5 {sv.namehint = "_io_out_T_61"} : i5
    %203 = comb.or bin %202, %201, %200, %199, %198, %197, %196, %195 : i1
    %204 = comb.mux bin %203, %io_in, %192 {sv.namehint = "io_out_bits"} : i32
    %205 = hw.array_create %40, %40, %40, %40, %40, %40, %40, %40, %40, %40, %40, %127, %40, %40, %40, %40, %c0_i5, %95, %c0_i5, %82, %40, %40, %40, %40, %34, %34, %34, %34, %34, %34, %34, %34 : i5
    %206 = hw.array_get %205[%144] {sv.namehint = "io_out_rd"} : !hw.array<32xi5>, i5
    %207 = hw.array_create %141, %141, %141, %141, %141, %141, %141, %141, %c2_i5, %c2_i5, %c2_i5, %130, %c2_i5, %c2_i5, %c2_i5, %40, %99, %96, %91, %83, %40, %c0_i5, %40, %40, %35, %30, %26, %22, %18, %16, %14, %c2_i5 : i5
    %208 = hw.array_get %207[%144] {sv.namehint = "io_out_rs1"} : !hw.array<32xi5>, i5
    %209 = comb.or %202, %201, %200, %199, %198, %197, %196, %195 : i1
    %210 = comb.mux bin %209, %142, %194 {sv.namehint = "io_out_rs2"} : i5
    hw.output %204, %206, %208, %210, %1 : i32, i5, i5, i5, i1
  }
  hw.module private @IBuf(in %clock : !seq.clock, in %reset : i1, out io_imem_ready : i1, in %io_imem_valid : i1, in %io_imem_bits_pc : i34, in %io_imem_bits_data : i32, in %io_imem_bits_xcpt_pf_inst : i1, in %io_imem_bits_xcpt_ae_inst : i1, in %io_imem_bits_replay : i1, in %io_kill : i1, out io_pc : i34, in %io_inst_0_ready : i1, out io_inst_0_valid : i1, out io_inst_0_bits_xcpt0_pf_inst : i1, out io_inst_0_bits_xcpt0_ae_inst : i1, out io_inst_0_bits_xcpt1_pf_inst : i1, out io_inst_0_bits_xcpt1_ae_inst : i1, out io_inst_0_bits_replay : i1, out io_inst_0_bits_rvc : i1, out io_inst_0_bits_inst_bits : i32, out io_inst_0_bits_inst_rd : i5, out io_inst_0_bits_inst_rs1 : i5, out io_inst_0_bits_inst_rs2 : i5, out io_inst_0_bits_raw : i32) {
    %c0_i31 = hw.constant 0 : i31
    %c1_i4 = hw.constant 1 : i4
    %c4294967295_i63 = hw.constant 4294967295 : i63
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c1_i2 = hw.constant 1 : i2
    %c-1_i32 = hw.constant -1 : i32
    %c-4_i34 = hw.constant -4 : i34
    %c3_i34 = hw.constant 3 : i34
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %c0_i4 = hw.constant 0 : i4
    %c0_i58 = hw.constant 0 : i58
    %c0_i16 = hw.constant 0 : i16
    %c0_i63 = hw.constant 0 : i63
    %c0_i185 = hw.constant 0 : i185
    %c-1_i2 = hw.constant -1 : i2
    %0 = seq.from_clock %clock
    %nBufValid = seq.firreg %51 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "_io_pc_T"} : i1
    %buf_pc = seq.firreg %49 clock %clock {firrtl.random_init_start = 50 : ui64} : i34
    %buf_data = seq.firreg %43 clock %clock {firrtl.random_init_start = 84 : ui64} : i32
    %buf_xcpt_pf_inst = seq.firreg %33 clock %clock {firrtl.random_init_start = 118 : ui64} : i1
    %buf_xcpt_ae_inst = seq.firreg %34 clock %clock {firrtl.random_init_start = 119 : ui64} : i1
    %buf_replay = seq.firreg %35 clock %clock {firrtl.random_init_start = 120 : ui64} : i1
    %1 = comb.extract %io_imem_bits_pc from 1 {sv.namehint = "pcWordBits"} : (i34) -> i1
    %2 = comb.concat %false, %1 : i1, i1
    %3 = comb.sub %c-2_i2, %2 {sv.namehint = "_nIC_T_2"} : i2
    %4 = comb.concat %false, %nBufValid : i1, i1
    %5 = comb.sub %105, %4 {sv.namehint = "_nICReady_T"} : i2
    %6 = comb.mux bin %io_imem_valid, %3, %c0_i2 {sv.namehint = "_nValid_T"} : i2
    %7 = comb.concat %false, %nBufValid : i1, i1
    %8 = comb.add %6, %7 {sv.namehint = "_nValid_T_1"} : i2
    %9 = comb.concat %false, %nBufValid : i1, i1
    %10 = comb.icmp bin uge %105, %9 {sv.namehint = "_nBufValid_T"} : i2
    %11 = comb.icmp bin uge %5, %3 {sv.namehint = "_io_imem_ready_T_2"} : i2
    %12 = comb.sub %3, %5 {sv.namehint = "_nBufValid_T_6"} : i2
    %13 = comb.extract %12 from 1 : (i2) -> i1
    %14 = comb.xor bin %13, %true {sv.namehint = "_io_imem_ready_T_5"} : i1
    %15 = comb.or bin %11, %14 {sv.namehint = "_io_imem_ready_T_6"} : i1
    %16 = comb.and bin %io_inst_0_ready, %10, %15 {sv.namehint = "io_imem_ready"} : i1
    %17 = comb.xor bin %nBufValid, %true {sv.namehint = "_nBufValid_T_1"} : i1
    %18 = comb.or bin %10, %17 {sv.namehint = "_nBufValid_T_2"} : i1
    %19 = comb.extract %105 from 0 : (i2) -> i1
    %20 = comb.sub %nBufValid, %19 {sv.namehint = "_nBufValid_T_3"} : i1
    %21 = comb.xor %18, %true : i1
    %22 = comb.and %21, %20 {sv.namehint = "_nBufValid_T_5"} : i1
    %23 = comb.icmp bin ult %5, %3 : i2
    %24 = comb.extract %12 from 1 : (i2) -> i1
    %25 = comb.xor bin %24, %true : i1
    %26 = comb.and bin %io_imem_valid, %10, %23, %25 : i1
    %27 = comb.concat %false, %1 : i1, i1
    %28 = comb.add %27, %5 {sv.namehint = "_shamt_T"} : i2
    %29 = comb.extract %12 from 0 : (i2) -> i1
    %30 = comb.mux bin %26, %29, %22 : i1
    %31 = comb.mux bin %io_inst_0_ready, %30, %nBufValid : i1
    %32 = comb.and bin %io_inst_0_ready, %26 : i1
    %33 = comb.mux bin %32, %io_imem_bits_xcpt_pf_inst, %buf_xcpt_pf_inst : i1
    %34 = comb.mux bin %32, %io_imem_bits_xcpt_ae_inst, %buf_xcpt_ae_inst : i1
    %35 = comb.mux bin %32, %io_imem_bits_replay, %buf_replay : i1
    %36 = comb.extract %io_imem_bits_data from 16 {sv.namehint = "buf_data_data_hi"} : (i32) -> i16
    %37 = comb.replicate %36 {sv.namehint = "buf_data_data_hi_1"} : (i16) -> i32
    %38 = comb.concat %37, %io_imem_bits_data {sv.namehint = "buf_data_data"} : i32, i32
    %39 = comb.concat %c0_i58, %28, %c0_i4 : i58, i2, i4
    %40 = comb.shru bin %38, %39 {sv.namehint = "_buf_data_T_1"} : i64
    %41 = comb.extract %40 from 0 {sv.namehint = "_buf_data_T_2"} : (i64) -> i16
    %42 = comb.concat %c0_i16, %41 : i16, i16
    %43 = comb.mux bin %32, %42, %buf_data : i32
    %44 = comb.and bin %io_imem_bits_pc, %c-4_i34 {sv.namehint = "_buf_pc_T_1"} : i34
    %45 = comb.concat %c0_i31, %5, %false : i31, i2, i1
    %46 = comb.add %io_imem_bits_pc, %45 {sv.namehint = "_buf_pc_T_3"} : i34
    %47 = comb.and bin %46, %c3_i34 {sv.namehint = "_buf_pc_T_5"} : i34
    %48 = comb.or bin %44, %47 {sv.namehint = "_buf_pc_T_6"} : i34
    %49 = comb.mux bin %32, %48, %buf_pc : i34
    %50 = comb.xor %io_kill, %true : i1
    %51 = comb.and %50, %31 : i1
    %52 = comb.concat %false, %nBufValid : i1, i1
    %53 = comb.add %52, %c-2_i2 {sv.namehint = "_icShiftAmt_T"} : i2
    %54 = comb.concat %false, %1 : i1, i1
    %55 = comb.sub %53, %54 {sv.namehint = "_icShiftAmt_T_2"} : i2
    %56 = comb.extract %io_imem_bits_data from 0 {sv.namehint = "icData_hi"} : (i32) -> i16
    %57 = comb.replicate %56 {sv.namehint = "icData_lo"} : (i16) -> i32
    %58 = comb.extract %io_imem_bits_data from 16 {sv.namehint = "icData_data_hi"} : (i32) -> i16
    %59 = comb.replicate %58 {sv.namehint = "icData_data_hi_1"} : (i16) -> i32
    %60 = comb.replicate %59 {sv.namehint = "icData_data_hi_2"} : (i32) -> i64
    %61 = comb.concat %c0_i63, %60, %io_imem_bits_data, %57 : i63, i64, i32, i32
    %62 = comb.concat %c0_i185, %55, %c0_i4 : i185, i2, i4
    %63 = comb.shl bin %61, %62 {sv.namehint = "_icData_T_1"} : i191
    %64 = comb.extract %63 from 64 {sv.namehint = "icData"} : (i191) -> i32
    %65 = comb.concat %c0_i58, %nBufValid, %c0_i4 : i58, i1, i4
    %66 = comb.shl bin %c4294967295_i63, %65 {sv.namehint = "_icMask_T_2"} : i63
    %67 = comb.extract %66 from 0 {sv.namehint = "icMask"} : (i63) -> i32
    %68 = comb.and bin %64, %67 {sv.namehint = "_inst_T"} : i32
    %69 = comb.xor bin %67, %c-1_i32 {sv.namehint = "_inst_T_1"} : i32
    %70 = comb.and bin %buf_data, %69 {sv.namehint = "_inst_T_2"} : i32
    %71 = comb.or bin %68, %70 {sv.namehint = "inst"} : i32
    %72 = comb.concat %c0_i2, %8 : i2, i2
    %73 = comb.shl bin %c1_i4, %72 {sv.namehint = "_valid_T"} : i4
    %74 = comb.extract %73 from 0 : (i4) -> i2
    %75 = comb.add %74, %c-1_i2 {sv.namehint = "_valid_T_1"} : i2
    %76 = comb.shl bin %c1_i2, %9 {sv.namehint = "_bufMask_T"} : i2
    %77 = comb.add %76, %c-1_i2 {sv.namehint = "_bufMask_T_1"} : i2
    %78 = comb.extract %77 from 0 {sv.namehint = "_xcpt_T"} : (i2) -> i1
    %79 = comb.mux bin %78, %buf_xcpt_pf_inst, %io_imem_bits_xcpt_pf_inst {sv.namehint = "xcpt_0_pf_inst"} : i1
    %80 = comb.mux bin %78, %buf_xcpt_ae_inst, %io_imem_bits_xcpt_ae_inst {sv.namehint = "xcpt_0_ae_inst"} : i1
    %81 = comb.extract %77 from 1 {sv.namehint = "_xcpt_T_1"} : (i2) -> i1
    %82 = comb.mux bin %81, %buf_xcpt_pf_inst, %io_imem_bits_xcpt_pf_inst {sv.namehint = "xcpt_1_pf_inst"} : i1
    %83 = comb.mux bin %81, %buf_xcpt_ae_inst, %io_imem_bits_xcpt_ae_inst {sv.namehint = "xcpt_1_ae_inst"} : i1
    %84 = comb.mux bin %buf_replay, %77, %c0_i2 {sv.namehint = "buf_replay"} : i2
    %85 = comb.xor bin %77, %c-1_i2 {sv.namehint = "_ic_replay_T"} : i2
    %86 = comb.and bin %75, %85 {sv.namehint = "_ic_replay_T_1"} : i2
    %87 = comb.mux bin %io_imem_bits_replay, %86, %c0_i2 {sv.namehint = "_ic_replay_T_2"} : i2
    %88 = comb.or bin %84, %87 {sv.namehint = "ic_replay"} : i2
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %106 = comb.and bin %STOP_COND_, %false : i1
        sv.if %106 {
          sv.fatal 1
        }
      }
    }
    %89 = comb.mux bin %nBufValid, %buf_pc, %io_imem_bits_pc {sv.namehint = "io_pc"} : i34
    %exp.io_out_bits, %exp.io_out_rd, %exp.io_out_rs1, %exp.io_out_rs2, %exp.io_rvc = hw.instance "exp" @RVCExpander(io_in: %71: i32) -> (io_out_bits: i32, io_out_rd: i5, io_out_rs1: i5, io_out_rs2: i5, io_rvc: i1) {sv.namehint = "exp.io_rvc"}
    %90 = comb.extract %88 from 0 {sv.namehint = "_replay_T_1"} : (i2) -> i1
    %91 = comb.xor bin %exp.io_rvc, %true {sv.namehint = "_replay_T_2"} : i1
    %92 = comb.extract %88 from 1 {sv.namehint = "_replay_T_6"} : (i2) -> i1
    %93 = comb.and bin %91, %92 {sv.namehint = "_replay_T_7"} : i1
    %94 = comb.or bin %90, %93 {sv.namehint = "replay"} : i1
    %95 = comb.extract %75 from 1 {sv.namehint = "_full_insn_T_3"} : (i2) -> i1
    %96 = comb.extract %84 from 0 {sv.namehint = "_full_insn_T_6"} : (i2) -> i1
    %97 = comb.or bin %exp.io_rvc, %95, %96 {sv.namehint = "full_insn"} : i1
    %98 = comb.extract %75 from 0 {sv.namehint = "_io_inst_0_valid_T_1"} : (i2) -> i1
    %99 = comb.and bin %98, %97 {sv.namehint = "io_inst_0_valid"} : i1
    %100 = comb.concat %82, %83 {sv.namehint = "_io_inst_0_bits_xcpt1_T_4"} : i1, i1
    %101 = comb.mux bin %exp.io_rvc, %c0_i2, %100 {sv.namehint = "_io_inst_0_bits_xcpt1_T_5"} : i2
    %102 = comb.extract %101 from 0 {sv.namehint = "_io_inst_0_bits_xcpt1_T_6"} : (i2) -> i1
    %103 = comb.extract %101 from 1 {sv.namehint = "_io_inst_0_bits_xcpt1_T_7"} : (i2) -> i1
    %104 = comb.mux bin %exp.io_rvc, %c1_i2, %c-2_i2 {sv.namehint = "_nReady_T_4"} : i2
    %105 = comb.mux bin %97, %104, %c0_i2 {sv.namehint = "nReady"} : i2
    hw.output %16, %89, %99, %79, %80, %103, %102, %94, %exp.io_rvc, %exp.io_out_bits, %exp.io_out_rd, %exp.io_out_rs1, %exp.io_out_rs2, %71 : i1, i34, i1, i1, i1, i1, i1, i1, i1, i32, i5, i5, i5, i32
  }
  hw.module private @CSRFile(in %clock : !seq.clock, in %reset : i1, in %io_ungated_clock : !seq.clock, in %io_interrupts_debug : i1, in %io_interrupts_mtip : i1, in %io_interrupts_msip : i1, in %io_interrupts_meip : i1, in %io_rw_addr : i12, in %io_rw_cmd : i3, out io_rw_rdata : i64, in %io_rw_wdata : i64, in %io_decode_0_csr : i12, out io_decode_0_read_illegal : i1, out io_decode_0_write_illegal : i1, out io_decode_0_write_flush : i1, out io_decode_0_system_illegal : i1, out io_csr_stall : i1, out io_eret : i1, out io_singleStep : i1, out io_status_debug : i1, out io_status_wfi : i1, out io_status_isa : i32, out io_status_dprv : i2, out io_evec : i34, in %io_exception : i1, in %io_retire : i1, in %io_cause : i64, in %io_pc : i34, in %io_tval : i34, out io_time : i64, out io_interrupt : i1, out io_interrupt_cause : i64, out io_bp_0_control_action : i1, out io_bp_0_control_tmatch : i2, out io_bp_0_control_x : i1, out io_bp_0_control_w : i1, out io_bp_0_control_r : i1, out io_bp_0_address : i33, out io_pmp_0_cfg_l : i1, out io_pmp_0_cfg_a : i2, out io_pmp_0_cfg_x : i1, out io_pmp_0_cfg_w : i1, out io_pmp_0_cfg_r : i1, out io_pmp_0_addr : i30, out io_pmp_0_mask : i32, out io_pmp_1_cfg_l : i1, out io_pmp_1_cfg_a : i2, out io_pmp_1_cfg_x : i1, out io_pmp_1_cfg_w : i1, out io_pmp_1_cfg_r : i1, out io_pmp_1_addr : i30, out io_pmp_1_mask : i32, out io_pmp_2_cfg_l : i1, out io_pmp_2_cfg_a : i2, out io_pmp_2_cfg_x : i1, out io_pmp_2_cfg_w : i1, out io_pmp_2_cfg_r : i1, out io_pmp_2_addr : i30, out io_pmp_2_mask : i32, out io_pmp_3_cfg_l : i1, out io_pmp_3_cfg_a : i2, out io_pmp_3_cfg_x : i1, out io_pmp_3_cfg_w : i1, out io_pmp_3_cfg_r : i1, out io_pmp_3_addr : i30, out io_pmp_3_mask : i32, out io_pmp_4_cfg_l : i1, out io_pmp_4_cfg_a : i2, out io_pmp_4_cfg_x : i1, out io_pmp_4_cfg_w : i1, out io_pmp_4_cfg_r : i1, out io_pmp_4_addr : i30, out io_pmp_4_mask : i32, out io_pmp_5_cfg_l : i1, out io_pmp_5_cfg_a : i2, out io_pmp_5_cfg_x : i1, out io_pmp_5_cfg_w : i1, out io_pmp_5_cfg_r : i1, out io_pmp_5_addr : i30, out io_pmp_5_mask : i32, out io_pmp_6_cfg_l : i1, out io_pmp_6_cfg_a : i2, out io_pmp_6_cfg_x : i1, out io_pmp_6_cfg_w : i1, out io_pmp_6_cfg_r : i1, out io_pmp_6_addr : i30, out io_pmp_6_mask : i32, out io_pmp_7_cfg_l : i1, out io_pmp_7_cfg_a : i2, out io_pmp_7_cfg_x : i1, out io_pmp_7_cfg_w : i1, out io_pmp_7_cfg_r : i1, out io_pmp_7_addr : i30, out io_pmp_7_mask : i32, out io_inhibit_cycle : i1, out io_customCSRs_0_value : i64) {
    %c1_i30 = hw.constant 1 : i30
    %c-1_i30 = hw.constant -1 : i30
    %c-1_i48 = hw.constant -1 : i48
    %c2_i3 = hw.constant 2 : i3
    %c0_i22 = hw.constant 0 : i22
    %c-128_i8 = hw.constant -128 : i8
    %c324_i12 = hw.constant 324 : i12
    %c319_i12 = hw.constant 319 : i12
    %c3_i3 = hw.constant 3 : i3
    %c16384_i16 = hw.constant 16384 : i16
    %c-1_i8 = hw.constant -1 : i8
    %c-1_i24 = hw.constant -1 : i24
    %c0_i51 = hw.constant 0 : i51
    %c-9223372036854775808_i64 = hw.constant -9223372036854775808 : i64
    %c0_i60 = hw.constant 0 : i60
    %c0_i4 = hw.constant 0 : i4
    %c1_i58 = hw.constant 1 : i58
    %c14_i8 = hw.constant 14 : i8
    %c959_i12 = hw.constant 959 : i12
    %c958_i12 = hw.constant 958 : i12
    %c957_i12 = hw.constant 957 : i12
    %c956_i12 = hw.constant 956 : i12
    %c955_i12 = hw.constant 955 : i12
    %c954_i12 = hw.constant 954 : i12
    %c953_i12 = hw.constant 953 : i12
    %c952_i12 = hw.constant 952 : i12
    %c930_i12 = hw.constant 930 : i12
    %c831_i12 = hw.constant 831 : i12
    %c830_i12 = hw.constant 830 : i12
    %c829_i12 = hw.constant 829 : i12
    %c828_i12 = hw.constant 828 : i12
    %c827_i12 = hw.constant 827 : i12
    %c826_i12 = hw.constant 826 : i12
    %c825_i12 = hw.constant 825 : i12
    %c824_i12 = hw.constant 824 : i12
    %c823_i12 = hw.constant 823 : i12
    %c822_i12 = hw.constant 822 : i12
    %c821_i12 = hw.constant 821 : i12
    %c820_i12 = hw.constant 820 : i12
    %c819_i12 = hw.constant 819 : i12
    %c818_i12 = hw.constant 818 : i12
    %c817_i12 = hw.constant 817 : i12
    %c816_i12 = hw.constant 816 : i12
    %c815_i12 = hw.constant 815 : i12
    %c814_i12 = hw.constant 814 : i12
    %c813_i12 = hw.constant 813 : i12
    %c812_i12 = hw.constant 812 : i12
    %c811_i12 = hw.constant 811 : i12
    %c810_i12 = hw.constant 810 : i12
    %c809_i12 = hw.constant 809 : i12
    %c808_i12 = hw.constant 808 : i12
    %c807_i12 = hw.constant 807 : i12
    %c806_i12 = hw.constant 806 : i12
    %c805_i12 = hw.constant 805 : i12
    %c804_i12 = hw.constant 804 : i12
    %c803_i12 = hw.constant 803 : i12
    %c1952_i12 = hw.constant 1952 : i12
    %c1985_i12 = hw.constant 1985 : i12
    %c951_i12 = hw.constant 951 : i12
    %c950_i12 = hw.constant 950 : i12
    %c949_i12 = hw.constant 949 : i12
    %c948_i12 = hw.constant 948 : i12
    %c947_i12 = hw.constant 947 : i12
    %c946_i12 = hw.constant 946 : i12
    %c945_i12 = hw.constant 945 : i12
    %c944_i12 = hw.constant 944 : i12
    %c928_i12 = hw.constant 928 : i12
    %c800_i12 = hw.constant 800 : i12
    %c1970_i12 = hw.constant 1970 : i12
    %c1969_i12 = hw.constant 1969 : i12
    %c1968_i12 = hw.constant 1968 : i12
    %c834_i12 = hw.constant 834 : i12
    %c835_i12 = hw.constant 835 : i12
    %c833_i12 = hw.constant 833 : i12
    %c832_i12 = hw.constant 832 : i12
    %c772_i12 = hw.constant 772 : i12
    %c836_i12 = hw.constant 836 : i12
    %c773_i12 = hw.constant 773 : i12
    %c768_i12 = hw.constant 768 : i12
    %c769_i12 = hw.constant 769 : i12
    %c1955_i12 = hw.constant 1955 : i12
    %c1954_i12 = hw.constant 1954 : i12
    %c1953_i12 = hw.constant 1953 : i12
    %c-1_i2 = hw.constant -1 : i2
    %false = hw.constant false {sv.namehint = "mip_usip"}
    %c0_i64 = hw.constant 0 : i64
    %c0_i2 = hw.constant 0 : i2
    %c11_i64 = hw.constant 11 : i64
    %c0_i3 = hw.constant 0 : i3
    %c0_i6 = hw.constant 0 : i6
    %true = hw.constant true
    %c-521_i64 = hw.constant -521 : i64
    %c-4102_i64 = hw.constant -4102 : i64
    %c3_i64 = hw.constant 3 : i64
    %c4398046511104_i46 = hw.constant 4398046511104 : i46
    %c2_i8 = hw.constant 2 : i8
    %c3_i4 = hw.constant 3 : i4
    %c7_i4 = hw.constant 7 : i4
    %c1_i4 = hw.constant 1 : i4
    %c5_i4 = hw.constant 5 : i4
    %c2184_i16 = hw.constant 2184 : i16
    %c2_i4 = hw.constant 2 : i4
    %c0_i16 = hw.constant 0 : i16
    %c0_i30 = hw.constant 0 : i30
    %c0_i32 = hw.constant 0 : i32
    %c1_i2 = hw.constant 1 : i2
    %c-9223372036854775793_i64 = hw.constant -9223372036854775793 : i64
    %c4101_i64 = hw.constant 4101 : i64
    %c-2_i3 = hw.constant -2 : i3
    %c-2048_i12 = hw.constant -2048 : i12
    %c-237_i12 = hw.constant -237 : i12
    %c-239_i12 = hw.constant -239 : i12
    %c-238_i12 = hw.constant -238 : i12
    %c-1249_i12 = hw.constant -1249 : i12
    %c-1250_i12 = hw.constant -1250 : i12
    %c-1251_i12 = hw.constant -1251 : i12
    %c-1252_i12 = hw.constant -1252 : i12
    %c-1253_i12 = hw.constant -1253 : i12
    %c-1254_i12 = hw.constant -1254 : i12
    %c-1255_i12 = hw.constant -1255 : i12
    %c-1256_i12 = hw.constant -1256 : i12
    %c-1257_i12 = hw.constant -1257 : i12
    %c-1258_i12 = hw.constant -1258 : i12
    %c-1259_i12 = hw.constant -1259 : i12
    %c-1260_i12 = hw.constant -1260 : i12
    %c-1261_i12 = hw.constant -1261 : i12
    %c-1262_i12 = hw.constant -1262 : i12
    %c-1263_i12 = hw.constant -1263 : i12
    %c-1264_i12 = hw.constant -1264 : i12
    %c-1265_i12 = hw.constant -1265 : i12
    %c-1266_i12 = hw.constant -1266 : i12
    %c-1267_i12 = hw.constant -1267 : i12
    %c-1268_i12 = hw.constant -1268 : i12
    %c-1269_i12 = hw.constant -1269 : i12
    %c-1270_i12 = hw.constant -1270 : i12
    %c-1271_i12 = hw.constant -1271 : i12
    %c-1272_i12 = hw.constant -1272 : i12
    %c-1273_i12 = hw.constant -1273 : i12
    %c-1274_i12 = hw.constant -1274 : i12
    %c-1275_i12 = hw.constant -1275 : i12
    %c-1276_i12 = hw.constant -1276 : i12
    %c-1277_i12 = hw.constant -1277 : i12
    %c-1278_i12 = hw.constant -1278 : i12
    %c-1280_i12 = hw.constant -1280 : i12
    %c-236_i12 = hw.constant -236 : i12
    %c538447876_i64 = hw.constant 538447876 : i64
    %c520_i64 = hw.constant 520 : i64
    %c-2_i2 = hw.constant -2 : i2
    %c-2_i8 = hw.constant -2 : i8
    %c-9223372036846382843_i64 = hw.constant -9223372036846382843 : i64
    %c-1_i4 = hw.constant -1 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c-3_i4 = hw.constant -3 : i4
    %c-4_i4 = hw.constant -4 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-7_i4 = hw.constant -7 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c-8_i4 = hw.constant -8 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c0_i58 = hw.constant 0 : i58
    %c0_i48 = hw.constant 0 : i48
    %c-1_i34 = hw.constant -1 : i34
    %c-1_i64 = hw.constant -1 : i64
    %c-1_i3 = hw.constant -1 : i3
    %0 = seq.from_clock %clock
    %reg_mstatus_mpp = seq.firreg %467 clock %clock reset sync %reset, %c-1_i2 {firrtl.random_init_start = 90 : ui64, sv.namehint = "io_status_mpp"} : i2
    %reg_mstatus_mpie = seq.firreg %537 clock %clock reset sync %reset, %false {firrtl.random_init_start = 95 : ui64, sv.namehint = "io_status_mpie"} : i1
    %reg_mstatus_mie = seq.firreg %536 clock %clock reset sync %reset, %false {firrtl.random_init_start = 99 : ui64, sv.namehint = "io_status_mie"} : i1
    %reg_dcsr_ebreakm = seq.firreg %607 clock %clock reset sync %reset, %false {firrtl.random_init_start = 119 : ui64, sv.namehint = "_causeIsDebugBreak_T_5"} : i1
    %reg_dcsr_cause = seq.firreg %429 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 126 : ui64} : i3
    %reg_dcsr_step = seq.firreg %606 clock %clock reset sync %reset, %false {firrtl.random_init_start = 132 : ui64} : i1
    %reg_debug = seq.firreg %452 clock %clock reset sync %reset, %false {firrtl.random_init_start = 135 : ui64, sv.namehint = "reg_debug"} : i1
    %reg_dpc = seq.firreg %611 clock %clock {firrtl.random_init_start = 136 : ui64} : i34
    %reg_dscratch = seq.firreg %613 clock %clock {firrtl.random_init_start = 170 : ui64} : i64
    %reg_singleStepped = seq.firreg %415 clock %clock {firrtl.random_init_start = 234 : ui64} : i1
    %reg_bp_0_control_dmode = seq.firreg %642 clock %clock reset sync %reset, %false {firrtl.random_init_start = 240 : ui64} : i1
    %reg_bp_0_control_action = seq.firreg %644 clock %clock reset sync %reset, %false {firrtl.random_init_start = 287 : ui64, sv.namehint = "io_bp_0_control_action"} : i1
    %reg_bp_0_control_tmatch = seq.firreg %626 clock %clock {firrtl.random_init_start = 291 : ui64, sv.namehint = "io_bp_0_control_tmatch"} : i2
    %reg_bp_0_control_x = seq.firreg %627 clock %clock reset sync %reset, %false {firrtl.random_init_start = 297 : ui64, sv.namehint = "io_bp_0_control_x"} : i1
    %reg_bp_0_control_w = seq.firreg %628 clock %clock reset sync %reset, %false {firrtl.random_init_start = 298 : ui64, sv.namehint = "io_bp_0_control_w"} : i1
    %reg_bp_0_control_r = seq.firreg %629 clock %clock reset sync %reset, %false {firrtl.random_init_start = 299 : ui64, sv.namehint = "io_bp_0_control_r"} : i1
    %reg_bp_0_address = seq.firreg %620 clock %clock {firrtl.random_init_start = 300 : ui64, sv.namehint = "io_bp_0_address"} : i33
    %reg_pmp_0_cfg_l = seq.firreg %655 clock %clock reset sync %reset, %false {firrtl.random_init_start = 532 : ui64, sv.namehint = "pmp_cfg_l"} : i1
    %reg_pmp_0_cfg_a = seq.firreg %656 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 535 : ui64, sv.namehint = "pmp_cfg_a"} : i2
    %reg_pmp_0_cfg_x = seq.firreg %657 clock %clock {firrtl.random_init_start = 537 : ui64, sv.namehint = "pmp_cfg_x"} : i1
    %reg_pmp_0_cfg_w = seq.firreg %660 clock %clock {firrtl.random_init_start = 538 : ui64, sv.namehint = "pmp_cfg_w"} : i1
    %reg_pmp_0_cfg_r = seq.firreg %658 clock %clock {firrtl.random_init_start = 539 : ui64, sv.namehint = "pmp_cfg_r"} : i1
    %reg_pmp_0_addr = seq.firreg %671 clock %clock {firrtl.random_init_start = 540 : ui64, sv.namehint = "pmp_addr"} : i30
    %reg_pmp_1_cfg_l = seq.firreg %682 clock %clock reset sync %reset, %false {firrtl.random_init_start = 570 : ui64, sv.namehint = "pmp_1_cfg_l"} : i1
    %reg_pmp_1_cfg_a = seq.firreg %683 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 573 : ui64, sv.namehint = "pmp_1_cfg_a"} : i2
    %reg_pmp_1_cfg_x = seq.firreg %684 clock %clock {firrtl.random_init_start = 575 : ui64, sv.namehint = "pmp_1_cfg_x"} : i1
    %reg_pmp_1_cfg_w = seq.firreg %687 clock %clock {firrtl.random_init_start = 576 : ui64, sv.namehint = "pmp_1_cfg_w"} : i1
    %reg_pmp_1_cfg_r = seq.firreg %685 clock %clock {firrtl.random_init_start = 577 : ui64, sv.namehint = "pmp_1_cfg_r"} : i1
    %reg_pmp_1_addr = seq.firreg %695 clock %clock {firrtl.random_init_start = 578 : ui64, sv.namehint = "pmp_1_addr"} : i30
    %reg_pmp_2_cfg_l = seq.firreg %706 clock %clock reset sync %reset, %false {firrtl.random_init_start = 608 : ui64, sv.namehint = "pmp_2_cfg_l"} : i1
    %reg_pmp_2_cfg_a = seq.firreg %707 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 611 : ui64, sv.namehint = "pmp_2_cfg_a"} : i2
    %reg_pmp_2_cfg_x = seq.firreg %708 clock %clock {firrtl.random_init_start = 613 : ui64, sv.namehint = "pmp_2_cfg_x"} : i1
    %reg_pmp_2_cfg_w = seq.firreg %711 clock %clock {firrtl.random_init_start = 614 : ui64, sv.namehint = "pmp_2_cfg_w"} : i1
    %reg_pmp_2_cfg_r = seq.firreg %709 clock %clock {firrtl.random_init_start = 615 : ui64, sv.namehint = "pmp_2_cfg_r"} : i1
    %reg_pmp_2_addr = seq.firreg %719 clock %clock {firrtl.random_init_start = 616 : ui64, sv.namehint = "pmp_2_addr"} : i30
    %reg_pmp_3_cfg_l = seq.firreg %730 clock %clock reset sync %reset, %false {firrtl.random_init_start = 646 : ui64, sv.namehint = "pmp_3_cfg_l"} : i1
    %reg_pmp_3_cfg_a = seq.firreg %731 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 649 : ui64, sv.namehint = "pmp_3_cfg_a"} : i2
    %reg_pmp_3_cfg_x = seq.firreg %732 clock %clock {firrtl.random_init_start = 651 : ui64, sv.namehint = "pmp_3_cfg_x"} : i1
    %reg_pmp_3_cfg_w = seq.firreg %735 clock %clock {firrtl.random_init_start = 652 : ui64, sv.namehint = "pmp_3_cfg_w"} : i1
    %reg_pmp_3_cfg_r = seq.firreg %733 clock %clock {firrtl.random_init_start = 653 : ui64, sv.namehint = "pmp_3_cfg_r"} : i1
    %reg_pmp_3_addr = seq.firreg %743 clock %clock {firrtl.random_init_start = 654 : ui64, sv.namehint = "pmp_3_addr"} : i30
    %reg_pmp_4_cfg_l = seq.firreg %754 clock %clock reset sync %reset, %false {firrtl.random_init_start = 684 : ui64, sv.namehint = "pmp_4_cfg_l"} : i1
    %reg_pmp_4_cfg_a = seq.firreg %755 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 687 : ui64, sv.namehint = "pmp_4_cfg_a"} : i2
    %reg_pmp_4_cfg_x = seq.firreg %756 clock %clock {firrtl.random_init_start = 689 : ui64, sv.namehint = "pmp_4_cfg_x"} : i1
    %reg_pmp_4_cfg_w = seq.firreg %759 clock %clock {firrtl.random_init_start = 690 : ui64, sv.namehint = "pmp_4_cfg_w"} : i1
    %reg_pmp_4_cfg_r = seq.firreg %757 clock %clock {firrtl.random_init_start = 691 : ui64, sv.namehint = "pmp_4_cfg_r"} : i1
    %reg_pmp_4_addr = seq.firreg %767 clock %clock {firrtl.random_init_start = 692 : ui64, sv.namehint = "pmp_4_addr"} : i30
    %reg_pmp_5_cfg_l = seq.firreg %778 clock %clock reset sync %reset, %false {firrtl.random_init_start = 722 : ui64, sv.namehint = "pmp_5_cfg_l"} : i1
    %reg_pmp_5_cfg_a = seq.firreg %779 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 725 : ui64, sv.namehint = "pmp_5_cfg_a"} : i2
    %reg_pmp_5_cfg_x = seq.firreg %780 clock %clock {firrtl.random_init_start = 727 : ui64, sv.namehint = "pmp_5_cfg_x"} : i1
    %reg_pmp_5_cfg_w = seq.firreg %783 clock %clock {firrtl.random_init_start = 728 : ui64, sv.namehint = "pmp_5_cfg_w"} : i1
    %reg_pmp_5_cfg_r = seq.firreg %781 clock %clock {firrtl.random_init_start = 729 : ui64, sv.namehint = "pmp_5_cfg_r"} : i1
    %reg_pmp_5_addr = seq.firreg %791 clock %clock {firrtl.random_init_start = 730 : ui64, sv.namehint = "pmp_5_addr"} : i30
    %reg_pmp_6_cfg_l = seq.firreg %802 clock %clock reset sync %reset, %false {firrtl.random_init_start = 760 : ui64, sv.namehint = "pmp_6_cfg_l"} : i1
    %reg_pmp_6_cfg_a = seq.firreg %803 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 763 : ui64, sv.namehint = "pmp_6_cfg_a"} : i2
    %reg_pmp_6_cfg_x = seq.firreg %804 clock %clock {firrtl.random_init_start = 765 : ui64, sv.namehint = "pmp_6_cfg_x"} : i1
    %reg_pmp_6_cfg_w = seq.firreg %807 clock %clock {firrtl.random_init_start = 766 : ui64, sv.namehint = "pmp_6_cfg_w"} : i1
    %reg_pmp_6_cfg_r = seq.firreg %805 clock %clock {firrtl.random_init_start = 767 : ui64, sv.namehint = "pmp_6_cfg_r"} : i1
    %reg_pmp_6_addr = seq.firreg %815 clock %clock {firrtl.random_init_start = 768 : ui64, sv.namehint = "pmp_6_addr"} : i30
    %reg_pmp_7_cfg_l = seq.firreg %826 clock %clock reset sync %reset, %false {firrtl.random_init_start = 798 : ui64, sv.namehint = "pmp_7_cfg_l"} : i1
    %reg_pmp_7_cfg_a = seq.firreg %827 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 801 : ui64, sv.namehint = "pmp_7_cfg_a"} : i2
    %reg_pmp_7_cfg_x = seq.firreg %828 clock %clock {firrtl.random_init_start = 803 : ui64, sv.namehint = "pmp_7_cfg_x"} : i1
    %reg_pmp_7_cfg_w = seq.firreg %831 clock %clock {firrtl.random_init_start = 804 : ui64, sv.namehint = "pmp_7_cfg_w"} : i1
    %reg_pmp_7_cfg_r = seq.firreg %829 clock %clock {firrtl.random_init_start = 805 : ui64, sv.namehint = "pmp_7_cfg_r"} : i1
    %reg_pmp_7_addr = seq.firreg %835 clock %clock {firrtl.random_init_start = 806 : ui64, sv.namehint = "pmp_7_addr"} : i30
    %reg_mie = seq.firreg %565 clock %clock {firrtl.random_init_start = 836 : ui64} : i64
    %reg_mepc = seq.firreg %569 clock %clock {firrtl.random_init_start = 1044 : ui64} : i34
    %reg_mcause = seq.firreg %579 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 1078 : ui64} : i64
    %reg_mtval = seq.firreg %584 clock %clock {firrtl.random_init_start = 1142 : ui64} : i34
    %reg_mscratch = seq.firreg %571 clock %clock {firrtl.random_init_start = 1176 : ui64} : i64
    %reg_mtvec = seq.firreg %576 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 1240 : ui64} : i32
    %reg_wfi = seq.firreg %413 clock %io_ungated_clock reset sync %reset, %false {firrtl.random_init_start = 1896 : ui64, sv.namehint = "reg_wfi"} : i1
    %reg_mcountinhibit = seq.firreg %589 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 1905 : ui64} : i3
    %1 = comb.extract %reg_mcountinhibit from 0 {sv.namehint = "x75"} : (i3) -> i1
    %2 = comb.extract %reg_mcountinhibit from 2 {sv.namehint = "x67"} : (i3) -> i1
    %value_lo = seq.firreg %600 clock %clock reset sync %reset, %c0_i6 {firrtl.random_init_start = 1908 : ui64} : i6
    %3 = comb.concat %false, %value_lo : i1, i6
    %4 = comb.concat %c0_i6, %io_retire : i6, i1
    %5 = comb.add bin %3, %4 {sv.namehint = "nextSmall"} : i7
    %6 = comb.xor bin %2, %true {sv.namehint = "_large_T_1"} : i1
    %7 = comb.extract %5 from 0 : (i7) -> i6
    %8 = comb.mux bin %2, %value_lo, %7 : i6
    %value_hi = seq.firreg %602 clock %clock reset sync %reset, %c0_i58 {firrtl.random_init_start = 1914 : ui64} : i58
    %9 = comb.extract %5 from 6 {sv.namehint = "_large_T"} : (i7) -> i1
    %10 = comb.and bin %9, %6 {sv.namehint = "_large_T_2"} : i1
    %11 = comb.add %value_hi, %c1_i58 {sv.namehint = "_large_r_T"} : i58
    %12 = comb.mux bin %10, %11, %value_hi : i58
    %13 = comb.concat %value_hi, %value_lo {sv.namehint = "value"} : i58, i6
    %14 = comb.xor bin %475, %true {sv.namehint = "x74"} : i1
    %value_lo_1 = seq.firreg %594 clock %io_ungated_clock reset sync %reset, %c0_i6 {firrtl.random_init_start = 1972 : ui64} : i6
    %15 = comb.concat %false, %value_lo_1 : i1, i6
    %16 = comb.concat %c0_i6, %14 : i6, i1
    %17 = comb.add bin %15, %16 {sv.namehint = "nextSmall_1"} : i7
    %18 = comb.xor bin %1, %true {sv.namehint = "_large_T_4"} : i1
    %19 = comb.extract %17 from 0 : (i7) -> i6
    %20 = comb.mux bin %1, %value_lo_1, %19 : i6
    %value_hi_1 = seq.firreg %598 clock %io_ungated_clock reset sync %reset, %c0_i58 {firrtl.random_init_start = 1978 : ui64} : i58
    %21 = comb.extract %17 from 6 {sv.namehint = "_large_T_3"} : (i7) -> i1
    %22 = comb.and bin %21, %18 {sv.namehint = "_large_T_5"} : i1
    %23 = comb.add %value_hi_1, %c1_i58 {sv.namehint = "_large_r_T_2"} : i58
    %24 = comb.mux bin %22, %23, %value_hi_1 : i58
    %25 = comb.concat %value_hi_1, %value_lo_1 {sv.namehint = "io_time"} : i58, i6
    %26 = comb.concat %c0_i4, %io_interrupts_meip, %c0_i3, %io_interrupts_mtip, %c0_i3, %io_interrupts_msip, %c0_i3 {sv.namehint = "read_mip"} : i4, i1, i3, i1, i3, i1, i3
    %27 = comb.extract %reg_mie from 0 : (i64) -> i16
    %28 = comb.and bin %27, %26 : i16
    %29 = comb.mux %reg_mstatus_mie, %28, %c0_i16 {sv.namehint = "m_interrupts"} : i16
    %30 = comb.extract %29 from 15 {sv.namehint = "_which_T_12"} : (i16) -> i1
    %31 = comb.extract %29 from 14 {sv.namehint = "_which_T_13"} : (i16) -> i1
    %32 = comb.extract %29 from 13 {sv.namehint = "_which_T_14"} : (i16) -> i1
    %33 = comb.extract %29 from 12 {sv.namehint = "_which_T_15"} : (i16) -> i1
    %34 = comb.extract %29 from 11 {sv.namehint = "_which_T_16"} : (i16) -> i1
    %35 = comb.extract %29 from 3 {sv.namehint = "_which_T_17"} : (i16) -> i1
    %36 = comb.extract %29 from 7 {sv.namehint = "_which_T_18"} : (i16) -> i1
    %37 = comb.extract %29 from 9 {sv.namehint = "_which_T_19"} : (i16) -> i1
    %38 = comb.extract %29 from 1 {sv.namehint = "_which_T_20"} : (i16) -> i1
    %39 = comb.extract %29 from 5 {sv.namehint = "_which_T_21"} : (i16) -> i1
    %40 = comb.extract %29 from 8 {sv.namehint = "_which_T_22"} : (i16) -> i1
    %41 = comb.extract %29 from 0 {sv.namehint = "_which_T_23"} : (i16) -> i1
    %42 = comb.extract %29 from 4 {sv.namehint = "_which_T_24"} : (i16) -> i1
    %43 = comb.or bin %io_interrupts_debug, %30, %31, %32, %33, %34, %35, %36, %37, %38, %39, %40, %41, %42 {sv.namehint = "anyInterrupt"} : i1
    %44 = comb.xor %41, %true : i1
    %45 = comb.concat %false, %44, %c0_i2 {sv.namehint = "_which_T_51"} : i1, i1, i2
    %46 = comb.mux bin %40, %c-8_i4, %45 {sv.namehint = "_which_T_52"} : i4
    %47 = comb.mux bin %39, %c5_i4, %46 {sv.namehint = "_which_T_53"} : i4
    %48 = comb.mux bin %38, %c1_i4, %47 {sv.namehint = "_which_T_54"} : i4
    %49 = comb.mux bin %37, %c-7_i4, %48 {sv.namehint = "_which_T_55"} : i4
    %50 = comb.mux bin %36, %c7_i4, %49 {sv.namehint = "_which_T_56"} : i4
    %51 = comb.mux bin %35, %c3_i4, %50 {sv.namehint = "_which_T_57"} : i4
    %52 = comb.mux bin %34, %c-5_i4, %51 {sv.namehint = "_which_T_58"} : i4
    %53 = comb.mux bin %33, %c-4_i4, %52 {sv.namehint = "_which_T_59"} : i4
    %54 = comb.mux bin %32, %c-3_i4, %53 {sv.namehint = "_which_T_60"} : i4
    %55 = comb.mux bin %31, %c-2_i4, %54 {sv.namehint = "_which_T_61"} : i4
    %56 = comb.mux bin %30, %c-1_i4, %55 {sv.namehint = "_which_T_63"} : i4
    %57 = comb.mux bin %io_interrupts_debug, %c-2_i4, %56 {sv.namehint = "whichInterrupt"} : i4
    %58 = comb.concat %c0_i60, %57 : i60, i4
    %59 = comb.add %58, %c-9223372036854775808_i64 {sv.namehint = "_interruptCause_T_3"} : i64
    %60 = comb.xor bin %389, %true {sv.namehint = "_io_interrupt_T"} : i1
    %61 = comb.and bin %43, %60 {sv.namehint = "_io_interrupt_T_1"} : i1
    %62 = comb.or bin %61, %reg_singleStepped {sv.namehint = "_io_interrupt_T_2"} : i1
    %63 = comb.or bin %reg_debug, %io_status_cease_r {sv.namehint = "_io_interrupt_T_3"} : i1
    %64 = comb.xor bin %63, %true {sv.namehint = "_io_interrupt_T_4"} : i1
    %65 = comb.and bin %62, %64 {sv.namehint = "io_interrupt"} : i1
    %66 = comb.extract %reg_pmp_0_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo"} : (i2) -> i1
    %67 = comb.extract %reg_pmp_0_addr from 0 : (i30) -> i29
    %68 = comb.concat %67, %66 : i29, i1
    %69 = comb.add %68, %c1_i30 {sv.namehint = "_pmp_mask_T"} : i30
    %70 = comb.xor %69, %c-1_i30 {sv.namehint = "_pmp_mask_T_2"} : i30
    %71 = comb.extract %reg_pmp_0_addr from 0 : (i30) -> i29
    %72 = comb.concat %71, %66 : i29, i1
    %73 = comb.and %72, %70 {sv.namehint = "pmp_mask_hi"} : i30
    %74 = comb.concat %73, %c-1_i2 {sv.namehint = "pmp_mask"} : i30, i2
    %75 = comb.extract %reg_pmp_1_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo_1"} : (i2) -> i1
    %76 = comb.extract %reg_pmp_1_addr from 0 : (i30) -> i29
    %77 = comb.concat %76, %75 : i29, i1
    %78 = comb.add %77, %c1_i30 {sv.namehint = "_pmp_mask_T_4"} : i30
    %79 = comb.xor %78, %c-1_i30 {sv.namehint = "_pmp_mask_T_6"} : i30
    %80 = comb.extract %reg_pmp_1_addr from 0 : (i30) -> i29
    %81 = comb.concat %80, %75 : i29, i1
    %82 = comb.and %81, %79 {sv.namehint = "pmp_mask_hi_1"} : i30
    %83 = comb.concat %82, %c-1_i2 {sv.namehint = "pmp_1_mask"} : i30, i2
    %84 = comb.extract %reg_pmp_2_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo_2"} : (i2) -> i1
    %85 = comb.extract %reg_pmp_2_addr from 0 : (i30) -> i29
    %86 = comb.concat %85, %84 : i29, i1
    %87 = comb.add %86, %c1_i30 {sv.namehint = "_pmp_mask_T_8"} : i30
    %88 = comb.xor %87, %c-1_i30 {sv.namehint = "_pmp_mask_T_10"} : i30
    %89 = comb.extract %reg_pmp_2_addr from 0 : (i30) -> i29
    %90 = comb.concat %89, %84 : i29, i1
    %91 = comb.and %90, %88 {sv.namehint = "pmp_mask_hi_2"} : i30
    %92 = comb.concat %91, %c-1_i2 {sv.namehint = "pmp_2_mask"} : i30, i2
    %93 = comb.extract %reg_pmp_3_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo_3"} : (i2) -> i1
    %94 = comb.extract %reg_pmp_3_addr from 0 : (i30) -> i29
    %95 = comb.concat %94, %93 : i29, i1
    %96 = comb.add %95, %c1_i30 {sv.namehint = "_pmp_mask_T_12"} : i30
    %97 = comb.xor %96, %c-1_i30 {sv.namehint = "_pmp_mask_T_14"} : i30
    %98 = comb.extract %reg_pmp_3_addr from 0 : (i30) -> i29
    %99 = comb.concat %98, %93 : i29, i1
    %100 = comb.and %99, %97 {sv.namehint = "pmp_mask_hi_3"} : i30
    %101 = comb.concat %100, %c-1_i2 {sv.namehint = "pmp_3_mask"} : i30, i2
    %102 = comb.extract %reg_pmp_4_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo_4"} : (i2) -> i1
    %103 = comb.extract %reg_pmp_4_addr from 0 : (i30) -> i29
    %104 = comb.concat %103, %102 : i29, i1
    %105 = comb.add %104, %c1_i30 {sv.namehint = "_pmp_mask_T_16"} : i30
    %106 = comb.xor %105, %c-1_i30 {sv.namehint = "_pmp_mask_T_18"} : i30
    %107 = comb.extract %reg_pmp_4_addr from 0 : (i30) -> i29
    %108 = comb.concat %107, %102 : i29, i1
    %109 = comb.and %108, %106 {sv.namehint = "pmp_mask_hi_4"} : i30
    %110 = comb.concat %109, %c-1_i2 {sv.namehint = "pmp_4_mask"} : i30, i2
    %111 = comb.extract %reg_pmp_5_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo_5"} : (i2) -> i1
    %112 = comb.extract %reg_pmp_5_addr from 0 : (i30) -> i29
    %113 = comb.concat %112, %111 : i29, i1
    %114 = comb.add %113, %c1_i30 {sv.namehint = "_pmp_mask_T_20"} : i30
    %115 = comb.xor %114, %c-1_i30 {sv.namehint = "_pmp_mask_T_22"} : i30
    %116 = comb.extract %reg_pmp_5_addr from 0 : (i30) -> i29
    %117 = comb.concat %116, %111 : i29, i1
    %118 = comb.and %117, %115 {sv.namehint = "pmp_mask_hi_5"} : i30
    %119 = comb.concat %118, %c-1_i2 {sv.namehint = "pmp_5_mask"} : i30, i2
    %120 = comb.extract %reg_pmp_6_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo_6"} : (i2) -> i1
    %121 = comb.extract %reg_pmp_6_addr from 0 : (i30) -> i29
    %122 = comb.concat %121, %120 : i29, i1
    %123 = comb.add %122, %c1_i30 {sv.namehint = "_pmp_mask_T_24"} : i30
    %124 = comb.xor %123, %c-1_i30 {sv.namehint = "_pmp_mask_T_26"} : i30
    %125 = comb.extract %reg_pmp_6_addr from 0 : (i30) -> i29
    %126 = comb.concat %125, %120 : i29, i1
    %127 = comb.and %126, %124 {sv.namehint = "pmp_mask_hi_6"} : i30
    %128 = comb.concat %127, %c-1_i2 {sv.namehint = "pmp_6_mask"} : i30, i2
    %129 = comb.extract %reg_pmp_7_cfg_a from 0 {sv.namehint = "pmp_mask_base_lo_7"} : (i2) -> i1
    %130 = comb.extract %reg_pmp_7_addr from 0 : (i30) -> i29
    %131 = comb.concat %130, %129 : i29, i1
    %132 = comb.add %131, %c1_i30 {sv.namehint = "_pmp_mask_T_28"} : i30
    %133 = comb.xor %132, %c-1_i30 {sv.namehint = "_pmp_mask_T_30"} : i30
    %134 = comb.extract %reg_pmp_7_addr from 0 : (i30) -> i29
    %135 = comb.concat %134, %129 : i29, i1
    %136 = comb.and %135, %133 {sv.namehint = "pmp_mask_hi_7"} : i30
    %137 = comb.concat %136, %c-1_i2 {sv.namehint = "pmp_7_mask"} : i30, i2
    %reg_misa = seq.firreg %559 clock %clock reset sync %reset, %c-9223372036846382843_i64 {firrtl.random_init_start = 2036 : ui64} : i64
    %138 = comb.concat %c0_i51, %reg_mstatus_mpp, %c0_i3, %reg_mstatus_mpie, %c0_i3, %reg_mstatus_mie, %c0_i3 {sv.namehint = "read_mstatus"} : i51, i2, i3, i1, i3, i1, i3
    %139 = comb.extract %reg_mtvec from 0 {sv.namehint = "_read_mtvec_T"} : (i32) -> i1
    %140 = comb.mux bin %139, %c-2_i8, %c2_i8 {sv.namehint = "_read_mtvec_T_1"} : i8
    %141 = comb.xor %140, %c-1_i8 : i8
    %142 = comb.concat %c-1_i24, %141 {sv.namehint = "_read_mtvec_T_4"} : i24, i8
    %143 = comb.and bin %reg_mtvec, %142 {sv.namehint = "read_mtvec_lo"} : i32
    %144 = comb.concat %c0_i32, %143 {sv.namehint = "read_mtvec"} : i32, i32
    %145 = comb.concat %c2_i4, %reg_bp_0_control_dmode, %c4398046511104_i46, %reg_bp_0_control_action, %c0_i3, %reg_bp_0_control_tmatch, %c-8_i4, %reg_bp_0_control_x, %reg_bp_0_control_w, %reg_bp_0_control_r : i4, i1, i46, i1, i3, i2, i4, i1, i1, i1
    %146 = comb.extract %reg_bp_0_address from 32 : (i33) -> i1
    %147 = comb.replicate %146 {sv.namehint = "hi_3"} : (i1) -> i31
    %148 = comb.concat %147, %reg_bp_0_address : i31, i33
    %149 = comb.xor bin %reg_mepc, %c-1_i34 {sv.namehint = "_io_evec_T_15"} : i34
    %150 = comb.extract %reg_misa from 2 {sv.namehint = "_io_evec_T_16"} : (i64) -> i1
    %151 = comb.xor %150, %true : i1
    %152 = comb.concat %151, %true : i1, i1
    %153 = comb.extract %149 from 2 : (i34) -> i32
    %154 = comb.extract %149 from 0 : (i34) -> i2
    %155 = comb.or bin %154, %152 : i2
    %156 = comb.concat %153, %155 : i32, i2
    %157 = comb.xor bin %156, %c-1_i34 {sv.namehint = "lo_4"} : i34
    %158 = comb.extract %157 from 33 : (i34) -> i1
    %159 = comb.replicate %158 {sv.namehint = "hi_5"} : (i1) -> i30
    %160 = comb.concat %159, %157 : i30, i34
    %161 = comb.extract %reg_mtval from 33 : (i34) -> i1
    %162 = comb.replicate %161 {sv.namehint = "hi_6"} : (i1) -> i30
    %163 = comb.concat %162, %reg_mtval : i30, i34
    %164 = comb.concat %c16384_i16, %reg_dcsr_ebreakm, %c0_i6, %reg_dcsr_cause, %c0_i3, %reg_dcsr_step, %c-1_i2 : i16, i1, i6, i3, i3, i1, i2
    %165 = comb.xor bin %reg_dpc, %c-1_i34 {sv.namehint = "_io_evec_T_5"} : i34
    %166 = comb.extract %165 from 2 : (i34) -> i32
    %167 = comb.extract %165 from 0 : (i34) -> i2
    %168 = comb.or bin %167, %152 : i2
    %169 = comb.concat %166, %168 : i32, i2
    %170 = comb.xor bin %169, %c-1_i34 {sv.namehint = "lo_6"} : i34
    %171 = comb.extract %170 from 33 : (i34) -> i1
    %172 = comb.replicate %171 {sv.namehint = "hi_8"} : (i1) -> i30
    %173 = comb.concat %172, %170 : i30, i34
    %174 = comb.concat %reg_pmp_7_cfg_l, %c0_i2, %reg_pmp_7_cfg_a, %reg_pmp_7_cfg_x, %reg_pmp_7_cfg_w, %reg_pmp_7_cfg_r, %reg_pmp_6_cfg_l, %c0_i2, %reg_pmp_6_cfg_a, %reg_pmp_6_cfg_x, %reg_pmp_6_cfg_w, %reg_pmp_6_cfg_r, %reg_pmp_5_cfg_l, %c0_i2, %reg_pmp_5_cfg_a, %reg_pmp_5_cfg_x, %reg_pmp_5_cfg_w, %reg_pmp_5_cfg_r, %reg_pmp_4_cfg_l, %c0_i2, %reg_pmp_4_cfg_a, %reg_pmp_4_cfg_x, %reg_pmp_4_cfg_w, %reg_pmp_4_cfg_r, %reg_pmp_3_cfg_l, %c0_i2, %reg_pmp_3_cfg_a, %reg_pmp_3_cfg_x, %reg_pmp_3_cfg_w, %reg_pmp_3_cfg_r, %reg_pmp_2_cfg_l, %c0_i2, %reg_pmp_2_cfg_a, %reg_pmp_2_cfg_x, %reg_pmp_2_cfg_w, %reg_pmp_2_cfg_r, %reg_pmp_1_cfg_l, %c0_i2, %reg_pmp_1_cfg_a, %reg_pmp_1_cfg_x, %reg_pmp_1_cfg_w, %reg_pmp_1_cfg_r, %reg_pmp_0_cfg_l, %c0_i2, %reg_pmp_0_cfg_a, %reg_pmp_0_cfg_x, %reg_pmp_0_cfg_w, %reg_pmp_0_cfg_r : i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1, i1, i2, i2, i1, i1, i1
    %reg_custom_0 = seq.firreg %840 clock %clock reset sync %reset, %c520_i64 {firrtl.random_init_start = 2100 : ui64, sv.namehint = "reg_custom_0"} : i64
    %175 = comb.icmp bin eq %io_rw_addr, %c1953_i12 : i12
    %176 = comb.icmp bin eq %io_rw_addr, %c1954_i12 : i12
    %177 = comb.icmp bin eq %io_rw_addr, %c769_i12 : i12
    %178 = comb.icmp bin eq %io_rw_addr, %c768_i12 : i12
    %179 = comb.icmp bin eq %io_rw_addr, %c773_i12 : i12
    %180 = comb.icmp bin eq %io_rw_addr, %c836_i12 : i12
    %181 = comb.icmp bin eq %io_rw_addr, %c772_i12 : i12
    %182 = comb.icmp bin eq %io_rw_addr, %c832_i12 : i12
    %183 = comb.icmp bin eq %io_rw_addr, %c833_i12 : i12
    %184 = comb.icmp bin eq %io_rw_addr, %c835_i12 : i12
    %185 = comb.icmp bin eq %io_rw_addr, %c834_i12 : i12
    %186 = comb.icmp bin eq %io_rw_addr, %c1968_i12 : i12
    %187 = comb.icmp bin eq %io_rw_addr, %c1969_i12 : i12
    %188 = comb.icmp bin eq %io_rw_addr, %c1970_i12 : i12
    %189 = comb.icmp bin eq %io_rw_addr, %c800_i12 : i12
    %190 = comb.icmp bin eq %io_rw_addr, %c-1280_i12 : i12
    %191 = comb.icmp bin eq %io_rw_addr, %c-1278_i12 : i12
    %192 = comb.icmp bin eq %io_rw_addr, %c928_i12 : i12
    %193 = comb.icmp bin eq %io_rw_addr, %c944_i12 : i12
    %194 = comb.icmp bin eq %io_rw_addr, %c945_i12 : i12
    %195 = comb.icmp bin eq %io_rw_addr, %c946_i12 : i12
    %196 = comb.icmp bin eq %io_rw_addr, %c947_i12 : i12
    %197 = comb.icmp bin eq %io_rw_addr, %c948_i12 : i12
    %198 = comb.icmp bin eq %io_rw_addr, %c949_i12 : i12
    %199 = comb.icmp bin eq %io_rw_addr, %c950_i12 : i12
    %200 = comb.icmp bin eq %io_rw_addr, %c951_i12 : i12
    %201 = comb.icmp bin eq %io_rw_addr, %c1985_i12 : i12
    %202 = comb.icmp bin eq %io_rw_addr, %c-238_i12 : i12
    %203 = comb.icmp bin eq %io_rw_addr, %c-237_i12 : i12
    %204 = comb.extract %io_rw_cmd from 1 {sv.namehint = "_newBPC_T_25"} : (i3) -> i1
    %205 = comb.mux bin %204, %528, %c0_i64 {sv.namehint = "_wdata_T_1"} : i64
    %206 = comb.or bin %205, %io_rw_wdata {sv.namehint = "_wdata_T_2"} : i64
    %207 = comb.extract %io_rw_cmd from 0 {sv.namehint = "_newBPC_T_28"} : (i3) -> i2
    %208 = comb.icmp bin eq %207, %c-1_i2 {sv.namehint = "_wdata_T_4"} : i2
    %209 = comb.mux bin %208, %io_rw_wdata, %c0_i64 {sv.namehint = "_wdata_T_5"} : i64
    %210 = comb.xor bin %209, %c-1_i64 {sv.namehint = "_wdata_T_6"} : i64
    %211 = comb.and bin %206, %210 {sv.namehint = "wdata"} : i64
    %212 = comb.icmp bin eq %io_rw_cmd, %c-4_i3 {sv.namehint = "system_insn"} : i3
    %213 = comb.extract %io_rw_addr from 9 : (i12) -> i1
    %214 = comb.extract %io_rw_addr from 0 : (i12) -> i1
    %215 = comb.concat %213, %214 : i1, i1
    %216 = comb.icmp bin eq %215, %c0_i2 : i2
    %217 = comb.extract %io_rw_addr from 8 : (i12) -> i1
    %218 = comb.extract %io_rw_addr from 0 : (i12) -> i1
    %219 = comb.concat %217, %218 : i1, i1
    %220 = comb.icmp bin eq %219, %c1_i2 : i2
    %221 = comb.extract %io_rw_addr from 9 : (i12) -> i1
    %222 = comb.extract %io_rw_addr from 2 : (i12) -> i1
    %223 = comb.concat %221, %222 : i1, i1
    %224 = comb.icmp bin eq %223, %c-2_i2 : i2
    %225 = comb.extract %io_rw_addr from 9 : (i12) -> i1
    %226 = comb.extract %io_rw_addr from 1 : (i12) -> i1
    %227 = comb.concat %225, %226 : i1, i1
    %228 = comb.icmp bin eq %227, %c-2_i2 : i2
    %229 = comb.extract %io_rw_addr from 8 : (i12) -> i2
    %230 = comb.icmp bin eq %229, %c1_i2 : i2
    %231 = comb.and bin %212, %216 {sv.namehint = "insn_call"} : i1
    %232 = comb.and bin %212, %220 {sv.namehint = "insn_break"} : i1
    %233 = comb.and bin %212, %224 {sv.namehint = "insn_ret"} : i1
    %234 = comb.and bin %212, %228 {sv.namehint = "insn_cease"} : i1
    %235 = comb.extract %io_decode_0_csr from 9 : (i12) -> i1
    %236 = comb.extract %io_decode_0_csr from 2 : (i12) -> i1
    %237 = comb.concat %235, %236 : i1, i1
    %238 = comb.icmp bin eq %237, %c-2_i2 {sv.namehint = "is_ret"} : i2
    %239 = comb.icmp bin eq %io_decode_0_csr, %c1952_i12 {sv.namehint = "_io_decode_0_read_illegal_T_2"} : i12
    %240 = comb.icmp bin eq %io_decode_0_csr, %c1953_i12 {sv.namehint = "_io_decode_0_read_illegal_T_3"} : i12
    %241 = comb.icmp bin eq %io_decode_0_csr, %c1954_i12 {sv.namehint = "_io_decode_0_read_illegal_T_4"} : i12
    %242 = comb.icmp bin eq %io_decode_0_csr, %c1955_i12 {sv.namehint = "_io_decode_0_read_illegal_T_5"} : i12
    %243 = comb.icmp bin eq %io_decode_0_csr, %c769_i12 {sv.namehint = "_io_decode_0_read_illegal_T_6"} : i12
    %244 = comb.icmp bin eq %io_decode_0_csr, %c768_i12 {sv.namehint = "_io_decode_0_read_illegal_T_7"} : i12
    %245 = comb.icmp bin eq %io_decode_0_csr, %c773_i12 {sv.namehint = "_io_decode_0_read_illegal_T_8"} : i12
    %246 = comb.icmp bin eq %io_decode_0_csr, %c836_i12 {sv.namehint = "_io_decode_0_read_illegal_T_9"} : i12
    %247 = comb.icmp bin eq %io_decode_0_csr, %c772_i12 {sv.namehint = "_io_decode_0_read_illegal_T_10"} : i12
    %248 = comb.icmp bin eq %io_decode_0_csr, %c832_i12 {sv.namehint = "_io_decode_0_read_illegal_T_11"} : i12
    %249 = comb.icmp bin eq %io_decode_0_csr, %c833_i12 {sv.namehint = "_io_decode_0_read_illegal_T_12"} : i12
    %250 = comb.icmp bin eq %io_decode_0_csr, %c835_i12 {sv.namehint = "_io_decode_0_read_illegal_T_13"} : i12
    %251 = comb.icmp bin eq %io_decode_0_csr, %c834_i12 {sv.namehint = "_io_decode_0_read_illegal_T_14"} : i12
    %252 = comb.icmp bin eq %io_decode_0_csr, %c-236_i12 {sv.namehint = "_io_decode_0_read_illegal_T_15"} : i12
    %253 = comb.icmp bin eq %io_decode_0_csr, %c1968_i12 {sv.namehint = "_io_decode_0_read_illegal_T_16"} : i12
    %254 = comb.icmp bin eq %io_decode_0_csr, %c1969_i12 {sv.namehint = "_io_decode_0_read_illegal_T_17"} : i12
    %255 = comb.icmp bin eq %io_decode_0_csr, %c1970_i12 {sv.namehint = "_io_decode_0_read_illegal_T_18"} : i12
    %256 = comb.icmp bin eq %io_decode_0_csr, %c800_i12 {sv.namehint = "_io_decode_0_read_illegal_T_19"} : i12
    %257 = comb.icmp bin eq %io_decode_0_csr, %c-1280_i12 {sv.namehint = "_io_decode_0_read_illegal_T_20"} : i12
    %258 = comb.icmp bin eq %io_decode_0_csr, %c-1278_i12 {sv.namehint = "_io_decode_0_read_illegal_T_21"} : i12
    %259 = comb.icmp bin eq %io_decode_0_csr, %c803_i12 {sv.namehint = "_io_decode_0_read_illegal_T_22"} : i12
    %260 = comb.icmp bin eq %io_decode_0_csr, %c-1277_i12 {sv.namehint = "_io_decode_0_read_illegal_T_23"} : i12
    %261 = comb.icmp bin eq %io_decode_0_csr, %c804_i12 {sv.namehint = "_io_decode_0_read_illegal_T_24"} : i12
    %262 = comb.icmp bin eq %io_decode_0_csr, %c-1276_i12 {sv.namehint = "_io_decode_0_read_illegal_T_25"} : i12
    %263 = comb.icmp bin eq %io_decode_0_csr, %c805_i12 {sv.namehint = "_io_decode_0_read_illegal_T_26"} : i12
    %264 = comb.icmp bin eq %io_decode_0_csr, %c-1275_i12 {sv.namehint = "_io_decode_0_read_illegal_T_27"} : i12
    %265 = comb.icmp bin eq %io_decode_0_csr, %c806_i12 {sv.namehint = "_io_decode_0_read_illegal_T_28"} : i12
    %266 = comb.icmp bin eq %io_decode_0_csr, %c-1274_i12 {sv.namehint = "_io_decode_0_read_illegal_T_29"} : i12
    %267 = comb.icmp bin eq %io_decode_0_csr, %c807_i12 {sv.namehint = "_io_decode_0_read_illegal_T_30"} : i12
    %268 = comb.icmp bin eq %io_decode_0_csr, %c-1273_i12 {sv.namehint = "_io_decode_0_read_illegal_T_31"} : i12
    %269 = comb.icmp bin eq %io_decode_0_csr, %c808_i12 {sv.namehint = "_io_decode_0_read_illegal_T_32"} : i12
    %270 = comb.icmp bin eq %io_decode_0_csr, %c-1272_i12 {sv.namehint = "_io_decode_0_read_illegal_T_33"} : i12
    %271 = comb.icmp bin eq %io_decode_0_csr, %c809_i12 {sv.namehint = "_io_decode_0_read_illegal_T_34"} : i12
    %272 = comb.icmp bin eq %io_decode_0_csr, %c-1271_i12 {sv.namehint = "_io_decode_0_read_illegal_T_35"} : i12
    %273 = comb.icmp bin eq %io_decode_0_csr, %c810_i12 {sv.namehint = "_io_decode_0_read_illegal_T_36"} : i12
    %274 = comb.icmp bin eq %io_decode_0_csr, %c-1270_i12 {sv.namehint = "_io_decode_0_read_illegal_T_37"} : i12
    %275 = comb.icmp bin eq %io_decode_0_csr, %c811_i12 {sv.namehint = "_io_decode_0_read_illegal_T_38"} : i12
    %276 = comb.icmp bin eq %io_decode_0_csr, %c-1269_i12 {sv.namehint = "_io_decode_0_read_illegal_T_39"} : i12
    %277 = comb.icmp bin eq %io_decode_0_csr, %c812_i12 {sv.namehint = "_io_decode_0_read_illegal_T_40"} : i12
    %278 = comb.icmp bin eq %io_decode_0_csr, %c-1268_i12 {sv.namehint = "_io_decode_0_read_illegal_T_41"} : i12
    %279 = comb.icmp bin eq %io_decode_0_csr, %c813_i12 {sv.namehint = "_io_decode_0_read_illegal_T_42"} : i12
    %280 = comb.icmp bin eq %io_decode_0_csr, %c-1267_i12 {sv.namehint = "_io_decode_0_read_illegal_T_43"} : i12
    %281 = comb.icmp bin eq %io_decode_0_csr, %c814_i12 {sv.namehint = "_io_decode_0_read_illegal_T_44"} : i12
    %282 = comb.icmp bin eq %io_decode_0_csr, %c-1266_i12 {sv.namehint = "_io_decode_0_read_illegal_T_45"} : i12
    %283 = comb.icmp bin eq %io_decode_0_csr, %c815_i12 {sv.namehint = "_io_decode_0_read_illegal_T_46"} : i12
    %284 = comb.icmp bin eq %io_decode_0_csr, %c-1265_i12 {sv.namehint = "_io_decode_0_read_illegal_T_47"} : i12
    %285 = comb.icmp bin eq %io_decode_0_csr, %c816_i12 {sv.namehint = "_io_decode_0_read_illegal_T_48"} : i12
    %286 = comb.icmp bin eq %io_decode_0_csr, %c-1264_i12 {sv.namehint = "_io_decode_0_read_illegal_T_49"} : i12
    %287 = comb.icmp bin eq %io_decode_0_csr, %c817_i12 {sv.namehint = "_io_decode_0_read_illegal_T_50"} : i12
    %288 = comb.icmp bin eq %io_decode_0_csr, %c-1263_i12 {sv.namehint = "_io_decode_0_read_illegal_T_51"} : i12
    %289 = comb.icmp bin eq %io_decode_0_csr, %c818_i12 {sv.namehint = "_io_decode_0_read_illegal_T_52"} : i12
    %290 = comb.icmp bin eq %io_decode_0_csr, %c-1262_i12 {sv.namehint = "_io_decode_0_read_illegal_T_53"} : i12
    %291 = comb.icmp bin eq %io_decode_0_csr, %c819_i12 {sv.namehint = "_io_decode_0_read_illegal_T_54"} : i12
    %292 = comb.icmp bin eq %io_decode_0_csr, %c-1261_i12 {sv.namehint = "_io_decode_0_read_illegal_T_55"} : i12
    %293 = comb.icmp bin eq %io_decode_0_csr, %c820_i12 {sv.namehint = "_io_decode_0_read_illegal_T_56"} : i12
    %294 = comb.icmp bin eq %io_decode_0_csr, %c-1260_i12 {sv.namehint = "_io_decode_0_read_illegal_T_57"} : i12
    %295 = comb.icmp bin eq %io_decode_0_csr, %c821_i12 {sv.namehint = "_io_decode_0_read_illegal_T_58"} : i12
    %296 = comb.icmp bin eq %io_decode_0_csr, %c-1259_i12 {sv.namehint = "_io_decode_0_read_illegal_T_59"} : i12
    %297 = comb.icmp bin eq %io_decode_0_csr, %c822_i12 {sv.namehint = "_io_decode_0_read_illegal_T_60"} : i12
    %298 = comb.icmp bin eq %io_decode_0_csr, %c-1258_i12 {sv.namehint = "_io_decode_0_read_illegal_T_61"} : i12
    %299 = comb.icmp bin eq %io_decode_0_csr, %c823_i12 {sv.namehint = "_io_decode_0_read_illegal_T_62"} : i12
    %300 = comb.icmp bin eq %io_decode_0_csr, %c-1257_i12 {sv.namehint = "_io_decode_0_read_illegal_T_63"} : i12
    %301 = comb.icmp bin eq %io_decode_0_csr, %c824_i12 {sv.namehint = "_io_decode_0_read_illegal_T_64"} : i12
    %302 = comb.icmp bin eq %io_decode_0_csr, %c-1256_i12 {sv.namehint = "_io_decode_0_read_illegal_T_65"} : i12
    %303 = comb.icmp bin eq %io_decode_0_csr, %c825_i12 {sv.namehint = "_io_decode_0_read_illegal_T_66"} : i12
    %304 = comb.icmp bin eq %io_decode_0_csr, %c-1255_i12 {sv.namehint = "_io_decode_0_read_illegal_T_67"} : i12
    %305 = comb.icmp bin eq %io_decode_0_csr, %c826_i12 {sv.namehint = "_io_decode_0_read_illegal_T_68"} : i12
    %306 = comb.icmp bin eq %io_decode_0_csr, %c-1254_i12 {sv.namehint = "_io_decode_0_read_illegal_T_69"} : i12
    %307 = comb.icmp bin eq %io_decode_0_csr, %c827_i12 {sv.namehint = "_io_decode_0_read_illegal_T_70"} : i12
    %308 = comb.icmp bin eq %io_decode_0_csr, %c-1253_i12 {sv.namehint = "_io_decode_0_read_illegal_T_71"} : i12
    %309 = comb.icmp bin eq %io_decode_0_csr, %c828_i12 {sv.namehint = "_io_decode_0_read_illegal_T_72"} : i12
    %310 = comb.icmp bin eq %io_decode_0_csr, %c-1252_i12 {sv.namehint = "_io_decode_0_read_illegal_T_73"} : i12
    %311 = comb.icmp bin eq %io_decode_0_csr, %c829_i12 {sv.namehint = "_io_decode_0_read_illegal_T_74"} : i12
    %312 = comb.icmp bin eq %io_decode_0_csr, %c-1251_i12 {sv.namehint = "_io_decode_0_read_illegal_T_75"} : i12
    %313 = comb.icmp bin eq %io_decode_0_csr, %c830_i12 {sv.namehint = "_io_decode_0_read_illegal_T_76"} : i12
    %314 = comb.icmp bin eq %io_decode_0_csr, %c-1250_i12 {sv.namehint = "_io_decode_0_read_illegal_T_77"} : i12
    %315 = comb.icmp bin eq %io_decode_0_csr, %c831_i12 {sv.namehint = "_io_decode_0_read_illegal_T_78"} : i12
    %316 = comb.icmp bin eq %io_decode_0_csr, %c-1249_i12 {sv.namehint = "_io_decode_0_read_illegal_T_79"} : i12
    %317 = comb.icmp bin eq %io_decode_0_csr, %c928_i12 {sv.namehint = "_io_decode_0_read_illegal_T_80"} : i12
    %318 = comb.icmp bin eq %io_decode_0_csr, %c930_i12 {sv.namehint = "_io_decode_0_read_illegal_T_81"} : i12
    %319 = comb.icmp bin eq %io_decode_0_csr, %c944_i12 {sv.namehint = "_io_decode_0_read_illegal_T_82"} : i12
    %320 = comb.icmp bin eq %io_decode_0_csr, %c945_i12 {sv.namehint = "_io_decode_0_read_illegal_T_83"} : i12
    %321 = comb.icmp bin eq %io_decode_0_csr, %c946_i12 {sv.namehint = "_io_decode_0_read_illegal_T_84"} : i12
    %322 = comb.icmp bin eq %io_decode_0_csr, %c947_i12 {sv.namehint = "_io_decode_0_read_illegal_T_85"} : i12
    %323 = comb.icmp bin eq %io_decode_0_csr, %c948_i12 {sv.namehint = "_io_decode_0_read_illegal_T_86"} : i12
    %324 = comb.icmp bin eq %io_decode_0_csr, %c949_i12 {sv.namehint = "_io_decode_0_read_illegal_T_87"} : i12
    %325 = comb.icmp bin eq %io_decode_0_csr, %c950_i12 {sv.namehint = "_io_decode_0_read_illegal_T_88"} : i12
    %326 = comb.icmp bin eq %io_decode_0_csr, %c951_i12 {sv.namehint = "_io_decode_0_read_illegal_T_89"} : i12
    %327 = comb.icmp bin eq %io_decode_0_csr, %c952_i12 {sv.namehint = "_io_decode_0_read_illegal_T_90"} : i12
    %328 = comb.icmp bin eq %io_decode_0_csr, %c953_i12 {sv.namehint = "_io_decode_0_read_illegal_T_91"} : i12
    %329 = comb.icmp bin eq %io_decode_0_csr, %c954_i12 {sv.namehint = "_io_decode_0_read_illegal_T_92"} : i12
    %330 = comb.icmp bin eq %io_decode_0_csr, %c955_i12 {sv.namehint = "_io_decode_0_read_illegal_T_93"} : i12
    %331 = comb.icmp bin eq %io_decode_0_csr, %c956_i12 {sv.namehint = "_io_decode_0_read_illegal_T_94"} : i12
    %332 = comb.icmp bin eq %io_decode_0_csr, %c957_i12 {sv.namehint = "_io_decode_0_read_illegal_T_95"} : i12
    %333 = comb.icmp bin eq %io_decode_0_csr, %c958_i12 {sv.namehint = "_io_decode_0_read_illegal_T_96"} : i12
    %334 = comb.icmp bin eq %io_decode_0_csr, %c959_i12 {sv.namehint = "_io_decode_0_read_illegal_T_97"} : i12
    %335 = comb.icmp bin eq %io_decode_0_csr, %c1985_i12 {sv.namehint = "_io_decode_0_read_illegal_T_98"} : i12
    %336 = comb.icmp bin eq %io_decode_0_csr, %c-238_i12 {sv.namehint = "_io_decode_0_read_illegal_T_99"} : i12
    %337 = comb.icmp bin eq %io_decode_0_csr, %c-239_i12 {sv.namehint = "_io_decode_0_read_illegal_T_100"} : i12
    %338 = comb.icmp bin eq %io_decode_0_csr, %c-237_i12 {sv.namehint = "_io_decode_0_read_illegal_T_101"} : i12
    %339 = comb.or bin{sv.namehint = "_io_decode_0_read_illegal_T_200"} : i1
    %340 = comb.xor bin %339, %true {sv.namehint = "_io_decode_0_read_illegal_T_201"} : i1
    %341 = comb.extract %io_decode_0_csr from 10 : (i12) -> i2
    %342 = comb.extract %io_decode_0_csr from 4 : (i12) -> i1
    %343 = comb.concat %341, %342 : i2, i1
    %344 = comb.icmp bin eq %343, %c3_i3 {sv.namehint = "_io_decode_0_read_illegal_T_220"} : i3
    %345 = comb.xor bin %reg_debug, %true {sv.namehint = "_io_status_dprv_x87_T"} : i1
    %346 = comb.and bin %344, %345 {sv.namehint = "_io_decode_0_read_illegal_T_222"} : i1
    %347 = comb.or bin %340, %346 {sv.namehint = "io_decode_0_read_illegal"} : i1
    %348 = comb.extract %io_decode_0_csr from 10 {sv.namehint = "_io_decode_0_write_illegal_T"} : (i12) -> i2
    %349 = comb.icmp bin eq %348, %c-1_i2 {sv.namehint = "io_decode_0_write_illegal"} : i2
    %350 = comb.icmp bin ugt %io_decode_0_csr, %c831_i12 {sv.namehint = "_io_decode_0_write_flush_T"} : i12
    %351 = comb.icmp bin ult %io_decode_0_csr, %c836_i12 {sv.namehint = "_io_decode_0_write_flush_T_1"} : i12
    %352 = comb.and bin %350, %351 {sv.namehint = "_io_decode_0_write_flush_T_2"} : i1
    %353 = comb.icmp bin ugt %io_decode_0_csr, %c319_i12 {sv.namehint = "_io_decode_0_write_flush_T_3"} : i12
    %354 = comb.icmp bin ult %io_decode_0_csr, %c324_i12 {sv.namehint = "_io_decode_0_write_flush_T_4"} : i12
    %355 = comb.and bin %353, %354 {sv.namehint = "_io_decode_0_write_flush_T_5"} : i1
    %356 = comb.or bin %352, %355 {sv.namehint = "_io_decode_0_write_flush_T_6"} : i1
    %357 = comb.xor bin %356, %true {sv.namehint = "io_decode_0_write_flush"} : i1
    %358 = comb.extract %io_decode_0_csr from 10 {sv.namehint = "_io_decode_0_system_illegal_T_8"} : (i12) -> i1
    %359 = comb.extract %io_decode_0_csr from 7 {sv.namehint = "_io_decode_0_system_illegal_T_10"} : (i12) -> i1
    %360 = comb.and bin %238, %358, %359, %345 {sv.namehint = "_io_decode_0_system_illegal_T_13"} : i1
    %361 = comb.mux bin %232, %c3_i64, %io_cause {sv.namehint = "_cause_T_2"} : i64
    %362 = comb.mux bin %231, %c11_i64, %361 {sv.namehint = "cause"} : i64
    %363 = comb.extract %362 from 0 {sv.namehint = "cause_lsbs"} : (i64) -> i8
    %364 = comb.extract %362 from 63 {sv.namehint = "_io_trace_0_interrupt_T"} : (i64) -> i1
    %365 = comb.icmp bin eq %363, %c14_i8 {sv.namehint = "_causeIsDebugTrigger_T_2"} : i8
    %366 = comb.and bin %364, %365 {sv.namehint = "causeIsDebugInt"} : i1
    %367 = comb.xor bin %364, %true {sv.namehint = "_causeIsDebugTrigger_T_1"} : i1
    %368 = comb.and bin %367, %365 {sv.namehint = "causeIsDebugTrigger"} : i1
    %369 = comb.xor bin %364, %true {sv.namehint = "_causeIsDebugBreak_T_1"} : i1
    %370 = comb.and bin %369, %232, %reg_dcsr_ebreakm {sv.namehint = "causeIsDebugBreak"} : i1
    %371 = comb.or bin %reg_singleStepped, %366, %368, %370, %reg_debug {sv.namehint = "trapToDebug"} : i1
    %372 = comb.xor %232, %true : i1
    %373 = comb.concat %c-128_i8, %372, %c0_i3 {sv.namehint = "_debugTVec_T"} : i8, i1, i3
    %374 = comb.mux bin %reg_debug, %373, %c-2048_i12 {sv.namehint = "debugTVec"} : i12
    %375 = comb.extract %362 from 0 {sv.namehint = "_notDebugTVec_interruptOffset_T"} : (i64) -> i6
    %376 = comb.extract %143 from 8 : (i32) -> i24
    %377 = comb.extract %143 from 0 {sv.namehint = "_notDebugTVec_doVector_T"} : (i32) -> i1
    %378 = comb.extract %362 from 6 {sv.namehint = "_notDebugTVec_doVector_T_3"} : (i64) -> i2
    %379 = comb.icmp bin eq %378, %c0_i2 {sv.namehint = "_notDebugTVec_doVector_T_4"} : i2
    %380 = comb.and bin %377, %364, %379 {sv.namehint = "notDebugTVec_doVector"} : i1
    %381 = comb.extract %143 from 2 : (i32) -> i30
    %382 = comb.concat %376, %375 : i24, i6
    %383 = comb.mux bin %380, %382, %381 : i30
    %384 = comb.concat %c0_i22, %374 : i22, i12
    %385 = comb.concat %c0_i2, %383, %c0_i2 : i2, i30, i2
    %386 = comb.mux %371, %384, %385 {sv.namehint = "tvec"} : i34
    %387 = comb.or bin %231, %232 {sv.namehint = "_exception_T"} : i1
    %388 = comb.or bin %387, %233 {sv.namehint = "io_eret"} : i1
    %389 = comb.and bin %reg_dcsr_step, %345 {sv.namehint = "io_singleStep"} : i1
    %390 = comb.extract %reg_misa from 0 {sv.namehint = "io_status_isa"} : (i64) -> i32
    %io_status_dprv_REG = seq.firreg %c-1_i2 clock %clock {firrtl.random_init_start = 2356 : ui64, sv.namehint = "io_status_dprv"} : i2
    %391 = comb.or bin %387, %io_exception {sv.namehint = "exception"} : i1
    %392 = comb.concat %false, %233 : i1, i1
    %393 = comb.concat %false, %231 : i1, i1
    %394 = comb.add bin %392, %393 : i2
    %395 = comb.concat %false, %232 : i1, i1
    %396 = comb.concat %false, %io_exception : i1, i1
    %397 = comb.add bin %395, %396 : i2
    %398 = comb.concat %false, %394 : i1, i2
    %399 = comb.concat %false, %397 : i1, i2
    %400 = comb.add bin %398, %399 : i3
    %401 = comb.icmp bin ult %400, %c2_i3 : i3
    %402 = comb.or bin %401, %reset : i1
    %403 = comb.xor bin %402, %true : i1
    %404 = comb.and bin %212, %230, %60, %345 : i1
    %405 = comb.or %404, %reg_wfi : i1
    %406 = comb.extract %28 from 11 : (i16) -> i1
    %407 = comb.extract %28 from 7 : (i16) -> i1
    %408 = comb.extract %28 from 3 : (i16) -> i1
    %409 = comb.concat %406, %407, %408 : i1, i1, i1
    %410 = comb.icmp bin ne %409, %c0_i3 : i3
    %411 = comb.or bin %410, %io_interrupts_debug, %391 : i1
    %412 = comb.xor %411, %true : i1
    %413 = comb.and %412, %405 : i1
    %414 = comb.or %io_retire, %391, %reg_singleStepped : i1
    %415 = comb.and %389, %414 : i1
    %416 = comb.xor bin %reg_singleStepped, %true : i1
    %417 = comb.xor bin %io_retire, %true : i1
    %418 = comb.or bin %416, %417, %reset : i1
    %419 = comb.xor bin %418, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %841 = comb.and bin %STOP_COND_, %403 : i1
        sv.if %841 {
          sv.fatal 1
        }
        %842 = comb.and bin %STOP_COND_, %false : i1
        sv.if %842 {
          sv.fatal 1
        }
        %843 = comb.and bin %STOP_COND_, %419 : i1
        sv.if %843 {
          sv.fatal 1
        }
      }
    }
    %420 = comb.extract %io_pc from 1 : (i34) -> i33
    %421 = comb.concat %420, %false {sv.namehint = "epc"} : i33, i1
    %422 = comb.and bin %391, %371, %345 : i1
    %423 = comb.or %422, %reg_debug : i1
    %424 = comb.mux bin %422, %421, %reg_dpc : i34
    %425 = comb.mux bin %368, %c-2_i2, %c1_i2 {sv.namehint = "_reg_dcsr_cause_T"} : i2
    %426 = comb.mux bin %366, %c-1_i2, %425 {sv.namehint = "_reg_dcsr_cause_T_1"} : i2
    %427 = comb.concat %false, %426 : i1, i2
    %428 = comb.mux bin %reg_singleStepped, %c-4_i3, %427 {sv.namehint = "_reg_dcsr_cause_T_2"} : i3
    %429 = comb.mux bin %422, %428, %reg_dcsr_cause : i3
    %430 = comb.xor %391, %true : i1
    %431 = comb.or %430, %371 : i1
    %432 = comb.mux bin %431, %reg_mepc, %421 : i34
    %433 = comb.xor %391, %true : i1
    %434 = comb.or %433, %371 : i1
    %435 = comb.mux bin %434, %reg_mcause, %362 : i64
    %436 = comb.xor %391, %true : i1
    %437 = comb.or %436, %371 : i1
    %438 = comb.mux bin %437, %reg_mtval, %io_tval : i34
    %439 = comb.xor %391, %true : i1
    %440 = comb.or %439, %371 : i1
    %441 = comb.mux bin %440, %reg_mstatus_mpie, %reg_mstatus_mie : i1
    %442 = comb.xor %391, %true : i1
    %443 = comb.or %442, %371 : i1
    %444 = comb.xor %391, %true : i1
    %445 = comb.or %444, %371 : i1
    %446 = comb.and %445, %reg_mstatus_mie : i1
    %447 = comb.extract %io_rw_addr from 10 : (i12) -> i1
    %448 = comb.extract %io_rw_addr from 7 : (i12) -> i1
    %449 = comb.and bin %447, %448 : i1
    %450 = comb.and bin %233, %449 : i1
    %451 = comb.xor %450, %true : i1
    %452 = comb.and %451, %423 : i1
    %453 = comb.xor %150, %true : i1
    %454 = comb.concat %453, %true {sv.namehint = "_io_evec_T_7"} : i1, i1
    %455 = comb.or bin %167, %454 : i2
    %456 = comb.concat %166, %455 {sv.namehint = "_io_evec_T_8"} : i32, i2
    %457 = comb.xor bin %456, %c-1_i34 {sv.namehint = "_io_evec_T_9"} : i34
    %458 = comb.xor %233, %true : i1
    %459 = comb.or %458, %449 : i1
    %460 = comb.mux bin %459, %446, %reg_mstatus_mpie : i1
    %461 = comb.xor %449, %true : i1
    %462 = comb.and %233, %461 : i1
    %463 = comb.or %462, %441 : i1
    %464 = comb.xor %233, %true : i1
    %465 = comb.or %464, %449 : i1
    %466 = comb.and %465, %443 : i1
    %467 = comb.mux bin %466, %reg_mstatus_mpp, %c-1_i2 : i2
    %468 = comb.xor %150, %true : i1
    %469 = comb.concat %468, %true {sv.namehint = "_io_evec_T_17"} : i1, i1
    %470 = comb.or bin %154, %469 : i2
    %471 = comb.concat %153, %470 {sv.namehint = "_io_evec_T_18"} : i32, i2
    %472 = comb.xor bin %471, %c-1_i34 {sv.namehint = "_io_evec_T_19"} : i34
    %473 = comb.mux bin %449, %457, %472 : i34
    %474 = comb.mux bin %233, %473, %386 {sv.namehint = "io_evec"} : i34
    %475 = comb.or bin %reg_wfi, %io_status_cease_r {sv.namehint = "io_csr_stall"} : i1
    %io_status_cease_r = seq.firreg %476 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2358 : ui64, sv.namehint = "io_status_cease"} : i1
    %476 = comb.or %234, %io_status_cease_r : i1
    %477 = comb.mux bin %175, %145, %c0_i64 {sv.namehint = "_io_rw_rdata_T_1"} : i64
    %478 = comb.mux bin %176, %148, %c0_i64 {sv.namehint = "_io_rw_rdata_T_2"} : i64
    %479 = comb.mux bin %177, %reg_misa, %c0_i64 {sv.namehint = "_io_rw_rdata_T_4"} : i64
    %480 = comb.mux bin %178, %138, %c0_i64 {sv.namehint = "_io_rw_rdata_T_5"} : i64
    %481 = comb.mux bin %179, %144, %c0_i64 {sv.namehint = "_io_rw_rdata_T_6"} : i64
    %482 = comb.mux bin %180, %26, %c0_i16 {sv.namehint = "_io_rw_rdata_T_7"} : i16
    %483 = comb.mux bin %181, %reg_mie, %c0_i64 {sv.namehint = "_io_rw_rdata_T_8"} : i64
    %484 = comb.mux bin %182, %reg_mscratch, %c0_i64 {sv.namehint = "_io_rw_rdata_T_9"} : i64
    %485 = comb.mux bin %183, %160, %c0_i64 {sv.namehint = "_io_rw_rdata_T_10"} : i64
    %486 = comb.mux bin %184, %163, %c0_i64 {sv.namehint = "_io_rw_rdata_T_11"} : i64
    %487 = comb.mux bin %185, %reg_mcause, %c0_i64 {sv.namehint = "_io_rw_rdata_T_12"} : i64
    %488 = comb.mux bin %186, %164, %c0_i32 {sv.namehint = "_io_rw_rdata_T_14"} : i32
    %489 = comb.mux bin %187, %173, %c0_i64 {sv.namehint = "_io_rw_rdata_T_15"} : i64
    %490 = comb.mux bin %188, %reg_dscratch, %c0_i64 {sv.namehint = "_io_rw_rdata_T_16"} : i64
    %491 = comb.mux bin %189, %reg_mcountinhibit, %c0_i3 {sv.namehint = "_io_rw_rdata_T_17"} : i3
    %492 = comb.mux bin %190, %25, %c0_i64 {sv.namehint = "_io_rw_rdata_T_18"} : i64
    %493 = comb.mux bin %191, %13, %c0_i64 {sv.namehint = "_io_rw_rdata_T_19"} : i64
    %494 = comb.mux bin %192, %174, %c0_i64 {sv.namehint = "_io_rw_rdata_T_78"} : i64
    %495 = comb.mux bin %193, %reg_pmp_0_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_80"} : i30
    %496 = comb.mux bin %194, %reg_pmp_1_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_81"} : i30
    %497 = comb.mux bin %195, %reg_pmp_2_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_82"} : i30
    %498 = comb.mux bin %196, %reg_pmp_3_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_83"} : i30
    %499 = comb.mux bin %197, %reg_pmp_4_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_84"} : i30
    %500 = comb.mux bin %198, %reg_pmp_5_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_85"} : i30
    %501 = comb.mux bin %199, %reg_pmp_6_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_86"} : i30
    %502 = comb.mux bin %200, %reg_pmp_7_addr, %c0_i30 {sv.namehint = "_io_rw_rdata_T_87"} : i30
    %503 = comb.mux bin %201, %reg_custom_0, %c0_i64 {sv.namehint = "_io_rw_rdata_T_96"} : i64
    %504 = comb.mux bin %203, %c538447876_i64, %c0_i64 {sv.namehint = "_io_rw_rdata_T_99"} : i64
    %505 = comb.or bin %477, %478, %479, %480, %481 {sv.namehint = "_io_rw_rdata_T_105"} : i64
    %506 = comb.extract %505 from 16 : (i64) -> i48
    %507 = comb.extract %505 from 0 : (i64) -> i16
    %508 = comb.or bin %507, %482 : i16
    %509 = comb.concat %506, %508 {sv.namehint = "_io_rw_rdata_T_106"} : i48, i16
    %510 = comb.or bin %509, %483, %484, %485, %486, %487 {sv.namehint = "_io_rw_rdata_T_111"} : i64
    %511 = comb.extract %510 from 32 : (i64) -> i32
    %512 = comb.extract %510 from 0 : (i64) -> i32
    %513 = comb.or bin %512, %488 : i32
    %514 = comb.concat %511, %513 {sv.namehint = "_io_rw_rdata_T_113"} : i32, i32
    %515 = comb.or bin %514, %489, %490 {sv.namehint = "_io_rw_rdata_T_115"} : i64
    %516 = comb.extract %515 from 3 : (i64) -> i61
    %517 = comb.extract %515 from 0 : (i64) -> i3
    %518 = comb.or bin %517, %491 : i3
    %519 = comb.concat %516, %518 {sv.namehint = "_io_rw_rdata_T_116"} : i61, i3
    %520 = comb.or bin %519, %492, %493, %494 {sv.namehint = "_io_rw_rdata_T_178"} : i64
    %521 = comb.extract %520 from 30 : (i64) -> i34
    %522 = comb.extract %520 from 0 : (i64) -> i30
    %523 = comb.or bin %522, %495, %496, %497, %498, %499, %500, %501, %502 : i30
    %524 = comb.extract %523 from 1 : (i30) -> i29
    %525 = comb.extract %523 from 0 : (i30) -> i1
    %526 = comb.or %525, %202 : i1
    %527 = comb.concat %521, %524, %526 : i34, i29, i1
    %528 = comb.or %503, %504, %527 {sv.namehint = "_io_rw_rdata_T_198"} : i64
    %529 = comb.icmp bin eq %io_rw_cmd, %c-2_i3 {sv.namehint = "_csr_wen_T"} : i3
    %530 = comb.icmp bin eq %io_rw_cmd, %c-1_i3 {sv.namehint = "_csr_wen_T_1"} : i3
    %531 = comb.icmp bin eq %io_rw_cmd, %c-3_i3 {sv.namehint = "_csr_wen_T_2"} : i3
    %532 = comb.or bin %529, %530, %531 {sv.namehint = "csr_wen"} : i1
    %533 = comb.extract %211 from 3 {sv.namehint = "new_mstatus_mie"} : (i64) -> i1
    %534 = comb.extract %211 from 7 {sv.namehint = "new_mstatus_mpie"} : (i64) -> i1
    %535 = comb.and bin %532, %178 : i1
    %536 = comb.mux bin %535, %533, %460 : i1
    %537 = comb.mux bin %535, %534, %463 : i1
    %538 = comb.extract %206 from 5 : (i64) -> i1
    %539 = comb.extract %210 from 5 : (i64) -> i1
    %540 = comb.and bin %538, %539 {sv.namehint = "f"} : i1
    %541 = comb.extract %io_pc from 1 : (i34) -> i1
    %542 = comb.xor bin %541, %true : i1
    %543 = comb.extract %206 from 2 : (i64) -> i1
    %544 = comb.extract %210 from 2 : (i64) -> i1
    %545 = comb.and bin %543, %544 : i1
    %546 = comb.or bin %542, %545 : i1
    %547 = comb.xor bin %211, %c-1_i64 {sv.namehint = "_reg_misa_T"} : i64
    %548 = comb.xor bin %540, %true {sv.namehint = "_reg_misa_T_1"} : i1
    %549 = comb.concat %548, %c0_i3 {sv.namehint = "_reg_misa_T_2"} : i1, i3
    %550 = comb.extract %547 from 4 : (i64) -> i60
    %551 = comb.extract %547 from 0 : (i64) -> i4
    %552 = comb.or bin %551, %549 : i4
    %553 = comb.concat %550, %552 {sv.namehint = "_reg_misa_T_3"} : i60, i4
    %554 = comb.xor bin %553, %c-1_i64 {sv.namehint = "_reg_misa_T_4"} : i64
    %555 = comb.and bin %554, %c4101_i64 {sv.namehint = "_reg_misa_T_5"} : i64
    %556 = comb.and bin %reg_misa, %c-4102_i64 {sv.namehint = "_reg_misa_T_7"} : i64
    %557 = comb.or bin %555, %556 {sv.namehint = "_reg_misa_T_8"} : i64
    %558 = comb.and bin %532, %177, %546 : i1
    %559 = comb.mux bin %558, %557, %reg_misa : i64
    %560 = comb.extract %206 from 0 : (i64) -> i16
    %561 = comb.extract %210 from 0 : (i64) -> i16
    %562 = comb.and bin %560, %561, %c2184_i16 : i16
    %563 = comb.concat %c0_i48, %562 : i48, i16
    %564 = comb.and bin %532, %181 : i1
    %565 = comb.mux bin %564, %563, %reg_mie : i64
    %566 = comb.extract %211 from 1 : (i64) -> i33
    %567 = comb.concat %566, %false : i33, i1
    %568 = comb.and bin %532, %183 : i1
    %569 = comb.mux bin %568, %567, %432 : i34
    %570 = comb.and bin %532, %182 : i1
    %571 = comb.mux bin %570, %211, %reg_mscratch : i64
    %572 = comb.extract %206 from 0 : (i64) -> i32
    %573 = comb.extract %210 from 0 : (i64) -> i32
    %574 = comb.and bin %572, %573 {sv.namehint = "_new_dcsr_WIRE"} : i32
    %575 = comb.and bin %532, %179 : i1
    %576 = comb.mux bin %575, %574, %reg_mtvec : i32
    %577 = comb.and bin %211, %c-9223372036854775793_i64 {sv.namehint = "_reg_mcause_T"} : i64
    %578 = comb.and bin %532, %185 : i1
    %579 = comb.mux bin %578, %577, %435 : i64
    %580 = comb.extract %206 from 0 : (i64) -> i34
    %581 = comb.extract %210 from 0 : (i64) -> i34
    %582 = comb.and bin %580, %581 {sv.namehint = "_lo_T_1"} : i34
    %583 = comb.and bin %532, %184 : i1
    %584 = comb.mux bin %583, %582, %438 : i34
    %585 = comb.extract %206 from 0 : (i64) -> i3
    %586 = comb.extract %210 from 0 : (i64) -> i3
    %587 = comb.and bin %585, %586, %c-3_i3 : i3
    %588 = comb.and bin %532, %189 : i1
    %589 = comb.mux bin %588, %587, %reg_mcountinhibit : i3
    %590 = comb.extract %206 from 0 : (i64) -> i6
    %591 = comb.extract %210 from 0 : (i64) -> i6
    %592 = comb.and bin %590, %591 : i6
    %593 = comb.and bin %532, %190 : i1
    %594 = comb.mux bin %593, %592, %20 : i6
    %595 = comb.extract %206 from 6 : (i64) -> i58
    %596 = comb.extract %210 from 6 : (i64) -> i58
    %597 = comb.and bin %595, %596 {sv.namehint = "_hi_T"} : i58
    %598 = comb.mux bin %593, %597, %24 : i58
    %599 = comb.and bin %532, %191 : i1
    %600 = comb.mux bin %599, %592, %8 : i6
    %601 = comb.and bin %595, %596 {sv.namehint = "_hi_T_1"} : i58
    %602 = comb.mux bin %599, %601, %12 : i58
    %603 = comb.extract %574 from 2 {sv.namehint = "new_dcsr_step"} : (i32) -> i1
    %604 = comb.extract %574 from 15 {sv.namehint = "new_dcsr_ebreakm"} : (i32) -> i1
    %605 = comb.and bin %532, %186 : i1
    %606 = comb.mux bin %605, %603, %reg_dcsr_step : i1
    %607 = comb.mux bin %605, %604, %reg_dcsr_ebreakm : i1
    %608 = comb.extract %211 from 1 : (i64) -> i33
    %609 = comb.concat %608, %false : i33, i1
    %610 = comb.and bin %532, %187 : i1
    %611 = comb.mux bin %610, %609, %424 : i34
    %612 = comb.and bin %532, %188 : i1
    %613 = comb.mux bin %612, %211, %reg_dscratch : i64
    %614 = comb.xor bin %reg_bp_0_control_dmode, %true : i1
    %615 = comb.or bin %614, %reg_debug : i1
    %616 = comb.extract %206 from 0 : (i64) -> i33
    %617 = comb.extract %210 from 0 : (i64) -> i33
    %618 = comb.and bin %616, %617 : i33
    %619 = comb.and bin %532, %615, %176 : i1
    %620 = comb.mux bin %619, %618, %reg_bp_0_address : i33
    %621 = comb.extract %211 from 0 {sv.namehint = "_reg_bp_0_control_T"} : (i64) -> i1
    %622 = comb.extract %211 from 1 {sv.namehint = "_reg_bp_0_control_T_1"} : (i64) -> i1
    %623 = comb.extract %211 from 2 {sv.namehint = "_reg_bp_0_control_T_2"} : (i64) -> i1
    %624 = comb.extract %211 from 7 {sv.namehint = "_reg_bp_0_control_T_7"} : (i64) -> i2
    %625 = comb.and bin %532, %615, %175 : i1
    %626 = comb.mux bin %625, %624, %reg_bp_0_control_tmatch : i2
    %627 = comb.mux bin %625, %623, %reg_bp_0_control_x : i1
    %628 = comb.mux bin %625, %622, %reg_bp_0_control_w : i1
    %629 = comb.mux bin %625, %621, %reg_bp_0_control_r : i1
    %630 = comb.concat %reg_bp_0_control_dmode, %c4398046511104_i46, %reg_bp_0_control_action : i1, i46, i1
    %631 = comb.mux %204, %630, %c0_i48 {sv.namehint = "_newBPC_T_2"} : i48
    %632 = comb.extract %io_rw_wdata from 12 : (i64) -> i48
    %633 = comb.or %631, %632 {sv.namehint = "_newBPC_T_3"} : i48
    %634 = comb.icmp bin eq %207, %c-1_i2 {sv.namehint = "_newBPC_T_5"} : i2
    %635 = comb.extract %io_rw_wdata from 12 : (i64) -> i48
    %636 = comb.mux %634, %635, %c0_i48 {sv.namehint = "_newBPC_T_6"} : i48
    %637 = comb.xor %636, %c-1_i48 {sv.namehint = "_newBPC_T_7"} : i48
    %638 = comb.and %633, %637 {sv.namehint = "_newBPC_T_8"} : i48
    %639 = comb.extract %638 from 0 {sv.namehint = "newBPC_action"} : (i48) -> i1
    %640 = comb.extract %638 from 47 {sv.namehint = "newBPC_dmode"} : (i48) -> i1
    %641 = comb.and bin %640, %reg_debug {sv.namehint = "dMode"} : i1
    %642 = comb.mux bin %625, %641, %reg_bp_0_control_dmode : i1
    %643 = comb.and %641, %639 : i1
    %644 = comb.mux bin %625, %643, %reg_bp_0_control_action : i1
    %645 = comb.xor bin %reg_pmp_0_cfg_l, %true : i1
    %646 = comb.extract %206 from 0 : (i64) -> i8
    %647 = comb.extract %210 from 0 : (i64) -> i8
    %648 = comb.and bin %646, %647 {sv.namehint = "_newCfg_WIRE"} : i8
    %649 = comb.extract %648 from 0 {sv.namehint = "newCfg_r"} : (i8) -> i1
    %650 = comb.extract %648 from 1 {sv.namehint = "newCfg_w"} : (i8) -> i1
    %651 = comb.extract %648 from 2 {sv.namehint = "newCfg_x"} : (i8) -> i1
    %652 = comb.extract %648 from 3 {sv.namehint = "newCfg_a"} : (i8) -> i2
    %653 = comb.extract %648 from 7 {sv.namehint = "newCfg_l"} : (i8) -> i1
    %654 = comb.and bin %532, %192, %645 : i1
    %655 = comb.mux bin %654, %653, %reg_pmp_0_cfg_l : i1
    %656 = comb.mux bin %654, %652, %reg_pmp_0_cfg_a : i2
    %657 = comb.mux bin %654, %651, %reg_pmp_0_cfg_x : i1
    %658 = comb.mux bin %654, %649, %reg_pmp_0_cfg_r : i1
    %659 = comb.and bin %650, %649 {sv.namehint = "_reg_pmp_0_cfg_w_T"} : i1
    %660 = comb.mux bin %654, %659, %reg_pmp_0_cfg_w : i1
    %661 = comb.extract %reg_pmp_1_cfg_a from 1 : (i2) -> i1
    %662 = comb.xor bin %661, %true : i1
    %663 = comb.extract %reg_pmp_1_cfg_a from 0 : (i2) -> i1
    %664 = comb.and bin %reg_pmp_1_cfg_l, %662, %663 : i1
    %665 = comb.or bin %reg_pmp_0_cfg_l, %664 : i1
    %666 = comb.xor bin %665, %true : i1
    %667 = comb.extract %206 from 0 : (i64) -> i30
    %668 = comb.extract %210 from 0 : (i64) -> i30
    %669 = comb.and bin %667, %668 : i30
    %670 = comb.and bin %532, %193, %666 : i1
    %671 = comb.mux bin %670, %669, %reg_pmp_0_addr : i30
    %672 = comb.xor bin %reg_pmp_1_cfg_l, %true : i1
    %673 = comb.extract %206 from 8 : (i64) -> i8
    %674 = comb.extract %210 from 8 : (i64) -> i8
    %675 = comb.and bin %673, %674 {sv.namehint = "_newCfg_WIRE_1"} : i8
    %676 = comb.extract %675 from 0 {sv.namehint = "newCfg_1_r"} : (i8) -> i1
    %677 = comb.extract %675 from 1 {sv.namehint = "newCfg_1_w"} : (i8) -> i1
    %678 = comb.extract %675 from 2 {sv.namehint = "newCfg_1_x"} : (i8) -> i1
    %679 = comb.extract %675 from 3 {sv.namehint = "newCfg_1_a"} : (i8) -> i2
    %680 = comb.extract %675 from 7 {sv.namehint = "newCfg_1_l"} : (i8) -> i1
    %681 = comb.and bin %532, %192, %672 : i1
    %682 = comb.mux bin %681, %680, %reg_pmp_1_cfg_l : i1
    %683 = comb.mux bin %681, %679, %reg_pmp_1_cfg_a : i2
    %684 = comb.mux bin %681, %678, %reg_pmp_1_cfg_x : i1
    %685 = comb.mux bin %681, %676, %reg_pmp_1_cfg_r : i1
    %686 = comb.and bin %677, %676 {sv.namehint = "_reg_pmp_1_cfg_w_T"} : i1
    %687 = comb.mux bin %681, %686, %reg_pmp_1_cfg_w : i1
    %688 = comb.extract %reg_pmp_2_cfg_a from 1 : (i2) -> i1
    %689 = comb.xor bin %688, %true : i1
    %690 = comb.extract %reg_pmp_2_cfg_a from 0 : (i2) -> i1
    %691 = comb.and bin %reg_pmp_2_cfg_l, %689, %690 : i1
    %692 = comb.or bin %reg_pmp_1_cfg_l, %691 : i1
    %693 = comb.xor bin %692, %true : i1
    %694 = comb.and bin %532, %194, %693 : i1
    %695 = comb.mux bin %694, %669, %reg_pmp_1_addr : i30
    %696 = comb.xor bin %reg_pmp_2_cfg_l, %true : i1
    %697 = comb.extract %206 from 16 : (i64) -> i8
    %698 = comb.extract %210 from 16 : (i64) -> i8
    %699 = comb.and bin %697, %698 {sv.namehint = "_newCfg_WIRE_2"} : i8
    %700 = comb.extract %699 from 0 {sv.namehint = "newCfg_2_r"} : (i8) -> i1
    %701 = comb.extract %699 from 1 {sv.namehint = "newCfg_2_w"} : (i8) -> i1
    %702 = comb.extract %699 from 2 {sv.namehint = "newCfg_2_x"} : (i8) -> i1
    %703 = comb.extract %699 from 3 {sv.namehint = "newCfg_2_a"} : (i8) -> i2
    %704 = comb.extract %699 from 7 {sv.namehint = "newCfg_2_l"} : (i8) -> i1
    %705 = comb.and bin %532, %192, %696 : i1
    %706 = comb.mux bin %705, %704, %reg_pmp_2_cfg_l : i1
    %707 = comb.mux bin %705, %703, %reg_pmp_2_cfg_a : i2
    %708 = comb.mux bin %705, %702, %reg_pmp_2_cfg_x : i1
    %709 = comb.mux bin %705, %700, %reg_pmp_2_cfg_r : i1
    %710 = comb.and bin %701, %700 {sv.namehint = "_reg_pmp_2_cfg_w_T"} : i1
    %711 = comb.mux bin %705, %710, %reg_pmp_2_cfg_w : i1
    %712 = comb.extract %reg_pmp_3_cfg_a from 1 : (i2) -> i1
    %713 = comb.xor bin %712, %true : i1
    %714 = comb.extract %reg_pmp_3_cfg_a from 0 : (i2) -> i1
    %715 = comb.and bin %reg_pmp_3_cfg_l, %713, %714 : i1
    %716 = comb.or bin %reg_pmp_2_cfg_l, %715 : i1
    %717 = comb.xor bin %716, %true : i1
    %718 = comb.and bin %532, %195, %717 : i1
    %719 = comb.mux bin %718, %669, %reg_pmp_2_addr : i30
    %720 = comb.xor bin %reg_pmp_3_cfg_l, %true : i1
    %721 = comb.extract %206 from 24 : (i64) -> i8
    %722 = comb.extract %210 from 24 : (i64) -> i8
    %723 = comb.and bin %721, %722 {sv.namehint = "_newCfg_WIRE_3"} : i8
    %724 = comb.extract %723 from 0 {sv.namehint = "newCfg_3_r"} : (i8) -> i1
    %725 = comb.extract %723 from 1 {sv.namehint = "newCfg_3_w"} : (i8) -> i1
    %726 = comb.extract %723 from 2 {sv.namehint = "newCfg_3_x"} : (i8) -> i1
    %727 = comb.extract %723 from 3 {sv.namehint = "newCfg_3_a"} : (i8) -> i2
    %728 = comb.extract %723 from 7 {sv.namehint = "newCfg_3_l"} : (i8) -> i1
    %729 = comb.and bin %532, %192, %720 : i1
    %730 = comb.mux bin %729, %728, %reg_pmp_3_cfg_l : i1
    %731 = comb.mux bin %729, %727, %reg_pmp_3_cfg_a : i2
    %732 = comb.mux bin %729, %726, %reg_pmp_3_cfg_x : i1
    %733 = comb.mux bin %729, %724, %reg_pmp_3_cfg_r : i1
    %734 = comb.and bin %725, %724 {sv.namehint = "_reg_pmp_3_cfg_w_T"} : i1
    %735 = comb.mux bin %729, %734, %reg_pmp_3_cfg_w : i1
    %736 = comb.extract %reg_pmp_4_cfg_a from 1 : (i2) -> i1
    %737 = comb.xor bin %736, %true : i1
    %738 = comb.extract %reg_pmp_4_cfg_a from 0 : (i2) -> i1
    %739 = comb.and bin %reg_pmp_4_cfg_l, %737, %738 : i1
    %740 = comb.or bin %reg_pmp_3_cfg_l, %739 : i1
    %741 = comb.xor bin %740, %true : i1
    %742 = comb.and bin %532, %196, %741 : i1
    %743 = comb.mux bin %742, %669, %reg_pmp_3_addr : i30
    %744 = comb.xor bin %reg_pmp_4_cfg_l, %true : i1
    %745 = comb.extract %206 from 32 : (i64) -> i8
    %746 = comb.extract %210 from 32 : (i64) -> i8
    %747 = comb.and bin %745, %746 {sv.namehint = "_newCfg_WIRE_4"} : i8
    %748 = comb.extract %747 from 0 {sv.namehint = "newCfg_4_r"} : (i8) -> i1
    %749 = comb.extract %747 from 1 {sv.namehint = "newCfg_4_w"} : (i8) -> i1
    %750 = comb.extract %747 from 2 {sv.namehint = "newCfg_4_x"} : (i8) -> i1
    %751 = comb.extract %747 from 3 {sv.namehint = "newCfg_4_a"} : (i8) -> i2
    %752 = comb.extract %747 from 7 {sv.namehint = "newCfg_4_l"} : (i8) -> i1
    %753 = comb.and bin %532, %192, %744 : i1
    %754 = comb.mux bin %753, %752, %reg_pmp_4_cfg_l : i1
    %755 = comb.mux bin %753, %751, %reg_pmp_4_cfg_a : i2
    %756 = comb.mux bin %753, %750, %reg_pmp_4_cfg_x : i1
    %757 = comb.mux bin %753, %748, %reg_pmp_4_cfg_r : i1
    %758 = comb.and bin %749, %748 {sv.namehint = "_reg_pmp_4_cfg_w_T"} : i1
    %759 = comb.mux bin %753, %758, %reg_pmp_4_cfg_w : i1
    %760 = comb.extract %reg_pmp_5_cfg_a from 1 : (i2) -> i1
    %761 = comb.xor bin %760, %true : i1
    %762 = comb.extract %reg_pmp_5_cfg_a from 0 : (i2) -> i1
    %763 = comb.and bin %reg_pmp_5_cfg_l, %761, %762 : i1
    %764 = comb.or bin %reg_pmp_4_cfg_l, %763 : i1
    %765 = comb.xor bin %764, %true : i1
    %766 = comb.and bin %532, %197, %765 : i1
    %767 = comb.mux bin %766, %669, %reg_pmp_4_addr : i30
    %768 = comb.xor bin %reg_pmp_5_cfg_l, %true : i1
    %769 = comb.extract %206 from 40 : (i64) -> i8
    %770 = comb.extract %210 from 40 : (i64) -> i8
    %771 = comb.and bin %769, %770 {sv.namehint = "_newCfg_WIRE_5"} : i8
    %772 = comb.extract %771 from 0 {sv.namehint = "newCfg_5_r"} : (i8) -> i1
    %773 = comb.extract %771 from 1 {sv.namehint = "newCfg_5_w"} : (i8) -> i1
    %774 = comb.extract %771 from 2 {sv.namehint = "newCfg_5_x"} : (i8) -> i1
    %775 = comb.extract %771 from 3 {sv.namehint = "newCfg_5_a"} : (i8) -> i2
    %776 = comb.extract %771 from 7 {sv.namehint = "newCfg_5_l"} : (i8) -> i1
    %777 = comb.and bin %532, %192, %768 : i1
    %778 = comb.mux bin %777, %776, %reg_pmp_5_cfg_l : i1
    %779 = comb.mux bin %777, %775, %reg_pmp_5_cfg_a : i2
    %780 = comb.mux bin %777, %774, %reg_pmp_5_cfg_x : i1
    %781 = comb.mux bin %777, %772, %reg_pmp_5_cfg_r : i1
    %782 = comb.and bin %773, %772 {sv.namehint = "_reg_pmp_5_cfg_w_T"} : i1
    %783 = comb.mux bin %777, %782, %reg_pmp_5_cfg_w : i1
    %784 = comb.extract %reg_pmp_6_cfg_a from 1 : (i2) -> i1
    %785 = comb.xor bin %784, %true : i1
    %786 = comb.extract %reg_pmp_6_cfg_a from 0 : (i2) -> i1
    %787 = comb.and bin %reg_pmp_6_cfg_l, %785, %786 : i1
    %788 = comb.or bin %reg_pmp_5_cfg_l, %787 : i1
    %789 = comb.xor bin %788, %true : i1
    %790 = comb.and bin %532, %198, %789 : i1
    %791 = comb.mux bin %790, %669, %reg_pmp_5_addr : i30
    %792 = comb.xor bin %reg_pmp_6_cfg_l, %true : i1
    %793 = comb.extract %206 from 48 : (i64) -> i8
    %794 = comb.extract %210 from 48 : (i64) -> i8
    %795 = comb.and bin %793, %794 {sv.namehint = "_newCfg_WIRE_6"} : i8
    %796 = comb.extract %795 from 0 {sv.namehint = "newCfg_6_r"} : (i8) -> i1
    %797 = comb.extract %795 from 1 {sv.namehint = "newCfg_6_w"} : (i8) -> i1
    %798 = comb.extract %795 from 2 {sv.namehint = "newCfg_6_x"} : (i8) -> i1
    %799 = comb.extract %795 from 3 {sv.namehint = "newCfg_6_a"} : (i8) -> i2
    %800 = comb.extract %795 from 7 {sv.namehint = "newCfg_6_l"} : (i8) -> i1
    %801 = comb.and bin %532, %192, %792 : i1
    %802 = comb.mux bin %801, %800, %reg_pmp_6_cfg_l : i1
    %803 = comb.mux bin %801, %799, %reg_pmp_6_cfg_a : i2
    %804 = comb.mux bin %801, %798, %reg_pmp_6_cfg_x : i1
    %805 = comb.mux bin %801, %796, %reg_pmp_6_cfg_r : i1
    %806 = comb.and bin %797, %796 {sv.namehint = "_reg_pmp_6_cfg_w_T"} : i1
    %807 = comb.mux bin %801, %806, %reg_pmp_6_cfg_w : i1
    %808 = comb.extract %reg_pmp_7_cfg_a from 1 : (i2) -> i1
    %809 = comb.xor bin %808, %true : i1
    %810 = comb.extract %reg_pmp_7_cfg_a from 0 : (i2) -> i1
    %811 = comb.and bin %reg_pmp_7_cfg_l, %809, %810 : i1
    %812 = comb.or bin %reg_pmp_6_cfg_l, %811 : i1
    %813 = comb.xor bin %812, %true : i1
    %814 = comb.and bin %532, %199, %813 : i1
    %815 = comb.mux bin %814, %669, %reg_pmp_6_addr : i30
    %816 = comb.xor bin %reg_pmp_7_cfg_l, %true : i1
    %817 = comb.extract %206 from 56 : (i64) -> i8
    %818 = comb.extract %210 from 56 : (i64) -> i8
    %819 = comb.and bin %817, %818 {sv.namehint = "_newCfg_T_49"} : i8
    %820 = comb.extract %819 from 0 {sv.namehint = "newCfg_7_r"} : (i8) -> i1
    %821 = comb.extract %819 from 1 {sv.namehint = "newCfg_7_w"} : (i8) -> i1
    %822 = comb.extract %819 from 2 {sv.namehint = "newCfg_7_x"} : (i8) -> i1
    %823 = comb.extract %819 from 3 {sv.namehint = "newCfg_7_a"} : (i8) -> i2
    %824 = comb.extract %819 from 7 {sv.namehint = "newCfg_7_l"} : (i8) -> i1
    %825 = comb.and bin %532, %192, %816 : i1
    %826 = comb.mux bin %825, %824, %reg_pmp_7_cfg_l : i1
    %827 = comb.mux bin %825, %823, %reg_pmp_7_cfg_a : i2
    %828 = comb.mux bin %825, %822, %reg_pmp_7_cfg_x : i1
    %829 = comb.mux bin %825, %820, %reg_pmp_7_cfg_r : i1
    %830 = comb.and bin %821, %820 {sv.namehint = "_reg_pmp_7_cfg_w_T"} : i1
    %831 = comb.mux bin %825, %830, %reg_pmp_7_cfg_w : i1
    %832 = comb.or bin %reg_pmp_7_cfg_l, %811 : i1
    %833 = comb.xor bin %832, %true : i1
    %834 = comb.and bin %532, %200, %833 : i1
    %835 = comb.mux bin %834, %669, %reg_pmp_7_addr : i30
    %836 = comb.and bin %211, %c520_i64 {sv.namehint = "_reg_custom_0_T"} : i64
    %837 = comb.and bin %reg_custom_0, %c-521_i64 {sv.namehint = "_reg_custom_0_T_2"} : i64
    %838 = comb.or bin %836, %837 {sv.namehint = "_reg_custom_0_T_3"} : i64
    %839 = comb.and bin %532, %201 : i1
    %840 = comb.mux bin %839, %838, %reg_custom_0 : i64
    hw.output %528, %347, %349, %357, %360, %475, %388, %389, %reg_debug, %reg_wfi, %390, %io_status_dprv_REG, %474, %25, %65, %59, %reg_bp_0_control_action, %reg_bp_0_control_tmatch, %reg_bp_0_control_x, %reg_bp_0_control_w, %reg_bp_0_control_r, %reg_bp_0_address, %reg_pmp_0_cfg_l, %reg_pmp_0_cfg_a, %reg_pmp_0_cfg_x, %reg_pmp_0_cfg_w, %reg_pmp_0_cfg_r, %reg_pmp_0_addr, %74, %reg_pmp_1_cfg_l, %reg_pmp_1_cfg_a, %reg_pmp_1_cfg_x, %reg_pmp_1_cfg_w, %reg_pmp_1_cfg_r, %reg_pmp_1_addr, %83, %reg_pmp_2_cfg_l, %reg_pmp_2_cfg_a, %reg_pmp_2_cfg_x, %reg_pmp_2_cfg_w, %reg_pmp_2_cfg_r, %reg_pmp_2_addr, %92, %reg_pmp_3_cfg_l, %reg_pmp_3_cfg_a, %reg_pmp_3_cfg_x, %reg_pmp_3_cfg_w, %reg_pmp_3_cfg_r, %reg_pmp_3_addr, %101, %reg_pmp_4_cfg_l, %reg_pmp_4_cfg_a, %reg_pmp_4_cfg_x, %reg_pmp_4_cfg_w, %reg_pmp_4_cfg_r, %reg_pmp_4_addr, %110, %reg_pmp_5_cfg_l, %reg_pmp_5_cfg_a, %reg_pmp_5_cfg_x, %reg_pmp_5_cfg_w, %reg_pmp_5_cfg_r, %reg_pmp_5_addr, %119, %reg_pmp_6_cfg_l, %reg_pmp_6_cfg_a, %reg_pmp_6_cfg_x, %reg_pmp_6_cfg_w, %reg_pmp_6_cfg_r, %reg_pmp_6_addr, %128, %reg_pmp_7_cfg_l, %reg_pmp_7_cfg_a, %reg_pmp_7_cfg_x, %reg_pmp_7_cfg_w, %reg_pmp_7_cfg_r, %reg_pmp_7_addr, %137, %1, %reg_custom_0 : i64, i1, i1, i1, i1, i1, i1, i1, i1, i1, i32, i2, i34, i64, i1, i64, i1, i2, i1, i1, i1, i33, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i64
  }
  hw.module private @BreakpointUnit(in %io_status_debug : i1, in %io_bp_0_control_action : i1, in %io_bp_0_control_tmatch : i2, in %io_bp_0_control_x : i1, in %io_bp_0_control_w : i1, in %io_bp_0_control_r : i1, in %io_bp_0_address : i33, in %io_pc : i33, in %io_ea : i33, out io_xcpt_if : i1, out io_xcpt_ld : i1, out io_xcpt_st : i1, out io_debug_if : i1, out io_debug_ld : i1, out io_debug_st : i1) {
    %c-1_i33 = hw.constant -1 : i33
    %true = hw.constant true
    %0 = comb.xor bin %io_status_debug, %true {sv.namehint = "_en_T"} : i1
    %1 = comb.extract %io_bp_0_control_tmatch from 1 {sv.namehint = "_x_T_1"} : (i2) -> i1
    %2 = comb.icmp bin uge %io_ea, %io_bp_0_address {sv.namehint = "_w_T_2"} : i33
    %3 = comb.extract %io_bp_0_control_tmatch from 0 {sv.namehint = "r_lo_lo"} : (i2) -> i1
    %4 = comb.xor bin %2, %3 {sv.namehint = "_r_T_4"} : i1
    %5 = comb.xor bin %io_ea, %c-1_i33 {sv.namehint = "_w_T_5"} : i33
    %6 = comb.extract %io_bp_0_address from 0 {sv.namehint = "_x_T_12"} : (i33) -> i1
    %7 = comb.and bin %3, %6 {sv.namehint = "r_lo_hi"} : i1
    %8 = comb.extract %io_bp_0_address from 1 {sv.namehint = "_x_T_13"} : (i33) -> i1
    %9 = comb.and bin %7, %8 {sv.namehint = "r_hi_lo"} : i1
    %10 = comb.extract %io_bp_0_address from 2 {sv.namehint = "_x_T_14"} : (i33) -> i1
    %11 = comb.and bin %9, %10 {sv.namehint = "r_hi_hi"} : i1
    %12 = comb.concat %11, %9, %7, %3 {sv.namehint = "_r_T_9"} : i1, i1, i1, i1
    %13 = comb.extract %5 from 4 : (i33) -> i29
    %14 = comb.extract %5 from 0 : (i33) -> i4
    %15 = comb.or bin %14, %12 : i4
    %16 = comb.concat %13, %15 {sv.namehint = "_r_T_10"} : i29, i4
    %17 = comb.xor bin %io_bp_0_address, %c-1_i33 {sv.namehint = "_x_T_11"} : i33
    %18 = comb.and bin %3, %6 {sv.namehint = "r_lo_hi_1"} : i1
    %19 = comb.and bin %18, %8 {sv.namehint = "r_hi_lo_1"} : i1
    %20 = comb.and bin %19, %10 {sv.namehint = "r_hi_hi_1"} : i1
    %21 = comb.concat %20, %19, %18, %3 {sv.namehint = "_r_T_15"} : i1, i1, i1, i1
    %22 = comb.extract %17 from 4 : (i33) -> i29
    %23 = comb.extract %17 from 0 : (i33) -> i4
    %24 = comb.or bin %23, %21 : i4
    %25 = comb.concat %22, %24 {sv.namehint = "_r_T_16"} : i29, i4
    %26 = comb.icmp bin eq %16, %25 {sv.namehint = "_r_T_17"} : i33
    %27 = comb.mux bin %1, %4, %26 {sv.namehint = "_r_T_18"} : i1
    %28 = comb.and bin %0, %io_bp_0_control_r, %27 {sv.namehint = "r"} : i1
    %29 = comb.xor bin %2, %3 {sv.namehint = "_w_T_4"} : i1
    %30 = comb.and bin %3, %6 {sv.namehint = "w_lo_hi"} : i1
    %31 = comb.and bin %30, %8 {sv.namehint = "w_hi_lo"} : i1
    %32 = comb.and bin %31, %10 {sv.namehint = "w_hi_hi"} : i1
    %33 = comb.concat %32, %31, %30, %3 {sv.namehint = "_w_T_9"} : i1, i1, i1, i1
    %34 = comb.or bin %14, %33 : i4
    %35 = comb.concat %13, %34 {sv.namehint = "_w_T_10"} : i29, i4
    %36 = comb.and bin %3, %6 {sv.namehint = "w_lo_hi_1"} : i1
    %37 = comb.and bin %36, %8 {sv.namehint = "w_hi_lo_1"} : i1
    %38 = comb.and bin %37, %10 {sv.namehint = "w_hi_hi_1"} : i1
    %39 = comb.concat %38, %37, %36, %3 {sv.namehint = "_w_T_15"} : i1, i1, i1, i1
    %40 = comb.or bin %23, %39 : i4
    %41 = comb.concat %22, %40 {sv.namehint = "_w_T_16"} : i29, i4
    %42 = comb.icmp bin eq %35, %41 {sv.namehint = "_w_T_17"} : i33
    %43 = comb.mux bin %1, %29, %42 {sv.namehint = "_w_T_18"} : i1
    %44 = comb.and bin %0, %io_bp_0_control_w, %43 {sv.namehint = "w"} : i1
    %45 = comb.icmp bin uge %io_pc, %io_bp_0_address {sv.namehint = "_x_T_2"} : i33
    %46 = comb.xor bin %45, %3 {sv.namehint = "_x_T_4"} : i1
    %47 = comb.xor bin %io_pc, %c-1_i33 {sv.namehint = "_x_T_5"} : i33
    %48 = comb.and bin %3, %6 {sv.namehint = "x_lo_hi"} : i1
    %49 = comb.and bin %48, %8 {sv.namehint = "x_hi_lo"} : i1
    %50 = comb.and bin %49, %10 {sv.namehint = "x_hi_hi"} : i1
    %51 = comb.concat %50, %49, %48, %3 {sv.namehint = "_x_T_9"} : i1, i1, i1, i1
    %52 = comb.extract %47 from 4 : (i33) -> i29
    %53 = comb.extract %47 from 0 : (i33) -> i4
    %54 = comb.or bin %53, %51 : i4
    %55 = comb.concat %52, %54 {sv.namehint = "_x_T_10"} : i29, i4
    %56 = comb.and bin %3, %6 {sv.namehint = "x_lo_hi_1"} : i1
    %57 = comb.and bin %56, %8 {sv.namehint = "x_hi_lo_1"} : i1
    %58 = comb.and bin %57, %10 {sv.namehint = "x_hi_hi_1"} : i1
    %59 = comb.concat %58, %57, %56, %3 {sv.namehint = "_x_T_15"} : i1, i1, i1, i1
    %60 = comb.or bin %23, %59 : i4
    %61 = comb.concat %22, %60 {sv.namehint = "_x_T_16"} : i29, i4
    %62 = comb.icmp bin eq %55, %61 {sv.namehint = "_x_T_17"} : i33
    %63 = comb.mux bin %1, %46, %62 {sv.namehint = "_x_T_18"} : i1
    %64 = comb.and bin %0, %io_bp_0_control_x, %63 {sv.namehint = "x"} : i1
    %65 = comb.xor bin %io_bp_0_control_action, %true {sv.namehint = "_io_xcpt_ld_T"} : i1
    %66 = comb.and %28, %65 {sv.namehint = "io_xcpt_ld"} : i1
    %67 = comb.and %28, %io_bp_0_control_action {sv.namehint = "io_debug_ld"} : i1
    %68 = comb.xor bin %io_bp_0_control_action, %true {sv.namehint = "_io_xcpt_st_T"} : i1
    %69 = comb.and %44, %68 {sv.namehint = "io_xcpt_st"} : i1
    %70 = comb.and %44, %io_bp_0_control_action {sv.namehint = "io_debug_st"} : i1
    %71 = comb.xor bin %io_bp_0_control_action, %true {sv.namehint = "_io_xcpt_if_T"} : i1
    %72 = comb.and %64, %71 {sv.namehint = "io_xcpt_if"} : i1
    %73 = comb.and %64, %io_bp_0_control_action {sv.namehint = "io_debug_if"} : i1
    hw.output %72, %66, %69, %73, %67, %70 : i1, i1, i1, i1, i1, i1
  }
  hw.module private @ALU(in %io_dw : i1, in %io_fn : i4, in %io_in2 : i64, in %io_in1 : i64, out io_out : i64, out io_adder_out : i64, out io_cmp_out : i1) {
    %c-750599937895083_i51 = hw.constant -750599937895083 : i51
    %c-54975581389_i38 = hw.constant -54975581389 : i38
    %c-241_i12 = hw.constant -241 : i12
    %c-12009599006321323_i55 = hw.constant -12009599006321323 : i55
    %c0_i2 = hw.constant 0 : i2
    %c-14073748835533_i46 = hw.constant -14073748835533 : i46
    %c-15790321_i28 = hw.constant -15790321 : i28
    %c0_i8 = hw.constant 0 : i8
    %c-65281_i24 = hw.constant -65281 : i24
    %c21845_i16 = hw.constant 21845 : i16
    %c13107_i16 = hw.constant 13107 : i16
    %c3855_i16 = hw.constant 3855 : i16
    %false = hw.constant false
    %c85_i8 = hw.constant 85 : i8
    %c1_i2 = hw.constant 1 : i2
    %c1431655765_i32 = hw.constant 1431655765 : i32
    %c51_i8 = hw.constant 51 : i8
    %c858993459_i32 = hw.constant 858993459 : i32
    %c252645135_i32 = hw.constant 252645135 : i32
    %c16711935_i32 = hw.constant 16711935 : i32
    %c0_i16 = hw.constant 0 : i16
    %c65535_i32 = hw.constant 65535 : i32
    %c7_i4 = hw.constant 7 : i4
    %c6_i4 = hw.constant 6 : i4
    %c4_i4 = hw.constant 4 : i4
    %c1_i4 = hw.constant 1 : i4
    %c5_i4 = hw.constant 5 : i4
    %c0_i63 = hw.constant 0 : i63
    %c0_i59 = hw.constant 0 : i59
    %c0_i4 = hw.constant 0 : i4
    %c-5_i4 = hw.constant -5 : i4
    %c-6_i4 = hw.constant -6 : i4
    %c0_i64 = hw.constant 0 : i64
    %0 = comb.extract %io_fn from 3 {sv.namehint = "_shout_r_T"} : (i4) -> i1
    %1 = comb.replicate %0 : (i1) -> i64
    %2 = comb.xor %1, %io_in2 {sv.namehint = "in2_inv"} : i64
    %3 = comb.xor bin %io_in1, %2 {sv.namehint = "in1_xor_in2"} : i64
    %4 = comb.concat %c0_i63, %0 : i63, i1
    %5 = comb.add %io_in1, %2, %4 {sv.namehint = "_io_adder_out_T_3"} : i64
    %6 = comb.extract %io_in1 from 63 {sv.namehint = "_slt_T_6"} : (i64) -> i1
    %7 = comb.extract %io_in2 from 63 {sv.namehint = "_slt_T_5"} : (i64) -> i1
    %8 = comb.icmp bin eq %6, %7 {sv.namehint = "_slt_T_2"} : i1
    %9 = comb.extract %5 from 63 {sv.namehint = "_slt_T_3"} : (i64) -> i1
    %10 = comb.extract %io_fn from 1 {sv.namehint = "_slt_T_4"} : (i4) -> i1
    %11 = comb.mux bin %10, %7, %6 {sv.namehint = "_slt_T_7"} : i1
    %12 = comb.mux bin %8, %9, %11 {sv.namehint = "slt"} : i1
    %13 = comb.extract %io_fn from 0 {sv.namehint = "_io_cmp_out_T"} : (i4) -> i1
    %14 = comb.icmp bin eq %3, %c0_i64 {sv.namehint = "_io_cmp_out_T_3"} : i64
    %15 = comb.mux bin %0, %12, %14 {sv.namehint = "_io_cmp_out_T_4"} : i1
    %16 = comb.xor bin %13, %15 {sv.namehint = "io_cmp_out"} : i1
    %17 = comb.extract %io_in1 from 31 : (i64) -> i1
    %18 = comb.and bin %0, %17 : i1
    %19 = comb.replicate %18 : (i1) -> i32
    %20 = comb.extract %io_in1 from 32 : (i64) -> i32
    %21 = comb.mux bin %io_dw, %20, %19 {sv.namehint = "hi"} : i32
    %22 = comb.extract %io_in2 from 5 : (i64) -> i1
    %23 = comb.and bin %22, %io_dw {sv.namehint = "hi_1"} : i1
    %24 = comb.extract %io_in2 from 0 {sv.namehint = "lo"} : (i64) -> i5
    %25 = comb.extract %io_in1 from 0 {sv.namehint = "lo_1"} : (i64) -> i32
    %26 = comb.concat %21, %25 {sv.namehint = "shin_r"} : i32, i32
    %27 = comb.icmp bin eq %io_fn, %c5_i4 {sv.namehint = "_shout_T"} : i4
    %28 = comb.icmp bin eq %io_fn, %c-5_i4 {sv.namehint = "_shout_T_1"} : i4
    %29 = comb.or bin %27, %28 {sv.namehint = "_shin_T_2"} : i1
    %30 = comb.extract %io_in1 from 0 : (i64) -> i16
    %31 = comb.and %21, %c65535_i32 : i32
    %32 = comb.extract %io_in1 from 16 : (i64) -> i16
    %33 = comb.concat %32, %c0_i16 : i16, i16
    %34 = comb.or %33, %31 : i32
    %35 = comb.extract %34 from 24 : (i32) -> i8
    %36 = comb.concat %30, %35 : i16, i8
    %37 = comb.and %36, %c-65281_i24 : i24
    %38 = comb.extract %io_in1 from 0 : (i64) -> i8
    %39 = comb.and %34, %c16711935_i32 : i32
    %40 = comb.concat %37, %c0_i8 : i24, i8
    %41 = comb.or %40, %39 : i32
    %42 = comb.extract %41 from 12 : (i32) -> i20
    %43 = comb.concat %38, %42 : i8, i20
    %44 = comb.and %43, %c-15790321_i28 : i28
    %45 = comb.extract %io_in1 from 0 : (i64) -> i4
    %46 = comb.and %41, %c252645135_i32 : i32
    %47 = comb.extract %34 from 8 : (i32) -> i4
    %48 = comb.extract %21 from 16 : (i32) -> i4
    %49 = comb.concat %44, %c0_i4 : i28, i4
    %50 = comb.or %49, %46 : i32
    %51 = comb.extract %41 from 4 : (i32) -> i4
    %52 = comb.extract %34 from 12 : (i32) -> i4
    %53 = comb.concat %52, %48 : i4, i4
    %54 = comb.extract %34 from 14 : (i32) -> i2
    %55 = comb.concat %45, %50, %51, %47, %54 : i4, i32, i4, i4, i2
    %56 = comb.and %55, %c-14073748835533_i46 : i46
    %57 = comb.extract %io_in1 from 0 : (i64) -> i2
    %58 = comb.and %50, %c858993459_i32 : i32
    %59 = comb.extract %41 from 4 : (i32) -> i2
    %60 = comb.extract %34 from 8 : (i32) -> i2
    %61 = comb.and %53, %c51_i8 : i8
    %62 = comb.extract %21 from 20 : (i32) -> i2
    %63 = comb.extract %21 from 24 : (i32) -> i2
    %64 = comb.extract %56 from 14 : (i46) -> i32
    %65 = comb.or %64, %58 : i32
    %66 = comb.extract %50 from 2 : (i32) -> i2
    %67 = comb.extract %56 from 10 : (i46) -> i2
    %68 = comb.or %67, %59 : i2
    %69 = comb.extract %41 from 6 : (i32) -> i2
    %70 = comb.concat %69, %60 : i2, i2
    %71 = comb.extract %56 from 0 : (i46) -> i6
    %72 = comb.concat %71, %c0_i2 : i6, i2
    %73 = comb.or %72, %61 : i8
    %74 = comb.extract %21 from 18 : (i32) -> i2
    %75 = comb.extract %21 from 22 : (i32) -> i2
    %76 = comb.concat %75, %63 : i2, i2
    %77 = comb.extract %21 from 31 : (i32) -> i1
    %78 = comb.extract %21 from 23 : (i32) -> i1
    %79 = comb.concat %57, %65, %66, %68, %69, %60, %73, %74, %62, %78 : i2, i32, i2, i2, i2, i2, i8, i2, i2, i1
    %80 = comb.and %79, %c-12009599006321323_i55 : i55
    %81 = comb.extract %io_in1 from 0 : (i64) -> i1
    %82 = comb.and %65, %c1431655765_i32 : i32
    %83 = comb.extract %50 from 2 : (i32) -> i1
    %84 = comb.and %68, %c1_i2 : i2
    %85 = comb.and %70, %c5_i4 : i4
    %86 = comb.and %73, %c85_i8 : i8
    %87 = comb.extract %21 from 18 : (i32) -> i1
    %88 = comb.extract %21 from 20 : (i32) -> i1
    %89 = comb.and %76, %c5_i4 : i4
    %90 = comb.extract %21 from 26 : (i32) -> i1
    %91 = comb.extract %21 from 28 : (i32) -> i1
    %92 = comb.extract %21 from 30 : (i32) -> i1
    %93 = comb.extract %80 from 23 : (i55) -> i32
    %94 = comb.or %93, %82 : i32
    %95 = comb.extract %65 from 1 : (i32) -> i1
    %96 = comb.extract %80 from 21 : (i55) -> i1
    %97 = comb.or %96, %83 : i1
    %98 = comb.extract %50 from 3 : (i32) -> i1
    %99 = comb.concat %98, %false : i1, i1
    %100 = comb.or %99, %84 : i2
    %101 = comb.extract %80 from 15 : (i55) -> i4
    %102 = comb.or %101, %85 : i4
    %103 = comb.extract %80 from 7 : (i55) -> i8
    %104 = comb.or %103, %86 : i8
    %105 = comb.extract %73 from 1 : (i8) -> i1
    %106 = comb.extract %80 from 5 : (i55) -> i1
    %107 = comb.or %106, %87 : i1
    %108 = comb.extract %21 from 19 : (i32) -> i1
    %109 = comb.extract %80 from 0 : (i55) -> i3
    %110 = comb.concat %109, %false : i3, i1
    %111 = comb.or %110, %89 : i4
    %112 = comb.extract %21 from 25 : (i32) -> i1
    %113 = comb.extract %21 from 27 : (i32) -> i1
    %114 = comb.extract %21 from 29 : (i32) -> i1
    %115 = comb.concat %81, %94, %95, %97, %100, %102, %104, %105, %107, %108, %88, %111, %112, %90, %113, %91, %114, %92, %77 : i1, i32, i1, i1, i2, i4, i8, i1, i1, i1, i1, i4, i1, i1, i1, i1, i1, i1, i1
    %116 = comb.mux bin %29, %26, %115 {sv.namehint = "shin"} : i64
    %117 = comb.extract %116 from 63 {sv.namehint = "_shout_r_T_1"} : (i64) -> i1
    %118 = comb.and bin %0, %117 {sv.namehint = "shout_r_hi"} : i1
    %119 = comb.concat %118, %116 {sv.namehint = "_shout_r_T_2"} : i1, i64
    %120 = comb.concat %c0_i59, %23, %24 : i59, i1, i5
    %121 = comb.shrs bin %119, %120 {sv.namehint = "_shout_r_T_4"} : i65
    %122 = comb.extract %121 from 0 {sv.namehint = "shout_r"} : (i65) -> i64
    %123 = comb.extract %121 from 16 : (i65) -> i8
    %124 = comb.extract %121 from 32 : (i65) -> i8
    %125 = comb.extract %121 from 24 : (i65) -> i8
    %126 = comb.concat %125, %124 : i8, i8
    %127 = comb.extract %121 from 28 : (i65) -> i4
    %128 = comb.concat %123, %127 : i8, i4
    %129 = comb.and %128, %c-241_i12 : i12
    %130 = comb.extract %121 from 8 : (i65) -> i4
    %131 = comb.extract %121 from 16 : (i65) -> i4
    %132 = comb.and %126, %c3855_i16 : i16
    %133 = comb.extract %121 from 40 : (i65) -> i4
    %134 = comb.extract %121 from 48 : (i65) -> i4
    %135 = comb.extract %121 from 12 : (i65) -> i4
    %136 = comb.concat %135, %131 : i4, i4
    %137 = comb.concat %129, %c0_i4 : i12, i4
    %138 = comb.or %137, %132 : i16
    %139 = comb.extract %121 from 36 : (i65) -> i4
    %140 = comb.extract %121 from 44 : (i65) -> i4
    %141 = comb.concat %140, %134 : i4, i4
    %142 = comb.extract %121 from 46 : (i65) -> i2
    %143 = comb.concat %130, %135, %131, %138, %139, %133, %142 : i4, i4, i4, i16, i4, i4, i2
    %144 = comb.and %143, %c-54975581389_i38 : i38
    %145 = comb.extract %121 from 4 : (i65) -> i2
    %146 = comb.extract %121 from 8 : (i65) -> i2
    %147 = comb.and %136, %c51_i8 : i8
    %148 = comb.and %138, %c13107_i16 : i16
    %149 = comb.extract %121 from 36 : (i65) -> i2
    %150 = comb.extract %121 from 40 : (i65) -> i2
    %151 = comb.and %141, %c51_i8 : i8
    %152 = comb.extract %121 from 52 : (i65) -> i2
    %153 = comb.extract %121 from 56 : (i65) -> i2
    %154 = comb.extract %121 from 6 : (i65) -> i2
    %155 = comb.concat %154, %146 : i2, i2
    %156 = comb.extract %144 from 30 : (i38) -> i8
    %157 = comb.or %156, %147 : i8
    %158 = comb.extract %144 from 14 : (i38) -> i16
    %159 = comb.or %158, %148 : i16
    %160 = comb.extract %138 from 2 : (i16) -> i2
    %161 = comb.extract %144 from 10 : (i38) -> i2
    %162 = comb.or %161, %149 : i2
    %163 = comb.extract %121 from 38 : (i65) -> i2
    %164 = comb.concat %163, %150 : i2, i2
    %165 = comb.extract %144 from 0 : (i38) -> i6
    %166 = comb.concat %165, %c0_i2 : i6, i2
    %167 = comb.or %166, %151 : i8
    %168 = comb.extract %121 from 50 : (i65) -> i2
    %169 = comb.extract %121 from 54 : (i65) -> i2
    %170 = comb.concat %169, %153 : i2, i2
    %171 = comb.extract %121 from 63 : (i65) -> i1
    %172 = comb.extract %121 from 55 : (i65) -> i1
    %173 = comb.concat %145, %154, %146, %157, %159, %160, %162, %163, %150, %167, %168, %152, %172 : i2, i2, i2, i8, i16, i2, i2, i2, i2, i8, i2, i2, i1
    %174 = comb.and %173, %c-750599937895083_i51 : i51
    %175 = comb.extract %121 from 0 : (i65) -> i1
    %176 = comb.extract %121 from 2 : (i65) -> i1
    %177 = comb.extract %121 from 4 : (i65) -> i1
    %178 = comb.and %155, %c5_i4 : i4
    %179 = comb.and %157, %c85_i8 : i8
    %180 = comb.and %159, %c21845_i16 : i16
    %181 = comb.extract %138 from 2 : (i16) -> i1
    %182 = comb.and %162, %c1_i2 : i2
    %183 = comb.and %164, %c5_i4 : i4
    %184 = comb.and %167, %c85_i8 : i8
    %185 = comb.extract %121 from 50 : (i65) -> i1
    %186 = comb.extract %121 from 52 : (i65) -> i1
    %187 = comb.and %170, %c5_i4 : i4
    %188 = comb.extract %121 from 58 : (i65) -> i1
    %189 = comb.extract %121 from 60 : (i65) -> i1
    %190 = comb.extract %121 from 62 : (i65) -> i1
    %191 = comb.extract %121 from 1 : (i65) -> i1
    %192 = comb.extract %121 from 3 : (i65) -> i1
    %193 = comb.extract %174 from 47 : (i51) -> i4
    %194 = comb.or %193, %178 : i4
    %195 = comb.extract %174 from 39 : (i51) -> i8
    %196 = comb.or %195, %179 : i8
    %197 = comb.extract %174 from 23 : (i51) -> i16
    %198 = comb.or %197, %180 : i16
    %199 = comb.extract %159 from 1 : (i16) -> i1
    %200 = comb.extract %174 from 21 : (i51) -> i1
    %201 = comb.or %200, %181 : i1
    %202 = comb.extract %138 from 3 : (i16) -> i1
    %203 = comb.concat %202, %false : i1, i1
    %204 = comb.or %203, %182 : i2
    %205 = comb.extract %174 from 15 : (i51) -> i4
    %206 = comb.or %205, %183 : i4
    %207 = comb.extract %174 from 7 : (i51) -> i8
    %208 = comb.or %207, %184 : i8
    %209 = comb.extract %167 from 1 : (i8) -> i1
    %210 = comb.extract %174 from 5 : (i51) -> i1
    %211 = comb.or %210, %185 : i1
    %212 = comb.extract %121 from 51 : (i65) -> i1
    %213 = comb.extract %174 from 0 : (i51) -> i3
    %214 = comb.concat %213, %false : i3, i1
    %215 = comb.or %214, %187 : i4
    %216 = comb.extract %121 from 57 : (i65) -> i1
    %217 = comb.extract %121 from 59 : (i65) -> i1
    %218 = comb.extract %121 from 61 : (i65) -> i1
    %219 = comb.concat %175, %191, %176, %192, %177, %194, %196, %198, %199, %201, %204, %206, %208, %209, %211, %212, %186, %215, %216, %188, %217, %189, %218, %190, %171 : i1, i1, i1, i1, i1, i4, i8, i16, i1, i1, i2, i4, i8, i1, i1, i1, i1, i4, i1, i1, i1, i1, i1, i1, i1
    %220 = comb.or bin %27, %28 {sv.namehint = "_shout_T_2"} : i1
    %221 = comb.mux bin %220, %122, %c0_i64 {sv.namehint = "_shout_T_3"} : i64
    %222 = comb.icmp bin eq %io_fn, %c1_i4 {sv.namehint = "_shout_T_4"} : i4
    %223 = comb.mux bin %222, %219, %c0_i64 {sv.namehint = "_shout_T_5"} : i64
    %224 = comb.icmp bin eq %io_fn, %c4_i4 {sv.namehint = "_logic_T"} : i4
    %225 = comb.icmp bin eq %io_fn, %c6_i4 {sv.namehint = "_logic_T_4"} : i4
    %226 = comb.or bin %224, %225 {sv.namehint = "_logic_T_2"} : i1
    %227 = comb.mux bin %226, %3, %c0_i64 {sv.namehint = "_logic_T_3"} : i64
    %228 = comb.icmp bin eq %io_fn, %c7_i4 {sv.namehint = "_logic_T_5"} : i4
    %229 = comb.or bin %225, %228 {sv.namehint = "_logic_T_6"} : i1
    %230 = comb.and bin %io_in1, %io_in2 {sv.namehint = "_logic_T_7"} : i64
    %231 = comb.mux bin %229, %230, %c0_i64 {sv.namehint = "_logic_T_8"} : i64
    %232 = comb.icmp bin ugt %io_fn, %c-5_i4 {sv.namehint = "_shift_logic_T"} : i4
    %233 = comb.and bin %232, %12 {sv.namehint = "_shift_logic_T_1"} : i1
    %234 = comb.concat %c0_i63, %233 : i63, i1
    %235 = comb.or bin %234, %227, %231, %221, %223 {sv.namehint = "shift_logic"} : i64
    %236 = comb.icmp bin eq %io_fn, %c0_i4 {sv.namehint = "_out_T"} : i4
    %237 = comb.icmp bin eq %io_fn, %c-6_i4 {sv.namehint = "_out_T_1"} : i4
    %238 = comb.or bin %236, %237 {sv.namehint = "_out_T_2"} : i1
    %239 = comb.mux bin %238, %5, %235 {sv.namehint = "out"} : i64
    %240 = comb.extract %239 from 31 {sv.namehint = "_io_out_T_1"} : (i64) -> i1
    %241 = comb.replicate %240 {sv.namehint = "io_out_hi"} : (i1) -> i32
    %242 = comb.extract %239 from 0 {sv.namehint = "io_out_lo"} : (i64) -> i32
    %243 = comb.concat %241, %242 {sv.namehint = "_io_out_T_2"} : i32, i32
    %244 = comb.mux bin %io_dw, %239, %243 {sv.namehint = "io_out"} : i64
    hw.output %244, %5, %16 : i64, i64, i1
  }
  hw.module private @MulDiv(in %clock : !seq.clock, in %reset : i1, out io_req_ready : i1, in %io_req_valid : i1, in %io_req_bits_fn : i4, in %io_req_bits_dw : i1, in %io_req_bits_in1 : i64, in %io_req_bits_in2 : i64, in %io_req_bits_tag : i5, in %io_kill : i1, in %io_resp_ready : i1, out io_resp_valid : i1, out io_resp_bits_data : i64, out io_resp_bits_tag : i5) {
    %c0_i5 = hw.constant 0 : i5
    %c1_i7 = hw.constant 1 : i7
    %c0_i64 = hw.constant 0 : i64
    %c-2_i2 = hw.constant -2 : i2
    %c0_i2 = hw.constant 0 : i2
    %c1_i2 = hw.constant 1 : i2
    %c63_i7 = hw.constant 63 : i7
    %c62_i7 = hw.constant 62 : i7
    %c0_i7 = hw.constant 0 : i7
    %c0_i66 = hw.constant 0 : i66
    %c0_i3 = hw.constant 0 : i3
    %false = hw.constant false
    %c-3_i3 = hw.constant -3 : i3
    %c1_i3 = hw.constant 1 : i3
    %c2_i3 = hw.constant 2 : i3
    %c-2_i3 = hw.constant -2 : i3
    %true = hw.constant true
    %c3_i3 = hw.constant 3 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c-64_i7 = hw.constant -64 : i7
    %state = seq.firreg %111 clock %clock reset sync %reset, %c0_i3 {firrtl.random_init_start = 0 : ui64} : i3
    %req_dw = seq.firreg %126 clock %clock {firrtl.random_init_start = 7 : ui64} : i1
    %req_tag = seq.firreg %125 clock %clock {firrtl.random_init_start = 136 : ui64, sv.namehint = "req_tag"} : i5
    %count = seq.firreg %117 clock %clock {firrtl.random_init_start = 141 : ui64} : i7
    %neg_out = seq.firreg %120 clock %clock {firrtl.random_init_start = 148 : ui64} : i1
    %isHi = seq.firreg %112 clock %clock {firrtl.random_init_start = 149 : ui64} : i1
    %resHi = seq.firreg %114 clock %clock {firrtl.random_init_start = 150 : ui64} : i1
    %divisor = seq.firreg %122 clock %clock {firrtl.random_init_start = 151 : ui64} : i65
    %remainder = seq.firreg %124 clock %clock {firrtl.random_init_start = 216 : ui64} : i130
    %0 = comb.extract %io_req_bits_fn from 2 : (i4) -> i1
    %1 = comb.xor bin %0, %true {sv.namehint = "cmdMul"} : i1
    %2 = comb.extract %io_req_bits_fn from 2 : (i4) -> i1
    %3 = comb.extract %io_req_bits_fn from 0 : (i4) -> i1
    %4 = comb.concat %2, %3 : i1, i1
    %5 = comb.icmp bin eq %4, %c1_i2 : i2
    %6 = comb.extract %io_req_bits_fn from 1 : (i4) -> i1
    %7 = comb.or bin %5, %6 {sv.namehint = "cmdHi"} : i1
    %8 = comb.extract %io_req_bits_fn from 1 : (i4) -> i2
    %9 = comb.icmp bin eq %8, %c0_i2 : i2
    %10 = comb.extract %io_req_bits_fn from 0 : (i4) -> i1
    %11 = comb.xor bin %10, %true : i1
    %12 = comb.or bin %9, %11 {sv.namehint = "lhsSigned"} : i1
    %13 = comb.extract %io_req_bits_fn from 2 : (i4) -> i1
    %14 = comb.extract %io_req_bits_fn from 0 : (i4) -> i1
    %15 = comb.concat %13, %14 : i1, i1
    %16 = comb.icmp bin eq %15, %c-2_i2 : i2
    %17 = comb.or bin %9, %16 {sv.namehint = "rhsSigned"} : i1
    %18 = comb.xor bin %io_req_bits_dw, %true {sv.namehint = "_count_T_5"} : i1
    %19 = comb.extract %io_req_bits_in1 from 31 {sv.namehint = "_sign_T"} : (i64) -> i1
    %20 = comb.extract %io_req_bits_in1 from 63 {sv.namehint = "_sign_T_1"} : (i64) -> i1
    %21 = comb.mux bin %io_req_bits_dw, %20, %19 {sv.namehint = "_sign_T_2"} : i1
    %22 = comb.and bin %12, %21 {sv.namehint = "lhs_sign"} : i1
    %23 = comb.replicate %22 {sv.namehint = "_hi_T_1"} : (i1) -> i32
    %24 = comb.extract %io_req_bits_in1 from 32 {sv.namehint = "_hi_T_2"} : (i64) -> i32
    %25 = comb.mux bin %io_req_bits_dw, %24, %23 {sv.namehint = "hi"} : i32
    %26 = comb.extract %io_req_bits_in1 from 0 {sv.namehint = "lo"} : (i64) -> i32
    %27 = comb.extract %io_req_bits_in2 from 31 {sv.namehint = "_sign_T_3"} : (i64) -> i1
    %28 = comb.extract %io_req_bits_in2 from 63 {sv.namehint = "_sign_T_4"} : (i64) -> i1
    %29 = comb.mux bin %io_req_bits_dw, %28, %27 {sv.namehint = "_sign_T_5"} : i1
    %30 = comb.and bin %17, %29 {sv.namehint = "rhs_sign"} : i1
    %31 = comb.replicate %30 {sv.namehint = "_hi_T_4"} : (i1) -> i32
    %32 = comb.extract %io_req_bits_in2 from 32 {sv.namehint = "_hi_T_5"} : (i64) -> i32
    %33 = comb.mux bin %io_req_bits_dw, %32, %31 {sv.namehint = "hi_1"} : i32
    %34 = comb.extract %io_req_bits_in2 from 0 {sv.namehint = "lo_1"} : (i64) -> i32
    %35 = comb.extract %remainder from 64 {sv.namehint = "_subtractor_T"} : (i130) -> i65
    %36 = comb.sub %35, %divisor {sv.namehint = "_subtractor_T_1"} : i65
    %37 = comb.extract %remainder from 65 {sv.namehint = "_result_T"} : (i130) -> i64
    %38 = comb.extract %remainder from 0 {sv.namehint = "mulReg_lo"} : (i130) -> i64
    %39 = comb.mux bin %resHi, %37, %38 {sv.namehint = "result"} : i64
    %40 = comb.sub %c0_i64, %39 {sv.namehint = "negated_remainder"} : i64
    %41 = comb.icmp bin eq %state, %c1_i3 : i3
    %42 = comb.extract %remainder from 63 : (i130) -> i1
    %43 = comb.concat %c0_i66, %40 : i66, i64
    %44 = comb.and bin %41, %42 : i1
    %45 = comb.extract %divisor from 63 : (i65) -> i1
    %46 = comb.and bin %41, %45 : i1
    %47 = comb.mux bin %46, %36, %divisor : i65
    %48 = comb.mux bin %41, %c3_i3, %state : i3
    %49 = comb.icmp bin eq %state, %c-3_i3 : i3
    %50 = comb.or %49, %44 : i1
    %51 = comb.mux bin %50, %43, %remainder : i130
    %52 = comb.mux bin %49, %c-1_i3, %48 : i3
    %53 = comb.xor %49, %true : i1
    %54 = comb.and %53, %resHi : i1
    %55 = comb.icmp bin eq %state, %c2_i3 : i3
    %56 = comb.extract %remainder from 65 {sv.namehint = "mulReg_hi"} : (i130) -> i65
    %57 = comb.extract %remainder from 64 {sv.namehint = "prod_hi"} : (i130) -> i1
    %58 = comb.extract %remainder from 0 {sv.namehint = "prod_lo"} : (i130) -> i1
    %59 = comb.extract %divisor from 64 : (i65) -> i1
    %60 = comb.replicate %57 : (i1) -> i65
    %61 = comb.concat %60, %58 : i65, i1
    %62 = comb.concat %59, %divisor : i1, i65
    %63 = comb.mul %61, %62 {sv.namehint = "_prod_T_2"} : i66
    %64 = comb.extract %remainder from 129 : (i130) -> i1
    %65 = comb.concat %64, %56 : i1, i65
    %66 = comb.add %63, %65 {sv.namehint = "_prod_T_3"} : i66
    %67 = comb.extract %remainder from 1 {sv.namehint = "nextMulReg_lo"} : (i130) -> i63
    %68 = comb.icmp bin eq %count, %c62_i7 {sv.namehint = "_nextMplierSign_T"} : i7
    %69 = comb.and bin %68, %neg_out {sv.namehint = "remainder_hi_lo"} : i1
    %70 = comb.extract %66 from 1 {sv.namehint = "remainder_hi_hi"} : (i66) -> i65
    %71 = comb.extract %66 from 0 : (i66) -> i1
    %72 = comb.concat %70, %69, %71, %67 {sv.namehint = "_remainder_T"} : i65, i1, i1, i63
    %73 = comb.mux bin %55, %72, %51 : i130
    %74 = comb.add %count, %c1_i7 {sv.namehint = "_count_T"} : i7
    %75 = comb.mux bin %55, %74, %count : i7
    %76 = comb.icmp bin eq %count, %c63_i7 : i7
    %77 = comb.and bin %55, %76 : i1
    %78 = comb.mux bin %77, %c-2_i3, %52 : i3
    %79 = comb.icmp bin eq %state, %c3_i3 : i3
    %80 = comb.extract %36 from 64 {sv.namehint = "unrolls_less"} : (i65) -> i1
    %81 = comb.extract %remainder from 64 {sv.namehint = "_unrolls_T"} : (i130) -> i64
    %82 = comb.extract %36 from 0 {sv.namehint = "_unrolls_T_1"} : (i65) -> i64
    %83 = comb.mux bin %80, %81, %82 {sv.namehint = "unrolls_hi_hi"} : i64
    %84 = comb.xor bin %80, %true {sv.namehint = "unrolls_lo"} : i1
    %85 = comb.concat %false, %83, %38, %84 : i1, i64, i64, i1
    %86 = comb.mux bin %79, %85, %73 : i130
    %87 = comb.icmp bin eq %count, %c-64_i7 : i7
    %88 = comb.xor %neg_out, %true : i1
    %89 = comb.concat %true, %88, %true {sv.namehint = "_state_T"} : i1, i1, i1
    %90 = comb.and bin %79, %87 : i1
    %91 = comb.mux bin %90, %89, %78 : i3
    %92 = comb.and %79, %87 : i1
    %93 = comb.or %92, %77 : i1
    %94 = comb.mux bin %93, %isHi, %54 : i1
    %95 = comb.add %count, %c1_i7 {sv.namehint = "_count_T_2"} : i7
    %96 = comb.mux bin %79, %95, %75 : i7
    %97 = comb.icmp bin eq %count, %c0_i7 {sv.namehint = "_divby0_T"} : i7
    %98 = comb.xor bin %80, %true {sv.namehint = "_divby0_T_2"} : i1
    %99 = comb.xor bin %isHi, %true : i1
    %100 = comb.and bin %79, %97, %98, %99 : i1
    %101 = comb.xor %100, %true : i1
    %102 = comb.and %101, %neg_out : i1
    %103 = comb.and bin %io_resp_ready, %138 : i1
    %104 = comb.or bin %103, %io_kill : i1
    %105 = comb.mux bin %104, %c0_i3, %91 : i3
    %106 = comb.and bin %139, %io_req_valid : i1
    %107 = comb.or bin %22, %30 {sv.namehint = "_state_T_1"} : i1
    %108 = comb.xor %107, %true : i1
    %109 = comb.concat %false, %108, %true {sv.namehint = "_state_T_2"} : i1, i1, i1
    %110 = comb.mux bin %0, %109, %c2_i3 {sv.namehint = "_state_T_3"} : i3
    %111 = comb.mux bin %106, %110, %105 : i3
    %112 = comb.mux bin %106, %7, %isHi : i1
    %113 = comb.xor %106, %true : i1
    %114 = comb.and %113, %94 : i1
    %115 = comb.and bin %1, %18 {sv.namehint = "_count_T_6"} : i1
    %116 = comb.concat %false, %115, %c0_i5 : i1, i1, i5
    %117 = comb.mux bin %106, %116, %96 : i7
    %118 = comb.icmp bin ne %22, %30 {sv.namehint = "_neg_out_T"} : i1
    %119 = comb.mux bin %7, %22, %118 {sv.namehint = "_neg_out_T_1"} : i1
    %120 = comb.mux bin %106, %119, %102 : i1
    %121 = comb.concat %30, %33, %34 {sv.namehint = "_divisor_T"} : i1, i32, i32
    %122 = comb.mux bin %106, %121, %47 : i65
    %123 = comb.concat %c0_i66, %25, %26 : i66, i32, i32
    %124 = comb.mux bin %106, %123, %86 : i130
    %125 = comb.mux bin %106, %io_req_bits_tag, %req_tag : i5
    %126 = comb.mux bin %106, %io_req_bits_dw, %req_dw : i1
    %127 = comb.extract %state from 0 : (i3) -> i1
    %128 = comb.extract %39 from 32 {sv.namehint = "_hiOut_T_5"} : (i64) -> i32
    %129 = comb.extract %39 from 0 {sv.namehint = "_loOut_T_5"} : (i64) -> i32
    %130 = comb.or %req_dw, %127 : i1
    %131 = comb.mux bin %130, %129, %128 {sv.namehint = "loOut"} : i32
    %132 = comb.extract %131 from 31 {sv.namehint = "_hiOut_T_3"} : (i32) -> i1
    %133 = comb.replicate %132 {sv.namehint = "_hiOut_T_4"} : (i1) -> i32
    %134 = comb.mux bin %req_dw, %128, %133 {sv.namehint = "hiOut"} : i32
    %135 = comb.concat %134, %131 {sv.namehint = "io_resp_bits_data"} : i32, i32
    %136 = comb.icmp bin eq %state, %c-2_i3 {sv.namehint = "_io_resp_valid_T"} : i3
    %137 = comb.icmp bin eq %state, %c-1_i3 {sv.namehint = "_io_resp_valid_T_1"} : i3
    %138 = comb.or bin %136, %137 {sv.namehint = "io_resp_valid"} : i1
    %139 = comb.icmp bin eq %state, %c0_i3 {sv.namehint = "io_req_ready"} : i3
    hw.output %139, %138, %135, %req_tag : i1, i1, i64, i5
  }
  hw.module.extern private @plusarg_reader_40<FORMAT: none, DEFAULT: ui32, WIDTH: ui32>(out out : i32) attributes {verilogName = "plusarg_reader"}
  hw.module private @PlusArgTimeout(in %clock : !seq.clock, in %reset : i1, in %io_count : i32) {
    %c0_i32 = hw.constant 0 : i32
    %true = hw.constant true
    %0 = seq.from_clock %clock
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader_40<FORMAT: none = "max_core_cycles=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %1 = comb.icmp bin ne %plusarg_reader.out, %c0_i32 : i32
    %2 = comb.icmp bin ult %io_count, %plusarg_reader.out : i32
    %3 = comb.or bin %2, %reset : i1
    %4 = comb.xor bin %3, %true : i1
    %5 = comb.and bin %1, %4 : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %6 = comb.and bin %STOP_COND_, %5 : i1
        sv.if %6 {
          sv.fatal 1
        }
      }
    }
    hw.output
  }
  hw.module private @Rocket(in %clock : !seq.clock, in %reset : i1, in %io_interrupts_debug : i1, in %io_interrupts_mtip : i1, in %io_interrupts_msip : i1, in %io_interrupts_meip : i1, out io_imem_might_request : i1, out io_imem_req_valid : i1, out io_imem_req_bits_pc : i34, out io_imem_req_bits_speculative : i1, out io_imem_resp_ready : i1, in %io_imem_resp_valid : i1, in %io_imem_resp_bits_pc : i34, in %io_imem_resp_bits_data : i32, in %io_imem_resp_bits_xcpt_pf_inst : i1, in %io_imem_resp_bits_xcpt_ae_inst : i1, in %io_imem_resp_bits_replay : i1, out io_imem_btb_update_valid : i1, out io_imem_bht_update_valid : i1, out io_imem_flush_icache : i1, in %io_dmem_req_ready : i1, out io_dmem_req_valid : i1, out io_dmem_req_bits_addr : i34, out io_dmem_req_bits_tag : i6, out io_dmem_req_bits_cmd : i5, out io_dmem_req_bits_size : i2, out io_dmem_req_bits_signed : i1, out io_dmem_req_bits_dprv : i2, out io_dmem_s1_kill : i1, out io_dmem_s1_data_data : i64, in %io_dmem_s2_nack : i1, in %io_dmem_resp_valid : i1, in %io_dmem_resp_bits_tag : i6, in %io_dmem_resp_bits_data : i64, in %io_dmem_resp_bits_replay : i1, in %io_dmem_resp_bits_has_data : i1, in %io_dmem_resp_bits_data_word_bypass : i64, in %io_dmem_replay_next : i1, in %io_dmem_s2_xcpt_ma_ld : i1, in %io_dmem_s2_xcpt_ma_st : i1, in %io_dmem_s2_xcpt_pf_ld : i1, in %io_dmem_s2_xcpt_pf_st : i1, in %io_dmem_s2_xcpt_ae_ld : i1, in %io_dmem_s2_xcpt_ae_st : i1, in %io_dmem_ordered : i1, in %io_dmem_perf_release : i1, in %io_dmem_perf_grant : i1, out io_ptw_status_debug : i1, out io_ptw_status_dprv : i2, out io_ptw_pmp_0_cfg_l : i1, out io_ptw_pmp_0_cfg_a : i2, out io_ptw_pmp_0_cfg_x : i1, out io_ptw_pmp_0_cfg_w : i1, out io_ptw_pmp_0_cfg_r : i1, out io_ptw_pmp_0_addr : i30, out io_ptw_pmp_0_mask : i32, out io_ptw_pmp_1_cfg_l : i1, out io_ptw_pmp_1_cfg_a : i2, out io_ptw_pmp_1_cfg_x : i1, out io_ptw_pmp_1_cfg_w : i1, out io_ptw_pmp_1_cfg_r : i1, out io_ptw_pmp_1_addr : i30, out io_ptw_pmp_1_mask : i32, out io_ptw_pmp_2_cfg_l : i1, out io_ptw_pmp_2_cfg_a : i2, out io_ptw_pmp_2_cfg_x : i1, out io_ptw_pmp_2_cfg_w : i1, out io_ptw_pmp_2_cfg_r : i1, out io_ptw_pmp_2_addr : i30, out io_ptw_pmp_2_mask : i32, out io_ptw_pmp_3_cfg_l : i1, out io_ptw_pmp_3_cfg_a : i2, out io_ptw_pmp_3_cfg_x : i1, out io_ptw_pmp_3_cfg_w : i1, out io_ptw_pmp_3_cfg_r : i1, out io_ptw_pmp_3_addr : i30, out io_ptw_pmp_3_mask : i32, out io_ptw_pmp_4_cfg_l : i1, out io_ptw_pmp_4_cfg_a : i2, out io_ptw_pmp_4_cfg_x : i1, out io_ptw_pmp_4_cfg_w : i1, out io_ptw_pmp_4_cfg_r : i1, out io_ptw_pmp_4_addr : i30, out io_ptw_pmp_4_mask : i32, out io_ptw_pmp_5_cfg_l : i1, out io_ptw_pmp_5_cfg_a : i2, out io_ptw_pmp_5_cfg_x : i1, out io_ptw_pmp_5_cfg_w : i1, out io_ptw_pmp_5_cfg_r : i1, out io_ptw_pmp_5_addr : i30, out io_ptw_pmp_5_mask : i32, out io_ptw_pmp_6_cfg_l : i1, out io_ptw_pmp_6_cfg_a : i2, out io_ptw_pmp_6_cfg_x : i1, out io_ptw_pmp_6_cfg_w : i1, out io_ptw_pmp_6_cfg_r : i1, out io_ptw_pmp_6_addr : i30, out io_ptw_pmp_6_mask : i32, out io_ptw_pmp_7_cfg_l : i1, out io_ptw_pmp_7_cfg_a : i2, out io_ptw_pmp_7_cfg_x : i1, out io_ptw_pmp_7_cfg_w : i1, out io_ptw_pmp_7_cfg_r : i1, out io_ptw_pmp_7_addr : i30, out io_ptw_pmp_7_mask : i32, out io_ptw_customCSRs_csrs_0_value : i64, out io_wfi : i1) {
    %c5_i4 = hw.constant 5 : i4
    %c-10_i5 = hw.constant -10 : i5
    %c-22_i6 = hw.constant -22 : i6
    %c10_i6 = hw.constant 10 : i6
    %c-14_i5 = hw.constant -14 : i5
    %c-6_i4 = hw.constant -6 : i4
    %c-26_i6 = hw.constant -26 : i6
    %c-6_i5 = hw.constant -6 : i5
    %c-10_i6 = hw.constant -10 : i6
    %c-4_i5 = hw.constant -4 : i5
    %c-1_i2 = hw.constant -1 : i2
    %c-13_i10 = hw.constant -13 : i10
    %c-141_i10 = hw.constant -141 : i10
    %c-269_i10 = hw.constant -269 : i10
    %c499_i10 = hw.constant 499 : i10
    %c371_i10 = hw.constant 371 : i10
    %c243_i10 = hw.constant 243 : i10
    %c15_i10 = hw.constant 15 : i10
    %c33459_i17 = hw.constant 33459 : i17
    %c691_i17 = hw.constant 691 : i17
    %c179_i17 = hw.constant 179 : i17
    %c563_i17 = hw.constant 563 : i17
    %c819_i17 = hw.constant 819 : i17
    %c947_i17 = hw.constant 947 : i17
    %c435_i17 = hw.constant 435 : i17
    %c307_i17 = hw.constant 307 : i17
    %c32819_i17 = hw.constant 32819 : i17
    %c51_i17 = hw.constant 51 : i17
    %c-493_i10 = hw.constant -493 : i10
    %c-237_i10 = hw.constant -237 : i10
    %c-109_i10 = hw.constant -109 : i10
    %c403_i10 = hw.constant 403 : i10
    %c275_i10 = hw.constant 275 : i10
    %c19_i10 = hw.constant 19 : i10
    %c55_i7 = hw.constant 55 : i7
    %c291_i10 = hw.constant 291 : i10
    %c163_i10 = hw.constant 163 : i10
    %c35_i10 = hw.constant 35 : i10
    %c-381_i10 = hw.constant -381 : i10
    %c-509_i10 = hw.constant -509 : i10
    %c259_i10 = hw.constant 259 : i10
    %c131_i10 = hw.constant 131 : i10
    %c3_i10 = hw.constant 3 : i10
    %c23_i7 = hw.constant 23 : i7
    %c103_i10 = hw.constant 103 : i10
    %c-17_i7 = hw.constant -17 : i7
    %c-29_i10 = hw.constant -29 : i10
    %c-285_i10 = hw.constant -285 : i10
    %c-157_i10 = hw.constant -157 : i10
    %c-413_i10 = hw.constant -413 : i10
    %c99_i10 = hw.constant 99 : i10
    %c227_i10 = hw.constant 227 : i10
    %c143_i10 = hw.constant 143 : i10
    %c33467_i17 = hw.constant 33467 : i17
    %c699_i17 = hw.constant 699 : i17
    %c187_i17 = hw.constant 187 : i17
    %c32827_i17 = hw.constant 32827 : i17
    %c59_i17 = hw.constant 59 : i17
    %c33435_i17 = hw.constant 33435 : i17
    %c667_i17 = hw.constant 667 : i17
    %c155_i17 = hw.constant 155 : i17
    %c27_i10 = hw.constant 27 : i10
    %c17043_i16 = hw.constant 17043 : i16
    %c659_i16 = hw.constant 659 : i16
    %c147_i16 = hw.constant 147 : i16
    %c419_i10 = hw.constant 419 : i10
    %c-253_i10 = hw.constant -253 : i10
    %c387_i10 = hw.constant 387 : i10
    %c3503_i15 = hw.constant 3503 : i15
    %c65967_i20 = hw.constant 65967 : i20
    %c-3665_i15 = hw.constant -3665 : i15
    %c-11857_i15 = hw.constant -11857 : i15
    %c-7761_i15 = hw.constant -7761 : i15
    %c-15953_i15 = hw.constant -15953 : i15
    %c8623_i15 = hw.constant 8623 : i15
    %c12719_i15 = hw.constant 12719 : i15
    %c4527_i15 = hw.constant 4527 : i15
    %c1455_i15 = hw.constant 1455 : i15
    %c431_i15 = hw.constant 431 : i15
    %c3375_i15 = hw.constant 3375 : i15
    %c65839_i20 = hw.constant 65839 : i20
    %c-3793_i15 = hw.constant -3793 : i15
    %c-11985_i15 = hw.constant -11985 : i15
    %c-7889_i15 = hw.constant -7889 : i15
    %c-16081_i15 = hw.constant -16081 : i15
    %c8495_i15 = hw.constant 8495 : i15
    %c12591_i15 = hw.constant 12591 : i15
    %c1327_i15 = hw.constant 1327 : i15
    %c4399_i15 = hw.constant 4399 : i15
    %c303_i15 = hw.constant 303 : i15
    %c1979_i17 = hw.constant 1979 : i17
    %c1851_i17 = hw.constant 1851 : i17
    %c1723_i17 = hw.constant 1723 : i17
    %c1595_i17 = hw.constant 1595 : i17
    %c1083_i17 = hw.constant 1083 : i17
    %c1971_i17 = hw.constant 1971 : i17
    %c1843_i17 = hw.constant 1843 : i17
    %c1715_i17 = hw.constant 1715 : i17
    %c1587_i17 = hw.constant 1587 : i17
    %c1331_i17 = hw.constant 1331 : i17
    %c1459_i17 = hw.constant 1459 : i17
    %c1203_i17 = hw.constant 1203 : i17
    %c1075_i17 = hw.constant 1075 : i17
    %c1_i32 = hw.constant 1 : i32
    %c12_i64 = hw.constant 12 : i64
    %c15_i64 = hw.constant 15 : i64
    %c13_i64 = hw.constant 13 : i64
    %c1_i64 = hw.constant 1 : i64
    %c3_i64 = hw.constant 3 : i64
    %c2_i64 = hw.constant 2 : i64
    %c5_i64 = hw.constant 5 : i64
    %c7_i64 = hw.constant 7 : i64
    %c4_i64 = hw.constant 4 : i64
    %c6_i64 = hw.constant 6 : i64
    %c1_i5 = hw.constant 1 : i5
    %c15_i5 = hw.constant 15 : i5
    %c14_i5 = hw.constant 14 : i5
    %c13_i5 = hw.constant 13 : i5
    %c12_i5 = hw.constant 12 : i5
    %c8_i5 = hw.constant 8 : i5
    %c11_i5 = hw.constant 11 : i5
    %c10_i5 = hw.constant 10 : i5
    %c9_i5 = hw.constant 9 : i5
    %c4_i5 = hw.constant 4 : i5
    %c6_i5 = hw.constant 6 : i5
    %c-1_i31 = hw.constant -1 : i31
    %c7_i5 = hw.constant 7 : i5
    %c-1_i32 = hw.constant -1 : i32
    %c0_i27 = hw.constant 0 : i27
    %c0_i31 = hw.constant 0 : i31
    %c0_i16 = hw.constant 0 : i16
    %c0_i60 = hw.constant 0 : i60
    %c-1_i5 = hw.constant -1 : i5
    %c0_i5 = hw.constant 0 : i5
    %c2065694835_i32 = hw.constant 2065694835 : i32
    %c115_i32 = hw.constant 115 : i32
    %c1048691_i32 = hw.constant 1048691 : i32
    %c807403635_i32 = hw.constant 807403635 : i32
    %c273678451_i32 = hw.constant 273678451 : i32
    %c810549363_i32 = hw.constant 810549363 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c-4_i4 = hw.constant -4 : i4
    %c-2_i4 = hw.constant -2 : i4
    %c1_i2 = hw.constant 1 : i2
    %c-3_i4 = hw.constant -3 : i4
    %c-1_i4 = hw.constant -1 : i4
    %c-15_i5 = hw.constant -15 : i5
    %c0_i32 = hw.constant 0 : i32
    %c0_i2 = hw.constant 0 : i2
    %c0_i34 = hw.constant 0 : i34
    %c0_i6 = hw.constant 0 : i6
    %c1_i4 = hw.constant 1 : i4
    %c3_i4 = hw.constant 3 : i4
    %c0_i4 = hw.constant 0 : i4
    %c2_i4 = hw.constant 2 : i4
    %c-2_i34 = hw.constant -2 : i34
    %c4_i4 = hw.constant 4 : i4
    %c6_i4 = hw.constant 6 : i4
    %c0_i3 = hw.constant 0 : i3
    %c0_i64 = hw.constant 0 : i64
    %true = hw.constant true
    %false = hw.constant false
    %id_reg_pause = seq.firreg %1376 clock %clock {firrtl.random_init_start = 2 : ui64} : i1
    %imem_might_request_reg = seq.firreg %1351 clock %clock {firrtl.random_init_start = 3 : ui64, sv.namehint = "io_imem_might_request"} : i1
    %ex_ctrl_branch = seq.firreg %881 clock %clock {firrtl.random_init_start = 7 : ui64} : i1
    %ex_ctrl_jal = seq.firreg %882 clock %clock {firrtl.random_init_start = 8 : ui64} : i1
    %ex_ctrl_jalr = seq.firreg %883 clock %clock {firrtl.random_init_start = 9 : ui64} : i1
    %ex_ctrl_rxs2 = seq.firreg %884 clock %clock {firrtl.random_init_start = 10 : ui64} : i1
    %ex_ctrl_sel_alu2 = seq.firreg %916 clock %clock {firrtl.random_init_start = 13 : ui64} : i2
    %ex_ctrl_sel_alu1 = seq.firreg %913 clock %clock {firrtl.random_init_start = 15 : ui64} : i2
    %ex_ctrl_sel_imm = seq.firreg %885 clock %clock {firrtl.random_init_start = 17 : ui64} : i3
    %ex_ctrl_alu_dw = seq.firreg %900 clock %clock {firrtl.random_init_start = 20 : ui64, sv.namehint = "ex_ctrl_alu_dw"} : i1
    %ex_ctrl_alu_fn = seq.firreg %898 clock %clock {firrtl.random_init_start = 21 : ui64, sv.namehint = "ex_ctrl_alu_fn"} : i4
    %ex_ctrl_mem = seq.firreg %886 clock %clock {firrtl.random_init_start = 25 : ui64} : i1
    %ex_ctrl_mem_cmd = seq.firreg %887 clock %clock {firrtl.random_init_start = 26 : ui64, sv.namehint = "ex_ctrl_mem_cmd"} : i5
    %ex_ctrl_div = seq.firreg %888 clock %clock {firrtl.random_init_start = 36 : ui64} : i1
    %ex_ctrl_wxd = seq.firreg %889 clock %clock {firrtl.random_init_start = 37 : ui64} : i1
    %ex_ctrl_csr = seq.firreg %891 clock %clock {firrtl.random_init_start = 38 : ui64} : i3
    %ex_ctrl_fence_i = seq.firreg %890 clock %clock {firrtl.random_init_start = 41 : ui64} : i1
    %mem_ctrl_fp = seq.firreg %1049 clock %clock {firrtl.random_init_start = 46 : ui64} : i1
    %mem_ctrl_rocc = seq.firreg %1052 clock %clock {firrtl.random_init_start = 47 : ui64} : i1
    %mem_ctrl_branch = seq.firreg %1055 clock %clock {firrtl.random_init_start = 48 : ui64} : i1
    %mem_ctrl_jal = seq.firreg %1058 clock %clock {firrtl.random_init_start = 49 : ui64} : i1
    %mem_ctrl_jalr = seq.firreg %1061 clock %clock {firrtl.random_init_start = 50 : ui64} : i1
    %mem_ctrl_mem = seq.firreg %1064 clock %clock {firrtl.random_init_start = 66 : ui64} : i1
    %mem_ctrl_mul = seq.firreg %1067 clock %clock {firrtl.random_init_start = 76 : ui64} : i1
    %mem_ctrl_div = seq.firreg %1070 clock %clock {firrtl.random_init_start = 77 : ui64} : i1
    %mem_ctrl_wxd = seq.firreg %1073 clock %clock {firrtl.random_init_start = 78 : ui64} : i1
    %mem_ctrl_csr = seq.firreg %1076 clock %clock {firrtl.random_init_start = 79 : ui64} : i3
    %mem_ctrl_fence_i = seq.firreg %1143 clock %clock {firrtl.random_init_start = 82 : ui64} : i1
    %wb_ctrl_rocc = seq.firreg %1174 clock %clock {firrtl.random_init_start = 88 : ui64} : i1
    %wb_ctrl_mem = seq.firreg %1175 clock %clock {firrtl.random_init_start = 107 : ui64} : i1
    %wb_ctrl_div = seq.firreg %1176 clock %clock {firrtl.random_init_start = 118 : ui64} : i1
    %wb_ctrl_wxd = seq.firreg %1177 clock %clock {firrtl.random_init_start = 119 : ui64} : i1
    %wb_ctrl_csr = seq.firreg %1178 clock %clock {firrtl.random_init_start = 120 : ui64} : i3
    %wb_ctrl_fence_i = seq.firreg %1179 clock %clock {firrtl.random_init_start = 123 : ui64} : i1
    %ex_reg_xcpt_interrupt = seq.firreg %880 clock %clock {firrtl.random_init_start = 127 : ui64} : i1
    %ex_reg_valid = seq.firreg %876 clock %clock {firrtl.random_init_start = 128 : ui64} : i1
    %ex_reg_rvc = seq.firreg %906 clock %clock {firrtl.random_init_start = 129 : ui64} : i1
    %ex_reg_xcpt = seq.firreg %879 clock %clock {firrtl.random_init_start = 179 : ui64} : i1
    %ex_reg_flush_pipe = seq.firreg %918 clock %clock {firrtl.random_init_start = 180 : ui64} : i1
    %ex_reg_load_use = seq.firreg %919 clock %clock {firrtl.random_init_start = 181 : ui64} : i1
    %ex_reg_cause = seq.firreg %967 clock %clock {firrtl.random_init_start = 182 : ui64} : i64
    %ex_reg_replay = seq.firreg %878 clock %clock {firrtl.random_init_start = 246 : ui64} : i1
    %ex_reg_pc = seq.firreg %969 clock %clock {firrtl.random_init_start = 247 : ui64} : i34
    %ex_reg_mem_size = seq.firreg %927 clock %clock {firrtl.random_init_start = 281 : ui64, sv.namehint = "ex_reg_mem_size"} : i2
    %ex_reg_inst = seq.firreg %968 clock %clock {firrtl.random_init_start = 283 : ui64} : i32
    %mem_reg_xcpt_interrupt = seq.firreg %1045 clock %clock {firrtl.random_init_start = 350 : ui64} : i1
    %mem_reg_valid = seq.firreg %1042 clock %clock {firrtl.random_init_start = 351 : ui64} : i1
    %mem_reg_rvc = seq.firreg %1082 clock %clock {firrtl.random_init_start = 352 : ui64} : i1
    %mem_reg_xcpt = seq.firreg %1044 clock %clock {firrtl.random_init_start = 402 : ui64} : i1
    %mem_reg_replay = seq.firreg %1043 clock %clock {firrtl.random_init_start = 403 : ui64} : i1
    %mem_reg_flush_pipe = seq.firreg %1147 clock %clock {firrtl.random_init_start = 404 : ui64} : i1
    %mem_reg_cause = seq.firreg %1111 clock %clock {firrtl.random_init_start = 405 : ui64} : i64
    %mem_mem_cmd_bh = seq.firreg %1108 clock %clock {firrtl.random_init_start = 469 : ui64} : i1
    %mem_reg_load = seq.firreg %1098 clock %clock {firrtl.random_init_start = 470 : ui64} : i1
    %mem_reg_store = seq.firreg %1105 clock %clock {firrtl.random_init_start = 471 : ui64} : i1
    %mem_reg_pc = seq.firreg %1117 clock %clock {firrtl.random_init_start = 473 : ui64} : i34
    %mem_reg_inst = seq.firreg %1114 clock %clock {firrtl.random_init_start = 507 : ui64} : i32
    %mem_scie_pipelined = seq.firreg %1079 clock %clock {firrtl.random_init_start = 574 : ui64} : i1
    %mem_reg_wdata = seq.firreg %1120 clock %clock {firrtl.random_init_start = 575 : ui64} : i64
    %mem_reg_rs2 = seq.firreg %1138 clock %clock {firrtl.random_init_start = 639 : ui64, sv.namehint = "mem_reg_rs2"} : i64
    %mem_br_taken = seq.firreg %1123 clock %clock {firrtl.random_init_start = 703 : ui64} : i1
    %wb_reg_valid = seq.firreg %1169 clock %clock {firrtl.random_init_start = 705 : ui64} : i1
    %wb_reg_xcpt = seq.firreg %1172 clock %clock {firrtl.random_init_start = 706 : ui64} : i1
    %wb_reg_replay = seq.firreg %1171 clock %clock {firrtl.random_init_start = 707 : ui64} : i1
    %wb_reg_flush_pipe = seq.firreg %1173 clock %clock {firrtl.random_init_start = 708 : ui64} : i1
    %wb_reg_cause = seq.firreg %1184 clock %clock {firrtl.random_init_start = 709 : ui64} : i64
    %wb_reg_pc = seq.firreg %1186 clock %clock {firrtl.random_init_start = 774 : ui64, sv.namehint = "csr.io_pc"} : i34
    %wb_reg_inst = seq.firreg %1185 clock %clock {firrtl.random_init_start = 810 : ui64} : i32
    %wb_reg_wdata = seq.firreg %1183 clock %clock {firrtl.random_init_start = 874 : ui64, sv.namehint = "wb_reg_wdata"} : i64
    %0 = comb.or bin %1209, %1041 {sv.namehint = "ibuf.io_kill"} : i1
    %ibuf.io_imem_ready, %ibuf.io_pc, %ibuf.io_inst_0_valid, %ibuf.io_inst_0_bits_xcpt0_pf_inst, %ibuf.io_inst_0_bits_xcpt0_ae_inst, %ibuf.io_inst_0_bits_xcpt1_pf_inst, %ibuf.io_inst_0_bits_xcpt1_ae_inst, %ibuf.io_inst_0_bits_replay, %ibuf.io_inst_0_bits_rvc, %ibuf.io_inst_0_bits_inst_bits, %ibuf.io_inst_0_bits_inst_rd, %ibuf.io_inst_0_bits_inst_rs1, %ibuf.io_inst_0_bits_inst_rs2, %ibuf.io_inst_0_bits_raw = hw.instance "ibuf" @IBuf(clock: %clock: !seq.clock, reset: %reset: i1, io_imem_valid: %io_imem_resp_valid: i1, io_imem_bits_pc: %io_imem_resp_bits_pc: i34, io_imem_bits_data: %io_imem_resp_bits_data: i32, io_imem_bits_xcpt_pf_inst: %io_imem_resp_bits_xcpt_pf_inst: i1, io_imem_bits_xcpt_ae_inst: %io_imem_resp_bits_xcpt_ae_inst: i1, io_imem_bits_replay: %io_imem_resp_bits_replay: i1, io_kill: %0: i1, io_inst_0_ready: %1352: i1) -> (io_imem_ready: i1, io_pc: i34, io_inst_0_valid: i1, io_inst_0_bits_xcpt0_pf_inst: i1, io_inst_0_bits_xcpt0_ae_inst: i1, io_inst_0_bits_xcpt1_pf_inst: i1, io_inst_0_bits_xcpt1_ae_inst: i1, io_inst_0_bits_replay: i1, io_inst_0_bits_rvc: i1, io_inst_0_bits_inst_bits: i32, io_inst_0_bits_inst_rd: i5, io_inst_0_bits_inst_rs1: i5, io_inst_0_bits_inst_rs2: i5, io_inst_0_bits_raw: i32) {sv.namehint = "id_waddr"}
    %1 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %2 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %3 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %4 = comb.concat %1, %2, %3 : i7, i3, i7
    %5 = comb.icmp bin eq %4, %c1075_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_190"} : i17
    %6 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %7 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %8 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %9 = comb.concat %6, %7, %8 : i7, i3, i7
    %10 = comb.icmp bin eq %9, %c1203_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_3"} : i17
    %11 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %12 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %13 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %14 = comb.concat %11, %12, %13 : i7, i3, i7
    %15 = comb.icmp bin eq %14, %c1459_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_5"} : i17
    %16 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %17 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %18 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %19 = comb.concat %16, %17, %18 : i7, i3, i7
    %20 = comb.icmp bin eq %19, %c1331_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_7"} : i17
    %21 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %22 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %23 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %24 = comb.concat %21, %22, %23 : i7, i3, i7
    %25 = comb.icmp bin eq %24, %c1587_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_9"} : i17
    %26 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %27 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %28 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %29 = comb.concat %26, %27, %28 : i7, i3, i7
    %30 = comb.icmp bin eq %29, %c1715_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_11"} : i17
    %31 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %32 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %33 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %34 = comb.concat %31, %32, %33 : i7, i3, i7
    %35 = comb.icmp bin eq %34, %c1843_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_13"} : i17
    %36 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %37 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %38 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %39 = comb.concat %36, %37, %38 : i7, i3, i7
    %40 = comb.icmp bin eq %39, %c1971_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_15"} : i17
    %41 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %42 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %43 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %44 = comb.concat %41, %42, %43 : i7, i3, i7
    %45 = comb.icmp bin eq %44, %c1083_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_17"} : i17
    %46 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %47 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %48 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %49 = comb.concat %46, %47, %48 : i7, i3, i7
    %50 = comb.icmp bin eq %49, %c1595_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_19"} : i17
    %51 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %52 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %53 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %54 = comb.concat %51, %52, %53 : i7, i3, i7
    %55 = comb.icmp bin eq %54, %c1723_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_21"} : i17
    %56 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %57 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %58 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %59 = comb.concat %56, %57, %58 : i7, i3, i7
    %60 = comb.icmp bin eq %59, %c1851_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_23"} : i17
    %61 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %62 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %63 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %64 = comb.concat %61, %62, %63 : i7, i3, i7
    %65 = comb.icmp bin eq %64, %c1979_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_25"} : i17
    %66 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %67 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %68 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %69 = comb.concat %66, %67, %68 : i5, i3, i7
    %70 = comb.icmp bin eq %69, %c303_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_287"} : i15
    %71 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %72 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %73 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %74 = comb.concat %71, %72, %73 : i5, i3, i7
    %75 = comb.icmp bin eq %74, %c4399_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_29"} : i15
    %76 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %77 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %78 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %79 = comb.concat %76, %77, %78 : i5, i3, i7
    %80 = comb.icmp bin eq %79, %c1327_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_31"} : i15
    %81 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %82 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %83 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %84 = comb.concat %81, %82, %83 : i5, i3, i7
    %85 = comb.icmp bin eq %84, %c12591_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_33"} : i15
    %86 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %87 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %88 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %89 = comb.concat %86, %87, %88 : i5, i3, i7
    %90 = comb.icmp bin eq %89, %c8495_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_35"} : i15
    %91 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %92 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %93 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %94 = comb.concat %91, %92, %93 : i5, i3, i7
    %95 = comb.icmp bin eq %94, %c-16081_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_37"} : i15
    %96 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %97 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %98 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %99 = comb.concat %96, %97, %98 : i5, i3, i7
    %100 = comb.icmp bin eq %99, %c-7889_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_39"} : i15
    %101 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %102 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %103 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %104 = comb.concat %101, %102, %103 : i5, i3, i7
    %105 = comb.icmp bin eq %104, %c-11985_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_41"} : i15
    %106 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %107 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %108 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %109 = comb.concat %106, %107, %108 : i5, i3, i7
    %110 = comb.icmp bin eq %109, %c-3793_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_43"} : i15
    %111 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %112 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 20 : (i32) -> i5
    %113 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %114 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %115 = comb.concat %111, %112, %113, %114 : i5, i5, i3, i7
    %116 = comb.icmp bin eq %115, %c65839_i20 {sv.namehint = "_id_ctrl_decoder_bit_T_45"} : i20
    %117 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %118 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %119 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %120 = comb.concat %117, %118, %119 : i5, i3, i7
    %121 = comb.icmp bin eq %120, %c3375_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_47"} : i15
    %122 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %123 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %124 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %125 = comb.concat %122, %123, %124 : i5, i3, i7
    %126 = comb.icmp bin eq %125, %c431_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_49"} : i15
    %127 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %128 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %129 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %130 = comb.concat %127, %128, %129 : i5, i3, i7
    %131 = comb.icmp bin eq %130, %c1455_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_51"} : i15
    %132 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %133 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %134 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %135 = comb.concat %132, %133, %134 : i5, i3, i7
    %136 = comb.icmp bin eq %135, %c4527_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_53"} : i15
    %137 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %138 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %139 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %140 = comb.concat %137, %138, %139 : i5, i3, i7
    %141 = comb.icmp bin eq %140, %c12719_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_55"} : i15
    %142 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %143 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %144 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %145 = comb.concat %142, %143, %144 : i5, i3, i7
    %146 = comb.icmp bin eq %145, %c8623_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_57"} : i15
    %147 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %148 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %149 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %150 = comb.concat %147, %148, %149 : i5, i3, i7
    %151 = comb.icmp bin eq %150, %c-15953_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_59"} : i15
    %152 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %153 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %154 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %155 = comb.concat %152, %153, %154 : i5, i3, i7
    %156 = comb.icmp bin eq %155, %c-7761_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_61"} : i15
    %157 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %158 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %159 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %160 = comb.concat %157, %158, %159 : i5, i3, i7
    %161 = comb.icmp bin eq %160, %c-11857_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_63"} : i15
    %162 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %163 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %164 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %165 = comb.concat %162, %163, %164 : i5, i3, i7
    %166 = comb.icmp bin eq %165, %c-3665_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_65"} : i15
    %167 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %168 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 20 : (i32) -> i5
    %169 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %170 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %171 = comb.concat %167, %168, %169, %170 : i5, i5, i3, i7
    %172 = comb.icmp bin eq %171, %c65967_i20 {sv.namehint = "_id_ctrl_decoder_bit_T_67"} : i20
    %173 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i5
    %174 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %175 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %176 = comb.concat %173, %174, %175 : i5, i3, i7
    %177 = comb.icmp bin eq %176, %c3503_i15 {sv.namehint = "_id_ctrl_decoder_bit_T_69"} : i15
    %178 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %179 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %180 = comb.concat %178, %179 : i3, i7
    %181 = comb.icmp bin eq %180, %c387_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_71"} : i10
    %182 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %183 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %184 = comb.concat %182, %183 : i3, i7
    %185 = comb.icmp bin eq %184, %c-253_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_73"} : i10
    %186 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %187 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %188 = comb.concat %186, %187 : i3, i7
    %189 = comb.icmp bin eq %188, %c419_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_75"} : i10
    %190 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 26 : (i32) -> i6
    %191 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %192 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %193 = comb.concat %190, %191, %192 : i6, i3, i7
    %194 = comb.icmp bin eq %193, %c147_i16 {sv.namehint = "_id_ctrl_decoder_bit_T_77"} : i16
    %195 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 26 : (i32) -> i6
    %196 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %197 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %198 = comb.concat %195, %196, %197 : i6, i3, i7
    %199 = comb.icmp bin eq %198, %c659_i16 {sv.namehint = "_id_ctrl_decoder_bit_T_79"} : i16
    %200 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 26 : (i32) -> i6
    %201 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %202 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %203 = comb.concat %200, %201, %202 : i6, i3, i7
    %204 = comb.icmp bin eq %203, %c17043_i16 {sv.namehint = "_id_ctrl_decoder_bit_T_81"} : i16
    %205 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %206 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %207 = comb.concat %205, %206 : i3, i7
    %208 = comb.icmp bin eq %207, %c27_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_83"} : i10
    %209 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %210 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %211 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %212 = comb.concat %209, %210, %211 : i7, i3, i7
    %213 = comb.icmp bin eq %212, %c155_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_85"} : i17
    %214 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %215 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %216 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %217 = comb.concat %214, %215, %216 : i7, i3, i7
    %218 = comb.icmp bin eq %217, %c667_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_87"} : i17
    %219 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %220 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %221 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %222 = comb.concat %219, %220, %221 : i7, i3, i7
    %223 = comb.icmp bin eq %222, %c33435_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_89"} : i17
    %224 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %225 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %226 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %227 = comb.concat %224, %225, %226 : i7, i3, i7
    %228 = comb.icmp bin eq %227, %c59_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_91"} : i17
    %229 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %230 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %231 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %232 = comb.concat %229, %230, %231 : i7, i3, i7
    %233 = comb.icmp bin eq %232, %c32827_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_93"} : i17
    %234 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %235 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %236 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %237 = comb.concat %234, %235, %236 : i7, i3, i7
    %238 = comb.icmp bin eq %237, %c187_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_95"} : i17
    %239 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %240 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %241 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %242 = comb.concat %239, %240, %241 : i7, i3, i7
    %243 = comb.icmp bin eq %242, %c699_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_97"} : i17
    %244 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %245 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %246 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %247 = comb.concat %244, %245, %246 : i7, i3, i7
    %248 = comb.icmp bin eq %247, %c33467_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_99"} : i17
    %249 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_bits, %c2065694835_i32 {sv.namehint = "_id_ctrl_decoder_bit_T_100"} : i32
    %250 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %251 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %252 = comb.concat %250, %251 : i3, i7
    %253 = comb.icmp bin eq %252, %c143_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_102"} : i10
    %254 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %255 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %256 = comb.concat %254, %255 : i3, i7
    %257 = comb.icmp bin eq %256, %c227_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_104"} : i10
    %258 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %259 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %260 = comb.concat %258, %259 : i3, i7
    %261 = comb.icmp bin eq %260, %c99_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_106"} : i10
    %262 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %263 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %264 = comb.concat %262, %263 : i3, i7
    %265 = comb.icmp bin eq %264, %c-413_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_108"} : i10
    %266 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %267 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %268 = comb.concat %266, %267 : i3, i7
    %269 = comb.icmp bin eq %268, %c-157_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_110"} : i10
    %270 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %271 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %272 = comb.concat %270, %271 : i3, i7
    %273 = comb.icmp bin eq %272, %c-285_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_112"} : i10
    %274 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %275 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %276 = comb.concat %274, %275 : i3, i7
    %277 = comb.icmp bin eq %276, %c-29_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_114"} : i10
    %278 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %279 = comb.icmp bin eq %278, %c-17_i7 {sv.namehint = "_id_ctrl_decoder_bit_T_116"} : i7
    %280 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %281 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %282 = comb.concat %280, %281 : i3, i7
    %283 = comb.icmp bin eq %282, %c103_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_118"} : i10
    %284 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %285 = comb.icmp bin eq %284, %c23_i7 {sv.namehint = "_id_ctrl_decoder_bit_T_120"} : i7
    %286 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %287 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %288 = comb.concat %286, %287 : i3, i7
    %289 = comb.icmp bin eq %288, %c3_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_122"} : i10
    %290 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %291 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %292 = comb.concat %290, %291 : i3, i7
    %293 = comb.icmp bin eq %292, %c131_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_124"} : i10
    %294 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %295 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %296 = comb.concat %294, %295 : i3, i7
    %297 = comb.icmp bin eq %296, %c259_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_126"} : i10
    %298 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %299 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %300 = comb.concat %298, %299 : i3, i7
    %301 = comb.icmp bin eq %300, %c-509_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_128"} : i10
    %302 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %303 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %304 = comb.concat %302, %303 : i3, i7
    %305 = comb.icmp bin eq %304, %c-381_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_130"} : i10
    %306 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %307 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %308 = comb.concat %306, %307 : i3, i7
    %309 = comb.icmp bin eq %308, %c35_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_132"} : i10
    %310 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %311 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %312 = comb.concat %310, %311 : i3, i7
    %313 = comb.icmp bin eq %312, %c163_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_134"} : i10
    %314 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %315 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %316 = comb.concat %314, %315 : i3, i7
    %317 = comb.icmp bin eq %316, %c291_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_136"} : i10
    %318 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %319 = comb.icmp bin eq %318, %c55_i7 {sv.namehint = "_id_ctrl_decoder_bit_T_138"} : i7
    %320 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %321 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %322 = comb.concat %320, %321 : i3, i7
    %323 = comb.icmp bin eq %322, %c19_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_140"} : i10
    %324 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %325 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %326 = comb.concat %324, %325 : i3, i7
    %327 = comb.icmp bin eq %326, %c275_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_142"} : i10
    %328 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %329 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %330 = comb.concat %328, %329 : i3, i7
    %331 = comb.icmp bin eq %330, %c403_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_144"} : i10
    %332 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %333 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %334 = comb.concat %332, %333 : i3, i7
    %335 = comb.icmp bin eq %334, %c-109_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_146"} : i10
    %336 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %337 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %338 = comb.concat %336, %337 : i3, i7
    %339 = comb.icmp bin eq %338, %c-237_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_148"} : i10
    %340 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %341 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %342 = comb.concat %340, %341 : i3, i7
    %343 = comb.icmp bin eq %342, %c-493_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_150"} : i10
    %344 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %345 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %346 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %347 = comb.concat %344, %345, %346 : i7, i3, i7
    %348 = comb.icmp bin eq %347, %c51_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_152"} : i17
    %349 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %350 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %351 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %352 = comb.concat %349, %350, %351 : i7, i3, i7
    %353 = comb.icmp bin eq %352, %c32819_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_154"} : i17
    %354 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %355 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %356 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %357 = comb.concat %354, %355, %356 : i7, i3, i7
    %358 = comb.icmp bin eq %357, %c307_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_156"} : i17
    %359 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %360 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %361 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %362 = comb.concat %359, %360, %361 : i7, i3, i7
    %363 = comb.icmp bin eq %362, %c435_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_158"} : i17
    %364 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %365 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %366 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %367 = comb.concat %364, %365, %366 : i7, i3, i7
    %368 = comb.icmp bin eq %367, %c947_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_160"} : i17
    %369 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %370 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %371 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %372 = comb.concat %369, %370, %371 : i7, i3, i7
    %373 = comb.icmp bin eq %372, %c819_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_162"} : i17
    %374 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %375 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %376 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %377 = comb.concat %374, %375, %376 : i7, i3, i7
    %378 = comb.icmp bin eq %377, %c563_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_164"} : i17
    %379 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %380 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %381 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %382 = comb.concat %379, %380, %381 : i7, i3, i7
    %383 = comb.icmp bin eq %382, %c179_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_166"} : i17
    %384 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %385 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %386 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %387 = comb.concat %384, %385, %386 : i7, i3, i7
    %388 = comb.icmp bin eq %387, %c691_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_168"} : i17
    %389 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i7
    %390 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %391 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %392 = comb.concat %389, %390, %391 : i7, i3, i7
    %393 = comb.icmp bin eq %392, %c33459_i17 {sv.namehint = "_id_ctrl_decoder_bit_T_170"} : i17
    %394 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %395 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %396 = comb.concat %394, %395 : i3, i7
    %397 = comb.icmp bin eq %396, %c15_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_172"} : i10
    %398 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_bits, %c115_i32 {sv.namehint = "_id_ctrl_decoder_bit_T_173"} : i32
    %399 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_bits, %c1048691_i32 {sv.namehint = "_id_ctrl_decoder_bit_T_174"} : i32
    %400 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_bits, %c807403635_i32 {sv.namehint = "_id_ctrl_decoder_bit_T_175"} : i32
    %401 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_bits, %c273678451_i32 {sv.namehint = "_id_ctrl_decoder_bit_T_176"} : i32
    %402 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_bits, %c810549363_i32 {sv.namehint = "_id_ctrl_decoder_bit_T_177"} : i32
    %403 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %404 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %405 = comb.concat %403, %404 : i3, i7
    %406 = comb.icmp bin eq %405, %c243_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_179"} : i10
    %407 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %408 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %409 = comb.concat %407, %408 : i3, i7
    %410 = comb.icmp bin eq %409, %c371_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_181"} : i10
    %411 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %412 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %413 = comb.concat %411, %412 : i3, i7
    %414 = comb.icmp bin eq %413, %c499_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_183"} : i10
    %415 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %416 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %417 = comb.concat %415, %416 : i3, i7
    %418 = comb.icmp bin eq %417, %c-269_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_185"} : i10
    %419 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %420 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %421 = comb.concat %419, %420 : i3, i7
    %422 = comb.icmp bin eq %421, %c-141_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_187"} : i10
    %423 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %424 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 0 : (i32) -> i7
    %425 = comb.concat %423, %424 : i3, i7
    %426 = comb.icmp bin eq %425, %c-13_i10 {sv.namehint = "_id_ctrl_decoder_bit_T_189"} : i10
    %427 = comb.or bin %5, %10, %15, %20, %25, %30, %35, %40, %45, %50, %55, %60, %65, %70, %75, %80, %85, %90, %95, %100, %105, %110, %116, %121, %126, %131, %136, %141, %146, %151, %156, %161, %166, %172, %177, %181, %185, %189, %194, %199, %204, %208, %213, %218, %223, %228, %233, %238, %243, %248, %249, %253, %257, %261, %265, %269, %273, %277, %279, %283, %285, %289, %293, %297, %301, %305, %309, %313, %317, %319, %323, %327, %331, %335, %339, %343, %348, %353, %358, %363, %368, %373, %378, %383, %388, %393, %397, %398, %399, %400, %401, %402, %406, %410, %414, %418, %422, %426 {sv.namehint = "id_ctrl_legal"} : i1
    %428 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %429 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %430 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %431 = comb.concat %428, %429, %430 : i1, i1, i1
    %432 = comb.icmp bin eq %431, %c-4_i3 {sv.namehint = "id_ctrl_branch"} : i3
    %433 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %434 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %435 = comb.concat %433, %434 : i1, i1
    %436 = comb.icmp bin eq %435, %c-1_i2 {sv.namehint = "id_ctrl_jal"} : i2
    %437 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i3
    %438 = comb.icmp bin eq %437, %c1_i3 {sv.namehint = "id_ctrl_jalr"} : i3
    %439 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i3
    %440 = comb.icmp bin eq %439, %c2_i3 {sv.namehint = "_id_ctrl_decoder_T_12"} : i3
    %441 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 : (i32) -> i2
    %442 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %443 = comb.concat %441, %442 : i2, i1
    %444 = comb.icmp bin eq %443, %c2_i3 {sv.namehint = "_id_ctrl_decoder_T_9"} : i3
    %445 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i2
    %446 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %447 = comb.concat %445, %446 : i2, i1
    %448 = comb.icmp bin eq %447, %c-4_i3 {sv.namehint = "_id_ctrl_decoder_T_11"} : i3
    %449 = comb.or bin %440, %444, %448 {sv.namehint = "id_ctrl_rxs2"} : i1
    %450 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 : (i32) -> i1
    %451 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %452 = comb.concat %450, %451 : i1, i1
    %453 = comb.icmp bin eq %452, %c0_i2 {sv.namehint = "_id_ctrl_decoder_T_46"} : i2
    %454 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %455 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %456 = comb.concat %454, %455 : i1, i1
    %457 = comb.icmp bin eq %456, %c0_i2 {sv.namehint = "_id_ctrl_decoder_T_17"} : i2
    %458 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %459 = comb.icmp bin eq %458, %c0_i2 {sv.namehint = "_id_ctrl_decoder_T_19"} : i2
    %460 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %461 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %462 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %463 = comb.concat %460, %461, %462 : i1, i1, i1
    %464 = comb.icmp bin eq %463, %c-4_i3 {sv.namehint = "_id_ctrl_decoder_T_21"} : i3
    %465 = comb.or bin %453, %457, %459, %464 {sv.namehint = "id_ctrl_rxs1"} : i1
    %466 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %467 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %468 = comb.concat %466, %467 : i1, i2
    %469 = comb.icmp bin eq %468, %c0_i3 {sv.namehint = "_id_ctrl_decoder_T_33"} : i3
    %470 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 : (i32) -> i1
    %471 = comb.xor bin %470, %true {sv.namehint = "_id_ctrl_decoder_T_28"} : i1
    %472 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i2
    %473 = comb.icmp bin eq %472, %c1_i2 {sv.namehint = "_id_ctrl_decoder_T_159"} : i2
    %474 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 : (i32) -> i1
    %475 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %476 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %477 = comb.concat %474, %475, %476 : i1, i1, i1
    %478 = comb.icmp bin eq %477, %c-1_i3 {sv.namehint = "_id_ctrl_decoder_T_32"} : i3
    %479 = comb.or bin %469, %471, %473, %436, %478 {sv.namehint = "id_ctrl_decoder_lo"} : i1
    %480 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %481 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %482 = comb.concat %480, %481 : i1, i1
    %483 = comb.icmp bin eq %482, %c0_i2 {sv.namehint = "_id_ctrl_decoder_T_41"} : i2
    %484 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 : (i32) -> i1
    %485 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %486 = comb.concat %484, %485 : i1, i1
    %487 = comb.icmp bin eq %486, %c-2_i2 {sv.namehint = "_id_ctrl_decoder_T_40"} : i2
    %488 = comb.or bin %483, %457, %459, %487 {sv.namehint = "id_ctrl_decoder_hi"} : i1
    %489 = comb.concat %488, %479 {sv.namehint = "id_ctrl_sel_alu2"} : i1, i1
    %490 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %491 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %492 = comb.concat %490, %491 : i1, i1
    %493 = comb.icmp bin eq %492, %c0_i2 {sv.namehint = "_id_ctrl_decoder_T_45"} : i2
    %494 = comb.or bin %453, %493, %457, %459 {sv.namehint = "id_ctrl_decoder_lo_1"} : i1
    %495 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 : (i32) -> i1
    %496 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %497 = comb.concat %495, %496 : i1, i1
    %498 = comb.icmp bin eq %497, %c1_i2 {sv.namehint = "_id_ctrl_decoder_T_51"} : i2
    %499 = comb.or bin %498, %436 {sv.namehint = "id_ctrl_decoder_hi_1"} : i1
    %500 = comb.concat %499, %494 {sv.namehint = "id_ctrl_sel_alu1"} : i1, i1
    %501 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %502 = comb.icmp bin eq %501, %c1_i2 {sv.namehint = "_id_ctrl_decoder_T_56"} : i2
    %503 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %504 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %505 = comb.concat %503, %504 : i1, i1
    %506 = comb.icmp bin eq %505, %c-2_i2 {sv.namehint = "_id_ctrl_decoder_T_55"} : i2
    %507 = comb.or bin %502, %506 {sv.namehint = "id_ctrl_decoder_lo_2"} : i1
    %508 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %509 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %510 = comb.concat %508, %509 : i1, i1
    %511 = comb.icmp bin eq %510, %c1_i2 {sv.namehint = "_id_ctrl_decoder_T_59"} : i2
    %512 = comb.or bin %511, %502 {sv.namehint = "id_ctrl_decoder_hi_lo"} : i1
    %513 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %514 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %515 = comb.concat %513, %514 : i1, i1
    %516 = comb.icmp bin eq %515, %c-2_i2 {sv.namehint = "_id_ctrl_decoder_T_61"} : i2
    %517 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i2
    %518 = comb.icmp bin eq %517, %c0_i2 {sv.namehint = "_id_ctrl_decoder_T_63"} : i2
    %519 = comb.or bin %438, %516, %518 {sv.namehint = "id_ctrl_decoder_hi_hi"} : i1
    %520 = comb.concat %519, %512, %507 {sv.namehint = "id_ctrl_sel_imm"} : i1, i1, i1
    %521 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %522 = comb.xor bin %521, %true {sv.namehint = "_id_ctrl_decoder_T_70"} : i1
    %523 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %524 = comb.xor bin %523, %true {sv.namehint = "_id_ctrl_decoder_T_69"} : i1
    %525 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i2
    %526 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %527 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %528 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %529 = comb.concat %525, %526, %527, %528 : i2, i1, i1, i1
    %530 = comb.icmp bin eq %529, %c10_i5 {sv.namehint = "_id_ctrl_decoder_T_79"} : i5
    %531 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i1
    %532 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %533 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %534 = comb.concat %531, %532, %533 : i1, i1, i2
    %535 = comb.icmp bin eq %534, %c-4_i4 {sv.namehint = "_id_ctrl_decoder_T_74"} : i4
    %536 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i3
    %537 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %538 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %539 = comb.concat %536, %537, %538 : i3, i1, i1
    %540 = comb.icmp bin eq %539, %c-4_i5 {sv.namehint = "_id_ctrl_decoder_T_76"} : i5
    %541 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i1
    %542 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i1
    %543 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i3
    %544 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %545 = comb.concat %541, %542, %543, %544 : i1, i1, i3, i1
    %546 = comb.icmp bin eq %545, %c-10_i6 {sv.namehint = "_id_ctrl_decoder_T_78"} : i6
    %547 = comb.or bin %530, %535, %540, %546 {sv.namehint = "id_ctrl_decoder_lo_lo"} : i1
    %548 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 : (i32) -> i1
    %549 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %550 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %551 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %552 = comb.concat %548, %549, %550, %551 : i1, i1, i1, i1
    %553 = comb.icmp bin eq %552, %c4_i4 {sv.namehint = "_id_ctrl_decoder_T_96"} : i4
    %554 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %555 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %556 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %557 = comb.concat %554, %555, %556 : i1, i1, i2
    %558 = comb.icmp bin eq %557, %c-4_i4 {sv.namehint = "_id_ctrl_decoder_T_85"} : i4
    %559 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i2
    %560 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %561 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %562 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %563 = comb.concat %559, %560, %561, %562 : i2, i1, i1, i1
    %564 = comb.icmp bin eq %563, %c-6_i5 {sv.namehint = "_id_ctrl_decoder_T_87"} : i5
    %565 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i2
    %566 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %567 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %568 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %569 = comb.concat %565, %566, %567, %568 : i2, i1, i1, i1
    %570 = comb.icmp bin eq %569, %c-6_i5 {sv.namehint = "_id_ctrl_decoder_T_89"} : i5
    %571 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i1
    %572 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %573 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i3
    %574 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %575 = comb.concat %571, %572, %573, %574 : i1, i1, i3, i1
    %576 = comb.icmp bin eq %575, %c-10_i6 {sv.namehint = "_id_ctrl_decoder_T_91"} : i6
    %577 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 30 : (i32) -> i1
    %578 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i2
    %579 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i2
    %580 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %581 = comb.concat %577, %578, %579, %580 : i1, i2, i2, i1
    %582 = comb.icmp bin eq %581, %c-26_i6 {sv.namehint = "_id_ctrl_decoder_T_93"} : i6
    %583 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 30 : (i32) -> i1
    %584 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i1
    %585 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %586 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %587 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %588 = comb.concat %583, %584, %585, %586, %587 : i1, i1, i1, i1, i1
    %589 = comb.icmp bin eq %588, %c-6_i5 {sv.namehint = "_id_ctrl_decoder_T_95"} : i5
    %590 = comb.or bin %553, %558, %564, %570, %576, %582, %589 {sv.namehint = "id_ctrl_decoder_lo_hi"} : i1
    %591 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i1
    %592 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %593 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %594 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %595 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %596 = comb.concat %591, %592, %593, %594, %595 : i1, i1, i1, i1, i1
    %597 = comb.icmp bin eq %596, %c10_i5 {sv.namehint = "_id_ctrl_decoder_T_112"} : i5
    %598 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %599 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i2
    %600 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %601 = comb.concat %598, %599, %600 : i1, i2, i1
    %602 = comb.icmp bin eq %601, %c-6_i4 {sv.namehint = "_id_ctrl_decoder_T_105"} : i4
    %603 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 30 : (i32) -> i1
    %604 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 : (i32) -> i1
    %605 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %606 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %607 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %608 = comb.concat %603, %604, %605, %606, %607 : i1, i1, i1, i1, i1
    %609 = comb.icmp bin eq %608, %c10_i5 {sv.namehint = "_id_ctrl_decoder_T_107"} : i5
    %610 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 : (i32) -> i1
    %611 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i1
    %612 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %613 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %614 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %615 = comb.concat %610, %611, %612, %613, %614 : i1, i1, i1, i1, i1
    %616 = comb.icmp bin eq %615, %c-14_i5 {sv.namehint = "_id_ctrl_decoder_T_109"} : i5
    %617 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 14 : (i32) -> i1
    %618 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %619 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %620 = comb.concat %617, %618, %619 : i1, i1, i2
    %621 = comb.icmp bin eq %620, %c-4_i4 {sv.namehint = "_id_ctrl_decoder_T_111"} : i4
    %622 = comb.or bin %597, %602, %609, %616, %621 {sv.namehint = "id_ctrl_decoder_hi_lo_1"} : i1
    %623 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i1
    %624 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i2
    %625 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %626 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %627 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %628 = comb.concat %623, %624, %625, %626, %627 : i1, i2, i1, i1, i1
    %629 = comb.icmp bin eq %628, %c10_i6 {sv.namehint = "_id_ctrl_decoder_T_122"} : i6
    %630 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i2
    %631 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i2
    %632 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %633 = comb.concat %630, %631, %632 : i2, i2, i1
    %634 = comb.icmp bin eq %633, %c10_i5 {sv.namehint = "_id_ctrl_decoder_T_119"} : i5
    %635 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 30 : (i32) -> i1
    %636 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i2
    %637 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %638 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %639 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %640 = comb.concat %635, %636, %637, %638, %639 : i1, i2, i1, i1, i1
    %641 = comb.icmp bin eq %640, %c-22_i6 {sv.namehint = "_id_ctrl_decoder_T_121"} : i6
    %642 = comb.or bin %629, %634, %621, %582, %641 {sv.namehint = "id_ctrl_decoder_hi_hi_1"} : i1
    %643 = comb.concat %642, %622, %590, %547 {sv.namehint = "id_ctrl_alu_fn"} : i1, i1, i1, i1
    %644 = comb.or bin %70, %75, %80, %85, %90, %95, %100, %105, %110, %116, %121, %126, %131, %136, %141, %146, %151, %156, %161, %166, %172, %177, %181, %185, %189, %289, %293, %297, %301, %305, %309, %313, %317 {sv.namehint = "id_ctrl_mem"} : i1
    %645 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 : (i32) -> i1
    %646 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %647 = comb.concat %645, %646 : i1, i1
    %648 = comb.icmp bin eq %647, %c-2_i2 {sv.namehint = "_id_ctrl_decoder_T_132"} : i2
    %649 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i2
    %650 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 : (i32) -> i1
    %651 = comb.concat %649, %650 : i2, i1
    %652 = comb.icmp bin eq %651, %c-1_i3 {sv.namehint = "_id_ctrl_decoder_T_129"} : i3
    %653 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 29 : (i32) -> i1
    %654 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 : (i32) -> i1
    %655 = comb.concat %653, %654 : i1, i1
    %656 = comb.icmp bin eq %655, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_131"} : i2
    %657 = comb.or bin %648, %652, %656 {sv.namehint = "id_ctrl_decoder_lo_lo_1"} : i1
    %658 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 28 : (i32) -> i1
    %659 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %660 = comb.concat %658, %659 : i1, i1
    %661 = comb.icmp bin eq %660, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_138"} : i2
    %662 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 30 : (i32) -> i1
    %663 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %664 = comb.concat %662, %663 : i1, i1
    %665 = comb.icmp bin eq %664, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_137"} : i2
    %666 = comb.or bin %661, %665 {sv.namehint = "id_ctrl_decoder_lo_hi_1"} : i1
    %667 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i1
    %668 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %669 = comb.concat %667, %668 : i1, i1
    %670 = comb.icmp bin eq %669, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_143"} : i2
    %671 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 31 : (i32) -> i1
    %672 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %673 = comb.concat %671, %672 : i1, i1
    %674 = comb.icmp bin eq %673, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_142"} : i2
    %675 = comb.or bin %670, %661, %674 {sv.namehint = "id_ctrl_decoder_hi_lo_2"} : i1
    %676 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 27 : (i32) -> i2
    %677 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %678 = comb.concat %676, %677 : i2, i1
    %679 = comb.icmp bin eq %678, %c1_i3 {sv.namehint = "id_ctrl_decoder_hi_hi_lo"} : i3
    %680 = comb.concat %false, %679, %675, %666, %657 {sv.namehint = "id_ctrl_mem_cmd"} : i1, i1, i1, i1, i1
    %681 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 : (i32) -> i1
    %682 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i3
    %683 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 2 : (i32) -> i1
    %684 = comb.concat %681, %682, %683 : i1, i3, i1
    %685 = comb.icmp bin eq %684, %c-10_i5 {sv.namehint = "id_ctrl_div"} : i5
    %686 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %687 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %688 = comb.concat %686, %687 : i1, i1
    %689 = comb.icmp bin eq %688, %c1_i2 {sv.namehint = "_id_ctrl_decoder_T_150"} : i2
    %690 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i1
    %691 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %692 = comb.concat %690, %691 : i1, i1
    %693 = comb.icmp bin eq %692, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_152"} : i2
    %694 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %695 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %696 = comb.concat %694, %695 : i1, i1
    %697 = comb.icmp bin eq %696, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_154"} : i2
    %698 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %699 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %700 = comb.concat %698, %699 : i1, i1
    %701 = comb.icmp bin eq %700, %c-1_i2 {sv.namehint = "_id_ctrl_decoder_T_156"} : i2
    %702 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 5 : (i32) -> i1
    %703 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %704 = comb.concat %702, %703 : i1, i1
    %705 = comb.icmp bin eq %704, %c0_i2 {sv.namehint = "_id_ctrl_decoder_T_158"} : i2
    %706 = comb.or bin %473, %689, %436, %693, %697, %701, %705 {sv.namehint = "id_ctrl_wxd"} : i1
    %707 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i1
    %708 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %709 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %710 = comb.concat %707, %708, %709 : i1, i1, i1
    %711 = comb.icmp bin eq %710, %c-1_i3 {sv.namehint = "id_ctrl_decoder_lo_5"} : i3
    %712 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %713 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %714 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %715 = comb.concat %712, %713, %714 : i1, i1, i1
    %716 = comb.icmp bin eq %715, %c-1_i3 {sv.namehint = "id_ctrl_decoder_hi_lo_3"} : i3
    %717 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %718 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 4 : (i32) -> i1
    %719 = comb.concat %717, %718 : i1, i1
    %720 = comb.icmp bin eq %719, %c-1_i2 {sv.namehint = "id_ctrl_decoder_hi_hi_3"} : i2
    %721 = comb.concat %720, %716, %711 {sv.namehint = "id_ctrl_csr"} : i1, i1, i1
    %722 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 : (i32) -> i2
    %723 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %724 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %725 = comb.concat %722, %723, %724 : i2, i1, i2
    %726 = comb.icmp bin eq %725, %c9_i5 {sv.namehint = "id_ctrl_fence_i"} : i5
    %727 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i1
    %728 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %729 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i2
    %730 = comb.concat %727, %728, %729 : i1, i1, i2
    %731 = comb.icmp bin eq %730, %c1_i4 {sv.namehint = "id_ctrl_fence"} : i4
    %732 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 13 : (i32) -> i2
    %733 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 6 : (i32) -> i1
    %734 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 3 : (i32) -> i1
    %735 = comb.concat %732, %733, %734 : i2, i1, i1
    %736 = comb.icmp bin eq %735, %c5_i4 {sv.namehint = "id_ctrl_amo"} : i4
    %id_reg_fence = seq.firreg %896 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1003 : ui64} : i1
    %rf = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <31 x 64>
    seq.firmem.write_port %rf[%1233] = %1231, clock %clock enable %1234 : <31 x 64>
    %737 = seq.firmem.read_port %rf[%741], clock %clock : <31 x 64>
    %738 = seq.firmem.read_port %rf[%744], clock %clock : <31 x 64>
    %739 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs1, %c0_i5 : i5
    %740 = comb.xor bin %739, %true {sv.namehint = "id_bypass_src_0_0"} : i1
    %741 = comb.xor bin %ibuf.io_inst_0_bits_inst_rs1, %c-1_i5 {sv.namehint = "_id_rs_T_3"} : i5
    %742 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs2, %c0_i5 : i5
    %743 = comb.xor bin %742, %true {sv.namehint = "id_bypass_src_1_0"} : i1
    %744 = comb.xor bin %ibuf.io_inst_0_bits_inst_rs2, %c-1_i5 {sv.namehint = "_id_rs_T_8"} : i5
    %csr.io_rw_rdata, %csr.io_decode_0_read_illegal, %csr.io_decode_0_write_illegal, %csr.io_decode_0_write_flush, %csr.io_decode_0_system_illegal, %csr.io_csr_stall, %csr.io_eret, %csr.io_singleStep, %csr.io_status_debug, %csr.io_status_wfi, %csr.io_status_isa, %csr.io_status_dprv, %csr.io_evec, %csr.io_time, %csr.io_interrupt, %csr.io_interrupt_cause, %csr.io_bp_0_control_action, %csr.io_bp_0_control_tmatch, %csr.io_bp_0_control_x, %csr.io_bp_0_control_w, %csr.io_bp_0_control_r, %csr.io_bp_0_address, %csr.io_pmp_0_cfg_l, %csr.io_pmp_0_cfg_a, %csr.io_pmp_0_cfg_x, %csr.io_pmp_0_cfg_w, %csr.io_pmp_0_cfg_r, %csr.io_pmp_0_addr, %csr.io_pmp_0_mask, %csr.io_pmp_1_cfg_l, %csr.io_pmp_1_cfg_a, %csr.io_pmp_1_cfg_x, %csr.io_pmp_1_cfg_w, %csr.io_pmp_1_cfg_r, %csr.io_pmp_1_addr, %csr.io_pmp_1_mask, %csr.io_pmp_2_cfg_l, %csr.io_pmp_2_cfg_a, %csr.io_pmp_2_cfg_x, %csr.io_pmp_2_cfg_w, %csr.io_pmp_2_cfg_r, %csr.io_pmp_2_addr, %csr.io_pmp_2_mask, %csr.io_pmp_3_cfg_l, %csr.io_pmp_3_cfg_a, %csr.io_pmp_3_cfg_x, %csr.io_pmp_3_cfg_w, %csr.io_pmp_3_cfg_r, %csr.io_pmp_3_addr, %csr.io_pmp_3_mask, %csr.io_pmp_4_cfg_l, %csr.io_pmp_4_cfg_a, %csr.io_pmp_4_cfg_x, %csr.io_pmp_4_cfg_w, %csr.io_pmp_4_cfg_r, %csr.io_pmp_4_addr, %csr.io_pmp_4_mask, %csr.io_pmp_5_cfg_l, %csr.io_pmp_5_cfg_a, %csr.io_pmp_5_cfg_x, %csr.io_pmp_5_cfg_w, %csr.io_pmp_5_cfg_r, %csr.io_pmp_5_addr, %csr.io_pmp_5_mask, %csr.io_pmp_6_cfg_l, %csr.io_pmp_6_cfg_a, %csr.io_pmp_6_cfg_x, %csr.io_pmp_6_cfg_w, %csr.io_pmp_6_cfg_r, %csr.io_pmp_6_addr, %csr.io_pmp_6_mask, %csr.io_pmp_7_cfg_l, %csr.io_pmp_7_cfg_a, %csr.io_pmp_7_cfg_x, %csr.io_pmp_7_cfg_w, %csr.io_pmp_7_cfg_r, %csr.io_pmp_7_addr, %csr.io_pmp_7_mask, %csr.io_inhibit_cycle, %csr.io_customCSRs_0_value = hw.instance "csr" @CSRFile(clock: %clock: !seq.clock, reset: %reset: i1, io_ungated_clock: %clock: !seq.clock, io_interrupts_debug: %io_interrupts_debug: i1, io_interrupts_mtip: %io_interrupts_mtip: i1, io_interrupts_msip: %io_interrupts_msip: i1, io_interrupts_meip: %io_interrupts_meip: i1, io_rw_addr: %1261: i12, io_rw_cmd: %1263: i3, io_rw_wdata: %wb_reg_wdata: i64, io_decode_0_csr: %1241: i12, io_exception: %1194: i1, io_retire: %1223: i1, io_cause: %1201: i64, io_pc: %wb_reg_pc: i34, io_tval: %1260: i34) -> (io_rw_rdata: i64, io_decode_0_read_illegal: i1, io_decode_0_write_illegal: i1, io_decode_0_write_flush: i1, io_decode_0_system_illegal: i1, io_csr_stall: i1, io_eret: i1, io_singleStep: i1, io_status_debug: i1, io_status_wfi: i1, io_status_isa: i32, io_status_dprv: i2, io_evec: i34, io_time: i64, io_interrupt: i1, io_interrupt_cause: i64, io_bp_0_control_action: i1, io_bp_0_control_tmatch: i2, io_bp_0_control_x: i1, io_bp_0_control_w: i1, io_bp_0_control_r: i1, io_bp_0_address: i33, io_pmp_0_cfg_l: i1, io_pmp_0_cfg_a: i2, io_pmp_0_cfg_x: i1, io_pmp_0_cfg_w: i1, io_pmp_0_cfg_r: i1, io_pmp_0_addr: i30, io_pmp_0_mask: i32, io_pmp_1_cfg_l: i1, io_pmp_1_cfg_a: i2, io_pmp_1_cfg_x: i1, io_pmp_1_cfg_w: i1, io_pmp_1_cfg_r: i1, io_pmp_1_addr: i30, io_pmp_1_mask: i32, io_pmp_2_cfg_l: i1, io_pmp_2_cfg_a: i2, io_pmp_2_cfg_x: i1, io_pmp_2_cfg_w: i1, io_pmp_2_cfg_r: i1, io_pmp_2_addr: i30, io_pmp_2_mask: i32, io_pmp_3_cfg_l: i1, io_pmp_3_cfg_a: i2, io_pmp_3_cfg_x: i1, io_pmp_3_cfg_w: i1, io_pmp_3_cfg_r: i1, io_pmp_3_addr: i30, io_pmp_3_mask: i32, io_pmp_4_cfg_l: i1, io_pmp_4_cfg_a: i2, io_pmp_4_cfg_x: i1, io_pmp_4_cfg_w: i1, io_pmp_4_cfg_r: i1, io_pmp_4_addr: i30, io_pmp_4_mask: i32, io_pmp_5_cfg_l: i1, io_pmp_5_cfg_a: i2, io_pmp_5_cfg_x: i1, io_pmp_5_cfg_w: i1, io_pmp_5_cfg_r: i1, io_pmp_5_addr: i30, io_pmp_5_mask: i32, io_pmp_6_cfg_l: i1, io_pmp_6_cfg_a: i2, io_pmp_6_cfg_x: i1, io_pmp_6_cfg_w: i1, io_pmp_6_cfg_r: i1, io_pmp_6_addr: i30, io_pmp_6_mask: i32, io_pmp_7_cfg_l: i1, io_pmp_7_cfg_a: i2, io_pmp_7_cfg_x: i1, io_pmp_7_cfg_w: i1, io_pmp_7_cfg_r: i1, io_pmp_7_addr: i30, io_pmp_7_mask: i32, io_inhibit_cycle: i1, io_customCSRs_0_value: i64) {sv.namehint = "csr.io_time"}
    %745 = comb.icmp bin eq %721, %c-2_i3 {sv.namehint = "_id_csr_ren_T"} : i3
    %746 = comb.icmp bin eq %721, %c-1_i3 {sv.namehint = "_id_csr_ren_T_1"} : i3
    %747 = comb.icmp bin eq %721, %c-3_i3 {sv.namehint = "_id_csr_en_T_2"} : i3
    %748 = comb.or bin %745, %746, %747 {sv.namehint = "id_csr_en"} : i1
    %749 = comb.icmp bin eq %721, %c-4_i3 {sv.namehint = "id_system_insn"} : i3
    %750 = comb.or bin %745, %746 {sv.namehint = "_id_csr_ren_T_2"} : i1
    %751 = comb.and bin %750, %740 {sv.namehint = "id_csr_ren"} : i1
    %752 = comb.mux bin %751, %c2_i3, %721 {sv.namehint = "id_csr"} : i3
    %753 = comb.xor bin %751, %true {sv.namehint = "_id_illegal_insn_T_39"} : i1
    %754 = comb.and bin %748, %753, %csr.io_decode_0_write_flush {sv.namehint = "_id_csr_flush_T_3"} : i1
    %755 = comb.xor bin %427, %true {sv.namehint = "_id_illegal_insn_T"} : i1
    %756 = comb.extract %csr.io_status_isa from 12 {sv.namehint = "_id_illegal_insn_T_2"} : (i32) -> i1
    %757 = comb.xor bin %756, %true {sv.namehint = "_id_illegal_insn_T_3"} : i1
    %758 = comb.and bin %685, %757 {sv.namehint = "_id_illegal_insn_T_4"} : i1
    %759 = comb.extract %csr.io_status_isa from 0 {sv.namehint = "_id_illegal_insn_T_6"} : (i32) -> i1
    %760 = comb.xor bin %759, %true {sv.namehint = "_id_illegal_insn_T_7"} : i1
    %761 = comb.and bin %736, %760 {sv.namehint = "_id_illegal_insn_T_8"} : i1
    %762 = comb.extract %csr.io_status_isa from 2 {sv.namehint = "_mem_npc_misaligned_T"} : (i32) -> i1
    %763 = comb.xor bin %762, %true {sv.namehint = "_id_illegal_insn_T_18"} : i1
    %764 = comb.and bin %ibuf.io_inst_0_bits_rvc, %763 {sv.namehint = "_id_illegal_insn_T_19"} : i1
    %765 = comb.and bin %753, %csr.io_decode_0_write_illegal {sv.namehint = "_id_illegal_insn_T_40"} : i1
    %766 = comb.or bin %csr.io_decode_0_read_illegal, %765 {sv.namehint = "_id_illegal_insn_T_41"} : i1
    %767 = comb.and bin %748, %766 {sv.namehint = "_id_illegal_insn_T_42"} : i1
    %768 = comb.xor bin %ibuf.io_inst_0_bits_rvc, %true {sv.namehint = "_id_illegal_insn_T_44"} : i1
    %769 = comb.and bin %768, %749, %csr.io_decode_0_system_illegal {sv.namehint = "_id_illegal_insn_T_47"} : i1
    %770 = comb.or bin %755, %758, %761, %764, %767, %769 {sv.namehint = "id_illegal_insn"} : i1
    %771 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 26 {sv.namehint = "id_amo_aq"} : (i32) -> i1
    %772 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 25 {sv.namehint = "id_amo_rl"} : (i32) -> i1
    %773 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 20 {sv.namehint = "id_fence_succ"} : (i32) -> i4
    %774 = comb.and bin %736, %771 {sv.namehint = "_id_fence_next_T"} : i1
    %775 = comb.or bin %731, %774 {sv.namehint = "id_fence_next"} : i1
    %776 = comb.xor bin %io_dmem_ordered, %true {sv.namehint = "_id_mem_busy_T"} : i1
    %777 = comb.or bin %776, %1357 {sv.namehint = "id_mem_busy"} : i1
    %778 = comb.and %777, %id_reg_fence : i1
    %779 = comb.and bin %wb_reg_valid, %wb_ctrl_rocc {sv.namehint = "_io_rocc_cmd_valid_T"} : i1
    %780 = comb.and bin %736, %772 {sv.namehint = "_id_do_fence_x8_T_1"} : i1
    %781 = comb.and bin %id_reg_fence, %644 {sv.namehint = "_id_do_fence_x8_T_4"} : i1
    %782 = comb.or bin %780, %726, %781 {sv.namehint = "_id_do_fence_x8_T_5"} : i1
    %783 = comb.and bin %777, %782 {sv.namehint = "id_do_fence"} : i1
    %bpu.io_xcpt_if, %bpu.io_xcpt_ld, %bpu.io_xcpt_st, %bpu.io_debug_if, %bpu.io_debug_ld, %bpu.io_debug_st = hw.instance "bpu" @BreakpointUnit(io_status_debug: %csr.io_status_debug: i1, io_bp_0_control_action: %csr.io_bp_0_control_action: i1, io_bp_0_control_tmatch: %csr.io_bp_0_control_tmatch: i2, io_bp_0_control_x: %csr.io_bp_0_control_x: i1, io_bp_0_control_w: %csr.io_bp_0_control_w: i1, io_bp_0_control_r: %csr.io_bp_0_control_r: i1, io_bp_0_address: %csr.io_bp_0_address: i33, io_pc: %784: i33, io_ea: %785: i33) -> (io_xcpt_if: i1, io_xcpt_ld: i1, io_xcpt_st: i1, io_debug_if: i1, io_debug_ld: i1, io_debug_st: i1) {sv.namehint = "bpu.io_xcpt_st"}
    %784 = comb.extract %ibuf.io_pc from 0 {sv.namehint = "bpu.io_pc"} : (i34) -> i33
    %785 = comb.extract %mem_reg_wdata from 0 {sv.namehint = "bpu.io_ea"} : (i64) -> i33
    %786 = comb.or bin %csr.io_interrupt, %bpu.io_debug_if, %bpu.io_xcpt_if, %ibuf.io_inst_0_bits_xcpt0_pf_inst, %ibuf.io_inst_0_bits_xcpt0_ae_inst, %ibuf.io_inst_0_bits_xcpt1_pf_inst, %ibuf.io_inst_0_bits_xcpt1_ae_inst, %770 {sv.namehint = "id_xcpt"} : i1
    %787 = comb.mux bin %ibuf.io_inst_0_bits_xcpt1_ae_inst, %c1_i2, %c-2_i2 : i2
    %788 = comb.concat %c0_i2, %787 : i2, i2
    %789 = comb.mux bin %ibuf.io_inst_0_bits_xcpt1_pf_inst, %c-4_i4, %788 : i4
    %790 = comb.mux bin %ibuf.io_inst_0_bits_xcpt0_ae_inst, %c1_i4, %789 : i4
    %791 = comb.mux bin %ibuf.io_inst_0_bits_xcpt0_pf_inst, %c-4_i4, %790 : i4
    %792 = comb.mux bin %bpu.io_xcpt_if, %c3_i4, %791 : i4
    %793 = comb.mux bin %bpu.io_debug_if, %c-2_i4, %792 : i4
    %794 = comb.concat %c0_i60, %793 : i60, i4
    %795 = comb.mux bin %csr.io_interrupt, %csr.io_interrupt_cause, %794 {sv.namehint = "id_cause"} : i64
    %796 = comb.extract %ex_reg_inst from 7 {sv.namehint = "ex_waddr"} : (i32) -> i5
    %797 = comb.extract %mem_reg_inst from 7 {sv.namehint = "mem_waddr"} : (i32) -> i5
    %798 = comb.extract %wb_reg_inst from 7 {sv.namehint = "wb_waddr"} : (i32) -> i5
    %799 = comb.and bin %ex_reg_valid, %ex_ctrl_wxd : i1
    %800 = comb.and bin %mem_reg_valid, %mem_ctrl_wxd {sv.namehint = "_dcache_kill_mem_T"} : i1
    %801 = comb.xor bin %mem_ctrl_mem, %true : i1
    %802 = comb.and bin %800, %801 : i1
    %803 = comb.icmp bin eq %796, %ibuf.io_inst_0_bits_inst_rs1 {sv.namehint = "_fp_data_hazard_ex_T"} : i5
    %804 = comb.and bin %799, %803 {sv.namehint = "id_bypass_src_0_1"} : i1
    %805 = comb.icmp bin eq %797, %ibuf.io_inst_0_bits_inst_rs1 {sv.namehint = "_fp_data_hazard_mem_T"} : i5
    %806 = comb.and bin %802, %805 {sv.namehint = "id_bypass_src_0_2"} : i1
    %807 = comb.and bin %800, %805 {sv.namehint = "id_bypass_src_0_3"} : i1
    %808 = comb.icmp bin eq %796, %ibuf.io_inst_0_bits_inst_rs2 {sv.namehint = "_fp_data_hazard_ex_T_2"} : i5
    %809 = comb.and bin %799, %808 {sv.namehint = "id_bypass_src_1_1"} : i1
    %810 = comb.icmp bin eq %797, %ibuf.io_inst_0_bits_inst_rs2 {sv.namehint = "_fp_data_hazard_mem_T_2"} : i5
    %811 = comb.and bin %802, %810 {sv.namehint = "id_bypass_src_1_2"} : i1
    %812 = comb.and bin %800, %810 {sv.namehint = "id_bypass_src_1_3"} : i1
    %ex_reg_rs_bypass_0 = seq.firreg %958 clock %clock {firrtl.random_init_start = 1004 : ui64} : i1
    %ex_reg_rs_bypass_1 = seq.firreg %944 clock %clock {firrtl.random_init_start = 1005 : ui64} : i1
    %ex_reg_rs_lsb_0 = seq.firreg %961 clock %clock {firrtl.random_init_start = 1006 : ui64} : i2
    %ex_reg_rs_lsb_1 = seq.firreg %949 clock %clock {firrtl.random_init_start = 1008 : ui64} : i2
    %ex_reg_rs_msb_0 = seq.firreg %965 clock %clock {firrtl.random_init_start = 1010 : ui64} : i62
    %ex_reg_rs_msb_1 = seq.firreg %952 clock %clock {firrtl.random_init_start = 1072 : ui64} : i62
    %813 = hw.array_create %io_dmem_resp_bits_data_word_bypass, %wb_reg_wdata, %mem_reg_wdata, %c0_i64 : i64
    %814 = hw.array_get %813[%ex_reg_rs_lsb_0] {sv.namehint = "_ex_rs_T_5"} : !hw.array<4xi64>, i2
    %815 = comb.concat %ex_reg_rs_msb_0, %ex_reg_rs_lsb_0 {sv.namehint = "_ex_rs_T_6"} : i62, i2
    %816 = comb.mux bin %ex_reg_rs_bypass_0, %814, %815 {sv.namehint = "ex_rs_0"} : i64
    %817 = hw.array_create %io_dmem_resp_bits_data_word_bypass, %wb_reg_wdata, %mem_reg_wdata, %c0_i64 : i64
    %818 = hw.array_get %817[%ex_reg_rs_lsb_1] {sv.namehint = "_ex_rs_T_12"} : !hw.array<4xi64>, i2
    %819 = comb.concat %ex_reg_rs_msb_1, %ex_reg_rs_lsb_1 {sv.namehint = "_ex_rs_T_13"} : i62, i2
    %820 = comb.mux bin %ex_reg_rs_bypass_1, %818, %819 {sv.namehint = "ex_rs_1"} : i64
    %821 = comb.icmp bin eq %ex_ctrl_sel_imm, %c-3_i3 {sv.namehint = "_ex_imm_b0_T_4"} : i3
    %822 = comb.extract %ex_reg_inst from 31 {sv.namehint = "_ex_imm_sign_T_1"} : (i32) -> i1
    %823 = comb.xor %821, %true : i1
    %824 = comb.and %823, %822 {sv.namehint = "ex_imm_sign"} : i1
    %825 = comb.icmp bin eq %ex_ctrl_sel_imm, %c2_i3 {sv.namehint = "_ex_imm_b4_1_T"} : i3
    %826 = comb.extract %ex_reg_inst from 20 {sv.namehint = "_ex_imm_b30_20_T_1"} : (i32) -> i11
    %827 = comb.replicate %824 : (i1) -> i11
    %828 = comb.mux bin %825, %826, %827 {sv.namehint = "ex_imm_b30_20"} : i11
    %829 = comb.icmp bin ne %ex_ctrl_sel_imm, %c2_i3 {sv.namehint = "_ex_imm_b19_12_T"} : i3
    %830 = comb.icmp bin ne %ex_ctrl_sel_imm, %c3_i3 {sv.namehint = "_ex_imm_b19_12_T_1"} : i3
    %831 = comb.and bin %829, %830 {sv.namehint = "_ex_imm_b19_12_T_2"} : i1
    %832 = comb.extract %ex_reg_inst from 12 {sv.namehint = "_ex_imm_b19_12_T_3"} : (i32) -> i8
    %833 = comb.replicate %824 : (i1) -> i8
    %834 = comb.mux bin %831, %833, %832 {sv.namehint = "ex_imm_b19_12"} : i8
    %835 = comb.or bin %825, %821 {sv.namehint = "_ex_imm_b11_T_2"} : i1
    %836 = comb.icmp bin eq %ex_ctrl_sel_imm, %c3_i3 {sv.namehint = "_ex_imm_b11_T_3"} : i3
    %837 = comb.extract %ex_reg_inst from 20 {sv.namehint = "_ex_imm_b0_T_3"} : (i32) -> i1
    %838 = comb.icmp bin eq %ex_ctrl_sel_imm, %c1_i3 {sv.namehint = "_ex_imm_b4_1_T_2"} : i3
    %839 = comb.extract %ex_reg_inst from 7 {sv.namehint = "_ex_imm_b0_T_1"} : (i32) -> i1
    %840 = comb.mux bin %838, %839, %824 {sv.namehint = "_ex_imm_b11_T_9"} : i1
    %841 = comb.mux bin %836, %837, %840 {sv.namehint = "_ex_imm_b11_T_10"} : i1
    %842 = comb.xor %835, %true : i1
    %843 = comb.and %842, %841 {sv.namehint = "ex_imm_b11"} : i1
    %844 = comb.or bin %825, %821 {sv.namehint = "_ex_imm_b10_5_T_2"} : i1
    %845 = comb.extract %ex_reg_inst from 25 {sv.namehint = "_ex_imm_b10_5_T_3"} : (i32) -> i6
    %846 = comb.mux bin %844, %c0_i6, %845 {sv.namehint = "ex_imm_lo_hi_hi"} : i6
    %847 = comb.icmp bin eq %ex_ctrl_sel_imm, %c0_i3 {sv.namehint = "_ex_imm_b0_T"} : i3
    %848 = comb.or bin %847, %838 {sv.namehint = "_ex_imm_b4_1_T_3"} : i1
    %849 = comb.extract %ex_reg_inst from 8 {sv.namehint = "_ex_imm_b4_1_T_4"} : (i32) -> i4
    %850 = comb.extract %ex_reg_inst from 16 {sv.namehint = "_ex_imm_b4_1_T_6"} : (i32) -> i4
    %851 = comb.extract %ex_reg_inst from 21 {sv.namehint = "_ex_imm_b4_1_T_7"} : (i32) -> i4
    %852 = comb.mux bin %821, %850, %851 {sv.namehint = "_ex_imm_b4_1_T_8"} : i4
    %853 = comb.mux bin %848, %849, %852 {sv.namehint = "_ex_imm_b4_1_T_9"} : i4
    %854 = comb.mux bin %825, %c0_i4, %853 {sv.namehint = "ex_imm_lo_hi_lo"} : i4
    %855 = comb.icmp bin eq %ex_ctrl_sel_imm, %c-4_i3 {sv.namehint = "_ex_imm_b0_T_2"} : i3
    %856 = comb.extract %ex_reg_inst from 15 {sv.namehint = "_ex_imm_b0_T_5"} : (i32) -> i1
    %857 = comb.and %821, %856 {sv.namehint = "_ex_imm_b0_T_6"} : i1
    %858 = comb.mux bin %855, %837, %857 {sv.namehint = "_ex_imm_b0_T_7"} : i1
    %859 = comb.mux bin %847, %839, %858 {sv.namehint = "ex_imm_lo_lo"} : i1
    %860 = comb.icmp bin eq %ex_ctrl_sel_alu1, %c1_i2 {sv.namehint = "_ex_op1_T_2"} : i2
    %861 = comb.mux bin %860, %816, %c0_i64 {sv.namehint = "_ex_op1_T_3"} : i64
    %862 = comb.icmp bin eq %ex_ctrl_sel_alu1, %c-2_i2 {sv.namehint = "_ex_op1_T_4"} : i2
    %863 = comb.extract %ex_reg_pc from 33 : (i34) -> i1
    %864 = comb.replicate %863 : (i1) -> i30
    %865 = comb.concat %864, %ex_reg_pc : i30, i34
    %866 = comb.mux bin %862, %865, %861 {sv.namehint = "ex_op1"} : i64
    %867 = comb.mux bin %ex_reg_rvc, %c2_i4, %c4_i4 {sv.namehint = "_ex_op2_T_1"} : i4
    %868 = comb.replicate %824 : (i1) -> i33
    %869 = comb.concat %868, %828, %834, %843, %846, %854, %859 : i33, i11, i8, i1, i6, i4, i1
    %870 = comb.extract %867 from 3 : (i4) -> i1
    %871 = comb.replicate %870 : (i1) -> i60
    %872 = comb.concat %871, %867 : i60, i4
    %873 = hw.array_create %869, %820, %872, %c0_i64 : i64
    %874 = hw.array_get %873[%ex_ctrl_sel_alu2] {sv.namehint = "ex_op2"} : !hw.array<4xi64>, i2
    %alu.io_out, %alu.io_adder_out, %alu.io_cmp_out = hw.instance "alu" @ALU(io_dw: %ex_ctrl_alu_dw: i1, io_fn: %ex_ctrl_alu_fn: i4, io_in2: %874: i64, io_in1: %866: i64) -> (io_out: i64, io_adder_out: i64, io_cmp_out: i1) {sv.namehint = "alu.io_out"}
    %div.io_req_ready, %div.io_resp_valid, %div.io_resp_bits_data, %div.io_resp_bits_tag = hw.instance "div" @MulDiv(clock: %clock: !seq.clock, reset: %reset: i1, io_req_valid: %875: i1, io_req_bits_fn: %ex_ctrl_alu_fn: i4, io_req_bits_dw: %ex_ctrl_alu_dw: i1, io_req_bits_in1: %816: i64, io_req_bits_in2: %820: i64, io_req_bits_tag: %796: i5, io_kill: %1167: i1, io_resp_ready: %1218: i1) -> (io_req_ready: i1, io_resp_valid: i1, io_resp_bits_data: i64, io_resp_bits_tag: i5) {sv.namehint = "ll_wdata"}
    %875 = comb.and bin %ex_reg_valid, %ex_ctrl_div {sv.namehint = "div.io_req_valid"} : i1
    %876 = comb.xor bin %1344, %true {sv.namehint = "_io_fpu_valid_T"} : i1
    %877 = comb.xor bin %0, %true {sv.namehint = "_mem_reg_xcpt_interrupt_T"} : i1
    %878 = comb.and bin %877, %ibuf.io_inst_0_valid, %ibuf.io_inst_0_bits_replay {sv.namehint = "_ex_reg_replay_T_2"} : i1
    %879 = comb.and bin %876, %786 {sv.namehint = "_ex_reg_xcpt_T_1"} : i1
    %880 = comb.and bin %877, %ibuf.io_inst_0_valid, %csr.io_interrupt {sv.namehint = "_ex_reg_xcpt_interrupt_T_2"} : i1
    %881 = comb.mux bin %1344, %ex_ctrl_branch, %432 : i1
    %882 = comb.mux bin %1344, %ex_ctrl_jal, %436 : i1
    %883 = comb.mux bin %1344, %ex_ctrl_jalr, %438 : i1
    %884 = comb.mux bin %1344, %ex_ctrl_rxs2, %449 : i1
    %885 = comb.mux bin %1344, %ex_ctrl_sel_imm, %520 : i3
    %886 = comb.mux bin %1344, %ex_ctrl_mem, %644 : i1
    %887 = comb.mux bin %1344, %ex_ctrl_mem_cmd, %680 : i5
    %888 = comb.mux bin %1344, %ex_ctrl_div, %685 : i1
    %889 = comb.mux bin %1344, %ex_ctrl_wxd, %706 : i1
    %890 = comb.mux bin %1344, %ex_ctrl_fence_i, %726 : i1
    %891 = comb.mux bin %1344, %ex_ctrl_csr, %752 : i3
    %892 = comb.icmp bin eq %773, %c0_i4 : i4
    %893 = comb.and bin %876, %731, %892 : i1
    %894 = comb.or %893, %id_reg_pause : i1
    %895 = comb.and bin %876, %775 : i1
    %896 = comb.or %895, %778 : i1
    %897 = comb.mux bin %786, %c0_i4, %643 : i4
    %898 = comb.mux bin %1344, %ex_ctrl_alu_fn, %897 : i4
    %899 = comb.or %786, %522, %524 : i1
    %900 = comb.mux bin %1344, %ex_ctrl_alu_dw, %899 : i1
    %901 = comb.concat %ibuf.io_inst_0_bits_xcpt1_pf_inst, %ibuf.io_inst_0_bits_xcpt1_ae_inst : i1, i1
    %902 = comb.icmp bin ne %901, %c0_i2 : i2
    %903 = comb.concat %false, %902 : i1, i1
    %904 = comb.and bin %786, %902 : i1
    %905 = comb.or %904, %ibuf.io_inst_0_bits_rvc : i1
    %906 = comb.mux bin %1344, %ex_reg_rvc, %905 : i1
    %907 = comb.concat %ibuf.io_inst_0_bits_xcpt0_pf_inst, %ibuf.io_inst_0_bits_xcpt0_ae_inst : i1, i1
    %908 = comb.icmp bin ne %907, %c0_i2 : i2
    %909 = comb.or bin %bpu.io_xcpt_if, %908 : i1
    %910 = comb.or bin %909, %902 : i1
    %911 = comb.mux bin %910, %c-2_i2, %c1_i2 : i2
    %912 = comb.mux bin %786, %911, %500 : i2
    %913 = comb.mux bin %1344, %ex_ctrl_sel_alu1, %912 : i2
    %914 = comb.mux bin %909, %c0_i2, %903 : i2
    %915 = comb.mux bin %786, %914, %489 : i2
    %916 = comb.mux bin %1344, %ex_ctrl_sel_alu2, %915 : i2
    %917 = comb.or bin %726, %749, %754 {sv.namehint = "_ex_reg_flush_pipe_T"} : i1
    %918 = comb.mux bin %1344, %ex_reg_flush_pipe, %917 : i1
    %919 = comb.mux bin %1344, %ex_reg_load_use, %1322 : i1
    %920 = comb.extract %ibuf.io_inst_0_bits_inst_bits from 12 {sv.namehint = "_ex_reg_mem_size_T"} : (i32) -> i2
    %921 = comb.concat %679, %675, %666, %657 : i1, i1, i1, i1
    %922 = comb.icmp bin eq %921, %c5_i4 : i4
    %923 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs2, %c0_i5 {sv.namehint = "ex_reg_mem_size_hi"} : i5
    %924 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rs1, %c0_i5 {sv.namehint = "ex_reg_mem_size_lo"} : i5
    %925 = comb.concat %923, %924 {sv.namehint = "_ex_reg_mem_size_T_1"} : i1, i1
    %926 = comb.mux bin %922, %925, %920 : i2
    %927 = comb.mux bin %1344, %ex_reg_mem_size, %926 : i2
    %928 = comb.or bin %740, %804, %806, %807 {sv.namehint = "do_bypass"} : i1
    %929 = comb.xor %806, %true : i1
    %930 = comb.concat %true, %929 {sv.namehint = "_bypass_src_T"} : i1, i1
    %931 = comb.mux bin %804, %c1_i2, %930 {sv.namehint = "_bypass_src_T_1"} : i2
    %932 = comb.mux bin %739, %931, %c0_i2 {sv.namehint = "bypass_src"} : i2
    %933 = comb.xor bin %928, %true : i1
    %934 = comb.and bin %465, %933 : i1
    %935 = comb.extract %1237 from 0 {sv.namehint = "_ex_reg_rs_lsb_0_T"} : (i64) -> i2
    %936 = comb.mux bin %934, %935, %932 : i2
    %937 = comb.extract %1237 from 2 {sv.namehint = "_ex_reg_rs_msb_0_T"} : (i64) -> i62
    %938 = comb.mux bin %934, %937, %ex_reg_rs_msb_0 : i62
    %939 = comb.or bin %743, %809, %811, %812 {sv.namehint = "do_bypass_1"} : i1
    %940 = comb.xor %811, %true : i1
    %941 = comb.concat %true, %940 {sv.namehint = "_bypass_src_T_2"} : i1, i1
    %942 = comb.mux bin %809, %c1_i2, %941 {sv.namehint = "_bypass_src_T_3"} : i2
    %943 = comb.mux bin %742, %942, %c0_i2 {sv.namehint = "bypass_src_1"} : i2
    %944 = comb.mux bin %1344, %ex_reg_rs_bypass_1, %939 : i1
    %945 = comb.xor bin %939, %true : i1
    %946 = comb.and bin %449, %945 : i1
    %947 = comb.extract %1240 from 0 {sv.namehint = "_ex_reg_rs_lsb_1_T"} : (i64) -> i2
    %948 = comb.mux bin %946, %947, %943 : i2
    %949 = comb.mux bin %1344, %ex_reg_rs_lsb_1, %948 : i2
    %950 = comb.extract %1240 from 2 {sv.namehint = "_ex_reg_rs_msb_1_T"} : (i64) -> i62
    %951 = comb.and bin %876, %946 : i1
    %952 = comb.mux bin %951, %950, %ex_reg_rs_msb_1 : i62
    %953 = comb.extract %ibuf.io_inst_0_bits_raw from 0 {sv.namehint = "_inst_T"} : (i32) -> i16
    %954 = comb.concat %c0_i16, %953 : i16, i16
    %955 = comb.mux bin %ibuf.io_inst_0_bits_rvc, %954, %ibuf.io_inst_0_bits_raw {sv.namehint = "inst"} : i32
    %956 = comb.xor %770, %true : i1
    %957 = comb.and %956, %928 : i1
    %958 = comb.mux bin %1344, %ex_reg_rs_bypass_0, %957 : i1
    %959 = comb.extract %955 from 0 {sv.namehint = "_ex_reg_rs_lsb_0_T_1"} : (i32) -> i2
    %960 = comb.mux bin %770, %959, %936 : i2
    %961 = comb.mux bin %1344, %ex_reg_rs_lsb_0, %960 : i2
    %962 = comb.extract %955 from 2 {sv.namehint = "_ex_reg_rs_msb_0_T_1"} : (i32) -> i30
    %963 = comb.concat %c0_i32, %962 : i32, i30
    %964 = comb.mux bin %770, %963, %938 : i62
    %965 = comb.mux bin %1344, %ex_reg_rs_msb_0, %964 : i62
    %966 = comb.or bin %876, %csr.io_interrupt, %ibuf.io_inst_0_bits_replay : i1
    %967 = comb.mux bin %966, %795, %ex_reg_cause : i64
    %968 = comb.mux bin %966, %ibuf.io_inst_0_bits_inst_bits, %ex_reg_inst : i32
    %969 = comb.mux bin %966, %ibuf.io_pc, %ex_reg_pc : i34
    %970 = comb.or bin %ex_reg_valid, %ex_reg_replay, %ex_reg_xcpt_interrupt {sv.namehint = "ex_pc_valid"} : i1
    %971 = comb.xor bin %io_dmem_resp_valid, %true {sv.namehint = "_wb_dcache_miss_T"} : i1
    %972 = comb.and bin %wb_ctrl_mem, %971 {sv.namehint = "wb_dcache_miss"} : i1
    %973 = comb.xor bin %io_dmem_req_ready, %true {sv.namehint = "_dcache_blocked_blocked_T"} : i1
    %974 = comb.and bin %ex_ctrl_mem, %973 {sv.namehint = "_replay_ex_structural_T_1"} : i1
    %975 = comb.xor bin %div.io_req_ready, %true {sv.namehint = "_replay_ex_structural_T_2"} : i1
    %976 = comb.and bin %ex_ctrl_div, %975 {sv.namehint = "_replay_ex_structural_T_3"} : i1
    %977 = comb.and bin %972, %ex_reg_load_use {sv.namehint = "replay_ex_load_use"} : i1
    %978 = comb.or bin %974, %976, %977 {sv.namehint = "_replay_ex_T"} : i1
    %979 = comb.and bin %ex_reg_valid, %978 {sv.namehint = "_replay_ex_T_1"} : i1
    %980 = comb.or bin %ex_reg_replay, %979 {sv.namehint = "replay_ex"} : i1
    %981 = comb.xor bin %ex_reg_valid, %true {sv.namehint = "_ctrl_killx_T_1"} : i1
    %982 = comb.or bin %0, %980, %981 {sv.namehint = "ctrl_killx"} : i1
    %983 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c7_i5 {sv.namehint = "_mem_reg_store_T_3"} : i5
    %984 = comb.extract %ex_reg_mem_size from 1 : (i2) -> i1
    %985 = comb.xor bin %984, %true {sv.namehint = "_ex_slow_bypass_T_1"} : i1
    %986 = comb.or bin %983, %985 {sv.namehint = "ex_slow_bypass"} : i1
    %987 = comb.or bin %ex_reg_xcpt_interrupt, %ex_reg_xcpt {sv.namehint = "ex_xcpt"} : i1
    %988 = comb.or bin %mem_reg_valid, %mem_reg_replay, %mem_reg_xcpt_interrupt {sv.namehint = "mem_pc_valid"} : i1
    %989 = comb.and bin %mem_ctrl_branch, %mem_br_taken {sv.namehint = "_mem_cfi_taken_T"} : i1
    %990 = comb.extract %mem_reg_inst from 31 {sv.namehint = "mem_br_target_hi_hi_hi"} : (i32) -> i1
    %991 = comb.extract %mem_reg_inst from 12 {sv.namehint = "mem_br_target_hi_lo_hi_1"} : (i32) -> i8
    %992 = comb.extract %mem_reg_inst from 20 {sv.namehint = "mem_br_target_hi_lo_lo_1"} : (i32) -> i1
    %993 = comb.extract %mem_reg_inst from 7 {sv.namehint = "mem_br_target_hi_lo_lo"} : (i32) -> i1
    %994 = comb.extract %mem_reg_inst from 25 {sv.namehint = "mem_br_target_lo_hi_hi"} : (i32) -> i6
    %995 = comb.extract %mem_reg_inst from 8 {sv.namehint = "mem_br_target_lo_hi_lo"} : (i32) -> i4
    %996 = comb.replicate %990 : (i1) -> i20
    %997 = comb.concat %996, %993, %994, %995, %false {sv.namehint = "_mem_br_target_T_2"} : i20, i1, i6, i4, i1
    %998 = comb.extract %mem_reg_inst from 21 {sv.namehint = "mem_br_target_lo_hi_1"} : (i32) -> i10
    %999 = comb.replicate %990 {sv.namehint = "mem_br_target_hi_hi_1"} : (i1) -> i12
    %1000 = comb.concat %999, %991, %992, %998, %false {sv.namehint = "_mem_br_target_T_4"} : i12, i8, i1, i10, i1
    %1001 = comb.mux bin %mem_reg_rvc, %c2_i4, %c4_i4 {sv.namehint = "_mem_br_target_T_6"} : i4
    %1002 = comb.extract %1001 from 3 : (i4) -> i1
    %1003 = comb.replicate %1002 : (i1) -> i28
    %1004 = comb.concat %1003, %1001 : i28, i4
    %1005 = comb.mux bin %mem_ctrl_jal, %1000, %1004 {sv.namehint = "_mem_br_target_T_7"} : i32
    %1006 = comb.mux bin %989, %997, %1005 {sv.namehint = "_mem_br_target_T_8"} : i32
    %1007 = comb.extract %1006 from 31 : (i32) -> i1
    %1008 = comb.replicate %1007 : (i1) -> i2
    %1009 = comb.concat %1008, %1006 : i2, i32
    %1010 = comb.add %mem_reg_pc, %1009 {sv.namehint = "_mem_br_target_T_9"} : i34
    %1011 = comb.extract %mem_reg_wdata from 33 : (i64) -> i31
    %1012 = comb.icmp bin eq %1011, %c0_i31 {sv.namehint = "_mem_npc_msb_T"} : i31
    %1013 = comb.icmp bin eq %1011, %c-1_i31 {sv.namehint = "_mem_npc_msb_T_1"} : i31
    %1014 = comb.or bin %1012, %1013 {sv.namehint = "_mem_npc_msb_T_2"} : i1
    %1015 = comb.extract %mem_reg_wdata from 33 {sv.namehint = "_mem_npc_msb_T_3"} : (i64) -> i1
    %1016 = comb.extract %mem_reg_wdata from 32 {sv.namehint = "_mem_npc_msb_T_4"} : (i64) -> i1
    %1017 = comb.xor bin %1016, %true {sv.namehint = "_mem_npc_msb_T_5"} : i1
    %1018 = comb.mux bin %1014, %1015, %1017 {sv.namehint = "msb"} : i1
    %1019 = comb.extract %mem_reg_wdata from 0 {sv.namehint = "mem_npc_lo"} : (i64) -> i33
    %1020 = comb.concat %1018, %1019 {sv.namehint = "_mem_npc_T_1"} : i1, i33
    %1021 = comb.mux bin %mem_ctrl_jalr, %1020, %1010 {sv.namehint = "_mem_npc_T_3"} : i34
    %1022 = comb.and bin %1021, %c-2_i34 {sv.namehint = "mem_npc"} : i34
    %1023 = comb.icmp bin ne %1022, %ex_reg_pc {sv.namehint = "_mem_wrong_npc_T"} : i34
    %1024 = comb.or bin %ibuf.io_inst_0_valid, %io_imem_resp_valid {sv.namehint = "_mem_wrong_npc_T_1"} : i1
    %1025 = comb.icmp bin ne %1022, %ibuf.io_pc {sv.namehint = "_mem_wrong_npc_T_2"} : i34
    %1026 = comb.xor %1024, %true : i1
    %1027 = comb.or %1026, %1025 {sv.namehint = "_mem_wrong_npc_T_3"} : i1
    %1028 = comb.mux bin %970, %1023, %1027 {sv.namehint = "mem_wrong_npc"} : i1
    %1029 = comb.xor bin %762, %true {sv.namehint = "_mem_npc_misaligned_T_1"} : i1
    %1030 = comb.extract %1021 from 1 {sv.namehint = "_mem_npc_misaligned_T_2"} : (i34) -> i1
    %1031 = comb.and bin %1029, %1030 {sv.namehint = "_mem_npc_misaligned_T_3"} : i1
    %1032 = comb.xor bin %mem_reg_xcpt, %true {sv.namehint = "_wb_reg_wdata_T"} : i1
    %1033 = comb.xor bin %mem_ctrl_jalr, %1031 {sv.namehint = "_mem_int_wdata_T_1"} : i1
    %1034 = comb.and bin %1032, %1033 {sv.namehint = "_mem_int_wdata_T_2"} : i1
    %1035 = comb.extract %1010 from 33 : (i34) -> i1
    %1036 = comb.replicate %1035 : (i1) -> i30
    %1037 = comb.concat %1036, %1010 : i30, i34
    %1038 = comb.mux bin %1034, %1037, %mem_reg_wdata {sv.namehint = "_mem_int_wdata_T_4"} : i64
    %1039 = comb.or bin %mem_ctrl_branch, %mem_ctrl_jalr, %mem_ctrl_jal {sv.namehint = "mem_cfi"} : i1
    %1040 = comb.or bin %989, %mem_ctrl_jalr, %mem_ctrl_jal {sv.namehint = "mem_cfi_taken"} : i1
    %1041 = comb.and bin %mem_reg_valid, %1040 {sv.namehint = "take_pc_mem"} : i1
    %1042 = comb.xor bin %982, %true {sv.namehint = "_mem_reg_xcpt_T"} : i1
    %1043 = comb.and bin %877, %980 {sv.namehint = "_mem_reg_replay_T_1"} : i1
    %1044 = comb.and bin %1042, %987 {sv.namehint = "_mem_reg_xcpt_T_1"} : i1
    %1045 = comb.and bin %877, %ex_reg_xcpt_interrupt {sv.namehint = "_mem_reg_xcpt_interrupt_T_1"} : i1
    %1046 = comb.and bin %mem_reg_valid, %mem_reg_flush_pipe : i1
    %1047 = comb.xor %970, %true : i1
    %1048 = comb.or %1046, %1047 : i1
    %1049 = comb.and %1048, %mem_ctrl_fp : i1
    %1050 = comb.xor %970, %true : i1
    %1051 = comb.or %1046, %1050 : i1
    %1052 = comb.and %1051, %mem_ctrl_rocc : i1
    %1053 = comb.xor %970, %true : i1
    %1054 = comb.or %1046, %1053 : i1
    %1055 = comb.mux bin %1054, %mem_ctrl_branch, %ex_ctrl_branch : i1
    %1056 = comb.xor %970, %true : i1
    %1057 = comb.or %1046, %1056 : i1
    %1058 = comb.mux bin %1057, %mem_ctrl_jal, %ex_ctrl_jal : i1
    %1059 = comb.xor %970, %true : i1
    %1060 = comb.or %1046, %1059 : i1
    %1061 = comb.mux bin %1060, %mem_ctrl_jalr, %ex_ctrl_jalr : i1
    %1062 = comb.xor %970, %true : i1
    %1063 = comb.or %1046, %1062 : i1
    %1064 = comb.mux bin %1063, %mem_ctrl_mem, %ex_ctrl_mem : i1
    %1065 = comb.xor %970, %true : i1
    %1066 = comb.or %1046, %1065 : i1
    %1067 = comb.and %1066, %mem_ctrl_mul : i1
    %1068 = comb.xor %970, %true : i1
    %1069 = comb.or %1046, %1068 : i1
    %1070 = comb.mux bin %1069, %mem_ctrl_div, %ex_ctrl_div : i1
    %1071 = comb.xor %970, %true : i1
    %1072 = comb.or %1046, %1071 : i1
    %1073 = comb.mux bin %1072, %mem_ctrl_wxd, %ex_ctrl_wxd : i1
    %1074 = comb.xor %970, %true : i1
    %1075 = comb.or %1046, %1074 : i1
    %1076 = comb.mux bin %1075, %mem_ctrl_csr, %ex_ctrl_csr : i3
    %1077 = comb.xor %970, %true : i1
    %1078 = comb.or %1046, %1077 : i1
    %1079 = comb.and %1078, %mem_scie_pipelined : i1
    %1080 = comb.xor %970, %true : i1
    %1081 = comb.or %1046, %1080 : i1
    %1082 = comb.mux bin %1081, %mem_reg_rvc, %ex_reg_rvc : i1
    %1083 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c0_i5 {sv.namehint = "_mem_reg_load_T"} : i5
    %1084 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c6_i5 {sv.namehint = "_mem_reg_load_T_1"} : i5
    %1085 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c4_i5 {sv.namehint = "_mem_reg_store_T_5"} : i5
    %1086 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c9_i5 {sv.namehint = "_mem_reg_store_T_6"} : i5
    %1087 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c10_i5 {sv.namehint = "_mem_reg_store_T_7"} : i5
    %1088 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c11_i5 {sv.namehint = "_mem_reg_store_T_8"} : i5
    %1089 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c8_i5 {sv.namehint = "_mem_reg_store_T_12"} : i5
    %1090 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c12_i5 {sv.namehint = "_mem_reg_store_T_13"} : i5
    %1091 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c13_i5 {sv.namehint = "_mem_reg_store_T_14"} : i5
    %1092 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c14_i5 {sv.namehint = "_mem_reg_store_T_15"} : i5
    %1093 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c15_i5 {sv.namehint = "_mem_reg_store_T_16"} : i5
    %1094 = comb.or bin %1083, %1084, %983, %1085, %1086, %1087, %1088, %1089, %1090, %1091, %1092, %1093 {sv.namehint = "_mem_reg_load_T_22"} : i1
    %1095 = comb.and bin %ex_ctrl_mem, %1094 {sv.namehint = "_mem_reg_load_T_23"} : i1
    %1096 = comb.xor %970, %true : i1
    %1097 = comb.or %1046, %1096 : i1
    %1098 = comb.mux bin %1097, %mem_reg_load, %1095 : i1
    %1099 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c1_i5 {sv.namehint = "_mem_reg_store_T"} : i5
    %1100 = comb.icmp bin eq %ex_ctrl_mem_cmd, %c-15_i5 {sv.namehint = "_mem_reg_store_T_1"} : i5
    %1101 = comb.or bin %1099, %1100, %983, %1085, %1086, %1087, %1088, %1089, %1090, %1091, %1092, %1093 {sv.namehint = "_mem_reg_store_T_22"} : i1
    %1102 = comb.and bin %ex_ctrl_mem, %1101 {sv.namehint = "_mem_reg_store_T_23"} : i1
    %1103 = comb.xor %970, %true : i1
    %1104 = comb.or %1046, %1103 : i1
    %1105 = comb.mux bin %1104, %mem_reg_store, %1102 : i1
    %1106 = comb.xor %970, %true : i1
    %1107 = comb.or %1046, %1106 : i1
    %1108 = comb.mux bin %1107, %mem_mem_cmd_bh, %986 : i1
    %1109 = comb.xor %970, %true : i1
    %1110 = comb.or %1046, %1109 : i1
    %1111 = comb.mux bin %1110, %mem_reg_cause, %ex_reg_cause : i64
    %1112 = comb.xor %970, %true : i1
    %1113 = comb.or %1046, %1112 : i1
    %1114 = comb.mux bin %1113, %mem_reg_inst, %ex_reg_inst : i32
    %1115 = comb.xor %970, %true : i1
    %1116 = comb.or %1046, %1115 : i1
    %1117 = comb.mux bin %1116, %mem_reg_pc, %ex_reg_pc : i34
    %1118 = comb.xor %970, %true : i1
    %1119 = comb.or %1046, %1118 : i1
    %1120 = comb.mux bin %1119, %mem_reg_wdata, %alu.io_out : i64
    %1121 = comb.xor %970, %true : i1
    %1122 = comb.or %1046, %1121 : i1
    %1123 = comb.mux bin %1122, %mem_br_taken, %alu.io_cmp_out : i1
    %1124 = comb.extract %820 from 0 {sv.namehint = "mem_reg_rs2_hi"} : (i64) -> i8
    %1125 = comb.replicate %1124 {sv.namehint = "mem_reg_rs2_hi_1"} : (i8) -> i16
    %1126 = comb.replicate %1125 {sv.namehint = "mem_reg_rs2_hi_2"} : (i16) -> i32
    %1127 = comb.replicate %1126 {sv.namehint = "_mem_reg_rs2_T_1"} : (i32) -> i64
    %1128 = comb.extract %820 from 0 {sv.namehint = "mem_reg_rs2_hi_3"} : (i64) -> i16
    %1129 = comb.replicate %1128 {sv.namehint = "mem_reg_rs2_hi_4"} : (i16) -> i32
    %1130 = comb.replicate %1129 {sv.namehint = "_mem_reg_rs2_T_3"} : (i32) -> i64
    %1131 = comb.extract %820 from 0 {sv.namehint = "mem_reg_rs2_hi_5"} : (i64) -> i32
    %1132 = comb.replicate %1131 {sv.namehint = "_mem_reg_rs2_T_5"} : (i32) -> i64
    %1133 = hw.array_create %820, %1132, %1130, %1127 : i64
    %1134 = hw.array_get %1133[%ex_reg_mem_size] {sv.namehint = "_mem_reg_rs2_T_8"} : !hw.array<4xi64>, i2
    %1135 = comb.and bin %970, %ex_ctrl_rxs2, %ex_ctrl_mem : i1
    %1136 = comb.xor %1135, %true : i1
    %1137 = comb.or %1046, %1136 : i1
    %1138 = comb.mux bin %1137, %mem_reg_rs2, %1134 : i64
    %1139 = comb.and bin %ex_ctrl_jalr, %csr.io_status_debug : i1
    %1140 = comb.or %1139, %ex_ctrl_fence_i : i1
    %1141 = comb.xor %970, %true : i1
    %1142 = comb.or %1046, %1141 : i1
    %1143 = comb.mux bin %1142, %mem_ctrl_fence_i, %1140 : i1
    %1144 = comb.or %1139, %ex_reg_flush_pipe : i1
    %1145 = comb.xor %970, %true : i1
    %1146 = comb.or %1046, %1145 : i1
    %1147 = comb.mux bin %1146, %mem_reg_flush_pipe, %1144 : i1
    %1148 = comb.and bin %mem_reg_load, %bpu.io_xcpt_ld {sv.namehint = "_mem_breakpoint_T"} : i1
    %1149 = comb.and bin %mem_reg_store, %bpu.io_xcpt_st {sv.namehint = "_mem_breakpoint_T_1"} : i1
    %1150 = comb.and bin %mem_reg_load, %bpu.io_debug_ld {sv.namehint = "_mem_debug_breakpoint_T"} : i1
    %1151 = comb.and bin %mem_reg_store, %bpu.io_debug_st {sv.namehint = "_mem_debug_breakpoint_T_1"} : i1
    %1152 = comb.or bin %1150, %1151 {sv.namehint = "mem_debug_breakpoint"} : i1
    %1153 = comb.or bin %1152, %1148, %1149 {sv.namehint = "mem_ldst_xcpt"} : i1
    %1154 = comb.mux bin %1152, %c-2_i4, %c3_i4 {sv.namehint = "mem_ldst_cause"} : i4
    %1155 = comb.or bin %mem_reg_xcpt_interrupt, %mem_reg_xcpt : i1
    %1156 = comb.and bin %mem_reg_valid, %1031 : i1
    %1157 = comb.and bin %mem_reg_valid, %1153 : i1
    %1158 = comb.or bin %1155, %1156, %1157 {sv.namehint = "mem_xcpt"} : i1
    %1159 = comb.mux bin %1156, %c0_i4, %1154 : i4
    %1160 = comb.concat %c0_i60, %1159 : i60, i4
    %1161 = comb.mux bin %1155, %mem_reg_cause, %1160 {sv.namehint = "mem_cause"} : i64
    %1162 = comb.and bin %800, %io_dmem_replay_next {sv.namehint = "dcache_kill_mem"} : i1
    %1163 = comb.or bin %1162, %mem_reg_replay {sv.namehint = "_replay_mem_T"} : i1
    %1164 = comb.xor bin %mem_reg_valid, %true {sv.namehint = "_killm_common_T_2"} : i1
    %1165 = comb.or bin %1162, %1209, %mem_reg_xcpt, %1164 {sv.namehint = "killm_common"} : i1
    %1166 = comb.and bin %div.io_req_ready, %875 {sv.namehint = "div_io_kill_x12"} : i1
    %div_io_kill_REG = seq.firreg %1166 clock %clock {firrtl.random_init_start = 1134 : ui64} : i1
    %1167 = comb.and bin %1165, %div_io_kill_REG {sv.namehint = "div.io_kill"} : i1
    %1168 = comb.or bin %1165, %1158 {sv.namehint = "_ctrl_killm_T"} : i1
    %1169 = comb.xor bin %1168, %true {sv.namehint = "_wb_reg_flush_pipe_T"} : i1
    %1170 = comb.xor bin %1209, %true {sv.namehint = "io_imem_req_bits_speculative"} : i1
    %1171 = comb.and bin %1163, %1170 {sv.namehint = "_wb_reg_replay_T_1"} : i1
    %1172 = comb.and bin %1158, %1170 {sv.namehint = "_wb_reg_xcpt_T_1"} : i1
    %1173 = comb.and bin %1169, %mem_reg_flush_pipe {sv.namehint = "_wb_reg_flush_pipe_T_1"} : i1
    %1174 = comb.mux bin %988, %mem_ctrl_rocc, %wb_ctrl_rocc : i1
    %1175 = comb.mux bin %988, %mem_ctrl_mem, %wb_ctrl_mem : i1
    %1176 = comb.mux bin %988, %mem_ctrl_div, %wb_ctrl_div : i1
    %1177 = comb.mux bin %988, %mem_ctrl_wxd, %wb_ctrl_wxd : i1
    %1178 = comb.mux bin %988, %mem_ctrl_csr, %wb_ctrl_csr : i3
    %1179 = comb.mux bin %988, %mem_ctrl_fence_i, %wb_ctrl_fence_i : i1
    %1180 = comb.and bin %1032, %mem_ctrl_fp, %mem_ctrl_wxd {sv.namehint = "_wb_reg_wdata_T_2"} : i1
    %1181 = comb.or bin %mem_scie_pipelined, %1180 : i1
    %1182 = comb.mux bin %1181, %c0_i64, %1038 {sv.namehint = "_wb_reg_wdata_T_4"} : i64
    %1183 = comb.mux bin %988, %1182, %wb_reg_wdata : i64
    %1184 = comb.mux bin %988, %1161, %wb_reg_cause : i64
    %1185 = comb.mux bin %988, %mem_reg_inst, %wb_reg_inst : i32
    %1186 = comb.mux bin %988, %mem_reg_pc, %wb_reg_pc : i34
    %1187 = comb.and bin %wb_reg_valid, %wb_ctrl_mem : i1
    %1188 = comb.and bin %1187, %io_dmem_s2_xcpt_ma_st : i1
    %1189 = comb.and bin %1187, %io_dmem_s2_xcpt_ma_ld : i1
    %1190 = comb.and bin %1187, %io_dmem_s2_xcpt_pf_st : i1
    %1191 = comb.and bin %1187, %io_dmem_s2_xcpt_pf_ld : i1
    %1192 = comb.and bin %1187, %io_dmem_s2_xcpt_ae_st : i1
    %1193 = comb.and bin %1187, %io_dmem_s2_xcpt_ae_ld : i1
    %1194 = comb.or bin %wb_reg_xcpt, %1188, %1189, %1190, %1191, %1192, %1193 {sv.namehint = "wb_xcpt"} : i1
    %1195 = comb.concat %c1_i2, %1192, %true : i2, i1, i1
    %1196 = comb.mux bin %1191, %c-3_i4, %1195 : i4
    %1197 = comb.mux bin %1190, %c-1_i4, %1196 : i4
    %1198 = comb.mux bin %1189, %c4_i4, %1197 : i4
    %1199 = comb.mux bin %1188, %c6_i4, %1198 : i4
    %1200 = comb.concat %c0_i60, %1199 : i60, i4
    %1201 = comb.mux bin %wb_reg_xcpt, %wb_reg_cause, %1200 {sv.namehint = "wb_cause"} : i64
    %1202 = comb.icmp bin eq %1201, %c6_i64 {sv.namehint = "_tval_valid_T_3"} : i64
    %1203 = comb.icmp bin eq %1201, %c4_i64 {sv.namehint = "_tval_valid_T_2"} : i64
    %1204 = comb.icmp bin eq %1201, %c7_i64 {sv.namehint = "_tval_valid_T_5"} : i64
    %1205 = comb.icmp bin eq %1201, %c5_i64 {sv.namehint = "_tval_valid_T_4"} : i64
    %1206 = comb.and bin %wb_reg_valid, %wb_ctrl_wxd {sv.namehint = "wb_wxd"} : i1
    %1207 = comb.or bin %wb_ctrl_div, %972, %wb_ctrl_rocc {sv.namehint = "wb_set_sboard"} : i1
    %1208 = comb.or bin %io_dmem_s2_nack, %wb_reg_replay, %779 {sv.namehint = "replay_wb"} : i1
    %1209 = comb.or bin %1208, %1194, %csr.io_eret, %wb_reg_flush_pipe {sv.namehint = "take_pc_wb"} : i1
    %1210 = comb.extract %io_dmem_resp_bits_tag from 0 {sv.namehint = "dmem_resp_fpu"} : (i6) -> i1
    %1211 = comb.xor bin %1210, %true {sv.namehint = "dmem_resp_xpu"} : i1
    %1212 = comb.extract %io_dmem_resp_bits_tag from 1 {sv.namehint = "dmem_resp_waddr"} : (i6) -> i5
    %1213 = comb.and bin %io_dmem_resp_valid, %io_dmem_resp_bits_has_data {sv.namehint = "dmem_resp_valid"} : i1
    %1214 = comb.xor bin %1206, %true {sv.namehint = "_ctrl_stalld_T_17"} : i1
    %1215 = comb.and bin %1218, %div.io_resp_valid {sv.namehint = "ll_wen_x1"} : i1
    %1216 = comb.and bin %1213, %io_dmem_resp_bits_replay, %1211 : i1
    %1217 = comb.xor %1216, %true : i1
    %1218 = comb.and %1217, %1214 {sv.namehint = "div.io_resp_ready"} : i1
    %1219 = comb.mux bin %1216, %1212, %div.io_resp_bits_tag {sv.namehint = "ll_waddr"} : i5
    %1220 = comb.or %1216, %1215 {sv.namehint = "ll_wen"} : i1
    %1221 = comb.xor bin %1208, %true {sv.namehint = "_wb_valid_T"} : i1
    %1222 = comb.xor bin %1194, %true {sv.namehint = "_rocc_blocked_T"} : i1
    %1223 = comb.and bin %wb_reg_valid, %1221, %1222 {sv.namehint = "wb_valid"} : i1
    %1224 = comb.and bin %1223, %wb_ctrl_wxd {sv.namehint = "wb_wen"} : i1
    %1225 = comb.or bin %1224, %1220 {sv.namehint = "rf_wen"} : i1
    %1226 = comb.mux bin %1220, %1219, %798 {sv.namehint = "rf_waddr"} : i5
    %1227 = comb.and bin %1213, %1211 {sv.namehint = "_rf_wdata_T"} : i1
    %1228 = comb.icmp bin ne %wb_ctrl_csr, %c0_i3 {sv.namehint = "_rf_wdata_T_2"} : i3
    %1229 = comb.mux bin %1228, %csr.io_rw_rdata, %wb_reg_wdata {sv.namehint = "_rf_wdata_T_4"} : i64
    %1230 = comb.mux bin %1220, %div.io_resp_bits_data, %1229 {sv.namehint = "_rf_wdata_T_5"} : i64
    %1231 = comb.mux bin %1227, %io_dmem_resp_bits_data, %1230 {sv.namehint = "rf_wdata"} : i64
    %1232 = comb.icmp bin ne %1226, %c0_i5 : i5
    %1233 = comb.xor bin %1226, %c-1_i5 : i5
    %1234 = comb.and %1225, %1232 : i1
    %1235 = comb.icmp bin eq %1226, %ibuf.io_inst_0_bits_inst_rs1 : i5
    %1236 = comb.and bin %1225, %1232, %1235 : i1
    %1237 = comb.mux bin %1236, %1231, %737 {sv.namehint = "id_rs_0"} : i64
    %1238 = comb.icmp bin eq %1226, %ibuf.io_inst_0_bits_inst_rs2 : i5
    %1239 = comb.and bin %1225, %1232, %1238 : i1
    %1240 = comb.mux bin %1239, %1231, %738 {sv.namehint = "id_rs_1"} : i64
    %1241 = comb.extract %ibuf.io_inst_0_bits_raw from 20 {sv.namehint = "csr.io_decode_0_csr"} : (i32) -> i12
    %1242 = comb.icmp bin eq %1201, %c2_i64 {sv.namehint = "_tval_valid_T"} : i64
    %1243 = comb.icmp bin eq %1201, %c3_i64 {sv.namehint = "_tval_valid_T_1"} : i64
    %1244 = comb.icmp bin eq %1201, %c1_i64 {sv.namehint = "_tval_valid_T_6"} : i64
    %1245 = comb.icmp bin eq %1201, %c13_i64 {sv.namehint = "_tval_valid_T_7"} : i64
    %1246 = comb.icmp bin eq %1201, %c15_i64 {sv.namehint = "_tval_valid_T_8"} : i64
    %1247 = comb.icmp bin eq %1201, %c12_i64 {sv.namehint = "_tval_valid_T_9"} : i64
    %1248 = comb.or bin %1242, %1243, %1203, %1202, %1205, %1204, %1244, %1245, %1246, %1247 {sv.namehint = "_tval_valid_T_18"} : i1
    %1249 = comb.and bin %1194, %1248 {sv.namehint = "tval_valid"} : i1
    %1250 = comb.extract %wb_reg_wdata from 33 : (i64) -> i31
    %1251 = comb.icmp bin eq %1250, %c0_i31 {sv.namehint = "_csr_io_tval_msb_T"} : i31
    %1252 = comb.icmp bin eq %1250, %c-1_i31 {sv.namehint = "_csr_io_tval_msb_T_1"} : i31
    %1253 = comb.or bin %1251, %1252 {sv.namehint = "_csr_io_tval_msb_T_2"} : i1
    %1254 = comb.extract %wb_reg_wdata from 33 {sv.namehint = "_csr_io_tval_msb_T_3"} : (i64) -> i1
    %1255 = comb.extract %wb_reg_wdata from 32 {sv.namehint = "_csr_io_tval_msb_T_4"} : (i64) -> i1
    %1256 = comb.xor bin %1255, %true {sv.namehint = "_csr_io_tval_msb_T_5"} : i1
    %1257 = comb.mux bin %1253, %1254, %1256 {sv.namehint = "msb_1"} : i1
    %1258 = comb.extract %wb_reg_wdata from 0 {sv.namehint = "csr_io_tval_lo"} : (i64) -> i33
    %1259 = comb.concat %1257, %1258 {sv.namehint = "_csr_io_tval_T"} : i1, i33
    %1260 = comb.mux bin %1249, %1259, %c0_i34 {sv.namehint = "csr.io_tval"} : i34
    %1261 = comb.extract %wb_reg_inst from 20 {sv.namehint = "csr.io_rw_addr"} : (i32) -> i12
    %1262 = comb.concat %wb_reg_valid, %c-1_i2 {sv.namehint = "_csr_io_rw_cmd_T_1"} : i1, i2
    %1263 = comb.and bin %wb_ctrl_csr, %1262 {sv.namehint = "csr.io_rw_cmd"} : i3
    %1264 = comb.and bin %465, %739 : i1
    %1265 = comb.and bin %449, %742 : i1
    %1266 = comb.icmp bin ne %ibuf.io_inst_0_bits_inst_rd, %c0_i5 : i5
    %1267 = comb.and bin %706, %1266 : i1
    %_r = seq.firreg %1303 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 1135 : ui64} : i32
    %1268 = comb.extract %_r from 1 {sv.namehint = "_r_T"} : (i32) -> i31
    %1269 = comb.concat %1268, %false {sv.namehint = "r"} : i31, i1
    %1270 = comb.concat %c0_i27, %1219 : i27, i5
    %1271 = comb.shl bin %c1_i32, %1270 : i32
    %1272 = comb.mux bin %1220, %1271, %c0_i32 : i32
    %1273 = comb.xor bin %1272, %c-1_i32 : i32
    %1274 = comb.and bin %1269, %1273 : i32
    %1275 = comb.mux bin %1220, %1274, %_r : i32
    %1276 = comb.concat %c0_i27, %ibuf.io_inst_0_bits_inst_rs1 : i27, i5
    %1277 = comb.shru bin %1269, %1276 {sv.namehint = "_id_sboard_hazard_T"} : i32
    %1278 = comb.extract %1277 from 0 {sv.namehint = "_id_sboard_hazard_T_1"} : (i32) -> i1
    %1279 = comb.icmp bin eq %1219, %ibuf.io_inst_0_bits_inst_rs1 {sv.namehint = "_id_sboard_hazard_T_2"} : i5
    %1280 = comb.and bin %1220, %1279 {sv.namehint = "_id_sboard_hazard_T_3"} : i1
    %1281 = comb.xor bin %1280, %true {sv.namehint = "_id_sboard_hazard_T_4"} : i1
    %1282 = comb.and bin %1264, %1278, %1281 {sv.namehint = "_id_sboard_hazard_T_6"} : i1
    %1283 = comb.concat %c0_i27, %ibuf.io_inst_0_bits_inst_rs2 : i27, i5
    %1284 = comb.shru bin %1269, %1283 {sv.namehint = "_id_sboard_hazard_T_7"} : i32
    %1285 = comb.extract %1284 from 0 {sv.namehint = "_id_sboard_hazard_T_8"} : (i32) -> i1
    %1286 = comb.icmp bin eq %1219, %ibuf.io_inst_0_bits_inst_rs2 {sv.namehint = "_id_sboard_hazard_T_9"} : i5
    %1287 = comb.and bin %1220, %1286 {sv.namehint = "_id_sboard_hazard_T_10"} : i1
    %1288 = comb.xor bin %1287, %true {sv.namehint = "_id_sboard_hazard_T_11"} : i1
    %1289 = comb.and bin %1265, %1285, %1288 {sv.namehint = "_id_sboard_hazard_T_13"} : i1
    %1290 = comb.concat %c0_i27, %ibuf.io_inst_0_bits_inst_rd : i27, i5
    %1291 = comb.shru bin %1269, %1290 {sv.namehint = "_id_sboard_hazard_T_14"} : i32
    %1292 = comb.extract %1291 from 0 {sv.namehint = "_id_sboard_hazard_T_15"} : (i32) -> i1
    %1293 = comb.icmp bin eq %1219, %ibuf.io_inst_0_bits_inst_rd {sv.namehint = "_id_sboard_hazard_T_16"} : i5
    %1294 = comb.and bin %1220, %1293 {sv.namehint = "_id_sboard_hazard_T_17"} : i1
    %1295 = comb.xor bin %1294, %true {sv.namehint = "_id_sboard_hazard_T_18"} : i1
    %1296 = comb.and bin %1267, %1292, %1295 {sv.namehint = "_id_sboard_hazard_T_20"} : i1
    %1297 = comb.and bin %1207, %1224 : i1
    %1298 = comb.concat %c0_i27, %798 : i27, i5
    %1299 = comb.shl bin %c1_i32, %1298 : i32
    %1300 = comb.mux bin %1297, %1299, %c0_i32 : i32
    %1301 = comb.or bin %1274, %1300 : i32
    %1302 = comb.or bin %1220, %1297 : i1
    %1303 = comb.mux bin %1302, %1301, %1275 : i32
    %1304 = comb.icmp bin ne %ex_ctrl_csr, %c0_i3 {sv.namehint = "_ex_cannot_bypass_T"} : i3
    %1305 = comb.or bin %1304, %ex_ctrl_jalr, %ex_ctrl_mem, %ex_ctrl_div {sv.namehint = "_ex_cannot_bypass_T_4"} : i1
    %1306 = comb.and bin %1264, %803 {sv.namehint = "_data_hazard_ex_T_1"} : i1
    %1307 = comb.and bin %1265, %808 {sv.namehint = "_data_hazard_ex_T_3"} : i1
    %1308 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rd, %796 {sv.namehint = "_fp_data_hazard_ex_T_6"} : i5
    %1309 = comb.and bin %1267, %1308 {sv.namehint = "_data_hazard_ex_T_5"} : i1
    %1310 = comb.or bin %1306, %1307, %1309 {sv.namehint = "_data_hazard_ex_T_7"} : i1
    %1311 = comb.and bin %ex_reg_valid, %ex_ctrl_wxd, %1310, %1305 {sv.namehint = "id_ex_hazard"} : i1
    %1312 = comb.icmp bin ne %mem_ctrl_csr, %c0_i3 {sv.namehint = "_mem_cannot_bypass_T"} : i3
    %1313 = comb.and bin %mem_ctrl_mem, %mem_mem_cmd_bh {sv.namehint = "_mem_cannot_bypass_T_1"} : i1
    %1314 = comb.or bin %1312, %1313, %mem_ctrl_mul, %mem_ctrl_div, %mem_ctrl_fp, %mem_ctrl_rocc {sv.namehint = "mem_cannot_bypass"} : i1
    %1315 = comb.and bin %1264, %805 {sv.namehint = "_data_hazard_mem_T_1"} : i1
    %1316 = comb.and bin %1265, %810 {sv.namehint = "_data_hazard_mem_T_3"} : i1
    %1317 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rd, %797 {sv.namehint = "_fp_data_hazard_mem_T_6"} : i5
    %1318 = comb.and bin %1267, %1317 {sv.namehint = "_data_hazard_mem_T_5"} : i1
    %1319 = comb.or bin %1315, %1316, %1318 {sv.namehint = "_data_hazard_mem_T_7"} : i1
    %1320 = comb.and bin %mem_ctrl_wxd, %1319 {sv.namehint = "data_hazard_mem"} : i1
    %1321 = comb.and bin %mem_reg_valid, %1320, %1314 {sv.namehint = "id_mem_hazard"} : i1
    %1322 = comb.and bin %mem_reg_valid, %1320, %mem_ctrl_mem {sv.namehint = "id_load_use"} : i1
    %1323 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rs1, %798 {sv.namehint = "_fp_data_hazard_wb_T"} : i5
    %1324 = comb.and bin %1264, %1323 {sv.namehint = "_data_hazard_wb_T_1"} : i1
    %1325 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rs2, %798 {sv.namehint = "_fp_data_hazard_wb_T_2"} : i5
    %1326 = comb.and bin %1265, %1325 {sv.namehint = "_data_hazard_wb_T_3"} : i1
    %1327 = comb.icmp bin eq %ibuf.io_inst_0_bits_inst_rd, %798 {sv.namehint = "_fp_data_hazard_wb_T_6"} : i5
    %1328 = comb.and bin %1267, %1327 {sv.namehint = "_data_hazard_wb_T_5"} : i1
    %1329 = comb.or bin %1324, %1326, %1328 {sv.namehint = "_data_hazard_wb_T_7"} : i1
    %1330 = comb.and bin %wb_reg_valid, %wb_ctrl_wxd, %1329, %1207 {sv.namehint = "id_wb_hazard"} : i1
    %blocked = seq.firreg %1333 clock %clock {firrtl.random_init_start = 1167 : ui64} : i1
    %1331 = comb.xor bin %io_dmem_perf_grant, %true {sv.namehint = "_dcache_blocked_T"} : i1
    %1332 = comb.or bin %blocked, %1357, %io_dmem_s2_nack {sv.namehint = "_dcache_blocked_blocked_T_5"} : i1
    %1333 = comb.and bin %973, %1331, %1332 {sv.namehint = "_dcache_blocked_blocked_T_6"} : i1
    %1334 = comb.or bin %ex_reg_valid, %mem_reg_valid, %wb_reg_valid {sv.namehint = "_ctrl_stalld_T_4"} : i1
    %1335 = comb.and bin %csr.io_singleStep, %1334 {sv.namehint = "_ctrl_stalld_T_5"} : i1
    %1336 = comb.and bin %644, %blocked, %1331 {sv.namehint = "_ctrl_stalld_T_13"} : i1
    %1337 = comb.and bin %div.io_resp_valid, %1214 {sv.namehint = "_ctrl_stalld_T_18"} : i1
    %1338 = comb.or bin %div.io_req_ready, %1337 {sv.namehint = "_ctrl_stalld_T_19"} : i1
    %1339 = comb.xor bin %1338, %true {sv.namehint = "_ctrl_stalld_T_20"} : i1
    %1340 = comb.or bin %1339, %875 {sv.namehint = "_ctrl_stalld_T_21"} : i1
    %1341 = comb.and bin %685, %1340 {sv.namehint = "_ctrl_stalld_T_22"} : i1
    %1342 = comb.or bin %1311, %1321, %1330, %1282, %1289, %1296, %1335, %1336, %1341, %783, %csr.io_csr_stall, %id_reg_pause {sv.namehint = "_ctrl_stalld_T_28"} : i1
    %1343 = comb.xor bin %ibuf.io_inst_0_valid, %true {sv.namehint = "_ctrl_killd_T"} : i1
    %1344 = comb.or bin %1343, %ibuf.io_inst_0_bits_replay, %0, %1342, %csr.io_interrupt {sv.namehint = "ctrl_killd"} : i1
    %1345 = comb.or bin %1194, %csr.io_eret {sv.namehint = "_io_imem_req_bits_pc_T"} : i1
    %1346 = comb.mux bin %1208, %wb_reg_pc, %1022 {sv.namehint = "_io_imem_req_bits_pc_T_1"} : i34
    %1347 = comb.mux bin %1345, %csr.io_evec, %1346 {sv.namehint = "io_imem_req_bits_pc"} : i34
    %1348 = comb.xor bin %io_dmem_s2_nack, %true {sv.namehint = "_io_imem_flush_icache_T_1"} : i1
    %1349 = comb.and bin %wb_reg_valid, %wb_ctrl_fence_i, %1348 {sv.namehint = "io_imem_flush_icache"} : i1
    %1350 = comb.extract %csr.io_customCSRs_0_value from 1 {sv.namehint = "_io_imem_might_request_imem_might_request_reg_T_1"} : (i64) -> i1
    %1351 = comb.or bin %970, %988, %1350 {sv.namehint = "_io_imem_might_request_imem_might_request_reg_T_2"} : i1
    %1352 = comb.xor bin %1342, %true {sv.namehint = "ibuf.io_inst_0_ready"} : i1
    %1353 = comb.xor bin %1039, %true {sv.namehint = "_io_imem_btb_update_valid_T_3"} : i1
    %1354 = comb.or bin %1353, %1040 {sv.namehint = "_io_imem_btb_update_valid_T_4"} : i1
    %1355 = comb.and bin %mem_reg_valid, %1170, %1028, %1354 {sv.namehint = "io_imem_btb_update_valid"} : i1
    %1356 = comb.and bin %mem_reg_valid, %1170 {sv.namehint = "io_imem_bht_update_valid"} : i1
    %1357 = comb.and bin %ex_reg_valid, %ex_ctrl_mem {sv.namehint = "io_dmem_req_valid"} : i1
    %1358 = comb.concat %796, %false {sv.namehint = "ex_dcache_tag"} : i5, i1
    %1359 = comb.extract %ex_reg_inst from 14 {sv.namehint = "_io_dmem_req_bits_signed_T"} : (i32) -> i1
    %1360 = comb.xor bin %1359, %true {sv.namehint = "io_dmem_req_bits_signed"} : i1
    %1361 = comb.extract %816 from 33 : (i64) -> i31
    %1362 = comb.icmp bin eq %1361, %c0_i31 {sv.namehint = "_io_dmem_req_bits_addr_msb_T"} : i31
    %1363 = comb.icmp bin eq %1361, %c-1_i31 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_1"} : i31
    %1364 = comb.or bin %1362, %1363 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_2"} : i1
    %1365 = comb.extract %alu.io_adder_out from 33 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_3"} : (i64) -> i1
    %1366 = comb.extract %alu.io_adder_out from 32 {sv.namehint = "_io_dmem_req_bits_addr_msb_T_4"} : (i64) -> i1
    %1367 = comb.xor bin %1366, %true {sv.namehint = "_io_dmem_req_bits_addr_msb_T_5"} : i1
    %1368 = comb.mux bin %1364, %1365, %1367 {sv.namehint = "msb_2"} : i1
    %1369 = comb.extract %alu.io_adder_out from 0 {sv.namehint = "io_dmem_req_bits_addr_lo"} : (i64) -> i33
    %1370 = comb.concat %1368, %1369 {sv.namehint = "io_dmem_req_bits_addr"} : i1, i33
    %1371 = comb.or bin %1165, %1153 {sv.namehint = "io_dmem_s1_kill"} : i1
    %1372 = comb.extract %csr.io_time from 0 {sv.namehint = "_unpause_T"} : (i64) -> i5
    %1373 = comb.icmp bin eq %1372, %c0_i5 {sv.namehint = "_unpause_T_1"} : i5
    %1374 = comb.or bin %1373, %csr.io_inhibit_cycle, %io_dmem_perf_release, %0 {sv.namehint = "unpause"} : i1
    %1375 = comb.xor %1374, %true : i1
    %1376 = comb.and %1375, %894 : i1
    hw.instance "PlusArgTimeout" @PlusArgTimeout(clock: %clock: !seq.clock, reset: %reset: i1, io_count: %1377: i32) -> ()
    %1377 = comb.extract %csr.io_time from 0 {sv.namehint = "PlusArgTimeout.io_count"} : (i64) -> i32
    hw.output %imem_might_request_reg, %0, %1347, %1170, %ibuf.io_imem_ready, %1355, %1356, %1349, %1357, %1370, %1358, %ex_ctrl_mem_cmd, %ex_reg_mem_size, %1360, %csr.io_status_dprv, %1371, %mem_reg_rs2, %csr.io_status_debug, %csr.io_status_dprv, %csr.io_pmp_0_cfg_l, %csr.io_pmp_0_cfg_a, %csr.io_pmp_0_cfg_x, %csr.io_pmp_0_cfg_w, %csr.io_pmp_0_cfg_r, %csr.io_pmp_0_addr, %csr.io_pmp_0_mask, %csr.io_pmp_1_cfg_l, %csr.io_pmp_1_cfg_a, %csr.io_pmp_1_cfg_x, %csr.io_pmp_1_cfg_w, %csr.io_pmp_1_cfg_r, %csr.io_pmp_1_addr, %csr.io_pmp_1_mask, %csr.io_pmp_2_cfg_l, %csr.io_pmp_2_cfg_a, %csr.io_pmp_2_cfg_x, %csr.io_pmp_2_cfg_w, %csr.io_pmp_2_cfg_r, %csr.io_pmp_2_addr, %csr.io_pmp_2_mask, %csr.io_pmp_3_cfg_l, %csr.io_pmp_3_cfg_a, %csr.io_pmp_3_cfg_x, %csr.io_pmp_3_cfg_w, %csr.io_pmp_3_cfg_r, %csr.io_pmp_3_addr, %csr.io_pmp_3_mask, %csr.io_pmp_4_cfg_l, %csr.io_pmp_4_cfg_a, %csr.io_pmp_4_cfg_x, %csr.io_pmp_4_cfg_w, %csr.io_pmp_4_cfg_r, %csr.io_pmp_4_addr, %csr.io_pmp_4_mask, %csr.io_pmp_5_cfg_l, %csr.io_pmp_5_cfg_a, %csr.io_pmp_5_cfg_x, %csr.io_pmp_5_cfg_w, %csr.io_pmp_5_cfg_r, %csr.io_pmp_5_addr, %csr.io_pmp_5_mask, %csr.io_pmp_6_cfg_l, %csr.io_pmp_6_cfg_a, %csr.io_pmp_6_cfg_x, %csr.io_pmp_6_cfg_w, %csr.io_pmp_6_cfg_r, %csr.io_pmp_6_addr, %csr.io_pmp_6_mask, %csr.io_pmp_7_cfg_l, %csr.io_pmp_7_cfg_a, %csr.io_pmp_7_cfg_x, %csr.io_pmp_7_cfg_w, %csr.io_pmp_7_cfg_r, %csr.io_pmp_7_addr, %csr.io_pmp_7_mask, %csr.io_customCSRs_0_value, %csr.io_status_wfi : i1, i1, i34, i1, i1, i1, i1, i1, i1, i34, i6, i5, i2, i1, i2, i1, i64, i1, i2, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i1, i2, i1, i1, i1, i30, i32, i64, i1
  }
  hw.module private @RocketTile(in %clock : !seq.clock, in %reset : i1, out auto_wfi_out_0 : i1, in %auto_int_local_in_2_0 : i1, in %auto_int_local_in_1_0 : i1, in %auto_int_local_in_1_1 : i1, in %auto_int_local_in_0_0 : i1, in %auto_tl_other_masters_out_a_ready : i1, out auto_tl_other_masters_out_a_valid : i1, out auto_tl_other_masters_out_a_bits_opcode : i3, out auto_tl_other_masters_out_a_bits_param : i3, out auto_tl_other_masters_out_a_bits_size : i4, out auto_tl_other_masters_out_a_bits_source : i2, out auto_tl_other_masters_out_a_bits_address : i32, out auto_tl_other_masters_out_a_bits_user_amba_prot_bufferable : i1, out auto_tl_other_masters_out_a_bits_user_amba_prot_modifiable : i1, out auto_tl_other_masters_out_a_bits_user_amba_prot_readalloc : i1, out auto_tl_other_masters_out_a_bits_user_amba_prot_writealloc : i1, out auto_tl_other_masters_out_a_bits_user_amba_prot_privileged : i1, out auto_tl_other_masters_out_a_bits_user_amba_prot_secure : i1, out auto_tl_other_masters_out_a_bits_user_amba_prot_fetch : i1, out auto_tl_other_masters_out_a_bits_mask : i8, out auto_tl_other_masters_out_a_bits_data : i64, out auto_tl_other_masters_out_b_ready : i1, in %auto_tl_other_masters_out_b_valid : i1, in %auto_tl_other_masters_out_b_bits_opcode : i3, in %auto_tl_other_masters_out_b_bits_param : i2, in %auto_tl_other_masters_out_b_bits_size : i4, in %auto_tl_other_masters_out_b_bits_source : i2, in %auto_tl_other_masters_out_b_bits_address : i32, in %auto_tl_other_masters_out_b_bits_mask : i8, in %auto_tl_other_masters_out_b_bits_corrupt : i1, in %auto_tl_other_masters_out_c_ready : i1, out auto_tl_other_masters_out_c_valid : i1, out auto_tl_other_masters_out_c_bits_opcode : i3, out auto_tl_other_masters_out_c_bits_param : i3, out auto_tl_other_masters_out_c_bits_size : i4, out auto_tl_other_masters_out_c_bits_source : i2, out auto_tl_other_masters_out_c_bits_address : i32, out auto_tl_other_masters_out_c_bits_user_amba_prot_bufferable : i1, out auto_tl_other_masters_out_c_bits_user_amba_prot_modifiable : i1, out auto_tl_other_masters_out_c_bits_user_amba_prot_readalloc : i1, out auto_tl_other_masters_out_c_bits_user_amba_prot_writealloc : i1, out auto_tl_other_masters_out_c_bits_user_amba_prot_privileged : i1, out auto_tl_other_masters_out_c_bits_user_amba_prot_secure : i1, out auto_tl_other_masters_out_c_bits_data : i64, out auto_tl_other_masters_out_d_ready : i1, in %auto_tl_other_masters_out_d_valid : i1, in %auto_tl_other_masters_out_d_bits_opcode : i3, in %auto_tl_other_masters_out_d_bits_param : i2, in %auto_tl_other_masters_out_d_bits_size : i4, in %auto_tl_other_masters_out_d_bits_source : i2, in %auto_tl_other_masters_out_d_bits_sink : i2, in %auto_tl_other_masters_out_d_bits_denied : i1, in %auto_tl_other_masters_out_d_bits_data : i64, in %auto_tl_other_masters_out_d_bits_corrupt : i1, in %auto_tl_other_masters_out_e_ready : i1, out auto_tl_other_masters_out_e_valid : i1, out auto_tl_other_masters_out_e_bits_sink : i2) {
    %false = hw.constant false
    %tlMasterXbar.auto_in_1_a_ready, %tlMasterXbar.auto_in_1_d_valid, %tlMasterXbar.auto_in_1_d_bits_opcode, %tlMasterXbar.auto_in_1_d_bits_size, %tlMasterXbar.auto_in_1_d_bits_data, %tlMasterXbar.auto_in_1_d_bits_corrupt, %tlMasterXbar.auto_in_0_a_ready, %tlMasterXbar.auto_in_0_b_valid, %tlMasterXbar.auto_in_0_b_bits_param, %tlMasterXbar.auto_in_0_b_bits_size, %tlMasterXbar.auto_in_0_b_bits_source, %tlMasterXbar.auto_in_0_b_bits_address, %tlMasterXbar.auto_in_0_c_ready, %tlMasterXbar.auto_in_0_d_valid, %tlMasterXbar.auto_in_0_d_bits_opcode, %tlMasterXbar.auto_in_0_d_bits_param, %tlMasterXbar.auto_in_0_d_bits_size, %tlMasterXbar.auto_in_0_d_bits_source, %tlMasterXbar.auto_in_0_d_bits_sink, %tlMasterXbar.auto_in_0_d_bits_denied, %tlMasterXbar.auto_in_0_d_bits_data, %tlMasterXbar.auto_in_0_e_ready, %tlMasterXbar.auto_out_a_valid, %tlMasterXbar.auto_out_a_bits_opcode, %tlMasterXbar.auto_out_a_bits_param, %tlMasterXbar.auto_out_a_bits_size, %tlMasterXbar.auto_out_a_bits_source, %tlMasterXbar.auto_out_a_bits_address, %tlMasterXbar.auto_out_a_bits_user_amba_prot_bufferable, %tlMasterXbar.auto_out_a_bits_user_amba_prot_modifiable, %tlMasterXbar.auto_out_a_bits_user_amba_prot_readalloc, %tlMasterXbar.auto_out_a_bits_user_amba_prot_writealloc, %tlMasterXbar.auto_out_a_bits_user_amba_prot_privileged, %tlMasterXbar.auto_out_a_bits_user_amba_prot_secure, %tlMasterXbar.auto_out_a_bits_user_amba_prot_fetch, %tlMasterXbar.auto_out_a_bits_mask, %tlMasterXbar.auto_out_a_bits_data, %tlMasterXbar.auto_out_b_ready, %tlMasterXbar.auto_out_c_valid, %tlMasterXbar.auto_out_c_bits_opcode, %tlMasterXbar.auto_out_c_bits_param, %tlMasterXbar.auto_out_c_bits_size, %tlMasterXbar.auto_out_c_bits_source, %tlMasterXbar.auto_out_c_bits_address, %tlMasterXbar.auto_out_c_bits_user_amba_prot_bufferable, %tlMasterXbar.auto_out_c_bits_user_amba_prot_modifiable, %tlMasterXbar.auto_out_c_bits_user_amba_prot_readalloc, %tlMasterXbar.auto_out_c_bits_user_amba_prot_writealloc, %tlMasterXbar.auto_out_c_bits_user_amba_prot_privileged, %tlMasterXbar.auto_out_c_bits_user_amba_prot_secure, %tlMasterXbar.auto_out_c_bits_data, %tlMasterXbar.auto_out_d_ready, %tlMasterXbar.auto_out_e_valid, %tlMasterXbar.auto_out_e_bits_sink = hw.instance "tlMasterXbar" @TLXbar_7(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_1_a_valid: %frontend.auto_icache_master_out_a_valid: i1, auto_in_1_a_bits_address: %frontend.auto_icache_master_out_a_bits_address: i32, auto_in_0_a_valid: %dcache.auto_out_a_valid: i1, auto_in_0_a_bits_opcode: %dcache.auto_out_a_bits_opcode: i3, auto_in_0_a_bits_param: %dcache.auto_out_a_bits_param: i3, auto_in_0_a_bits_size: %dcache.auto_out_a_bits_size: i4, auto_in_0_a_bits_source: %dcache.auto_out_a_bits_source: i1, auto_in_0_a_bits_address: %dcache.auto_out_a_bits_address: i32, auto_in_0_a_bits_user_amba_prot_bufferable: %dcache.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_0_a_bits_user_amba_prot_modifiable: %dcache.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_0_a_bits_user_amba_prot_readalloc: %dcache.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_0_a_bits_user_amba_prot_writealloc: %dcache.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_0_a_bits_user_amba_prot_privileged: %dcache.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_0_a_bits_mask: %dcache.auto_out_a_bits_mask: i8, auto_in_0_a_bits_data: %dcache.auto_out_a_bits_data: i64, auto_in_0_b_ready: %dcache.auto_out_b_ready: i1, auto_in_0_c_valid: %dcache.auto_out_c_valid: i1, auto_in_0_c_bits_opcode: %dcache.auto_out_c_bits_opcode: i3, auto_in_0_c_bits_param: %dcache.auto_out_c_bits_param: i3, auto_in_0_c_bits_size: %dcache.auto_out_c_bits_size: i4, auto_in_0_c_bits_source: %dcache.auto_out_c_bits_source: i1, auto_in_0_c_bits_address: %dcache.auto_out_c_bits_address: i32, auto_in_0_c_bits_user_amba_prot_bufferable: %dcache.auto_out_c_bits_user_amba_prot_bufferable: i1, auto_in_0_c_bits_user_amba_prot_modifiable: %dcache.auto_out_c_bits_user_amba_prot_modifiable: i1, auto_in_0_c_bits_user_amba_prot_readalloc: %dcache.auto_out_c_bits_user_amba_prot_readalloc: i1, auto_in_0_c_bits_user_amba_prot_writealloc: %dcache.auto_out_c_bits_user_amba_prot_writealloc: i1, auto_in_0_c_bits_user_amba_prot_privileged: %dcache.auto_out_c_bits_user_amba_prot_privileged: i1, auto_in_0_c_bits_user_amba_prot_secure: %dcache.auto_out_c_bits_user_amba_prot_secure: i1, auto_in_0_c_bits_data: %dcache.auto_out_c_bits_data: i64, auto_in_0_d_ready: %dcache.auto_out_d_ready: i1, auto_in_0_e_valid: %dcache.auto_out_e_valid: i1, auto_in_0_e_bits_sink: %dcache.auto_out_e_bits_sink: i2, auto_out_a_ready: %auto_tl_other_masters_out_a_ready: i1, auto_out_b_valid: %auto_tl_other_masters_out_b_valid: i1, auto_out_b_bits_opcode: %auto_tl_other_masters_out_b_bits_opcode: i3, auto_out_b_bits_param: %auto_tl_other_masters_out_b_bits_param: i2, auto_out_b_bits_size: %auto_tl_other_masters_out_b_bits_size: i4, auto_out_b_bits_source: %auto_tl_other_masters_out_b_bits_source: i2, auto_out_b_bits_address: %auto_tl_other_masters_out_b_bits_address: i32, auto_out_b_bits_mask: %auto_tl_other_masters_out_b_bits_mask: i8, auto_out_b_bits_corrupt: %auto_tl_other_masters_out_b_bits_corrupt: i1, auto_out_c_ready: %auto_tl_other_masters_out_c_ready: i1, auto_out_d_valid: %auto_tl_other_masters_out_d_valid: i1, auto_out_d_bits_opcode: %auto_tl_other_masters_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_tl_other_masters_out_d_bits_param: i2, auto_out_d_bits_size: %auto_tl_other_masters_out_d_bits_size: i4, auto_out_d_bits_source: %auto_tl_other_masters_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_tl_other_masters_out_d_bits_sink: i2, auto_out_d_bits_denied: %auto_tl_other_masters_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_tl_other_masters_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_tl_other_masters_out_d_bits_corrupt: i1, auto_out_e_ready: %auto_tl_other_masters_out_e_ready: i1) -> (auto_in_1_a_ready: i1, auto_in_1_d_valid: i1, auto_in_1_d_bits_opcode: i3, auto_in_1_d_bits_size: i4, auto_in_1_d_bits_data: i64, auto_in_1_d_bits_corrupt: i1, auto_in_0_a_ready: i1, auto_in_0_b_valid: i1, auto_in_0_b_bits_param: i2, auto_in_0_b_bits_size: i4, auto_in_0_b_bits_source: i1, auto_in_0_b_bits_address: i32, auto_in_0_c_ready: i1, auto_in_0_d_valid: i1, auto_in_0_d_bits_opcode: i3, auto_in_0_d_bits_param: i2, auto_in_0_d_bits_size: i4, auto_in_0_d_bits_source: i1, auto_in_0_d_bits_sink: i2, auto_in_0_d_bits_denied: i1, auto_in_0_d_bits_data: i64, auto_in_0_e_ready: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_user_amba_prot_bufferable: i1, auto_out_c_bits_user_amba_prot_modifiable: i1, auto_out_c_bits_user_amba_prot_readalloc: i1, auto_out_c_bits_user_amba_prot_writealloc: i1, auto_out_c_bits_user_amba_prot_privileged: i1, auto_out_c_bits_user_amba_prot_secure: i1, auto_out_c_bits_data: i64, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "bundleIn_0_e_valid"}
    %intXbar.auto_int_out_0, %intXbar.auto_int_out_1, %intXbar.auto_int_out_2, %intXbar.auto_int_out_3 = hw.instance "intXbar" @IntXbar_1(auto_int_in_2_0: %auto_int_local_in_2_0: i1, auto_int_in_1_0: %auto_int_local_in_1_0: i1, auto_int_in_1_1: %auto_int_local_in_1_1: i1, auto_int_in_0_0: %auto_int_local_in_0_0: i1) -> (auto_int_out_0: i1, auto_int_out_1: i1, auto_int_out_2: i1, auto_int_out_3: i1) {sv.namehint = "core.io_interrupts_meip"}
    %dcache.auto_out_a_valid, %dcache.auto_out_a_bits_opcode, %dcache.auto_out_a_bits_param, %dcache.auto_out_a_bits_size, %dcache.auto_out_a_bits_source, %dcache.auto_out_a_bits_address, %dcache.auto_out_a_bits_user_amba_prot_bufferable, %dcache.auto_out_a_bits_user_amba_prot_modifiable, %dcache.auto_out_a_bits_user_amba_prot_readalloc, %dcache.auto_out_a_bits_user_amba_prot_writealloc, %dcache.auto_out_a_bits_user_amba_prot_privileged, %dcache.auto_out_a_bits_mask, %dcache.auto_out_a_bits_data, %dcache.auto_out_b_ready, %dcache.auto_out_c_valid, %dcache.auto_out_c_bits_opcode, %dcache.auto_out_c_bits_param, %dcache.auto_out_c_bits_size, %dcache.auto_out_c_bits_source, %dcache.auto_out_c_bits_address, %dcache.auto_out_c_bits_user_amba_prot_bufferable, %dcache.auto_out_c_bits_user_amba_prot_modifiable, %dcache.auto_out_c_bits_user_amba_prot_readalloc, %dcache.auto_out_c_bits_user_amba_prot_writealloc, %dcache.auto_out_c_bits_user_amba_prot_privileged, %dcache.auto_out_c_bits_user_amba_prot_secure, %dcache.auto_out_c_bits_data, %dcache.auto_out_d_ready, %dcache.auto_out_e_valid, %dcache.auto_out_e_bits_sink, %dcache.io_cpu_req_ready, %dcache.io_cpu_s2_nack, %dcache.io_cpu_resp_valid, %dcache.io_cpu_resp_bits_tag, %dcache.io_cpu_resp_bits_data, %dcache.io_cpu_resp_bits_replay, %dcache.io_cpu_resp_bits_has_data, %dcache.io_cpu_resp_bits_data_word_bypass, %dcache.io_cpu_replay_next, %dcache.io_cpu_s2_xcpt_ma_ld, %dcache.io_cpu_s2_xcpt_ma_st, %dcache.io_cpu_s2_xcpt_pf_ld, %dcache.io_cpu_s2_xcpt_pf_st, %dcache.io_cpu_s2_xcpt_ae_ld, %dcache.io_cpu_s2_xcpt_ae_st, %dcache.io_cpu_ordered, %dcache.io_cpu_perf_release, %dcache.io_cpu_perf_grant = hw.instance "dcache" @DCache(gated_clock: %clock: !seq.clock, reset: %reset: i1, auto_out_a_ready: %tlMasterXbar.auto_in_0_a_ready: i1, auto_out_b_valid: %tlMasterXbar.auto_in_0_b_valid: i1, auto_out_b_bits_param: %tlMasterXbar.auto_in_0_b_bits_param: i2, auto_out_b_bits_size: %tlMasterXbar.auto_in_0_b_bits_size: i4, auto_out_b_bits_source: %tlMasterXbar.auto_in_0_b_bits_source: i1, auto_out_b_bits_address: %tlMasterXbar.auto_in_0_b_bits_address: i32, auto_out_c_ready: %tlMasterXbar.auto_in_0_c_ready: i1, auto_out_d_valid: %tlMasterXbar.auto_in_0_d_valid: i1, auto_out_d_bits_opcode: %tlMasterXbar.auto_in_0_d_bits_opcode: i3, auto_out_d_bits_param: %tlMasterXbar.auto_in_0_d_bits_param: i2, auto_out_d_bits_size: %tlMasterXbar.auto_in_0_d_bits_size: i4, auto_out_d_bits_source: %tlMasterXbar.auto_in_0_d_bits_source: i1, auto_out_d_bits_sink: %tlMasterXbar.auto_in_0_d_bits_sink: i2, auto_out_d_bits_denied: %tlMasterXbar.auto_in_0_d_bits_denied: i1, auto_out_d_bits_data: %tlMasterXbar.auto_in_0_d_bits_data: i64, auto_out_e_ready: %tlMasterXbar.auto_in_0_e_ready: i1, io_cpu_req_valid: %dcacheArb.io_mem_req_valid: i1, io_cpu_req_bits_addr: %dcacheArb.io_mem_req_bits_addr: i34, io_cpu_req_bits_tag: %dcacheArb.io_mem_req_bits_tag: i6, io_cpu_req_bits_cmd: %dcacheArb.io_mem_req_bits_cmd: i5, io_cpu_req_bits_size: %dcacheArb.io_mem_req_bits_size: i2, io_cpu_req_bits_signed: %dcacheArb.io_mem_req_bits_signed: i1, io_cpu_req_bits_dprv: %dcacheArb.io_mem_req_bits_dprv: i2, io_cpu_s1_kill: %dcacheArb.io_mem_s1_kill: i1, io_cpu_s1_data_data: %dcacheArb.io_mem_s1_data_data: i64, io_ptw_status_debug: %ptw.io_requestor_0_status_debug: i1, io_ptw_status_dprv: %ptw.io_requestor_0_status_dprv: i2, io_ptw_pmp_0_cfg_l: %ptw.io_requestor_0_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %ptw.io_requestor_0_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_w: %ptw.io_requestor_0_pmp_0_cfg_w: i1, io_ptw_pmp_0_cfg_r: %ptw.io_requestor_0_pmp_0_cfg_r: i1, io_ptw_pmp_0_addr: %ptw.io_requestor_0_pmp_0_addr: i30, io_ptw_pmp_0_mask: %ptw.io_requestor_0_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %ptw.io_requestor_0_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %ptw.io_requestor_0_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_w: %ptw.io_requestor_0_pmp_1_cfg_w: i1, io_ptw_pmp_1_cfg_r: %ptw.io_requestor_0_pmp_1_cfg_r: i1, io_ptw_pmp_1_addr: %ptw.io_requestor_0_pmp_1_addr: i30, io_ptw_pmp_1_mask: %ptw.io_requestor_0_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %ptw.io_requestor_0_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %ptw.io_requestor_0_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_w: %ptw.io_requestor_0_pmp_2_cfg_w: i1, io_ptw_pmp_2_cfg_r: %ptw.io_requestor_0_pmp_2_cfg_r: i1, io_ptw_pmp_2_addr: %ptw.io_requestor_0_pmp_2_addr: i30, io_ptw_pmp_2_mask: %ptw.io_requestor_0_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %ptw.io_requestor_0_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %ptw.io_requestor_0_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_w: %ptw.io_requestor_0_pmp_3_cfg_w: i1, io_ptw_pmp_3_cfg_r: %ptw.io_requestor_0_pmp_3_cfg_r: i1, io_ptw_pmp_3_addr: %ptw.io_requestor_0_pmp_3_addr: i30, io_ptw_pmp_3_mask: %ptw.io_requestor_0_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %ptw.io_requestor_0_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %ptw.io_requestor_0_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_w: %ptw.io_requestor_0_pmp_4_cfg_w: i1, io_ptw_pmp_4_cfg_r: %ptw.io_requestor_0_pmp_4_cfg_r: i1, io_ptw_pmp_4_addr: %ptw.io_requestor_0_pmp_4_addr: i30, io_ptw_pmp_4_mask: %ptw.io_requestor_0_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %ptw.io_requestor_0_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %ptw.io_requestor_0_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_w: %ptw.io_requestor_0_pmp_5_cfg_w: i1, io_ptw_pmp_5_cfg_r: %ptw.io_requestor_0_pmp_5_cfg_r: i1, io_ptw_pmp_5_addr: %ptw.io_requestor_0_pmp_5_addr: i30, io_ptw_pmp_5_mask: %ptw.io_requestor_0_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %ptw.io_requestor_0_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %ptw.io_requestor_0_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_w: %ptw.io_requestor_0_pmp_6_cfg_w: i1, io_ptw_pmp_6_cfg_r: %ptw.io_requestor_0_pmp_6_cfg_r: i1, io_ptw_pmp_6_addr: %ptw.io_requestor_0_pmp_6_addr: i30, io_ptw_pmp_6_mask: %ptw.io_requestor_0_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %ptw.io_requestor_0_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %ptw.io_requestor_0_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_w: %ptw.io_requestor_0_pmp_7_cfg_w: i1, io_ptw_pmp_7_cfg_r: %ptw.io_requestor_0_pmp_7_cfg_r: i1, io_ptw_pmp_7_addr: %ptw.io_requestor_0_pmp_7_addr: i30, io_ptw_pmp_7_mask: %ptw.io_requestor_0_pmp_7_mask: i32) -> (auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i1, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i1, auto_out_c_bits_address: i32, auto_out_c_bits_user_amba_prot_bufferable: i1, auto_out_c_bits_user_amba_prot_modifiable: i1, auto_out_c_bits_user_amba_prot_readalloc: i1, auto_out_c_bits_user_amba_prot_writealloc: i1, auto_out_c_bits_user_amba_prot_privileged: i1, auto_out_c_bits_user_amba_prot_secure: i1, auto_out_c_bits_data: i64, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2, io_cpu_req_ready: i1, io_cpu_s2_nack: i1, io_cpu_resp_valid: i1, io_cpu_resp_bits_tag: i6, io_cpu_resp_bits_data: i64, io_cpu_resp_bits_replay: i1, io_cpu_resp_bits_has_data: i1, io_cpu_resp_bits_data_word_bypass: i64, io_cpu_replay_next: i1, io_cpu_s2_xcpt_ma_ld: i1, io_cpu_s2_xcpt_ma_st: i1, io_cpu_s2_xcpt_pf_ld: i1, io_cpu_s2_xcpt_pf_st: i1, io_cpu_s2_xcpt_ae_ld: i1, io_cpu_s2_xcpt_ae_st: i1, io_cpu_ordered: i1, io_cpu_perf_release: i1, io_cpu_perf_grant: i1) {sv.namehint = "dcache.io_cpu_ordered"}
    %frontend.auto_icache_master_out_a_valid, %frontend.auto_icache_master_out_a_bits_address, %frontend.io_cpu_resp_valid, %frontend.io_cpu_resp_bits_pc, %frontend.io_cpu_resp_bits_data, %frontend.io_cpu_resp_bits_xcpt_pf_inst, %frontend.io_cpu_resp_bits_xcpt_ae_inst, %frontend.io_cpu_resp_bits_replay = hw.instance "frontend" @Frontend(gated_clock: %clock: !seq.clock, reset: %reset: i1, auto_icache_master_out_a_ready: %tlMasterXbar.auto_in_1_a_ready: i1, auto_icache_master_out_d_valid: %tlMasterXbar.auto_in_1_d_valid: i1, auto_icache_master_out_d_bits_opcode: %tlMasterXbar.auto_in_1_d_bits_opcode: i3, auto_icache_master_out_d_bits_size: %tlMasterXbar.auto_in_1_d_bits_size: i4, auto_icache_master_out_d_bits_data: %tlMasterXbar.auto_in_1_d_bits_data: i64, auto_icache_master_out_d_bits_corrupt: %tlMasterXbar.auto_in_1_d_bits_corrupt: i1, io_cpu_might_request: %core.io_imem_might_request: i1, io_cpu_req_valid: %core.io_imem_req_valid: i1, io_cpu_req_bits_pc: %core.io_imem_req_bits_pc: i34, io_cpu_req_bits_speculative: %core.io_imem_req_bits_speculative: i1, io_cpu_resp_ready: %core.io_imem_resp_ready: i1, io_cpu_btb_update_valid: %core.io_imem_btb_update_valid: i1, io_cpu_bht_update_valid: %core.io_imem_bht_update_valid: i1, io_cpu_flush_icache: %core.io_imem_flush_icache: i1, io_ptw_status_debug: %ptw.io_requestor_1_status_debug: i1, io_ptw_pmp_0_cfg_l: %ptw.io_requestor_1_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: %ptw.io_requestor_1_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_x: %ptw.io_requestor_1_pmp_0_cfg_x: i1, io_ptw_pmp_0_addr: %ptw.io_requestor_1_pmp_0_addr: i30, io_ptw_pmp_0_mask: %ptw.io_requestor_1_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: %ptw.io_requestor_1_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: %ptw.io_requestor_1_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_x: %ptw.io_requestor_1_pmp_1_cfg_x: i1, io_ptw_pmp_1_addr: %ptw.io_requestor_1_pmp_1_addr: i30, io_ptw_pmp_1_mask: %ptw.io_requestor_1_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: %ptw.io_requestor_1_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: %ptw.io_requestor_1_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_x: %ptw.io_requestor_1_pmp_2_cfg_x: i1, io_ptw_pmp_2_addr: %ptw.io_requestor_1_pmp_2_addr: i30, io_ptw_pmp_2_mask: %ptw.io_requestor_1_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: %ptw.io_requestor_1_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: %ptw.io_requestor_1_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_x: %ptw.io_requestor_1_pmp_3_cfg_x: i1, io_ptw_pmp_3_addr: %ptw.io_requestor_1_pmp_3_addr: i30, io_ptw_pmp_3_mask: %ptw.io_requestor_1_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: %ptw.io_requestor_1_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: %ptw.io_requestor_1_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_x: %ptw.io_requestor_1_pmp_4_cfg_x: i1, io_ptw_pmp_4_addr: %ptw.io_requestor_1_pmp_4_addr: i30, io_ptw_pmp_4_mask: %ptw.io_requestor_1_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: %ptw.io_requestor_1_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: %ptw.io_requestor_1_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_x: %ptw.io_requestor_1_pmp_5_cfg_x: i1, io_ptw_pmp_5_addr: %ptw.io_requestor_1_pmp_5_addr: i30, io_ptw_pmp_5_mask: %ptw.io_requestor_1_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: %ptw.io_requestor_1_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: %ptw.io_requestor_1_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_x: %ptw.io_requestor_1_pmp_6_cfg_x: i1, io_ptw_pmp_6_addr: %ptw.io_requestor_1_pmp_6_addr: i30, io_ptw_pmp_6_mask: %ptw.io_requestor_1_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: %ptw.io_requestor_1_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: %ptw.io_requestor_1_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_x: %ptw.io_requestor_1_pmp_7_cfg_x: i1, io_ptw_pmp_7_addr: %ptw.io_requestor_1_pmp_7_addr: i30, io_ptw_pmp_7_mask: %ptw.io_requestor_1_pmp_7_mask: i32, io_ptw_customCSRs_csrs_0_value: %ptw.io_requestor_1_customCSRs_csrs_0_value: i64) -> (auto_icache_master_out_a_valid: i1, auto_icache_master_out_a_bits_address: i32, io_cpu_resp_valid: i1, io_cpu_resp_bits_pc: i34, io_cpu_resp_bits_data: i32, io_cpu_resp_bits_xcpt_pf_inst: i1, io_cpu_resp_bits_xcpt_ae_inst: i1, io_cpu_resp_bits_replay: i1) {sv.namehint = "core.io_imem_resp_valid"}
    %dcacheArb.io_requestor_0_req_ready, %dcacheArb.io_requestor_0_s2_nack, %dcacheArb.io_requestor_0_resp_valid, %dcacheArb.io_requestor_0_resp_bits_tag, %dcacheArb.io_requestor_0_resp_bits_data, %dcacheArb.io_requestor_0_resp_bits_replay, %dcacheArb.io_requestor_0_resp_bits_has_data, %dcacheArb.io_requestor_0_resp_bits_data_word_bypass, %dcacheArb.io_requestor_0_replay_next, %dcacheArb.io_requestor_0_s2_xcpt_ma_ld, %dcacheArb.io_requestor_0_s2_xcpt_ma_st, %dcacheArb.io_requestor_0_s2_xcpt_pf_ld, %dcacheArb.io_requestor_0_s2_xcpt_pf_st, %dcacheArb.io_requestor_0_s2_xcpt_ae_ld, %dcacheArb.io_requestor_0_s2_xcpt_ae_st, %dcacheArb.io_requestor_0_ordered, %dcacheArb.io_requestor_0_perf_release, %dcacheArb.io_requestor_0_perf_grant, %dcacheArb.io_mem_req_valid, %dcacheArb.io_mem_req_bits_addr, %dcacheArb.io_mem_req_bits_tag, %dcacheArb.io_mem_req_bits_cmd, %dcacheArb.io_mem_req_bits_size, %dcacheArb.io_mem_req_bits_signed, %dcacheArb.io_mem_req_bits_dprv, %dcacheArb.io_mem_s1_kill, %dcacheArb.io_mem_s1_data_data = hw.instance "dcacheArb" @HellaCacheArbiter(io_requestor_0_req_valid: %core.io_dmem_req_valid: i1, io_requestor_0_req_bits_addr: %core.io_dmem_req_bits_addr: i34, io_requestor_0_req_bits_tag: %core.io_dmem_req_bits_tag: i6, io_requestor_0_req_bits_cmd: %core.io_dmem_req_bits_cmd: i5, io_requestor_0_req_bits_size: %core.io_dmem_req_bits_size: i2, io_requestor_0_req_bits_signed: %core.io_dmem_req_bits_signed: i1, io_requestor_0_req_bits_dprv: %core.io_dmem_req_bits_dprv: i2, io_requestor_0_s1_kill: %core.io_dmem_s1_kill: i1, io_requestor_0_s1_data_data: %core.io_dmem_s1_data_data: i64, io_mem_req_ready: %dcache.io_cpu_req_ready: i1, io_mem_s2_nack: %dcache.io_cpu_s2_nack: i1, io_mem_resp_valid: %dcache.io_cpu_resp_valid: i1, io_mem_resp_bits_tag: %dcache.io_cpu_resp_bits_tag: i6, io_mem_resp_bits_data: %dcache.io_cpu_resp_bits_data: i64, io_mem_resp_bits_replay: %dcache.io_cpu_resp_bits_replay: i1, io_mem_resp_bits_has_data: %dcache.io_cpu_resp_bits_has_data: i1, io_mem_resp_bits_data_word_bypass: %dcache.io_cpu_resp_bits_data_word_bypass: i64, io_mem_replay_next: %dcache.io_cpu_replay_next: i1, io_mem_s2_xcpt_ma_ld: %dcache.io_cpu_s2_xcpt_ma_ld: i1, io_mem_s2_xcpt_ma_st: %dcache.io_cpu_s2_xcpt_ma_st: i1, io_mem_s2_xcpt_pf_ld: %dcache.io_cpu_s2_xcpt_pf_ld: i1, io_mem_s2_xcpt_pf_st: %dcache.io_cpu_s2_xcpt_pf_st: i1, io_mem_s2_xcpt_ae_ld: %dcache.io_cpu_s2_xcpt_ae_ld: i1, io_mem_s2_xcpt_ae_st: %dcache.io_cpu_s2_xcpt_ae_st: i1, io_mem_ordered: %dcache.io_cpu_ordered: i1, io_mem_perf_release: %dcache.io_cpu_perf_release: i1, io_mem_perf_grant: %dcache.io_cpu_perf_grant: i1) -> (io_requestor_0_req_ready: i1, io_requestor_0_s2_nack: i1, io_requestor_0_resp_valid: i1, io_requestor_0_resp_bits_tag: i6, io_requestor_0_resp_bits_data: i64, io_requestor_0_resp_bits_replay: i1, io_requestor_0_resp_bits_has_data: i1, io_requestor_0_resp_bits_data_word_bypass: i64, io_requestor_0_replay_next: i1, io_requestor_0_s2_xcpt_ma_ld: i1, io_requestor_0_s2_xcpt_ma_st: i1, io_requestor_0_s2_xcpt_pf_ld: i1, io_requestor_0_s2_xcpt_pf_st: i1, io_requestor_0_s2_xcpt_ae_ld: i1, io_requestor_0_s2_xcpt_ae_st: i1, io_requestor_0_ordered: i1, io_requestor_0_perf_release: i1, io_requestor_0_perf_grant: i1, io_mem_req_valid: i1, io_mem_req_bits_addr: i34, io_mem_req_bits_tag: i6, io_mem_req_bits_cmd: i5, io_mem_req_bits_size: i2, io_mem_req_bits_signed: i1, io_mem_req_bits_dprv: i2, io_mem_s1_kill: i1, io_mem_s1_data_data: i64) {sv.namehint = "core.io_dmem_ordered"}
    %ptw.io_requestor_0_status_debug, %ptw.io_requestor_0_status_dprv, %ptw.io_requestor_0_pmp_0_cfg_l, %ptw.io_requestor_0_pmp_0_cfg_a, %ptw.io_requestor_0_pmp_0_cfg_w, %ptw.io_requestor_0_pmp_0_cfg_r, %ptw.io_requestor_0_pmp_0_addr, %ptw.io_requestor_0_pmp_0_mask, %ptw.io_requestor_0_pmp_1_cfg_l, %ptw.io_requestor_0_pmp_1_cfg_a, %ptw.io_requestor_0_pmp_1_cfg_w, %ptw.io_requestor_0_pmp_1_cfg_r, %ptw.io_requestor_0_pmp_1_addr, %ptw.io_requestor_0_pmp_1_mask, %ptw.io_requestor_0_pmp_2_cfg_l, %ptw.io_requestor_0_pmp_2_cfg_a, %ptw.io_requestor_0_pmp_2_cfg_w, %ptw.io_requestor_0_pmp_2_cfg_r, %ptw.io_requestor_0_pmp_2_addr, %ptw.io_requestor_0_pmp_2_mask, %ptw.io_requestor_0_pmp_3_cfg_l, %ptw.io_requestor_0_pmp_3_cfg_a, %ptw.io_requestor_0_pmp_3_cfg_w, %ptw.io_requestor_0_pmp_3_cfg_r, %ptw.io_requestor_0_pmp_3_addr, %ptw.io_requestor_0_pmp_3_mask, %ptw.io_requestor_0_pmp_4_cfg_l, %ptw.io_requestor_0_pmp_4_cfg_a, %ptw.io_requestor_0_pmp_4_cfg_w, %ptw.io_requestor_0_pmp_4_cfg_r, %ptw.io_requestor_0_pmp_4_addr, %ptw.io_requestor_0_pmp_4_mask, %ptw.io_requestor_0_pmp_5_cfg_l, %ptw.io_requestor_0_pmp_5_cfg_a, %ptw.io_requestor_0_pmp_5_cfg_w, %ptw.io_requestor_0_pmp_5_cfg_r, %ptw.io_requestor_0_pmp_5_addr, %ptw.io_requestor_0_pmp_5_mask, %ptw.io_requestor_0_pmp_6_cfg_l, %ptw.io_requestor_0_pmp_6_cfg_a, %ptw.io_requestor_0_pmp_6_cfg_w, %ptw.io_requestor_0_pmp_6_cfg_r, %ptw.io_requestor_0_pmp_6_addr, %ptw.io_requestor_0_pmp_6_mask, %ptw.io_requestor_0_pmp_7_cfg_l, %ptw.io_requestor_0_pmp_7_cfg_a, %ptw.io_requestor_0_pmp_7_cfg_w, %ptw.io_requestor_0_pmp_7_cfg_r, %ptw.io_requestor_0_pmp_7_addr, %ptw.io_requestor_0_pmp_7_mask, %ptw.io_requestor_1_status_debug, %ptw.io_requestor_1_pmp_0_cfg_l, %ptw.io_requestor_1_pmp_0_cfg_a, %ptw.io_requestor_1_pmp_0_cfg_x, %ptw.io_requestor_1_pmp_0_addr, %ptw.io_requestor_1_pmp_0_mask, %ptw.io_requestor_1_pmp_1_cfg_l, %ptw.io_requestor_1_pmp_1_cfg_a, %ptw.io_requestor_1_pmp_1_cfg_x, %ptw.io_requestor_1_pmp_1_addr, %ptw.io_requestor_1_pmp_1_mask, %ptw.io_requestor_1_pmp_2_cfg_l, %ptw.io_requestor_1_pmp_2_cfg_a, %ptw.io_requestor_1_pmp_2_cfg_x, %ptw.io_requestor_1_pmp_2_addr, %ptw.io_requestor_1_pmp_2_mask, %ptw.io_requestor_1_pmp_3_cfg_l, %ptw.io_requestor_1_pmp_3_cfg_a, %ptw.io_requestor_1_pmp_3_cfg_x, %ptw.io_requestor_1_pmp_3_addr, %ptw.io_requestor_1_pmp_3_mask, %ptw.io_requestor_1_pmp_4_cfg_l, %ptw.io_requestor_1_pmp_4_cfg_a, %ptw.io_requestor_1_pmp_4_cfg_x, %ptw.io_requestor_1_pmp_4_addr, %ptw.io_requestor_1_pmp_4_mask, %ptw.io_requestor_1_pmp_5_cfg_l, %ptw.io_requestor_1_pmp_5_cfg_a, %ptw.io_requestor_1_pmp_5_cfg_x, %ptw.io_requestor_1_pmp_5_addr, %ptw.io_requestor_1_pmp_5_mask, %ptw.io_requestor_1_pmp_6_cfg_l, %ptw.io_requestor_1_pmp_6_cfg_a, %ptw.io_requestor_1_pmp_6_cfg_x, %ptw.io_requestor_1_pmp_6_addr, %ptw.io_requestor_1_pmp_6_mask, %ptw.io_requestor_1_pmp_7_cfg_l, %ptw.io_requestor_1_pmp_7_cfg_a, %ptw.io_requestor_1_pmp_7_cfg_x, %ptw.io_requestor_1_pmp_7_addr, %ptw.io_requestor_1_pmp_7_mask, %ptw.io_requestor_1_customCSRs_csrs_0_value = hw.instance "ptw" @PTW(clock: %clock: !seq.clock, io_dpath_status_debug: %core.io_ptw_status_debug: i1, io_dpath_status_dprv: %core.io_ptw_status_dprv: i2, io_dpath_pmp_0_cfg_l: %core.io_ptw_pmp_0_cfg_l: i1, io_dpath_pmp_0_cfg_a: %core.io_ptw_pmp_0_cfg_a: i2, io_dpath_pmp_0_cfg_x: %core.io_ptw_pmp_0_cfg_x: i1, io_dpath_pmp_0_cfg_w: %core.io_ptw_pmp_0_cfg_w: i1, io_dpath_pmp_0_cfg_r: %core.io_ptw_pmp_0_cfg_r: i1, io_dpath_pmp_0_addr: %core.io_ptw_pmp_0_addr: i30, io_dpath_pmp_0_mask: %core.io_ptw_pmp_0_mask: i32, io_dpath_pmp_1_cfg_l: %core.io_ptw_pmp_1_cfg_l: i1, io_dpath_pmp_1_cfg_a: %core.io_ptw_pmp_1_cfg_a: i2, io_dpath_pmp_1_cfg_x: %core.io_ptw_pmp_1_cfg_x: i1, io_dpath_pmp_1_cfg_w: %core.io_ptw_pmp_1_cfg_w: i1, io_dpath_pmp_1_cfg_r: %core.io_ptw_pmp_1_cfg_r: i1, io_dpath_pmp_1_addr: %core.io_ptw_pmp_1_addr: i30, io_dpath_pmp_1_mask: %core.io_ptw_pmp_1_mask: i32, io_dpath_pmp_2_cfg_l: %core.io_ptw_pmp_2_cfg_l: i1, io_dpath_pmp_2_cfg_a: %core.io_ptw_pmp_2_cfg_a: i2, io_dpath_pmp_2_cfg_x: %core.io_ptw_pmp_2_cfg_x: i1, io_dpath_pmp_2_cfg_w: %core.io_ptw_pmp_2_cfg_w: i1, io_dpath_pmp_2_cfg_r: %core.io_ptw_pmp_2_cfg_r: i1, io_dpath_pmp_2_addr: %core.io_ptw_pmp_2_addr: i30, io_dpath_pmp_2_mask: %core.io_ptw_pmp_2_mask: i32, io_dpath_pmp_3_cfg_l: %core.io_ptw_pmp_3_cfg_l: i1, io_dpath_pmp_3_cfg_a: %core.io_ptw_pmp_3_cfg_a: i2, io_dpath_pmp_3_cfg_x: %core.io_ptw_pmp_3_cfg_x: i1, io_dpath_pmp_3_cfg_w: %core.io_ptw_pmp_3_cfg_w: i1, io_dpath_pmp_3_cfg_r: %core.io_ptw_pmp_3_cfg_r: i1, io_dpath_pmp_3_addr: %core.io_ptw_pmp_3_addr: i30, io_dpath_pmp_3_mask: %core.io_ptw_pmp_3_mask: i32, io_dpath_pmp_4_cfg_l: %core.io_ptw_pmp_4_cfg_l: i1, io_dpath_pmp_4_cfg_a: %core.io_ptw_pmp_4_cfg_a: i2, io_dpath_pmp_4_cfg_x: %core.io_ptw_pmp_4_cfg_x: i1, io_dpath_pmp_4_cfg_w: %core.io_ptw_pmp_4_cfg_w: i1, io_dpath_pmp_4_cfg_r: %core.io_ptw_pmp_4_cfg_r: i1, io_dpath_pmp_4_addr: %core.io_ptw_pmp_4_addr: i30, io_dpath_pmp_4_mask: %core.io_ptw_pmp_4_mask: i32, io_dpath_pmp_5_cfg_l: %core.io_ptw_pmp_5_cfg_l: i1, io_dpath_pmp_5_cfg_a: %core.io_ptw_pmp_5_cfg_a: i2, io_dpath_pmp_5_cfg_x: %core.io_ptw_pmp_5_cfg_x: i1, io_dpath_pmp_5_cfg_w: %core.io_ptw_pmp_5_cfg_w: i1, io_dpath_pmp_5_cfg_r: %core.io_ptw_pmp_5_cfg_r: i1, io_dpath_pmp_5_addr: %core.io_ptw_pmp_5_addr: i30, io_dpath_pmp_5_mask: %core.io_ptw_pmp_5_mask: i32, io_dpath_pmp_6_cfg_l: %core.io_ptw_pmp_6_cfg_l: i1, io_dpath_pmp_6_cfg_a: %core.io_ptw_pmp_6_cfg_a: i2, io_dpath_pmp_6_cfg_x: %core.io_ptw_pmp_6_cfg_x: i1, io_dpath_pmp_6_cfg_w: %core.io_ptw_pmp_6_cfg_w: i1, io_dpath_pmp_6_cfg_r: %core.io_ptw_pmp_6_cfg_r: i1, io_dpath_pmp_6_addr: %core.io_ptw_pmp_6_addr: i30, io_dpath_pmp_6_mask: %core.io_ptw_pmp_6_mask: i32, io_dpath_pmp_7_cfg_l: %core.io_ptw_pmp_7_cfg_l: i1, io_dpath_pmp_7_cfg_a: %core.io_ptw_pmp_7_cfg_a: i2, io_dpath_pmp_7_cfg_x: %core.io_ptw_pmp_7_cfg_x: i1, io_dpath_pmp_7_cfg_w: %core.io_ptw_pmp_7_cfg_w: i1, io_dpath_pmp_7_cfg_r: %core.io_ptw_pmp_7_cfg_r: i1, io_dpath_pmp_7_addr: %core.io_ptw_pmp_7_addr: i30, io_dpath_pmp_7_mask: %core.io_ptw_pmp_7_mask: i32, io_dpath_customCSRs_csrs_0_value: %core.io_ptw_customCSRs_csrs_0_value: i64) -> (io_requestor_0_status_debug: i1, io_requestor_0_status_dprv: i2, io_requestor_0_pmp_0_cfg_l: i1, io_requestor_0_pmp_0_cfg_a: i2, io_requestor_0_pmp_0_cfg_w: i1, io_requestor_0_pmp_0_cfg_r: i1, io_requestor_0_pmp_0_addr: i30, io_requestor_0_pmp_0_mask: i32, io_requestor_0_pmp_1_cfg_l: i1, io_requestor_0_pmp_1_cfg_a: i2, io_requestor_0_pmp_1_cfg_w: i1, io_requestor_0_pmp_1_cfg_r: i1, io_requestor_0_pmp_1_addr: i30, io_requestor_0_pmp_1_mask: i32, io_requestor_0_pmp_2_cfg_l: i1, io_requestor_0_pmp_2_cfg_a: i2, io_requestor_0_pmp_2_cfg_w: i1, io_requestor_0_pmp_2_cfg_r: i1, io_requestor_0_pmp_2_addr: i30, io_requestor_0_pmp_2_mask: i32, io_requestor_0_pmp_3_cfg_l: i1, io_requestor_0_pmp_3_cfg_a: i2, io_requestor_0_pmp_3_cfg_w: i1, io_requestor_0_pmp_3_cfg_r: i1, io_requestor_0_pmp_3_addr: i30, io_requestor_0_pmp_3_mask: i32, io_requestor_0_pmp_4_cfg_l: i1, io_requestor_0_pmp_4_cfg_a: i2, io_requestor_0_pmp_4_cfg_w: i1, io_requestor_0_pmp_4_cfg_r: i1, io_requestor_0_pmp_4_addr: i30, io_requestor_0_pmp_4_mask: i32, io_requestor_0_pmp_5_cfg_l: i1, io_requestor_0_pmp_5_cfg_a: i2, io_requestor_0_pmp_5_cfg_w: i1, io_requestor_0_pmp_5_cfg_r: i1, io_requestor_0_pmp_5_addr: i30, io_requestor_0_pmp_5_mask: i32, io_requestor_0_pmp_6_cfg_l: i1, io_requestor_0_pmp_6_cfg_a: i2, io_requestor_0_pmp_6_cfg_w: i1, io_requestor_0_pmp_6_cfg_r: i1, io_requestor_0_pmp_6_addr: i30, io_requestor_0_pmp_6_mask: i32, io_requestor_0_pmp_7_cfg_l: i1, io_requestor_0_pmp_7_cfg_a: i2, io_requestor_0_pmp_7_cfg_w: i1, io_requestor_0_pmp_7_cfg_r: i1, io_requestor_0_pmp_7_addr: i30, io_requestor_0_pmp_7_mask: i32, io_requestor_1_status_debug: i1, io_requestor_1_pmp_0_cfg_l: i1, io_requestor_1_pmp_0_cfg_a: i2, io_requestor_1_pmp_0_cfg_x: i1, io_requestor_1_pmp_0_addr: i30, io_requestor_1_pmp_0_mask: i32, io_requestor_1_pmp_1_cfg_l: i1, io_requestor_1_pmp_1_cfg_a: i2, io_requestor_1_pmp_1_cfg_x: i1, io_requestor_1_pmp_1_addr: i30, io_requestor_1_pmp_1_mask: i32, io_requestor_1_pmp_2_cfg_l: i1, io_requestor_1_pmp_2_cfg_a: i2, io_requestor_1_pmp_2_cfg_x: i1, io_requestor_1_pmp_2_addr: i30, io_requestor_1_pmp_2_mask: i32, io_requestor_1_pmp_3_cfg_l: i1, io_requestor_1_pmp_3_cfg_a: i2, io_requestor_1_pmp_3_cfg_x: i1, io_requestor_1_pmp_3_addr: i30, io_requestor_1_pmp_3_mask: i32, io_requestor_1_pmp_4_cfg_l: i1, io_requestor_1_pmp_4_cfg_a: i2, io_requestor_1_pmp_4_cfg_x: i1, io_requestor_1_pmp_4_addr: i30, io_requestor_1_pmp_4_mask: i32, io_requestor_1_pmp_5_cfg_l: i1, io_requestor_1_pmp_5_cfg_a: i2, io_requestor_1_pmp_5_cfg_x: i1, io_requestor_1_pmp_5_addr: i30, io_requestor_1_pmp_5_mask: i32, io_requestor_1_pmp_6_cfg_l: i1, io_requestor_1_pmp_6_cfg_a: i2, io_requestor_1_pmp_6_cfg_x: i1, io_requestor_1_pmp_6_addr: i30, io_requestor_1_pmp_6_mask: i32, io_requestor_1_pmp_7_cfg_l: i1, io_requestor_1_pmp_7_cfg_a: i2, io_requestor_1_pmp_7_cfg_x: i1, io_requestor_1_pmp_7_addr: i30, io_requestor_1_pmp_7_mask: i32, io_requestor_1_customCSRs_csrs_0_value: i64) {sv.namehint = "ptw.io_requestor_0_status_dprv"}
    %core.io_imem_might_request, %core.io_imem_req_valid, %core.io_imem_req_bits_pc, %core.io_imem_req_bits_speculative, %core.io_imem_resp_ready, %core.io_imem_btb_update_valid, %core.io_imem_bht_update_valid, %core.io_imem_flush_icache, %core.io_dmem_req_valid, %core.io_dmem_req_bits_addr, %core.io_dmem_req_bits_tag, %core.io_dmem_req_bits_cmd, %core.io_dmem_req_bits_size, %core.io_dmem_req_bits_signed, %core.io_dmem_req_bits_dprv, %core.io_dmem_s1_kill, %core.io_dmem_s1_data_data, %core.io_ptw_status_debug, %core.io_ptw_status_dprv, %core.io_ptw_pmp_0_cfg_l, %core.io_ptw_pmp_0_cfg_a, %core.io_ptw_pmp_0_cfg_x, %core.io_ptw_pmp_0_cfg_w, %core.io_ptw_pmp_0_cfg_r, %core.io_ptw_pmp_0_addr, %core.io_ptw_pmp_0_mask, %core.io_ptw_pmp_1_cfg_l, %core.io_ptw_pmp_1_cfg_a, %core.io_ptw_pmp_1_cfg_x, %core.io_ptw_pmp_1_cfg_w, %core.io_ptw_pmp_1_cfg_r, %core.io_ptw_pmp_1_addr, %core.io_ptw_pmp_1_mask, %core.io_ptw_pmp_2_cfg_l, %core.io_ptw_pmp_2_cfg_a, %core.io_ptw_pmp_2_cfg_x, %core.io_ptw_pmp_2_cfg_w, %core.io_ptw_pmp_2_cfg_r, %core.io_ptw_pmp_2_addr, %core.io_ptw_pmp_2_mask, %core.io_ptw_pmp_3_cfg_l, %core.io_ptw_pmp_3_cfg_a, %core.io_ptw_pmp_3_cfg_x, %core.io_ptw_pmp_3_cfg_w, %core.io_ptw_pmp_3_cfg_r, %core.io_ptw_pmp_3_addr, %core.io_ptw_pmp_3_mask, %core.io_ptw_pmp_4_cfg_l, %core.io_ptw_pmp_4_cfg_a, %core.io_ptw_pmp_4_cfg_x, %core.io_ptw_pmp_4_cfg_w, %core.io_ptw_pmp_4_cfg_r, %core.io_ptw_pmp_4_addr, %core.io_ptw_pmp_4_mask, %core.io_ptw_pmp_5_cfg_l, %core.io_ptw_pmp_5_cfg_a, %core.io_ptw_pmp_5_cfg_x, %core.io_ptw_pmp_5_cfg_w, %core.io_ptw_pmp_5_cfg_r, %core.io_ptw_pmp_5_addr, %core.io_ptw_pmp_5_mask, %core.io_ptw_pmp_6_cfg_l, %core.io_ptw_pmp_6_cfg_a, %core.io_ptw_pmp_6_cfg_x, %core.io_ptw_pmp_6_cfg_w, %core.io_ptw_pmp_6_cfg_r, %core.io_ptw_pmp_6_addr, %core.io_ptw_pmp_6_mask, %core.io_ptw_pmp_7_cfg_l, %core.io_ptw_pmp_7_cfg_a, %core.io_ptw_pmp_7_cfg_x, %core.io_ptw_pmp_7_cfg_w, %core.io_ptw_pmp_7_cfg_r, %core.io_ptw_pmp_7_addr, %core.io_ptw_pmp_7_mask, %core.io_ptw_customCSRs_csrs_0_value, %core.io_wfi = hw.instance "core" @Rocket(clock: %clock: !seq.clock, reset: %reset: i1, io_interrupts_debug: %intXbar.auto_int_out_0: i1, io_interrupts_mtip: %intXbar.auto_int_out_2: i1, io_interrupts_msip: %intXbar.auto_int_out_1: i1, io_interrupts_meip: %intXbar.auto_int_out_3: i1, io_imem_resp_valid: %frontend.io_cpu_resp_valid: i1, io_imem_resp_bits_pc: %frontend.io_cpu_resp_bits_pc: i34, io_imem_resp_bits_data: %frontend.io_cpu_resp_bits_data: i32, io_imem_resp_bits_xcpt_pf_inst: %frontend.io_cpu_resp_bits_xcpt_pf_inst: i1, io_imem_resp_bits_xcpt_ae_inst: %frontend.io_cpu_resp_bits_xcpt_ae_inst: i1, io_imem_resp_bits_replay: %frontend.io_cpu_resp_bits_replay: i1, io_dmem_req_ready: %dcacheArb.io_requestor_0_req_ready: i1, io_dmem_s2_nack: %dcacheArb.io_requestor_0_s2_nack: i1, io_dmem_resp_valid: %dcacheArb.io_requestor_0_resp_valid: i1, io_dmem_resp_bits_tag: %dcacheArb.io_requestor_0_resp_bits_tag: i6, io_dmem_resp_bits_data: %dcacheArb.io_requestor_0_resp_bits_data: i64, io_dmem_resp_bits_replay: %dcacheArb.io_requestor_0_resp_bits_replay: i1, io_dmem_resp_bits_has_data: %dcacheArb.io_requestor_0_resp_bits_has_data: i1, io_dmem_resp_bits_data_word_bypass: %dcacheArb.io_requestor_0_resp_bits_data_word_bypass: i64, io_dmem_replay_next: %dcacheArb.io_requestor_0_replay_next: i1, io_dmem_s2_xcpt_ma_ld: %dcacheArb.io_requestor_0_s2_xcpt_ma_ld: i1, io_dmem_s2_xcpt_ma_st: %dcacheArb.io_requestor_0_s2_xcpt_ma_st: i1, io_dmem_s2_xcpt_pf_ld: %dcacheArb.io_requestor_0_s2_xcpt_pf_ld: i1, io_dmem_s2_xcpt_pf_st: %dcacheArb.io_requestor_0_s2_xcpt_pf_st: i1, io_dmem_s2_xcpt_ae_ld: %dcacheArb.io_requestor_0_s2_xcpt_ae_ld: i1, io_dmem_s2_xcpt_ae_st: %dcacheArb.io_requestor_0_s2_xcpt_ae_st: i1, io_dmem_ordered: %dcacheArb.io_requestor_0_ordered: i1, io_dmem_perf_release: %dcacheArb.io_requestor_0_perf_release: i1, io_dmem_perf_grant: %dcacheArb.io_requestor_0_perf_grant: i1) -> (io_imem_might_request: i1, io_imem_req_valid: i1, io_imem_req_bits_pc: i34, io_imem_req_bits_speculative: i1, io_imem_resp_ready: i1, io_imem_btb_update_valid: i1, io_imem_bht_update_valid: i1, io_imem_flush_icache: i1, io_dmem_req_valid: i1, io_dmem_req_bits_addr: i34, io_dmem_req_bits_tag: i6, io_dmem_req_bits_cmd: i5, io_dmem_req_bits_size: i2, io_dmem_req_bits_signed: i1, io_dmem_req_bits_dprv: i2, io_dmem_s1_kill: i1, io_dmem_s1_data_data: i64, io_ptw_status_debug: i1, io_ptw_status_dprv: i2, io_ptw_pmp_0_cfg_l: i1, io_ptw_pmp_0_cfg_a: i2, io_ptw_pmp_0_cfg_x: i1, io_ptw_pmp_0_cfg_w: i1, io_ptw_pmp_0_cfg_r: i1, io_ptw_pmp_0_addr: i30, io_ptw_pmp_0_mask: i32, io_ptw_pmp_1_cfg_l: i1, io_ptw_pmp_1_cfg_a: i2, io_ptw_pmp_1_cfg_x: i1, io_ptw_pmp_1_cfg_w: i1, io_ptw_pmp_1_cfg_r: i1, io_ptw_pmp_1_addr: i30, io_ptw_pmp_1_mask: i32, io_ptw_pmp_2_cfg_l: i1, io_ptw_pmp_2_cfg_a: i2, io_ptw_pmp_2_cfg_x: i1, io_ptw_pmp_2_cfg_w: i1, io_ptw_pmp_2_cfg_r: i1, io_ptw_pmp_2_addr: i30, io_ptw_pmp_2_mask: i32, io_ptw_pmp_3_cfg_l: i1, io_ptw_pmp_3_cfg_a: i2, io_ptw_pmp_3_cfg_x: i1, io_ptw_pmp_3_cfg_w: i1, io_ptw_pmp_3_cfg_r: i1, io_ptw_pmp_3_addr: i30, io_ptw_pmp_3_mask: i32, io_ptw_pmp_4_cfg_l: i1, io_ptw_pmp_4_cfg_a: i2, io_ptw_pmp_4_cfg_x: i1, io_ptw_pmp_4_cfg_w: i1, io_ptw_pmp_4_cfg_r: i1, io_ptw_pmp_4_addr: i30, io_ptw_pmp_4_mask: i32, io_ptw_pmp_5_cfg_l: i1, io_ptw_pmp_5_cfg_a: i2, io_ptw_pmp_5_cfg_x: i1, io_ptw_pmp_5_cfg_w: i1, io_ptw_pmp_5_cfg_r: i1, io_ptw_pmp_5_addr: i30, io_ptw_pmp_5_mask: i32, io_ptw_pmp_6_cfg_l: i1, io_ptw_pmp_6_cfg_a: i2, io_ptw_pmp_6_cfg_x: i1, io_ptw_pmp_6_cfg_w: i1, io_ptw_pmp_6_cfg_r: i1, io_ptw_pmp_6_addr: i30, io_ptw_pmp_6_mask: i32, io_ptw_pmp_7_cfg_l: i1, io_ptw_pmp_7_cfg_a: i2, io_ptw_pmp_7_cfg_x: i1, io_ptw_pmp_7_cfg_w: i1, io_ptw_pmp_7_cfg_r: i1, io_ptw_pmp_7_addr: i30, io_ptw_pmp_7_mask: i32, io_ptw_customCSRs_csrs_0_value: i64, io_wfi: i1) {sv.namehint = "core.io_wfi"}
    %bundleOut_0_0_REG = seq.firreg %core.io_wfi clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "bundleOut_0_10_0"} : i1
    hw.output %bundleOut_0_0_REG, %tlMasterXbar.auto_out_a_valid, %tlMasterXbar.auto_out_a_bits_opcode, %tlMasterXbar.auto_out_a_bits_param, %tlMasterXbar.auto_out_a_bits_size, %tlMasterXbar.auto_out_a_bits_source, %tlMasterXbar.auto_out_a_bits_address, %tlMasterXbar.auto_out_a_bits_user_amba_prot_bufferable, %tlMasterXbar.auto_out_a_bits_user_amba_prot_modifiable, %tlMasterXbar.auto_out_a_bits_user_amba_prot_readalloc, %tlMasterXbar.auto_out_a_bits_user_amba_prot_writealloc, %tlMasterXbar.auto_out_a_bits_user_amba_prot_privileged, %tlMasterXbar.auto_out_a_bits_user_amba_prot_secure, %tlMasterXbar.auto_out_a_bits_user_amba_prot_fetch, %tlMasterXbar.auto_out_a_bits_mask, %tlMasterXbar.auto_out_a_bits_data, %tlMasterXbar.auto_out_b_ready, %tlMasterXbar.auto_out_c_valid, %tlMasterXbar.auto_out_c_bits_opcode, %tlMasterXbar.auto_out_c_bits_param, %tlMasterXbar.auto_out_c_bits_size, %tlMasterXbar.auto_out_c_bits_source, %tlMasterXbar.auto_out_c_bits_address, %tlMasterXbar.auto_out_c_bits_user_amba_prot_bufferable, %tlMasterXbar.auto_out_c_bits_user_amba_prot_modifiable, %tlMasterXbar.auto_out_c_bits_user_amba_prot_readalloc, %tlMasterXbar.auto_out_c_bits_user_amba_prot_writealloc, %tlMasterXbar.auto_out_c_bits_user_amba_prot_privileged, %tlMasterXbar.auto_out_c_bits_user_amba_prot_secure, %tlMasterXbar.auto_out_c_bits_data, %tlMasterXbar.auto_out_d_ready, %tlMasterXbar.auto_out_e_valid, %tlMasterXbar.auto_out_e_bits_sink : i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i64, i1, i1, i2
  }
  hw.module private @TileResetDomain(out auto_tile_wfi_out_0 : i1, in %auto_tile_int_local_in_2_0 : i1, in %auto_tile_int_local_in_1_0 : i1, in %auto_tile_int_local_in_1_1 : i1, in %auto_tile_int_local_in_0_0 : i1, in %auto_tile_tl_other_masters_out_a_ready : i1, out auto_tile_tl_other_masters_out_a_valid : i1, out auto_tile_tl_other_masters_out_a_bits_opcode : i3, out auto_tile_tl_other_masters_out_a_bits_param : i3, out auto_tile_tl_other_masters_out_a_bits_size : i4, out auto_tile_tl_other_masters_out_a_bits_source : i2, out auto_tile_tl_other_masters_out_a_bits_address : i32, out auto_tile_tl_other_masters_out_a_bits_user_amba_prot_bufferable : i1, out auto_tile_tl_other_masters_out_a_bits_user_amba_prot_modifiable : i1, out auto_tile_tl_other_masters_out_a_bits_user_amba_prot_readalloc : i1, out auto_tile_tl_other_masters_out_a_bits_user_amba_prot_writealloc : i1, out auto_tile_tl_other_masters_out_a_bits_user_amba_prot_privileged : i1, out auto_tile_tl_other_masters_out_a_bits_user_amba_prot_secure : i1, out auto_tile_tl_other_masters_out_a_bits_user_amba_prot_fetch : i1, out auto_tile_tl_other_masters_out_a_bits_mask : i8, out auto_tile_tl_other_masters_out_a_bits_data : i64, out auto_tile_tl_other_masters_out_b_ready : i1, in %auto_tile_tl_other_masters_out_b_valid : i1, in %auto_tile_tl_other_masters_out_b_bits_opcode : i3, in %auto_tile_tl_other_masters_out_b_bits_param : i2, in %auto_tile_tl_other_masters_out_b_bits_size : i4, in %auto_tile_tl_other_masters_out_b_bits_source : i2, in %auto_tile_tl_other_masters_out_b_bits_address : i32, in %auto_tile_tl_other_masters_out_b_bits_mask : i8, in %auto_tile_tl_other_masters_out_b_bits_corrupt : i1, in %auto_tile_tl_other_masters_out_c_ready : i1, out auto_tile_tl_other_masters_out_c_valid : i1, out auto_tile_tl_other_masters_out_c_bits_opcode : i3, out auto_tile_tl_other_masters_out_c_bits_param : i3, out auto_tile_tl_other_masters_out_c_bits_size : i4, out auto_tile_tl_other_masters_out_c_bits_source : i2, out auto_tile_tl_other_masters_out_c_bits_address : i32, out auto_tile_tl_other_masters_out_c_bits_user_amba_prot_bufferable : i1, out auto_tile_tl_other_masters_out_c_bits_user_amba_prot_modifiable : i1, out auto_tile_tl_other_masters_out_c_bits_user_amba_prot_readalloc : i1, out auto_tile_tl_other_masters_out_c_bits_user_amba_prot_writealloc : i1, out auto_tile_tl_other_masters_out_c_bits_user_amba_prot_privileged : i1, out auto_tile_tl_other_masters_out_c_bits_user_amba_prot_secure : i1, out auto_tile_tl_other_masters_out_c_bits_data : i64, out auto_tile_tl_other_masters_out_d_ready : i1, in %auto_tile_tl_other_masters_out_d_valid : i1, in %auto_tile_tl_other_masters_out_d_bits_opcode : i3, in %auto_tile_tl_other_masters_out_d_bits_param : i2, in %auto_tile_tl_other_masters_out_d_bits_size : i4, in %auto_tile_tl_other_masters_out_d_bits_source : i2, in %auto_tile_tl_other_masters_out_d_bits_sink : i2, in %auto_tile_tl_other_masters_out_d_bits_denied : i1, in %auto_tile_tl_other_masters_out_d_bits_data : i64, in %auto_tile_tl_other_masters_out_d_bits_corrupt : i1, in %auto_tile_tl_other_masters_out_e_ready : i1, out auto_tile_tl_other_masters_out_e_valid : i1, out auto_tile_tl_other_masters_out_e_bits_sink : i2, in %auto_clock_in_clock : !seq.clock, in %auto_clock_in_reset : i1) {
    %tile.auto_wfi_out_0, %tile.auto_tl_other_masters_out_a_valid, %tile.auto_tl_other_masters_out_a_bits_opcode, %tile.auto_tl_other_masters_out_a_bits_param, %tile.auto_tl_other_masters_out_a_bits_size, %tile.auto_tl_other_masters_out_a_bits_source, %tile.auto_tl_other_masters_out_a_bits_address, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_bufferable, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_modifiable, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_readalloc, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_writealloc, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_privileged, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_secure, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_fetch, %tile.auto_tl_other_masters_out_a_bits_mask, %tile.auto_tl_other_masters_out_a_bits_data, %tile.auto_tl_other_masters_out_b_ready, %tile.auto_tl_other_masters_out_c_valid, %tile.auto_tl_other_masters_out_c_bits_opcode, %tile.auto_tl_other_masters_out_c_bits_param, %tile.auto_tl_other_masters_out_c_bits_size, %tile.auto_tl_other_masters_out_c_bits_source, %tile.auto_tl_other_masters_out_c_bits_address, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_bufferable, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_modifiable, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_readalloc, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_writealloc, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_privileged, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_secure, %tile.auto_tl_other_masters_out_c_bits_data, %tile.auto_tl_other_masters_out_d_ready, %tile.auto_tl_other_masters_out_e_valid, %tile.auto_tl_other_masters_out_e_bits_sink = hw.instance "tile" @RocketTile(clock: %auto_clock_in_clock: !seq.clock, reset: %auto_clock_in_reset: i1, auto_int_local_in_2_0: %auto_tile_int_local_in_2_0: i1, auto_int_local_in_1_0: %auto_tile_int_local_in_1_0: i1, auto_int_local_in_1_1: %auto_tile_int_local_in_1_1: i1, auto_int_local_in_0_0: %auto_tile_int_local_in_0_0: i1, auto_tl_other_masters_out_a_ready: %auto_tile_tl_other_masters_out_a_ready: i1, auto_tl_other_masters_out_b_valid: %auto_tile_tl_other_masters_out_b_valid: i1, auto_tl_other_masters_out_b_bits_opcode: %auto_tile_tl_other_masters_out_b_bits_opcode: i3, auto_tl_other_masters_out_b_bits_param: %auto_tile_tl_other_masters_out_b_bits_param: i2, auto_tl_other_masters_out_b_bits_size: %auto_tile_tl_other_masters_out_b_bits_size: i4, auto_tl_other_masters_out_b_bits_source: %auto_tile_tl_other_masters_out_b_bits_source: i2, auto_tl_other_masters_out_b_bits_address: %auto_tile_tl_other_masters_out_b_bits_address: i32, auto_tl_other_masters_out_b_bits_mask: %auto_tile_tl_other_masters_out_b_bits_mask: i8, auto_tl_other_masters_out_b_bits_corrupt: %auto_tile_tl_other_masters_out_b_bits_corrupt: i1, auto_tl_other_masters_out_c_ready: %auto_tile_tl_other_masters_out_c_ready: i1, auto_tl_other_masters_out_d_valid: %auto_tile_tl_other_masters_out_d_valid: i1, auto_tl_other_masters_out_d_bits_opcode: %auto_tile_tl_other_masters_out_d_bits_opcode: i3, auto_tl_other_masters_out_d_bits_param: %auto_tile_tl_other_masters_out_d_bits_param: i2, auto_tl_other_masters_out_d_bits_size: %auto_tile_tl_other_masters_out_d_bits_size: i4, auto_tl_other_masters_out_d_bits_source: %auto_tile_tl_other_masters_out_d_bits_source: i2, auto_tl_other_masters_out_d_bits_sink: %auto_tile_tl_other_masters_out_d_bits_sink: i2, auto_tl_other_masters_out_d_bits_denied: %auto_tile_tl_other_masters_out_d_bits_denied: i1, auto_tl_other_masters_out_d_bits_data: %auto_tile_tl_other_masters_out_d_bits_data: i64, auto_tl_other_masters_out_d_bits_corrupt: %auto_tile_tl_other_masters_out_d_bits_corrupt: i1, auto_tl_other_masters_out_e_ready: %auto_tile_tl_other_masters_out_e_ready: i1) -> (auto_wfi_out_0: i1, auto_tl_other_masters_out_a_valid: i1, auto_tl_other_masters_out_a_bits_opcode: i3, auto_tl_other_masters_out_a_bits_param: i3, auto_tl_other_masters_out_a_bits_size: i4, auto_tl_other_masters_out_a_bits_source: i2, auto_tl_other_masters_out_a_bits_address: i32, auto_tl_other_masters_out_a_bits_user_amba_prot_bufferable: i1, auto_tl_other_masters_out_a_bits_user_amba_prot_modifiable: i1, auto_tl_other_masters_out_a_bits_user_amba_prot_readalloc: i1, auto_tl_other_masters_out_a_bits_user_amba_prot_writealloc: i1, auto_tl_other_masters_out_a_bits_user_amba_prot_privileged: i1, auto_tl_other_masters_out_a_bits_user_amba_prot_secure: i1, auto_tl_other_masters_out_a_bits_user_amba_prot_fetch: i1, auto_tl_other_masters_out_a_bits_mask: i8, auto_tl_other_masters_out_a_bits_data: i64, auto_tl_other_masters_out_b_ready: i1, auto_tl_other_masters_out_c_valid: i1, auto_tl_other_masters_out_c_bits_opcode: i3, auto_tl_other_masters_out_c_bits_param: i3, auto_tl_other_masters_out_c_bits_size: i4, auto_tl_other_masters_out_c_bits_source: i2, auto_tl_other_masters_out_c_bits_address: i32, auto_tl_other_masters_out_c_bits_user_amba_prot_bufferable: i1, auto_tl_other_masters_out_c_bits_user_amba_prot_modifiable: i1, auto_tl_other_masters_out_c_bits_user_amba_prot_readalloc: i1, auto_tl_other_masters_out_c_bits_user_amba_prot_writealloc: i1, auto_tl_other_masters_out_c_bits_user_amba_prot_privileged: i1, auto_tl_other_masters_out_c_bits_user_amba_prot_secure: i1, auto_tl_other_masters_out_c_bits_data: i64, auto_tl_other_masters_out_d_ready: i1, auto_tl_other_masters_out_e_valid: i1, auto_tl_other_masters_out_e_bits_sink: i2) {sv.namehint = "tile.auto_wfi_out_0"}
    hw.output %tile.auto_wfi_out_0, %tile.auto_tl_other_masters_out_a_valid, %tile.auto_tl_other_masters_out_a_bits_opcode, %tile.auto_tl_other_masters_out_a_bits_param, %tile.auto_tl_other_masters_out_a_bits_size, %tile.auto_tl_other_masters_out_a_bits_source, %tile.auto_tl_other_masters_out_a_bits_address, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_bufferable, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_modifiable, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_readalloc, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_writealloc, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_privileged, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_secure, %tile.auto_tl_other_masters_out_a_bits_user_amba_prot_fetch, %tile.auto_tl_other_masters_out_a_bits_mask, %tile.auto_tl_other_masters_out_a_bits_data, %tile.auto_tl_other_masters_out_b_ready, %tile.auto_tl_other_masters_out_c_valid, %tile.auto_tl_other_masters_out_c_bits_opcode, %tile.auto_tl_other_masters_out_c_bits_param, %tile.auto_tl_other_masters_out_c_bits_size, %tile.auto_tl_other_masters_out_c_bits_source, %tile.auto_tl_other_masters_out_c_bits_address, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_bufferable, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_modifiable, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_readalloc, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_writealloc, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_privileged, %tile.auto_tl_other_masters_out_c_bits_user_amba_prot_secure, %tile.auto_tl_other_masters_out_c_bits_data, %tile.auto_tl_other_masters_out_d_ready, %tile.auto_tl_other_masters_out_e_valid, %tile.auto_tl_other_masters_out_e_bits_sink : i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i64, i1, i1, i2
  }
  hw.module private @TLBuffer_7(out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_opcode : i3, out auto_in_b_bits_param : i2, out auto_in_b_bits_size : i4, out auto_in_b_bits_source : i2, out auto_in_b_bits_address : i32, out auto_in_b_bits_mask : i8, out auto_in_b_bits_corrupt : i1, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_user_amba_prot_bufferable : i1, in %auto_in_c_bits_user_amba_prot_modifiable : i1, in %auto_in_c_bits_user_amba_prot_readalloc : i1, in %auto_in_c_bits_user_amba_prot_writealloc : i1, in %auto_in_c_bits_user_amba_prot_privileged : i1, in %auto_in_c_bits_user_amba_prot_secure : i1, in %auto_in_c_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, out auto_in_e_ready : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_opcode : i3, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_size : i4, in %auto_out_b_bits_source : i2, in %auto_out_b_bits_address : i32, in %auto_out_b_bits_mask : i8, in %auto_out_b_bits_corrupt : i1, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_user_amba_prot_bufferable : i1, out auto_out_c_bits_user_amba_prot_modifiable : i1, out auto_out_c_bits_user_amba_prot_readalloc : i1, out auto_out_c_bits_user_amba_prot_writealloc : i1, out auto_out_c_bits_user_amba_prot_privileged : i1, out auto_out_c_bits_user_amba_prot_secure : i1, out auto_out_c_bits_data : i64, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, in %auto_out_e_ready : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    hw.output %auto_out_a_ready, %auto_out_b_valid, %auto_out_b_bits_opcode, %auto_out_b_bits_param, %auto_out_b_bits_size, %auto_out_b_bits_source, %auto_out_b_bits_address, %auto_out_b_bits_mask, %auto_out_b_bits_corrupt, %auto_out_c_ready, %auto_out_d_valid, %auto_out_d_bits_opcode, %auto_out_d_bits_param, %auto_out_d_bits_size, %auto_out_d_bits_source, %auto_out_d_bits_sink, %auto_out_d_bits_denied, %auto_out_d_bits_data, %auto_out_d_bits_corrupt, %auto_out_e_ready, %auto_in_a_valid, %auto_in_a_bits_opcode, %auto_in_a_bits_param, %auto_in_a_bits_size, %auto_in_a_bits_source, %auto_in_a_bits_address, %auto_in_a_bits_user_amba_prot_bufferable, %auto_in_a_bits_user_amba_prot_modifiable, %auto_in_a_bits_user_amba_prot_readalloc, %auto_in_a_bits_user_amba_prot_writealloc, %auto_in_a_bits_user_amba_prot_privileged, %auto_in_a_bits_user_amba_prot_secure, %auto_in_a_bits_user_amba_prot_fetch, %auto_in_a_bits_mask, %auto_in_a_bits_data, %auto_in_b_ready, %auto_in_c_valid, %auto_in_c_bits_opcode, %auto_in_c_bits_param, %auto_in_c_bits_size, %auto_in_c_bits_source, %auto_in_c_bits_address, %auto_in_c_bits_user_amba_prot_bufferable, %auto_in_c_bits_user_amba_prot_modifiable, %auto_in_c_bits_user_amba_prot_readalloc, %auto_in_c_bits_user_amba_prot_writealloc, %auto_in_c_bits_user_amba_prot_privileged, %auto_in_c_bits_user_amba_prot_secure, %auto_in_c_bits_data, %auto_in_d_ready, %auto_in_e_valid, %auto_in_e_bits_sink : i1, i1, i3, i2, i4, i2, i32, i8, i1, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i64, i1, i1, i2
  }
  hw.module private @Queue_21(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i32, in %io_enq_bits_user_amba_prot_bufferable : i1, in %io_enq_bits_user_amba_prot_modifiable : i1, in %io_enq_bits_user_amba_prot_readalloc : i1, in %io_enq_bits_user_amba_prot_writealloc : i1, in %io_enq_bits_user_amba_prot_privileged : i1, in %io_enq_bits_user_amba_prot_secure : i1, in %io_enq_bits_user_amba_prot_fetch : i1, in %io_enq_bits_mask : i8, in %io_enq_bits_data : i64, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i32, out io_deq_bits_user_amba_prot_bufferable : i1, out io_deq_bits_user_amba_prot_modifiable : i1, out io_deq_bits_user_amba_prot_readalloc : i1, out io_deq_bits_user_amba_prot_writealloc : i1, out io_deq_bits_user_amba_prot_privileged : i1, out io_deq_bits_user_amba_prot_secure : i1, out io_deq_bits_user_amba_prot_fetch : i1, out io_deq_bits_mask : i8, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 124>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %21 : <2 x 124>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 124>
    %1 = comb.concat %false, %io_enq_bits_data, %io_enq_bits_mask, %io_enq_bits_user_amba_prot_fetch, %io_enq_bits_user_amba_prot_secure, %io_enq_bits_user_amba_prot_privileged, %io_enq_bits_user_amba_prot_writealloc, %io_enq_bits_user_amba_prot_readalloc, %io_enq_bits_user_amba_prot_modifiable, %io_enq_bits_user_amba_prot_bufferable, %io_enq_bits_address, %io_enq_bits_source, %io_enq_bits_size, %io_enq_bits_param, %io_enq_bits_opcode : i1, i64, i8, i1, i1, i1, i1, i1, i1, i1, i32, i2, i4, i3, i3
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i124) -> i3
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i124) -> i3
    %4 = comb.extract %0 from 6 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i124) -> i4
    %5 = comb.extract %0 from 10 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i124) -> i2
    %6 = comb.extract %0 from 12 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i124) -> i32
    %7 = comb.extract %0 from 44 {sv.namehint = "ram_io_deq_bits_MPORT_data_user_amba_prot_bufferable"} : (i124) -> i1
    %8 = comb.extract %0 from 45 {sv.namehint = "ram_io_deq_bits_MPORT_data_user_amba_prot_modifiable"} : (i124) -> i1
    %9 = comb.extract %0 from 46 {sv.namehint = "ram_io_deq_bits_MPORT_data_user_amba_prot_readalloc"} : (i124) -> i1
    %10 = comb.extract %0 from 47 {sv.namehint = "ram_io_deq_bits_MPORT_data_user_amba_prot_writealloc"} : (i124) -> i1
    %11 = comb.extract %0 from 48 {sv.namehint = "ram_io_deq_bits_MPORT_data_user_amba_prot_privileged"} : (i124) -> i1
    %12 = comb.extract %0 from 49 {sv.namehint = "ram_io_deq_bits_MPORT_data_user_amba_prot_secure"} : (i124) -> i1
    %13 = comb.extract %0 from 50 {sv.namehint = "ram_io_deq_bits_MPORT_data_user_amba_prot_fetch"} : (i124) -> i1
    %14 = comb.extract %0 from 51 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i124) -> i8
    %15 = comb.extract %0 from 59 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i124) -> i64
    %16 = comb.extract %0 from 123 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i124) -> i1
    %wrap = seq.firreg %24 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %26 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %28 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %17 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %18 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %19 = comb.and bin %17, %18 {sv.namehint = "empty"} : i1
    %20 = comb.and bin %17, %maybe_full {sv.namehint = "full"} : i1
    %21 = comb.and bin %30, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %22 = comb.and bin %io_deq_ready, %29 {sv.namehint = "do_deq"} : i1
    %23 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %24 = comb.mux bin %21, %23, %wrap : i1
    %25 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %26 = comb.mux bin %22, %25, %wrap_1 : i1
    %27 = comb.icmp bin eq %21, %22 : i1
    %28 = comb.mux bin %27, %maybe_full, %21 : i1
    %29 = comb.xor bin %19, %true {sv.namehint = "io_deq_valid"} : i1
    %30 = comb.xor bin %20, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %30, %29, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15, %16 : i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1
  }
  hw.module private @Queue_22(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i2, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_sink : i2, in %io_enq_bits_denied : i1, in %io_enq_bits_data : i64, in %io_enq_bits_corrupt : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_sink : i2, out io_deq_bits_denied : i1, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 79>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %14 : <2 x 79>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 79>
    %1 = comb.concat %io_enq_bits_corrupt, %io_enq_bits_data, %io_enq_bits_denied, %io_enq_bits_sink, %io_enq_bits_source, %io_enq_bits_size, %io_enq_bits_param, %io_enq_bits_opcode : i1, i64, i1, i2, i2, i4, i2, i3
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i79) -> i3
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i79) -> i2
    %4 = comb.extract %0 from 5 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i79) -> i4
    %5 = comb.extract %0 from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i79) -> i2
    %6 = comb.extract %0 from 11 {sv.namehint = "ram_io_deq_bits_MPORT_data_sink"} : (i79) -> i2
    %7 = comb.extract %0 from 13 {sv.namehint = "ram_io_deq_bits_MPORT_data_denied"} : (i79) -> i1
    %8 = comb.extract %0 from 14 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i79) -> i64
    %9 = comb.extract %0 from 78 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i79) -> i1
    %wrap = seq.firreg %17 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %19 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %21 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %10 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %11 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %12 = comb.and bin %10, %11 {sv.namehint = "empty"} : i1
    %13 = comb.and bin %10, %maybe_full {sv.namehint = "full"} : i1
    %14 = comb.and bin %23, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %15 = comb.and bin %io_deq_ready, %22 {sv.namehint = "do_deq"} : i1
    %16 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %17 = comb.mux bin %14, %16, %wrap : i1
    %18 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %19 = comb.mux bin %15, %18, %wrap_1 : i1
    %20 = comb.icmp bin eq %14, %15 : i1
    %21 = comb.mux bin %20, %maybe_full, %14 : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_deq_valid"} : i1
    %23 = comb.xor bin %13, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %23, %22, %2, %3, %4, %5, %6, %7, %8, %9 : i1, i1, i3, i2, i4, i2, i2, i1, i64, i1
  }
  hw.module private @Queue_23(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_param : i2, in %io_enq_bits_address : i32, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i32, out io_deq_bits_mask : i8, out io_deq_bits_corrupt : i1) {
    %c255_i9 = hw.constant 255 : i9
    %true = hw.constant true
    %false = hw.constant false
    %c-2_i3 = hw.constant -2 : i3
    %c6_i6 = hw.constant 6 : i6
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 52>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %13 : <2 x 52>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 52>
    %1 = comb.concat %c255_i9, %io_enq_bits_address, %c6_i6, %io_enq_bits_param, %c-2_i3 : i9, i32, i6, i2, i3
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i52) -> i3
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i52) -> i2
    %4 = comb.extract %0 from 5 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i52) -> i4
    %5 = comb.extract %0 from 9 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i52) -> i2
    %6 = comb.extract %0 from 11 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i52) -> i32
    %7 = comb.extract %0 from 43 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i52) -> i8
    %8 = comb.extract %0 from 51 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i52) -> i1
    %wrap = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %18 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %20 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %9 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %10 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %11 = comb.and bin %9, %10 {sv.namehint = "empty"} : i1
    %12 = comb.and bin %9, %maybe_full {sv.namehint = "full"} : i1
    %13 = comb.and bin %22, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %14 = comb.and bin %io_deq_ready, %21 {sv.namehint = "do_deq"} : i1
    %15 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %16 = comb.mux bin %13, %15, %wrap : i1
    %17 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %18 = comb.mux bin %14, %17, %wrap_1 : i1
    %19 = comb.icmp bin eq %13, %14 : i1
    %20 = comb.mux bin %19, %maybe_full, %13 : i1
    %21 = comb.xor bin %11, %true {sv.namehint = "io_deq_valid"} : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %22, %21, %2, %3, %4, %5, %6, %7, %8 : i1, i1, i3, i2, i4, i2, i32, i8, i1
  }
  hw.module private @Queue_24(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_param : i3, in %io_enq_bits_size : i4, in %io_enq_bits_source : i2, in %io_enq_bits_address : i32, in %io_enq_bits_user_amba_prot_bufferable : i1, in %io_enq_bits_user_amba_prot_modifiable : i1, in %io_enq_bits_user_amba_prot_readalloc : i1, in %io_enq_bits_user_amba_prot_writealloc : i1, in %io_enq_bits_user_amba_prot_privileged : i1, in %io_enq_bits_user_amba_prot_secure : i1, in %io_enq_bits_data : i64, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i4, out io_deq_bits_source : i2, out io_deq_bits_address : i32, out io_deq_bits_data : i64, out io_deq_bits_corrupt : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 109>
    seq.firmem.write_port %ram[%wrap] = %1, clock %clock enable %13 : <2 x 109>
    %0 = seq.firmem.read_port %ram[%wrap_1], clock %clock : <2 x 109>
    %1 = comb.concat %false, %io_enq_bits_data, %io_enq_bits_address, %io_enq_bits_source, %io_enq_bits_size, %io_enq_bits_param, %io_enq_bits_opcode : i1, i64, i32, i2, i4, i3, i3
    %2 = comb.extract %0 from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_opcode"} : (i109) -> i3
    %3 = comb.extract %0 from 3 {sv.namehint = "ram_io_deq_bits_MPORT_data_param"} : (i109) -> i3
    %4 = comb.extract %0 from 6 {sv.namehint = "ram_io_deq_bits_MPORT_data_size"} : (i109) -> i4
    %5 = comb.extract %0 from 10 {sv.namehint = "ram_io_deq_bits_MPORT_data_source"} : (i109) -> i2
    %6 = comb.extract %0 from 12 {sv.namehint = "ram_io_deq_bits_MPORT_data_address"} : (i109) -> i32
    %7 = comb.extract %0 from 44 {sv.namehint = "ram_io_deq_bits_MPORT_data_data"} : (i109) -> i64
    %8 = comb.extract %0 from 108 {sv.namehint = "ram_io_deq_bits_MPORT_data_corrupt"} : (i109) -> i1
    %wrap = seq.firreg %16 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %18 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %20 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %9 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %10 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %11 = comb.and bin %9, %10 {sv.namehint = "empty"} : i1
    %12 = comb.and bin %9, %maybe_full {sv.namehint = "full"} : i1
    %13 = comb.and bin %22, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %14 = comb.and bin %io_deq_ready, %21 {sv.namehint = "do_deq"} : i1
    %15 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %16 = comb.mux bin %13, %15, %wrap : i1
    %17 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %18 = comb.mux bin %14, %17, %wrap_1 : i1
    %19 = comb.icmp bin eq %13, %14 : i1
    %20 = comb.mux bin %19, %maybe_full, %13 : i1
    %21 = comb.xor bin %11, %true {sv.namehint = "io_deq_valid"} : i1
    %22 = comb.xor bin %12, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %22, %21, %2, %3, %4, %5, %6, %7, %8 : i1, i1, i3, i3, i4, i2, i32, i64, i1
  }
  hw.module private @Queue_25(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_sink : i2, out io_deq_valid : i1, out io_deq_bits_sink : i2) {
    %false = hw.constant false
    %true = hw.constant true
    %ram_sink = seq.firmem 0, 1, undefined, port_order {prefix = ""} : <2 x 2>
    seq.firmem.write_port %ram_sink[%wrap] = %io_enq_bits_sink, clock %clock enable %5 : <2 x 2>
    %0 = seq.firmem.read_port %ram_sink[%wrap_1], clock %clock {sv.namehint = "ram_io_deq_bits_MPORT_data_sink"} : <2 x 2>
    %wrap = seq.firreg %7 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "wrap"} : i1
    %wrap_1 = seq.firreg %9 clock %clock reset sync %reset, %false {firrtl.random_init_start = 1 : ui64, sv.namehint = "wrap_1"} : i1
    %maybe_full = seq.firreg %11 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %1 = comb.icmp bin eq %wrap, %wrap_1 {sv.namehint = "ptr_match"} : i1
    %2 = comb.xor bin %maybe_full, %true {sv.namehint = "_empty_T"} : i1
    %3 = comb.and bin %1, %2 {sv.namehint = "empty"} : i1
    %4 = comb.and bin %1, %maybe_full {sv.namehint = "full"} : i1
    %5 = comb.and bin %13, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %6 = comb.add %wrap, %true {sv.namehint = "_value_T"} : i1
    %7 = comb.mux bin %5, %6, %wrap : i1
    %8 = comb.add %wrap_1, %true {sv.namehint = "_value_T_2"} : i1
    %9 = comb.mux bin %3, %wrap_1, %8 : i1
    %10 = comb.icmp bin eq %5, %12 : i1
    %11 = comb.mux bin %10, %maybe_full, %5 : i1
    %12 = comb.xor bin %3, %true {sv.namehint = "do_deq"} : i1
    %13 = comb.xor bin %4, %true {sv.namehint = "io_enq_ready"} : i1
    hw.output %13, %12, %0 : i1, i1, i2
  }
  hw.module private @TLBuffer_8(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i4, in %auto_in_a_bits_source : i2, in %auto_in_a_bits_address : i32, in %auto_in_a_bits_user_amba_prot_bufferable : i1, in %auto_in_a_bits_user_amba_prot_modifiable : i1, in %auto_in_a_bits_user_amba_prot_readalloc : i1, in %auto_in_a_bits_user_amba_prot_writealloc : i1, in %auto_in_a_bits_user_amba_prot_privileged : i1, in %auto_in_a_bits_user_amba_prot_secure : i1, in %auto_in_a_bits_user_amba_prot_fetch : i1, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_b_ready : i1, out auto_in_b_valid : i1, out auto_in_b_bits_opcode : i3, out auto_in_b_bits_param : i2, out auto_in_b_bits_size : i4, out auto_in_b_bits_source : i2, out auto_in_b_bits_address : i32, out auto_in_b_bits_mask : i8, out auto_in_b_bits_corrupt : i1, out auto_in_c_ready : i1, in %auto_in_c_valid : i1, in %auto_in_c_bits_opcode : i3, in %auto_in_c_bits_param : i3, in %auto_in_c_bits_size : i4, in %auto_in_c_bits_source : i2, in %auto_in_c_bits_address : i32, in %auto_in_c_bits_user_amba_prot_bufferable : i1, in %auto_in_c_bits_user_amba_prot_modifiable : i1, in %auto_in_c_bits_user_amba_prot_readalloc : i1, in %auto_in_c_bits_user_amba_prot_writealloc : i1, in %auto_in_c_bits_user_amba_prot_privileged : i1, in %auto_in_c_bits_user_amba_prot_secure : i1, in %auto_in_c_bits_data : i64, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i4, out auto_in_d_bits_source : i2, out auto_in_d_bits_sink : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i64, out auto_in_d_bits_corrupt : i1, out auto_in_e_ready : i1, in %auto_in_e_valid : i1, in %auto_in_e_bits_sink : i2, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i4, out auto_out_a_bits_source : i2, out auto_out_a_bits_address : i32, out auto_out_a_bits_user_amba_prot_bufferable : i1, out auto_out_a_bits_user_amba_prot_modifiable : i1, out auto_out_a_bits_user_amba_prot_readalloc : i1, out auto_out_a_bits_user_amba_prot_writealloc : i1, out auto_out_a_bits_user_amba_prot_privileged : i1, out auto_out_a_bits_user_amba_prot_secure : i1, out auto_out_a_bits_user_amba_prot_fetch : i1, out auto_out_a_bits_mask : i8, out auto_out_a_bits_data : i64, out auto_out_a_bits_corrupt : i1, out auto_out_b_ready : i1, in %auto_out_b_valid : i1, in %auto_out_b_bits_param : i2, in %auto_out_b_bits_address : i32, in %auto_out_c_ready : i1, out auto_out_c_valid : i1, out auto_out_c_bits_opcode : i3, out auto_out_c_bits_param : i3, out auto_out_c_bits_size : i4, out auto_out_c_bits_source : i2, out auto_out_c_bits_address : i32, out auto_out_c_bits_data : i64, out auto_out_c_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_param : i2, in %auto_out_d_bits_size : i4, in %auto_out_d_bits_source : i2, in %auto_out_d_bits_sink : i2, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i64, in %auto_out_d_bits_corrupt : i1, out auto_out_e_valid : i1, out auto_out_e_bits_sink : i2) {
    %false = hw.constant false
    hw.instance "monitor" @TLMonitor(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %bundleOut_0_a_q.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i4, io_in_a_bits_source: %auto_in_a_bits_source: i2, io_in_a_bits_address: %auto_in_a_bits_address: i32, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %false: i1, io_in_b_ready: %auto_in_b_ready: i1, io_in_b_valid: %bundleIn_0_b_q.io_deq_valid: i1, io_in_b_bits_opcode: %bundleIn_0_b_q.io_deq_bits_opcode: i3, io_in_b_bits_param: %bundleIn_0_b_q.io_deq_bits_param: i2, io_in_b_bits_size: %bundleIn_0_b_q.io_deq_bits_size: i4, io_in_b_bits_source: %bundleIn_0_b_q.io_deq_bits_source: i2, io_in_b_bits_address: %bundleIn_0_b_q.io_deq_bits_address: i32, io_in_b_bits_mask: %bundleIn_0_b_q.io_deq_bits_mask: i8, io_in_b_bits_corrupt: %bundleIn_0_b_q.io_deq_bits_corrupt: i1, io_in_c_ready: %bundleOut_0_c_q.io_enq_ready: i1, io_in_c_valid: %auto_in_c_valid: i1, io_in_c_bits_opcode: %auto_in_c_bits_opcode: i3, io_in_c_bits_param: %auto_in_c_bits_param: i3, io_in_c_bits_size: %auto_in_c_bits_size: i4, io_in_c_bits_source: %auto_in_c_bits_source: i2, io_in_c_bits_address: %auto_in_c_bits_address: i32, io_in_c_bits_corrupt: %false: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %bundleIn_0_d_q.io_deq_valid: i1, io_in_d_bits_opcode: %bundleIn_0_d_q.io_deq_bits_opcode: i3, io_in_d_bits_param: %bundleIn_0_d_q.io_deq_bits_param: i2, io_in_d_bits_size: %bundleIn_0_d_q.io_deq_bits_size: i4, io_in_d_bits_source: %bundleIn_0_d_q.io_deq_bits_source: i2, io_in_d_bits_sink: %bundleIn_0_d_q.io_deq_bits_sink: i2, io_in_d_bits_denied: %bundleIn_0_d_q.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %bundleIn_0_d_q.io_deq_bits_corrupt: i1, io_in_e_ready: %bundleOut_0_e_q.io_enq_ready: i1, io_in_e_valid: %auto_in_e_valid: i1, io_in_e_bits_sink: %auto_in_e_bits_sink: i2) -> ()
    %bundleOut_0_a_q.io_enq_ready, %bundleOut_0_a_q.io_deq_valid, %bundleOut_0_a_q.io_deq_bits_opcode, %bundleOut_0_a_q.io_deq_bits_param, %bundleOut_0_a_q.io_deq_bits_size, %bundleOut_0_a_q.io_deq_bits_source, %bundleOut_0_a_q.io_deq_bits_address, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_bufferable, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_modifiable, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_readalloc, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_writealloc, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_privileged, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_secure, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_fetch, %bundleOut_0_a_q.io_deq_bits_mask, %bundleOut_0_a_q.io_deq_bits_data, %bundleOut_0_a_q.io_deq_bits_corrupt = hw.instance "bundleOut_0_a_q" @Queue_21(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_param: %auto_in_a_bits_param: i3, io_enq_bits_size: %auto_in_a_bits_size: i4, io_enq_bits_source: %auto_in_a_bits_source: i2, io_enq_bits_address: %auto_in_a_bits_address: i32, io_enq_bits_user_amba_prot_bufferable: %auto_in_a_bits_user_amba_prot_bufferable: i1, io_enq_bits_user_amba_prot_modifiable: %auto_in_a_bits_user_amba_prot_modifiable: i1, io_enq_bits_user_amba_prot_readalloc: %auto_in_a_bits_user_amba_prot_readalloc: i1, io_enq_bits_user_amba_prot_writealloc: %auto_in_a_bits_user_amba_prot_writealloc: i1, io_enq_bits_user_amba_prot_privileged: %auto_in_a_bits_user_amba_prot_privileged: i1, io_enq_bits_user_amba_prot_secure: %auto_in_a_bits_user_amba_prot_secure: i1, io_enq_bits_user_amba_prot_fetch: %auto_in_a_bits_user_amba_prot_fetch: i1, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_data: %auto_in_a_bits_data: i64, io_deq_ready: %auto_out_a_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i32, io_deq_bits_user_amba_prot_bufferable: i1, io_deq_bits_user_amba_prot_modifiable: i1, io_deq_bits_user_amba_prot_readalloc: i1, io_deq_bits_user_amba_prot_writealloc: i1, io_deq_bits_user_amba_prot_privileged: i1, io_deq_bits_user_amba_prot_secure: i1, io_deq_bits_user_amba_prot_fetch: i1, io_deq_bits_mask: i8, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "bundleOut_0_a_q.io_deq_valid"}
    %bundleIn_0_d_q.io_enq_ready, %bundleIn_0_d_q.io_deq_valid, %bundleIn_0_d_q.io_deq_bits_opcode, %bundleIn_0_d_q.io_deq_bits_param, %bundleIn_0_d_q.io_deq_bits_size, %bundleIn_0_d_q.io_deq_bits_source, %bundleIn_0_d_q.io_deq_bits_sink, %bundleIn_0_d_q.io_deq_bits_denied, %bundleIn_0_d_q.io_deq_bits_data, %bundleIn_0_d_q.io_deq_bits_corrupt = hw.instance "bundleIn_0_d_q" @Queue_22(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_param: %auto_out_d_bits_param: i2, io_enq_bits_size: %auto_out_d_bits_size: i4, io_enq_bits_source: %auto_out_d_bits_source: i2, io_enq_bits_sink: %auto_out_d_bits_sink: i2, io_enq_bits_denied: %auto_out_d_bits_denied: i1, io_enq_bits_data: %auto_out_d_bits_data: i64, io_enq_bits_corrupt: %auto_out_d_bits_corrupt: i1, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_sink: i2, io_deq_bits_denied: i1, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "bundleIn_0_d_q.io_deq_valid"}
    %bundleIn_0_b_q.io_enq_ready, %bundleIn_0_b_q.io_deq_valid, %bundleIn_0_b_q.io_deq_bits_opcode, %bundleIn_0_b_q.io_deq_bits_param, %bundleIn_0_b_q.io_deq_bits_size, %bundleIn_0_b_q.io_deq_bits_source, %bundleIn_0_b_q.io_deq_bits_address, %bundleIn_0_b_q.io_deq_bits_mask, %bundleIn_0_b_q.io_deq_bits_corrupt = hw.instance "bundleIn_0_b_q" @Queue_23(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_b_valid: i1, io_enq_bits_param: %auto_out_b_bits_param: i2, io_enq_bits_address: %auto_out_b_bits_address: i32, io_deq_ready: %auto_in_b_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i32, io_deq_bits_mask: i8, io_deq_bits_corrupt: i1) {sv.namehint = "bundleIn_0_b_q.io_deq_valid"}
    %bundleOut_0_c_q.io_enq_ready, %bundleOut_0_c_q.io_deq_valid, %bundleOut_0_c_q.io_deq_bits_opcode, %bundleOut_0_c_q.io_deq_bits_param, %bundleOut_0_c_q.io_deq_bits_size, %bundleOut_0_c_q.io_deq_bits_source, %bundleOut_0_c_q.io_deq_bits_address, %bundleOut_0_c_q.io_deq_bits_data, %bundleOut_0_c_q.io_deq_bits_corrupt = hw.instance "bundleOut_0_c_q" @Queue_24(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_c_valid: i1, io_enq_bits_opcode: %auto_in_c_bits_opcode: i3, io_enq_bits_param: %auto_in_c_bits_param: i3, io_enq_bits_size: %auto_in_c_bits_size: i4, io_enq_bits_source: %auto_in_c_bits_source: i2, io_enq_bits_address: %auto_in_c_bits_address: i32, io_enq_bits_user_amba_prot_bufferable: %auto_in_c_bits_user_amba_prot_bufferable: i1, io_enq_bits_user_amba_prot_modifiable: %auto_in_c_bits_user_amba_prot_modifiable: i1, io_enq_bits_user_amba_prot_readalloc: %auto_in_c_bits_user_amba_prot_readalloc: i1, io_enq_bits_user_amba_prot_writealloc: %auto_in_c_bits_user_amba_prot_writealloc: i1, io_enq_bits_user_amba_prot_privileged: %auto_in_c_bits_user_amba_prot_privileged: i1, io_enq_bits_user_amba_prot_secure: %auto_in_c_bits_user_amba_prot_secure: i1, io_enq_bits_data: %auto_in_c_bits_data: i64, io_deq_ready: %auto_out_c_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i4, io_deq_bits_source: i2, io_deq_bits_address: i32, io_deq_bits_data: i64, io_deq_bits_corrupt: i1) {sv.namehint = "bundleOut_0_c_q.io_deq_valid"}
    %bundleOut_0_e_q.io_enq_ready, %bundleOut_0_e_q.io_deq_valid, %bundleOut_0_e_q.io_deq_bits_sink = hw.instance "bundleOut_0_e_q" @Queue_25(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_e_valid: i1, io_enq_bits_sink: %auto_in_e_bits_sink: i2) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_sink: i2) {sv.namehint = "bundleOut_0_e_q.io_deq_valid"}
    hw.output %bundleOut_0_a_q.io_enq_ready, %bundleIn_0_b_q.io_deq_valid, %bundleIn_0_b_q.io_deq_bits_opcode, %bundleIn_0_b_q.io_deq_bits_param, %bundleIn_0_b_q.io_deq_bits_size, %bundleIn_0_b_q.io_deq_bits_source, %bundleIn_0_b_q.io_deq_bits_address, %bundleIn_0_b_q.io_deq_bits_mask, %bundleIn_0_b_q.io_deq_bits_corrupt, %bundleOut_0_c_q.io_enq_ready, %bundleIn_0_d_q.io_deq_valid, %bundleIn_0_d_q.io_deq_bits_opcode, %bundleIn_0_d_q.io_deq_bits_param, %bundleIn_0_d_q.io_deq_bits_size, %bundleIn_0_d_q.io_deq_bits_source, %bundleIn_0_d_q.io_deq_bits_sink, %bundleIn_0_d_q.io_deq_bits_denied, %bundleIn_0_d_q.io_deq_bits_data, %bundleIn_0_d_q.io_deq_bits_corrupt, %bundleOut_0_e_q.io_enq_ready, %bundleOut_0_a_q.io_deq_valid, %bundleOut_0_a_q.io_deq_bits_opcode, %bundleOut_0_a_q.io_deq_bits_param, %bundleOut_0_a_q.io_deq_bits_size, %bundleOut_0_a_q.io_deq_bits_source, %bundleOut_0_a_q.io_deq_bits_address, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_bufferable, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_modifiable, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_readalloc, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_writealloc, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_privileged, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_secure, %bundleOut_0_a_q.io_deq_bits_user_amba_prot_fetch, %bundleOut_0_a_q.io_deq_bits_mask, %bundleOut_0_a_q.io_deq_bits_data, %bundleOut_0_a_q.io_deq_bits_corrupt, %bundleIn_0_b_q.io_enq_ready, %bundleOut_0_c_q.io_deq_valid, %bundleOut_0_c_q.io_deq_bits_opcode, %bundleOut_0_c_q.io_deq_bits_param, %bundleOut_0_c_q.io_deq_bits_size, %bundleOut_0_c_q.io_deq_bits_source, %bundleOut_0_c_q.io_deq_bits_address, %bundleOut_0_c_q.io_deq_bits_data, %bundleOut_0_c_q.io_deq_bits_corrupt, %bundleIn_0_d_q.io_enq_ready, %bundleOut_0_e_q.io_deq_valid, %bundleOut_0_e_q.io_deq_bits_sink : i1, i1, i3, i2, i4, i2, i32, i8, i1, i1, i1, i3, i2, i4, i2, i2, i1, i64, i1, i1, i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @NonSyncResetSynchronizerPrimitiveShiftReg_d3(in %clock : !seq.clock, in %io_d : i1, out io_q : i1) {
    %sync_0 = seq.firreg %sync_1 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i1
    %sync_1 = seq.firreg %sync_2 clock %clock {firrtl.random_init_start = 1 : ui64} : i1
    %sync_2 = seq.firreg %io_d clock %clock {firrtl.random_init_start = 2 : ui64} : i1
    hw.output %sync_0 : i1
  }
  hw.module private @SynchronizerShiftReg_w1_d3(in %clock : !seq.clock, in %io_d : i1, out io_q : i1) {
    %output_chain.io_q = hw.instance "output_chain" @NonSyncResetSynchronizerPrimitiveShiftReg_d3(clock: %clock: !seq.clock, io_d: %io_d: i1) -> (io_q: i1) {sv.namehint = "output_0"}
    hw.output %output_chain.io_q : i1
  }
  hw.module private @IntSyncAsyncCrossingSink(in %clock : !seq.clock, in %auto_in_sync_0 : i1, out auto_out_0 : i1) {
    %chain.io_q = hw.instance "chain" @SynchronizerShiftReg_w1_d3(clock: %clock: !seq.clock, io_d: %auto_in_sync_0: i1) -> (io_q: i1) {sv.namehint = "chain.io_q"}
    hw.output %chain.io_q : i1
  }
  hw.module private @IntSyncSyncCrossingSink(in %auto_in_sync_0 : i1, in %auto_in_sync_1 : i1, out auto_out_0 : i1, out auto_out_1 : i1) {
    hw.output %auto_in_sync_0, %auto_in_sync_1 : i1, i1
  }
  hw.module private @IntSyncSyncCrossingSink_1(in %auto_in_sync_0 : i1, out auto_out_0 : i1) {
    hw.output %auto_in_sync_0 : i1
  }
  hw.module private @AsyncResetRegVec_w1_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %false = hw.constant false
    %reg = seq.firreg %io_d clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "reg"} : i1
    hw.output %reg : i1
  }
  hw.module private @IntSyncCrossingSource_1(in %clock : !seq.clock, in %reset : i1, in %auto_in_0 : i1, out auto_out_sync_0 : i1) {
    %reg.io_q = hw.instance "reg" @AsyncResetRegVec_w1_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %auto_in_0: i1) -> (io_q: i1) {sv.namehint = "reg.io_q"}
    hw.output %reg.io_q : i1
  }
  hw.module private @TilePRCIDomain(in %auto_intsink_in_sync_0 : i1, in %auto_int_in_clock_xing_in_1_sync_0 : i1, in %auto_int_in_clock_xing_in_0_sync_0 : i1, in %auto_int_in_clock_xing_in_0_sync_1 : i1, in %auto_tl_master_clock_xing_out_a_ready : i1, out auto_tl_master_clock_xing_out_a_valid : i1, out auto_tl_master_clock_xing_out_a_bits_opcode : i3, out auto_tl_master_clock_xing_out_a_bits_param : i3, out auto_tl_master_clock_xing_out_a_bits_size : i4, out auto_tl_master_clock_xing_out_a_bits_source : i2, out auto_tl_master_clock_xing_out_a_bits_address : i32, out auto_tl_master_clock_xing_out_a_bits_user_amba_prot_bufferable : i1, out auto_tl_master_clock_xing_out_a_bits_user_amba_prot_modifiable : i1, out auto_tl_master_clock_xing_out_a_bits_user_amba_prot_readalloc : i1, out auto_tl_master_clock_xing_out_a_bits_user_amba_prot_writealloc : i1, out auto_tl_master_clock_xing_out_a_bits_user_amba_prot_privileged : i1, out auto_tl_master_clock_xing_out_a_bits_user_amba_prot_secure : i1, out auto_tl_master_clock_xing_out_a_bits_user_amba_prot_fetch : i1, out auto_tl_master_clock_xing_out_a_bits_mask : i8, out auto_tl_master_clock_xing_out_a_bits_data : i64, out auto_tl_master_clock_xing_out_a_bits_corrupt : i1, out auto_tl_master_clock_xing_out_b_ready : i1, in %auto_tl_master_clock_xing_out_b_valid : i1, in %auto_tl_master_clock_xing_out_b_bits_param : i2, in %auto_tl_master_clock_xing_out_b_bits_address : i32, in %auto_tl_master_clock_xing_out_c_ready : i1, out auto_tl_master_clock_xing_out_c_valid : i1, out auto_tl_master_clock_xing_out_c_bits_opcode : i3, out auto_tl_master_clock_xing_out_c_bits_param : i3, out auto_tl_master_clock_xing_out_c_bits_size : i4, out auto_tl_master_clock_xing_out_c_bits_source : i2, out auto_tl_master_clock_xing_out_c_bits_address : i32, out auto_tl_master_clock_xing_out_c_bits_data : i64, out auto_tl_master_clock_xing_out_c_bits_corrupt : i1, out auto_tl_master_clock_xing_out_d_ready : i1, in %auto_tl_master_clock_xing_out_d_valid : i1, in %auto_tl_master_clock_xing_out_d_bits_opcode : i3, in %auto_tl_master_clock_xing_out_d_bits_param : i2, in %auto_tl_master_clock_xing_out_d_bits_size : i4, in %auto_tl_master_clock_xing_out_d_bits_source : i2, in %auto_tl_master_clock_xing_out_d_bits_sink : i2, in %auto_tl_master_clock_xing_out_d_bits_denied : i1, in %auto_tl_master_clock_xing_out_d_bits_data : i64, in %auto_tl_master_clock_xing_out_d_bits_corrupt : i1, out auto_tl_master_clock_xing_out_e_valid : i1, out auto_tl_master_clock_xing_out_e_bits_sink : i2, in %auto_tap_clock_in_clock : !seq.clock, in %auto_tap_clock_in_reset : i1) {
    %false = hw.constant false
    %tile_reset_domain.auto_tile_wfi_out_0, %tile_reset_domain.auto_tile_tl_other_masters_out_a_valid, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_opcode, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_param, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_size, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_source, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_address, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_bufferable, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_modifiable, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_readalloc, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_writealloc, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_privileged, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_secure, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_fetch, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_mask, %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_data, %tile_reset_domain.auto_tile_tl_other_masters_out_b_ready, %tile_reset_domain.auto_tile_tl_other_masters_out_c_valid, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_opcode, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_param, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_size, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_source, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_address, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_bufferable, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_modifiable, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_readalloc, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_writealloc, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_privileged, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_secure, %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_data, %tile_reset_domain.auto_tile_tl_other_masters_out_d_ready, %tile_reset_domain.auto_tile_tl_other_masters_out_e_valid, %tile_reset_domain.auto_tile_tl_other_masters_out_e_bits_sink = hw.instance "tile_reset_domain" @TileResetDomain(auto_tile_int_local_in_2_0: %intsink_2.auto_out_0: i1, auto_tile_int_local_in_1_0: %intsink_1.auto_out_0: i1, auto_tile_int_local_in_1_1: %intsink_1.auto_out_1: i1, auto_tile_int_local_in_0_0: %intsink.auto_out_0: i1, auto_tile_tl_other_masters_out_a_ready: %buffer.auto_in_a_ready: i1, auto_tile_tl_other_masters_out_b_valid: %buffer.auto_in_b_valid: i1, auto_tile_tl_other_masters_out_b_bits_opcode: %buffer.auto_in_b_bits_opcode: i3, auto_tile_tl_other_masters_out_b_bits_param: %buffer.auto_in_b_bits_param: i2, auto_tile_tl_other_masters_out_b_bits_size: %buffer.auto_in_b_bits_size: i4, auto_tile_tl_other_masters_out_b_bits_source: %buffer.auto_in_b_bits_source: i2, auto_tile_tl_other_masters_out_b_bits_address: %buffer.auto_in_b_bits_address: i32, auto_tile_tl_other_masters_out_b_bits_mask: %buffer.auto_in_b_bits_mask: i8, auto_tile_tl_other_masters_out_b_bits_corrupt: %buffer.auto_in_b_bits_corrupt: i1, auto_tile_tl_other_masters_out_c_ready: %buffer.auto_in_c_ready: i1, auto_tile_tl_other_masters_out_d_valid: %buffer.auto_in_d_valid: i1, auto_tile_tl_other_masters_out_d_bits_opcode: %buffer.auto_in_d_bits_opcode: i3, auto_tile_tl_other_masters_out_d_bits_param: %buffer.auto_in_d_bits_param: i2, auto_tile_tl_other_masters_out_d_bits_size: %buffer.auto_in_d_bits_size: i4, auto_tile_tl_other_masters_out_d_bits_source: %buffer.auto_in_d_bits_source: i2, auto_tile_tl_other_masters_out_d_bits_sink: %buffer.auto_in_d_bits_sink: i2, auto_tile_tl_other_masters_out_d_bits_denied: %buffer.auto_in_d_bits_denied: i1, auto_tile_tl_other_masters_out_d_bits_data: %buffer.auto_in_d_bits_data: i64, auto_tile_tl_other_masters_out_d_bits_corrupt: %buffer.auto_in_d_bits_corrupt: i1, auto_tile_tl_other_masters_out_e_ready: %buffer.auto_in_e_ready: i1, auto_clock_in_clock: %clockNode.auto_out_clock: !seq.clock, auto_clock_in_reset: %clockNode.auto_out_reset: i1) -> (auto_tile_wfi_out_0: i1, auto_tile_tl_other_masters_out_a_valid: i1, auto_tile_tl_other_masters_out_a_bits_opcode: i3, auto_tile_tl_other_masters_out_a_bits_param: i3, auto_tile_tl_other_masters_out_a_bits_size: i4, auto_tile_tl_other_masters_out_a_bits_source: i2, auto_tile_tl_other_masters_out_a_bits_address: i32, auto_tile_tl_other_masters_out_a_bits_user_amba_prot_bufferable: i1, auto_tile_tl_other_masters_out_a_bits_user_amba_prot_modifiable: i1, auto_tile_tl_other_masters_out_a_bits_user_amba_prot_readalloc: i1, auto_tile_tl_other_masters_out_a_bits_user_amba_prot_writealloc: i1, auto_tile_tl_other_masters_out_a_bits_user_amba_prot_privileged: i1, auto_tile_tl_other_masters_out_a_bits_user_amba_prot_secure: i1, auto_tile_tl_other_masters_out_a_bits_user_amba_prot_fetch: i1, auto_tile_tl_other_masters_out_a_bits_mask: i8, auto_tile_tl_other_masters_out_a_bits_data: i64, auto_tile_tl_other_masters_out_b_ready: i1, auto_tile_tl_other_masters_out_c_valid: i1, auto_tile_tl_other_masters_out_c_bits_opcode: i3, auto_tile_tl_other_masters_out_c_bits_param: i3, auto_tile_tl_other_masters_out_c_bits_size: i4, auto_tile_tl_other_masters_out_c_bits_source: i2, auto_tile_tl_other_masters_out_c_bits_address: i32, auto_tile_tl_other_masters_out_c_bits_user_amba_prot_bufferable: i1, auto_tile_tl_other_masters_out_c_bits_user_amba_prot_modifiable: i1, auto_tile_tl_other_masters_out_c_bits_user_amba_prot_readalloc: i1, auto_tile_tl_other_masters_out_c_bits_user_amba_prot_writealloc: i1, auto_tile_tl_other_masters_out_c_bits_user_amba_prot_privileged: i1, auto_tile_tl_other_masters_out_c_bits_user_amba_prot_secure: i1, auto_tile_tl_other_masters_out_c_bits_data: i64, auto_tile_tl_other_masters_out_d_ready: i1, auto_tile_tl_other_masters_out_e_valid: i1, auto_tile_tl_other_masters_out_e_bits_sink: i2) {sv.namehint = "intsource_2.auto_in_0"}
    %clockNode.auto_out_clock, %clockNode.auto_out_reset = hw.instance "clockNode" @FixedClockBroadcast_1(auto_in_clock: %auto_tap_clock_in_clock: !seq.clock, auto_in_reset: %auto_tap_clock_in_reset: i1) -> (auto_out_clock: !seq.clock, auto_out_reset: i1) {sv.namehint = "clockNode.auto_out_reset"}
    %buffer.auto_in_a_ready, %buffer.auto_in_b_valid, %buffer.auto_in_b_bits_opcode, %buffer.auto_in_b_bits_param, %buffer.auto_in_b_bits_size, %buffer.auto_in_b_bits_source, %buffer.auto_in_b_bits_address, %buffer.auto_in_b_bits_mask, %buffer.auto_in_b_bits_corrupt, %buffer.auto_in_c_ready, %buffer.auto_in_d_valid, %buffer.auto_in_d_bits_opcode, %buffer.auto_in_d_bits_param, %buffer.auto_in_d_bits_size, %buffer.auto_in_d_bits_source, %buffer.auto_in_d_bits_sink, %buffer.auto_in_d_bits_denied, %buffer.auto_in_d_bits_data, %buffer.auto_in_d_bits_corrupt, %buffer.auto_in_e_ready, %buffer.auto_out_a_valid, %buffer.auto_out_a_bits_opcode, %buffer.auto_out_a_bits_param, %buffer.auto_out_a_bits_size, %buffer.auto_out_a_bits_source, %buffer.auto_out_a_bits_address, %buffer.auto_out_a_bits_user_amba_prot_bufferable, %buffer.auto_out_a_bits_user_amba_prot_modifiable, %buffer.auto_out_a_bits_user_amba_prot_readalloc, %buffer.auto_out_a_bits_user_amba_prot_writealloc, %buffer.auto_out_a_bits_user_amba_prot_privileged, %buffer.auto_out_a_bits_user_amba_prot_secure, %buffer.auto_out_a_bits_user_amba_prot_fetch, %buffer.auto_out_a_bits_mask, %buffer.auto_out_a_bits_data, %buffer.auto_out_b_ready, %buffer.auto_out_c_valid, %buffer.auto_out_c_bits_opcode, %buffer.auto_out_c_bits_param, %buffer.auto_out_c_bits_size, %buffer.auto_out_c_bits_source, %buffer.auto_out_c_bits_address, %buffer.auto_out_c_bits_user_amba_prot_bufferable, %buffer.auto_out_c_bits_user_amba_prot_modifiable, %buffer.auto_out_c_bits_user_amba_prot_readalloc, %buffer.auto_out_c_bits_user_amba_prot_writealloc, %buffer.auto_out_c_bits_user_amba_prot_privileged, %buffer.auto_out_c_bits_user_amba_prot_secure, %buffer.auto_out_c_bits_data, %buffer.auto_out_d_ready, %buffer.auto_out_e_valid, %buffer.auto_out_e_bits_sink = hw.instance "buffer" @TLBuffer_7(auto_in_a_valid: %tile_reset_domain.auto_tile_tl_other_masters_out_a_valid: i1, auto_in_a_bits_opcode: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_opcode: i3, auto_in_a_bits_param: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_param: i3, auto_in_a_bits_size: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_size: i4, auto_in_a_bits_source: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_source: i2, auto_in_a_bits_address: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_mask: i8, auto_in_a_bits_data: %tile_reset_domain.auto_tile_tl_other_masters_out_a_bits_data: i64, auto_in_b_ready: %tile_reset_domain.auto_tile_tl_other_masters_out_b_ready: i1, auto_in_c_valid: %tile_reset_domain.auto_tile_tl_other_masters_out_c_valid: i1, auto_in_c_bits_opcode: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_opcode: i3, auto_in_c_bits_param: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_param: i3, auto_in_c_bits_size: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_size: i4, auto_in_c_bits_source: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_source: i2, auto_in_c_bits_address: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_address: i32, auto_in_c_bits_user_amba_prot_bufferable: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_bufferable: i1, auto_in_c_bits_user_amba_prot_modifiable: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_modifiable: i1, auto_in_c_bits_user_amba_prot_readalloc: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_readalloc: i1, auto_in_c_bits_user_amba_prot_writealloc: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_writealloc: i1, auto_in_c_bits_user_amba_prot_privileged: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_privileged: i1, auto_in_c_bits_user_amba_prot_secure: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_user_amba_prot_secure: i1, auto_in_c_bits_data: %tile_reset_domain.auto_tile_tl_other_masters_out_c_bits_data: i64, auto_in_d_ready: %tile_reset_domain.auto_tile_tl_other_masters_out_d_ready: i1, auto_in_e_valid: %tile_reset_domain.auto_tile_tl_other_masters_out_e_valid: i1, auto_in_e_bits_sink: %tile_reset_domain.auto_tile_tl_other_masters_out_e_bits_sink: i2, auto_out_a_ready: %buffer_1.auto_in_a_ready: i1, auto_out_b_valid: %buffer_1.auto_in_b_valid: i1, auto_out_b_bits_opcode: %buffer_1.auto_in_b_bits_opcode: i3, auto_out_b_bits_param: %buffer_1.auto_in_b_bits_param: i2, auto_out_b_bits_size: %buffer_1.auto_in_b_bits_size: i4, auto_out_b_bits_source: %buffer_1.auto_in_b_bits_source: i2, auto_out_b_bits_address: %buffer_1.auto_in_b_bits_address: i32, auto_out_b_bits_mask: %buffer_1.auto_in_b_bits_mask: i8, auto_out_b_bits_corrupt: %buffer_1.auto_in_b_bits_corrupt: i1, auto_out_c_ready: %buffer_1.auto_in_c_ready: i1, auto_out_d_valid: %buffer_1.auto_in_d_valid: i1, auto_out_d_bits_opcode: %buffer_1.auto_in_d_bits_opcode: i3, auto_out_d_bits_param: %buffer_1.auto_in_d_bits_param: i2, auto_out_d_bits_size: %buffer_1.auto_in_d_bits_size: i4, auto_out_d_bits_source: %buffer_1.auto_in_d_bits_source: i2, auto_out_d_bits_sink: %buffer_1.auto_in_d_bits_sink: i2, auto_out_d_bits_denied: %buffer_1.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %buffer_1.auto_in_d_bits_data: i64, auto_out_d_bits_corrupt: %buffer_1.auto_in_d_bits_corrupt: i1, auto_out_e_ready: %buffer_1.auto_in_e_ready: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_opcode: i3, auto_in_b_bits_param: i2, auto_in_b_bits_size: i4, auto_in_b_bits_source: i2, auto_in_b_bits_address: i32, auto_in_b_bits_mask: i8, auto_in_b_bits_corrupt: i1, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_in_e_ready: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_user_amba_prot_bufferable: i1, auto_out_c_bits_user_amba_prot_modifiable: i1, auto_out_c_bits_user_amba_prot_readalloc: i1, auto_out_c_bits_user_amba_prot_writealloc: i1, auto_out_c_bits_user_amba_prot_privileged: i1, auto_out_c_bits_user_amba_prot_secure: i1, auto_out_c_bits_data: i64, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "buffer.auto_in_e_ready"}
    %buffer_1.auto_in_a_ready, %buffer_1.auto_in_b_valid, %buffer_1.auto_in_b_bits_opcode, %buffer_1.auto_in_b_bits_param, %buffer_1.auto_in_b_bits_size, %buffer_1.auto_in_b_bits_source, %buffer_1.auto_in_b_bits_address, %buffer_1.auto_in_b_bits_mask, %buffer_1.auto_in_b_bits_corrupt, %buffer_1.auto_in_c_ready, %buffer_1.auto_in_d_valid, %buffer_1.auto_in_d_bits_opcode, %buffer_1.auto_in_d_bits_param, %buffer_1.auto_in_d_bits_size, %buffer_1.auto_in_d_bits_source, %buffer_1.auto_in_d_bits_sink, %buffer_1.auto_in_d_bits_denied, %buffer_1.auto_in_d_bits_data, %buffer_1.auto_in_d_bits_corrupt, %buffer_1.auto_in_e_ready, %buffer_1.auto_out_a_valid, %buffer_1.auto_out_a_bits_opcode, %buffer_1.auto_out_a_bits_param, %buffer_1.auto_out_a_bits_size, %buffer_1.auto_out_a_bits_source, %buffer_1.auto_out_a_bits_address, %buffer_1.auto_out_a_bits_user_amba_prot_bufferable, %buffer_1.auto_out_a_bits_user_amba_prot_modifiable, %buffer_1.auto_out_a_bits_user_amba_prot_readalloc, %buffer_1.auto_out_a_bits_user_amba_prot_writealloc, %buffer_1.auto_out_a_bits_user_amba_prot_privileged, %buffer_1.auto_out_a_bits_user_amba_prot_secure, %buffer_1.auto_out_a_bits_user_amba_prot_fetch, %buffer_1.auto_out_a_bits_mask, %buffer_1.auto_out_a_bits_data, %buffer_1.auto_out_a_bits_corrupt, %buffer_1.auto_out_b_ready, %buffer_1.auto_out_c_valid, %buffer_1.auto_out_c_bits_opcode, %buffer_1.auto_out_c_bits_param, %buffer_1.auto_out_c_bits_size, %buffer_1.auto_out_c_bits_source, %buffer_1.auto_out_c_bits_address, %buffer_1.auto_out_c_bits_data, %buffer_1.auto_out_c_bits_corrupt, %buffer_1.auto_out_d_ready, %buffer_1.auto_out_e_valid, %buffer_1.auto_out_e_bits_sink = hw.instance "buffer_1" @TLBuffer_8(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_a_valid: %buffer.auto_out_a_valid: i1, auto_in_a_bits_opcode: %buffer.auto_out_a_bits_opcode: i3, auto_in_a_bits_param: %buffer.auto_out_a_bits_param: i3, auto_in_a_bits_size: %buffer.auto_out_a_bits_size: i4, auto_in_a_bits_source: %buffer.auto_out_a_bits_source: i2, auto_in_a_bits_address: %buffer.auto_out_a_bits_address: i32, auto_in_a_bits_user_amba_prot_bufferable: %buffer.auto_out_a_bits_user_amba_prot_bufferable: i1, auto_in_a_bits_user_amba_prot_modifiable: %buffer.auto_out_a_bits_user_amba_prot_modifiable: i1, auto_in_a_bits_user_amba_prot_readalloc: %buffer.auto_out_a_bits_user_amba_prot_readalloc: i1, auto_in_a_bits_user_amba_prot_writealloc: %buffer.auto_out_a_bits_user_amba_prot_writealloc: i1, auto_in_a_bits_user_amba_prot_privileged: %buffer.auto_out_a_bits_user_amba_prot_privileged: i1, auto_in_a_bits_user_amba_prot_secure: %buffer.auto_out_a_bits_user_amba_prot_secure: i1, auto_in_a_bits_user_amba_prot_fetch: %buffer.auto_out_a_bits_user_amba_prot_fetch: i1, auto_in_a_bits_mask: %buffer.auto_out_a_bits_mask: i8, auto_in_a_bits_data: %buffer.auto_out_a_bits_data: i64, auto_in_b_ready: %buffer.auto_out_b_ready: i1, auto_in_c_valid: %buffer.auto_out_c_valid: i1, auto_in_c_bits_opcode: %buffer.auto_out_c_bits_opcode: i3, auto_in_c_bits_param: %buffer.auto_out_c_bits_param: i3, auto_in_c_bits_size: %buffer.auto_out_c_bits_size: i4, auto_in_c_bits_source: %buffer.auto_out_c_bits_source: i2, auto_in_c_bits_address: %buffer.auto_out_c_bits_address: i32, auto_in_c_bits_user_amba_prot_bufferable: %buffer.auto_out_c_bits_user_amba_prot_bufferable: i1, auto_in_c_bits_user_amba_prot_modifiable: %buffer.auto_out_c_bits_user_amba_prot_modifiable: i1, auto_in_c_bits_user_amba_prot_readalloc: %buffer.auto_out_c_bits_user_amba_prot_readalloc: i1, auto_in_c_bits_user_amba_prot_writealloc: %buffer.auto_out_c_bits_user_amba_prot_writealloc: i1, auto_in_c_bits_user_amba_prot_privileged: %buffer.auto_out_c_bits_user_amba_prot_privileged: i1, auto_in_c_bits_user_amba_prot_secure: %buffer.auto_out_c_bits_user_amba_prot_secure: i1, auto_in_c_bits_data: %buffer.auto_out_c_bits_data: i64, auto_in_d_ready: %buffer.auto_out_d_ready: i1, auto_in_e_valid: %buffer.auto_out_e_valid: i1, auto_in_e_bits_sink: %buffer.auto_out_e_bits_sink: i2, auto_out_a_ready: %auto_tl_master_clock_xing_out_a_ready: i1, auto_out_b_valid: %auto_tl_master_clock_xing_out_b_valid: i1, auto_out_b_bits_param: %auto_tl_master_clock_xing_out_b_bits_param: i2, auto_out_b_bits_address: %auto_tl_master_clock_xing_out_b_bits_address: i32, auto_out_c_ready: %auto_tl_master_clock_xing_out_c_ready: i1, auto_out_d_valid: %auto_tl_master_clock_xing_out_d_valid: i1, auto_out_d_bits_opcode: %auto_tl_master_clock_xing_out_d_bits_opcode: i3, auto_out_d_bits_param: %auto_tl_master_clock_xing_out_d_bits_param: i2, auto_out_d_bits_size: %auto_tl_master_clock_xing_out_d_bits_size: i4, auto_out_d_bits_source: %auto_tl_master_clock_xing_out_d_bits_source: i2, auto_out_d_bits_sink: %auto_tl_master_clock_xing_out_d_bits_sink: i2, auto_out_d_bits_denied: %auto_tl_master_clock_xing_out_d_bits_denied: i1, auto_out_d_bits_data: %auto_tl_master_clock_xing_out_d_bits_data: i64, auto_out_d_bits_corrupt: %auto_tl_master_clock_xing_out_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_b_valid: i1, auto_in_b_bits_opcode: i3, auto_in_b_bits_param: i2, auto_in_b_bits_size: i4, auto_in_b_bits_source: i2, auto_in_b_bits_address: i32, auto_in_b_bits_mask: i8, auto_in_b_bits_corrupt: i1, auto_in_c_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i4, auto_in_d_bits_source: i2, auto_in_d_bits_sink: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i64, auto_in_d_bits_corrupt: i1, auto_in_e_ready: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i4, auto_out_a_bits_source: i2, auto_out_a_bits_address: i32, auto_out_a_bits_user_amba_prot_bufferable: i1, auto_out_a_bits_user_amba_prot_modifiable: i1, auto_out_a_bits_user_amba_prot_readalloc: i1, auto_out_a_bits_user_amba_prot_writealloc: i1, auto_out_a_bits_user_amba_prot_privileged: i1, auto_out_a_bits_user_amba_prot_secure: i1, auto_out_a_bits_user_amba_prot_fetch: i1, auto_out_a_bits_mask: i8, auto_out_a_bits_data: i64, auto_out_a_bits_corrupt: i1, auto_out_b_ready: i1, auto_out_c_valid: i1, auto_out_c_bits_opcode: i3, auto_out_c_bits_param: i3, auto_out_c_bits_size: i4, auto_out_c_bits_source: i2, auto_out_c_bits_address: i32, auto_out_c_bits_data: i64, auto_out_c_bits_corrupt: i1, auto_out_d_ready: i1, auto_out_e_valid: i1, auto_out_e_bits_sink: i2) {sv.namehint = "bundleIn_0_1_e_valid"}
    %intsink.auto_out_0 = hw.instance "intsink" @IntSyncAsyncCrossingSink(clock: %auto_tap_clock_in_clock: !seq.clock, auto_in_sync_0: %auto_intsink_in_sync_0: i1) -> (auto_out_0: i1) {sv.namehint = "intsink.auto_out_0"}
    %intsink_1.auto_out_0, %intsink_1.auto_out_1 = hw.instance "intsink_1" @IntSyncSyncCrossingSink(auto_in_sync_0: %auto_int_in_clock_xing_in_0_sync_0: i1, auto_in_sync_1: %auto_int_in_clock_xing_in_0_sync_1: i1) -> (auto_out_0: i1, auto_out_1: i1) {sv.namehint = "intsink_1.auto_out_1"}
    %intsink_2.auto_out_0 = hw.instance "intsink_2" @IntSyncSyncCrossingSink_1(auto_in_sync_0: %auto_int_in_clock_xing_in_1_sync_0: i1) -> (auto_out_0: i1) {sv.namehint = "intsink_2.auto_out_0"}
    %intsource_1.auto_out_sync_0 = hw.instance "intsource_1" @IntSyncCrossingSource_1(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_0: %false: i1) -> (auto_out_sync_0: i1)
    %intsource_2.auto_out_sync_0 = hw.instance "intsource_2" @IntSyncCrossingSource_1(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_0: %tile_reset_domain.auto_tile_wfi_out_0: i1) -> (auto_out_sync_0: i1)
    %intsource_3.auto_out_sync_0 = hw.instance "intsource_3" @IntSyncCrossingSource_1(clock: %auto_tap_clock_in_clock: !seq.clock, reset: %auto_tap_clock_in_reset: i1, auto_in_0: %false: i1) -> (auto_out_sync_0: i1)
    hw.output %buffer_1.auto_out_a_valid, %buffer_1.auto_out_a_bits_opcode, %buffer_1.auto_out_a_bits_param, %buffer_1.auto_out_a_bits_size, %buffer_1.auto_out_a_bits_source, %buffer_1.auto_out_a_bits_address, %buffer_1.auto_out_a_bits_user_amba_prot_bufferable, %buffer_1.auto_out_a_bits_user_amba_prot_modifiable, %buffer_1.auto_out_a_bits_user_amba_prot_readalloc, %buffer_1.auto_out_a_bits_user_amba_prot_writealloc, %buffer_1.auto_out_a_bits_user_amba_prot_privileged, %buffer_1.auto_out_a_bits_user_amba_prot_secure, %buffer_1.auto_out_a_bits_user_amba_prot_fetch, %buffer_1.auto_out_a_bits_mask, %buffer_1.auto_out_a_bits_data, %buffer_1.auto_out_a_bits_corrupt, %buffer_1.auto_out_b_ready, %buffer_1.auto_out_c_valid, %buffer_1.auto_out_c_bits_opcode, %buffer_1.auto_out_c_bits_param, %buffer_1.auto_out_c_bits_size, %buffer_1.auto_out_c_bits_source, %buffer_1.auto_out_c_bits_address, %buffer_1.auto_out_c_bits_data, %buffer_1.auto_out_c_bits_corrupt, %buffer_1.auto_out_d_ready, %buffer_1.auto_out_e_valid, %buffer_1.auto_out_e_bits_sink : i1, i3, i3, i4, i2, i32, i1, i1, i1, i1, i1, i1, i1, i8, i64, i1, i1, i1, i3, i3, i4, i2, i32, i64, i1, i1, i1, i2
  }
  hw.module private @TLMonitor_21(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i28, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i28) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %13 = comb.icmp eq %io_in_a_bits_size, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %14 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i28) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "mask_eq"} : i1
    %16 = comb.and bin %13, %15 {sv.namehint = "_mask_acc_T"} : i1
    %17 = comb.or bin %12, %16 {sv.namehint = "mask_acc"} : i1
    %18 = comb.and bin %13, %14 {sv.namehint = "_mask_acc_T_1"} : i1
    %19 = comb.or bin %12, %18 {sv.namehint = "mask_acc_1"} : i1
    %20 = comb.icmp eq %io_in_a_bits_size, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %21 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i28) -> i1
    %22 = comb.xor bin %21, %true {sv.namehint = "mask_nbit_1"} : i1
    %23 = comb.and bin %15, %22 {sv.namehint = "mask_eq_2"} : i1
    %24 = comb.and bin %20, %23 {sv.namehint = "_mask_acc_T_2"} : i1
    %25 = comb.or bin %17, %24 {sv.namehint = "mask_acc_2"} : i1
    %26 = comb.and bin %15, %21 {sv.namehint = "mask_eq_3"} : i1
    %27 = comb.and bin %20, %26 {sv.namehint = "_mask_acc_T_3"} : i1
    %28 = comb.or bin %17, %27 {sv.namehint = "mask_acc_3"} : i1
    %29 = comb.and bin %14, %22 {sv.namehint = "mask_eq_4"} : i1
    %30 = comb.and bin %20, %29 {sv.namehint = "_mask_acc_T_4"} : i1
    %31 = comb.or bin %19, %30 {sv.namehint = "mask_acc_4"} : i1
    %32 = comb.and bin %14, %21 {sv.namehint = "mask_eq_5"} : i1
    %33 = comb.and bin %20, %32 {sv.namehint = "_mask_acc_T_5"} : i1
    %34 = comb.or bin %19, %33 {sv.namehint = "mask_acc_5"} : i1
    %35 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i28) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "mask_nbit_2"} : i1
    %37 = comb.and bin %23, %36 {sv.namehint = "mask_eq_6"} : i1
    %38 = comb.or bin %25, %37 {sv.namehint = "mask_lo_lo_lo"} : i1
    %39 = comb.and bin %23, %35 {sv.namehint = "mask_eq_7"} : i1
    %40 = comb.or bin %25, %39 {sv.namehint = "mask_lo_lo_hi"} : i1
    %41 = comb.and bin %26, %36 {sv.namehint = "mask_eq_8"} : i1
    %42 = comb.or bin %28, %41 {sv.namehint = "mask_lo_hi_lo"} : i1
    %43 = comb.and bin %26, %35 {sv.namehint = "mask_eq_9"} : i1
    %44 = comb.or bin %28, %43 {sv.namehint = "mask_lo_hi_hi"} : i1
    %45 = comb.and bin %29, %36 {sv.namehint = "mask_eq_10"} : i1
    %46 = comb.or bin %31, %45 {sv.namehint = "mask_hi_lo_lo"} : i1
    %47 = comb.and bin %29, %35 {sv.namehint = "mask_eq_11"} : i1
    %48 = comb.or bin %31, %47 {sv.namehint = "mask_hi_lo_hi"} : i1
    %49 = comb.and bin %32, %36 {sv.namehint = "mask_eq_12"} : i1
    %50 = comb.or bin %34, %49 {sv.namehint = "mask_hi_hi_lo"} : i1
    %51 = comb.and bin %32, %35 {sv.namehint = "mask_eq_13"} : i1
    %52 = comb.or bin %34, %51 {sv.namehint = "mask_hi_hi_hi"} : i1
    %53 = comb.concat %52, %50, %48, %46, %44, %42, %40, %38 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %54 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %55 = comb.and bin %io_in_a_valid, %54 : i1
    %56 = comb.xor bin %reset, %true : i1
    %57 = comb.and bin %55, %56 : i1
    %58 = comb.or bin %4, %reset : i1
    %59 = comb.xor bin %58, %true : i1
    %60 = comb.and bin %55, %59 : i1
    %61 = comb.or bin %12, %reset : i1
    %62 = comb.xor bin %61, %true : i1
    %63 = comb.and bin %55, %62 : i1
    %64 = comb.or bin %11, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %55, %65 : i1
    %67 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %68 = comb.or bin %67, %reset : i1
    %69 = comb.xor bin %68, %true : i1
    %70 = comb.and bin %55, %69 : i1
    %71 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %72 = comb.or bin %71, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %55, %73 : i1
    %75 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %55, %77 : i1
    %79 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %80 = comb.and bin %io_in_a_valid, %79 : i1
    %81 = comb.and bin %80, %56 : i1
    %82 = comb.and bin %80, %59 : i1
    %83 = comb.and bin %80, %62 : i1
    %84 = comb.and bin %80, %65 : i1
    %85 = comb.and bin %80, %69 : i1
    %86 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %87 = comb.or bin %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %80, %88 : i1
    %90 = comb.and bin %80, %73 : i1
    %91 = comb.and bin %80, %77 : i1
    %92 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %93 = comb.and bin %io_in_a_valid, %92 : i1
    %94 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %95 = comb.icmp bin ne %94, %c-1_i2 : i2
    %96 = comb.or bin %95, %reset : i1
    %97 = comb.xor bin %96, %true : i1
    %98 = comb.and bin %93, %97 : i1
    %99 = comb.extract %io_in_a_bits_address from 26 : (i28) -> i2
    %100 = comb.icmp eq %99, %c-1_i2 : i2
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %93, %102 : i1
    %104 = comb.and bin %93, %59 : i1
    %105 = comb.and bin %93, %65 : i1
    %106 = comb.xor bin %86, %true : i1
    %107 = comb.or bin %106, %reset : i1
    %108 = comb.xor bin %107, %true : i1
    %109 = comb.and bin %93, %108 : i1
    %110 = comb.icmp bin eq %io_in_a_bits_mask, %53 : i8
    %111 = comb.or bin %110, %reset : i1
    %112 = comb.xor bin %111, %true : i1
    %113 = comb.and bin %93, %112 : i1
    %114 = comb.and bin %93, %77 : i1
    %115 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %116 = comb.and bin %io_in_a_valid, %115 : i1
    %117 = comb.and bin %95, %100 : i1
    %118 = comb.or bin %117, %reset : i1
    %119 = comb.xor bin %118, %true : i1
    %120 = comb.and bin %116, %119 : i1
    %121 = comb.and bin %116, %59 : i1
    %122 = comb.and bin %116, %65 : i1
    %123 = comb.and bin %116, %108 : i1
    %124 = comb.and bin %116, %112 : i1
    %125 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %126 = comb.and bin %io_in_a_valid, %125 : i1
    %127 = comb.and bin %126, %119 : i1
    %128 = comb.and bin %126, %59 : i1
    %129 = comb.and bin %126, %65 : i1
    %130 = comb.and bin %126, %108 : i1
    %131 = comb.xor bin %53, %c-1_i8 : i8
    %132 = comb.and bin %io_in_a_bits_mask, %131 : i8
    %133 = comb.icmp bin eq %132, %c0_i8 : i8
    %134 = comb.or bin %133, %reset : i1
    %135 = comb.xor bin %134, %true : i1
    %136 = comb.and bin %126, %135 : i1
    %137 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %138 = comb.and bin %io_in_a_valid, %137 : i1
    %139 = comb.and bin %138, %56 : i1
    %140 = comb.and bin %138, %59 : i1
    %141 = comb.and bin %138, %65 : i1
    %142 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %143 = comb.or bin %142, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.and bin %138, %144 : i1
    %146 = comb.and bin %138, %112 : i1
    %147 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %148 = comb.and bin %io_in_a_valid, %147 : i1
    %149 = comb.and bin %148, %56 : i1
    %150 = comb.and bin %148, %59 : i1
    %151 = comb.and bin %148, %65 : i1
    %152 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %153 = comb.xor bin %152, %true : i1
    %154 = comb.or bin %153, %reset : i1
    %155 = comb.xor bin %154, %true : i1
    %156 = comb.and bin %148, %155 : i1
    %157 = comb.and bin %148, %112 : i1
    %158 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %159 = comb.and bin %io_in_a_valid, %158 : i1
    %160 = comb.and bin %159, %56 : i1
    %161 = comb.and bin %159, %59 : i1
    %162 = comb.and bin %159, %65 : i1
    %163 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %164 = comb.or bin %163, %reset : i1
    %165 = comb.xor bin %164, %true : i1
    %166 = comb.and bin %159, %165 : i1
    %167 = comb.and bin %159, %112 : i1
    %168 = comb.and bin %159, %77 : i1
    %169 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %170 = comb.or bin %169, %reset : i1
    %171 = comb.xor bin %170, %true : i1
    %172 = comb.and bin %io_in_d_valid, %171 : i1
    %173 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %174 = comb.icmp bin ne %173, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %175 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %176 = comb.and bin %io_in_d_valid, %175 : i1
    %177 = comb.or bin %174, %reset : i1
    %178 = comb.xor bin %177, %true : i1
    %179 = comb.and bin %176, %178 : i1
    %180 = comb.icmp bin eq %io_in_d_bits_size, %c-1_i2 : i2
    %181 = comb.or bin %180, %reset : i1
    %182 = comb.xor bin %181, %true : i1
    %183 = comb.and bin %176, %182 : i1
    %184 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %185 = comb.and bin %io_in_d_valid, %184 : i1
    %186 = comb.and bin %185, %178 : i1
    %187 = comb.and bin %185, %56 : i1
    %188 = comb.and bin %185, %182 : i1
    %189 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %190 = comb.and bin %io_in_d_valid, %189 : i1
    %191 = comb.and bin %190, %178 : i1
    %192 = comb.and bin %190, %56 : i1
    %193 = comb.and bin %190, %182 : i1
    %194 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %195 = comb.and bin %io_in_d_valid, %194 : i1
    %196 = comb.and bin %195, %178 : i1
    %197 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %198 = comb.and bin %io_in_d_valid, %197 : i1
    %199 = comb.and bin %198, %178 : i1
    %200 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %201 = comb.and bin %io_in_d_valid, %200 : i1
    %202 = comb.and bin %201, %178 : i1
    %203 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %208 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %204 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %205 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %206 = comb.xor %203, %true : i1
    %207 = comb.or %206, %204 : i1
    %208 = comb.and %207, %a_first_counter : i1
    %opcode = seq.firreg %231 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %232 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %233 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %234 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %235 clock %clock {firrtl.random_init_start = 15 : ui64} : i28
    %209 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %210 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %211 = comb.or bin %210, %reset : i1
    %212 = comb.xor bin %211, %true : i1
    %213 = comb.and bin %209, %212 : i1
    %214 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %215 = comb.or bin %214, %reset : i1
    %216 = comb.xor bin %215, %true : i1
    %217 = comb.and bin %209, %216 : i1
    %218 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %219 = comb.or bin %218, %reset : i1
    %220 = comb.xor bin %219, %true : i1
    %221 = comb.and bin %209, %220 : i1
    %222 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %223 = comb.or bin %222, %reset : i1
    %224 = comb.xor bin %223, %true : i1
    %225 = comb.and bin %209, %224 : i1
    %226 = comb.icmp bin eq %io_in_a_bits_address, %address : i28
    %227 = comb.or bin %226, %reset : i1
    %228 = comb.xor bin %227, %true : i1
    %229 = comb.and bin %209, %228 : i1
    %230 = comb.and bin %203, %205 : i1
    %231 = comb.mux bin %230, %io_in_a_bits_opcode, %opcode : i3
    %232 = comb.mux bin %230, %io_in_a_bits_param, %param : i3
    %233 = comb.mux bin %230, %io_in_a_bits_size, %size : i2
    %234 = comb.mux bin %230, %io_in_a_bits_source, %source : i6
    %235 = comb.mux bin %230, %io_in_a_bits_address, %address : i28
    %236 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %241 clock %clock reset sync %reset, %false {firrtl.random_init_start = 43 : ui64} : i1
    %237 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %238 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %239 = comb.xor %236, %true : i1
    %240 = comb.or %239, %237 : i1
    %241 = comb.and %240, %d_first_counter : i1
    %opcode_1 = seq.firreg %256 clock %clock {firrtl.random_init_start = 44 : ui64} : i3
    %size_1 = seq.firreg %257 clock %clock {firrtl.random_init_start = 49 : ui64} : i2
    %source_1 = seq.firreg %258 clock %clock {firrtl.random_init_start = 51 : ui64} : i6
    %242 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %243 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %244 = comb.or bin %243, %reset : i1
    %245 = comb.xor bin %244, %true : i1
    %246 = comb.and bin %242, %245 : i1
    %247 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %248 = comb.or bin %247, %reset : i1
    %249 = comb.xor bin %248, %true : i1
    %250 = comb.and bin %242, %249 : i1
    %251 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %252 = comb.or bin %251, %reset : i1
    %253 = comb.xor bin %252, %true : i1
    %254 = comb.and bin %242, %253 : i1
    %255 = comb.and bin %236, %238 : i1
    %256 = comb.mux bin %255, %io_in_d_bits_opcode, %opcode_1 : i3
    %257 = comb.mux bin %255, %io_in_d_bits_size, %size_1 : i2
    %258 = comb.mux bin %255, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %373 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 59 : ui64} : i48
    %inflight_opcodes = seq.firreg %376 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 107 : ui64} : i192
    %inflight_sizes = seq.firreg %379 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 299 : ui64} : i192
    %a_first_counter_1 = seq.firreg %263 clock %clock reset sync %reset, %false {firrtl.random_init_start = 491 : ui64} : i1
    %259 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %260 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %261 = comb.xor %203, %true : i1
    %262 = comb.or %261, %259 : i1
    %263 = comb.and %262, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %268 clock %clock reset sync %reset, %false {firrtl.random_init_start = 492 : ui64} : i1
    %264 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %265 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %266 = comb.xor %236, %true : i1
    %267 = comb.or %266, %264 : i1
    %268 = comb.and %267, %d_first_counter_1 : i1
    %269 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %270 = comb.shru bin %inflight_opcodes, %269 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %271 = comb.extract %270 from 1 : (i192) -> i3
    %272 = comb.shru bin %inflight_sizes, %269 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %273 = comb.extract %272 from 1 : (i192) -> i3
    %274 = comb.concat %false, %273 {sv.namehint = "a_size_lookup"} : i1, i3
    %275 = comb.and bin %io_in_a_valid, %260 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %276 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %277 = comb.shl bin %c1_i64, %276 {sv.namehint = "_a_set_wo_ready_T"} : i64
    %278 = comb.extract %277 from 0 : (i64) -> i48
    %279 = comb.mux bin %275, %278, %c0_i48 {sv.namehint = "a_set_wo_ready"} : i48
    %280 = comb.and bin %203, %260 : i1
    %281 = comb.shl bin %c1_i64, %276 {sv.namehint = "_a_set_T"} : i64
    %282 = comb.extract %281 from 0 : (i64) -> i48
    %283 = comb.mux bin %280, %282, %c0_i48 {sv.namehint = "a_set"} : i48
    %284 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %285 = comb.mux bin %280, %284, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %286 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %287 = comb.mux bin %280, %286, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %288 = comb.concat %c0_i511, %285 : i511, i4
    %289 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %290 = comb.shl bin %288, %289 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %291 = comb.extract %290 from 0 : (i515) -> i192
    %292 = comb.mux bin %280, %291, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %293 = comb.concat %c0_i511, %287 : i511, i3
    %294 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %295 = comb.shl bin %293, %294 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %296 = comb.extract %295 from 0 : (i514) -> i192
    %297 = comb.mux bin %280, %296, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %298 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %299 = comb.shru bin %inflight, %298 : i48
    %300 = comb.extract %299 from 0 : (i48) -> i1
    %301 = comb.xor bin %300, %true : i1
    %302 = comb.or bin %301, %reset : i1
    %303 = comb.xor bin %302, %true : i1
    %304 = comb.and bin %280, %303 : i1
    %305 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %306 = comb.and bin %io_in_d_valid, %265 : i1
    %307 = comb.xor bin %305, %true : i1
    %308 = comb.and bin %306, %307 : i1
    %309 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %310 = comb.shl bin %c1_i64, %309 {sv.namehint = "_d_clr_wo_ready_T"} : i64
    %311 = comb.extract %310 from 0 : (i64) -> i48
    %312 = comb.mux bin %308, %311, %c0_i48 {sv.namehint = "d_clr_wo_ready"} : i48
    %313 = comb.and bin %236, %265, %307 : i1
    %314 = comb.shl bin %c1_i64, %309 {sv.namehint = "_d_clr_T"} : i64
    %315 = comb.extract %314 from 0 : (i64) -> i48
    %316 = comb.mux bin %313, %315, %c0_i48 {sv.namehint = "d_clr"} : i48
    %317 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %318 = comb.shl bin %c15_i527, %317 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %319 = comb.extract %318 from 0 : (i527) -> i192
    %320 = comb.mux bin %313, %319, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %321 = comb.shl bin %c15_i527, %317 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %322 = comb.extract %321 from 0 : (i527) -> i192
    %323 = comb.mux bin %313, %322, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %324 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %325 = comb.and bin %275, %324 {sv.namehint = "same_cycle_resp"} : i1
    %326 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %327 = comb.shru bin %inflight, %326 : i48
    %328 = comb.extract %327 from 0 : (i48) -> i1
    %329 = comb.or bin %328, %325, %reset : i1
    %330 = comb.xor bin %329, %true : i1
    %331 = comb.and bin %308, %330 : i1
    %332 = comb.and bin %308, %325 : i1
    %333 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %334 = comb.icmp bin eq %io_in_d_bits_opcode, %333 : i3
    %335 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %336 = comb.icmp bin eq %io_in_d_bits_opcode, %335 : i3
    %337 = comb.or bin %334, %336, %reset : i1
    %338 = comb.xor bin %337, %true : i1
    %339 = comb.and bin %332, %338 : i1
    %340 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %341 = comb.or bin %340, %reset : i1
    %342 = comb.xor bin %341, %true : i1
    %343 = comb.and bin %332, %342 : i1
    %344 = comb.xor bin %325, %true : i1
    %345 = comb.and bin %308, %344 : i1
    %346 = hw.array_get %1[%271] : !hw.array<8xi3>, i3
    %347 = comb.icmp bin eq %io_in_d_bits_opcode, %346 : i3
    %348 = hw.array_get %0[%271] : !hw.array<8xi3>, i3
    %349 = comb.icmp bin eq %io_in_d_bits_opcode, %348 : i3
    %350 = comb.or bin %347, %349, %reset : i1
    %351 = comb.xor bin %350, %true : i1
    %352 = comb.and bin %345, %351 : i1
    %353 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %354 = comb.icmp bin eq %353, %274 : i4
    %355 = comb.or bin %354, %reset : i1
    %356 = comb.xor bin %355, %true : i1
    %357 = comb.and bin %345, %356 : i1
    %358 = comb.and bin %306, %260 : i1
    %359 = comb.and bin %358, %io_in_a_valid : i1
    %360 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %361 = comb.and bin %359, %360 : i1
    %362 = comb.and bin %361, %307 : i1
    %363 = comb.xor bin %io_in_d_ready, %true : i1
    %364 = comb.or bin %363, %io_in_a_ready, %reset : i1
    %365 = comb.xor bin %364, %true : i1
    %366 = comb.and bin %362, %365 : i1
    %367 = comb.icmp bin ne %279, %312 : i48
    %368 = comb.icmp bin eq %279, %c0_i48 : i48
    %369 = comb.or bin %367, %368, %reset : i1
    %370 = comb.xor bin %369, %true : i1
    %371 = comb.or bin %inflight, %283 {sv.namehint = "_inflight_T"} : i48
    %372 = comb.xor bin %316, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %373 = comb.and bin %371, %372 {sv.namehint = "_inflight_T_2"} : i48
    %374 = comb.or bin %inflight_opcodes, %292 {sv.namehint = "_inflight_opcodes_T"} : i192
    %375 = comb.xor bin %320, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %376 = comb.and bin %374, %375 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %377 = comb.or bin %inflight_sizes, %297 {sv.namehint = "_inflight_sizes_T"} : i192
    %378 = comb.xor bin %323, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %379 = comb.and bin %377, %378 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %387 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 493 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %380 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %381 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %382 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %383 = comb.or bin %380, %381, %382, %reset : i1
    %384 = comb.xor bin %383, %true : i1
    %385 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %386 = comb.or bin %203, %236 : i1
    %387 = comb.mux bin %386, %c0_i32, %385 : i32
    %inflight_1 = seq.firreg %414 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 525 : ui64} : i48
    %inflight_sizes_1 = seq.firreg %416 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 765 : ui64} : i192
    %d_first_counter_2 = seq.firreg %392 clock %clock reset sync %reset, %false {firrtl.random_init_start = 958 : ui64} : i1
    %388 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %389 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %390 = comb.xor %236, %true : i1
    %391 = comb.or %390, %388 : i1
    %392 = comb.and %391, %d_first_counter_2 : i1
    %393 = comb.shru bin %inflight_sizes_1, %269 {sv.namehint = "_c_size_lookup_T_1"} : i192
    %394 = comb.extract %393 from 1 : (i192) -> i3
    %395 = comb.concat %false, %394 {sv.namehint = "c_size_lookup"} : i1, i3
    %396 = comb.and bin %236, %389, %305 : i1
    %397 = comb.shl bin %c1_i64, %309 {sv.namehint = "_d_clr_T_1"} : i64
    %398 = comb.extract %397 from 0 : (i64) -> i48
    %399 = comb.mux bin %396, %398, %c0_i48 {sv.namehint = "d_clr_1"} : i48
    %400 = comb.shl bin %c15_i527, %317 {sv.namehint = "_d_sizes_clr_T_11"} : i527
    %401 = comb.extract %400 from 0 : (i527) -> i192
    %402 = comb.mux bin %396, %401, %c0_i192 {sv.namehint = "d_sizes_clr_1"} : i192
    %403 = comb.and bin %io_in_d_valid, %389, %305 : i1
    %404 = comb.shru bin %inflight_1, %326 : i48
    %405 = comb.extract %404 from 0 : (i48) -> i1
    %406 = comb.or bin %405, %reset : i1
    %407 = comb.xor bin %406, %true : i1
    %408 = comb.and bin %403, %407 : i1
    %409 = comb.icmp bin eq %353, %395 : i4
    %410 = comb.or bin %409, %reset : i1
    %411 = comb.xor bin %410, %true : i1
    %412 = comb.and bin %403, %411 : i1
    %413 = comb.xor bin %399, %c-1_i48 {sv.namehint = "_inflight_T_4"} : i48
    %414 = comb.and bin %inflight_1, %413 {sv.namehint = "_inflight_T_5"} : i48
    %415 = comb.xor bin %402, %c-1_i192 {sv.namehint = "_inflight_sizes_T_4"} : i192
    %416 = comb.and bin %inflight_sizes_1, %415 {sv.namehint = "_inflight_sizes_T_5"} : i192
    %watchdog_1 = seq.firreg %423 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 959 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %417 = comb.icmp bin eq %inflight_1, %c0_i48 : i48
    %418 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %419 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %420 = comb.or bin %417, %418, %419, %reset : i1
    %421 = comb.xor bin %420, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %424 = comb.and bin %STOP_COND_, %false : i1
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %425 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %425 {
          sv.fatal 1
        }
        sv.if %425 {
          sv.fatal 1
        }
        %426 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %426 {
          sv.fatal 1
        }
        %427 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %427 {
          sv.fatal 1
        }
        %428 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %428 {
          sv.fatal 1
        }
        %429 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %429 {
          sv.fatal 1
        }
        %430 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %430 {
          sv.fatal 1
        }
        %431 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %431 {
          sv.fatal 1
        }
        %432 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %432 {
          sv.fatal 1
        }
        sv.if %432 {
          sv.fatal 1
        }
        %433 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %433 {
          sv.fatal 1
        }
        %434 = comb.and bin %STOP_COND_, %83 : i1
        sv.if %434 {
          sv.fatal 1
        }
        %435 = comb.and bin %STOP_COND_, %84 : i1
        sv.if %435 {
          sv.fatal 1
        }
        %436 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %436 {
          sv.fatal 1
        }
        %437 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %437 {
          sv.fatal 1
        }
        %438 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %438 {
          sv.fatal 1
        }
        %439 = comb.and bin %STOP_COND_, %91 : i1
        sv.if %439 {
          sv.fatal 1
        }
        %440 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %440 {
          sv.fatal 1
        }
        %441 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %441 {
          sv.fatal 1
        }
        %442 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %442 {
          sv.fatal 1
        }
        %443 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %443 {
          sv.fatal 1
        }
        %444 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %444 {
          sv.fatal 1
        }
        %445 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %445 {
          sv.fatal 1
        }
        %446 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %446 {
          sv.fatal 1
        }
        %447 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %447 {
          sv.fatal 1
        }
        %448 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %448 {
          sv.fatal 1
        }
        %449 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %449 {
          sv.fatal 1
        }
        %450 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %450 {
          sv.fatal 1
        }
        %451 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %451 {
          sv.fatal 1
        }
        %452 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %452 {
          sv.fatal 1
        }
        %453 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %453 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %454 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %455 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %456 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %458 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %459 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %460 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %146 : i1
        sv.if %461 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %462 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %150 : i1
        sv.if %463 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %464 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %465 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %466 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %467 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %468 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %470 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %472 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %473 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %475 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %186 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %187 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %478 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %191 : i1
        sv.if %479 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %480 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %193 : i1
        sv.if %481 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %482 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %482 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %483 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %483 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %484 = comb.and bin %STOP_COND_, %202 : i1
        sv.if %484 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %485 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %485 {
          sv.fatal 1
        }
        %486 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %486 {
          sv.fatal 1
        }
        %487 = comb.and bin %STOP_COND_, %221 : i1
        sv.if %487 {
          sv.fatal 1
        }
        %488 = comb.and bin %STOP_COND_, %225 : i1
        sv.if %488 {
          sv.fatal 1
        }
        %489 = comb.and bin %STOP_COND_, %229 : i1
        sv.if %489 {
          sv.fatal 1
        }
        %490 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %490 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %491 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %491 {
          sv.fatal 1
        }
        %492 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %492 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %493 = comb.and bin %STOP_COND_, %304 : i1
        sv.if %493 {
          sv.fatal 1
        }
        %494 = comb.and bin %STOP_COND_, %331 : i1
        sv.if %494 {
          sv.fatal 1
        }
        %495 = comb.and bin %STOP_COND_, %339 : i1
        sv.if %495 {
          sv.fatal 1
        }
        %496 = comb.and bin %STOP_COND_, %343 : i1
        sv.if %496 {
          sv.fatal 1
        }
        %497 = comb.and bin %STOP_COND_, %352 : i1
        sv.if %497 {
          sv.fatal 1
        }
        %498 = comb.and bin %STOP_COND_, %357 : i1
        sv.if %498 {
          sv.fatal 1
        }
        %499 = comb.and bin %STOP_COND_, %366 : i1
        sv.if %499 {
          sv.fatal 1
        }
        %500 = comb.and bin %STOP_COND_, %370 : i1
        sv.if %500 {
          sv.fatal 1
        }
        %501 = comb.and bin %STOP_COND_, %384 : i1
        sv.if %501 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %502 = comb.and bin %STOP_COND_, %408 : i1
        sv.if %502 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %503 = comb.and bin %STOP_COND_, %412 : i1
        sv.if %503 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        sv.if %424 {
          sv.fatal 1
        }
        %504 = comb.and bin %STOP_COND_, %421 : i1
        sv.if %504 {
          sv.fatal 1
        }
      }
    }
    %422 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %423 = comb.mux bin %236, %c0_i32, %422 : i32
    hw.output
  }
  hw.module private @Queue_26(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_read : i1, in %io_enq_bits_index : i23, in %io_enq_bits_data : i64, in %io_enq_bits_mask : i8, in %io_enq_bits_extra_tlrr_extra_source : i6, in %io_enq_bits_extra_tlrr_extra_size : i2, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_read : i1, out io_deq_bits_index : i23, out io_deq_bits_mask : i8, out io_deq_bits_extra_tlrr_extra_source : i6, out io_deq_bits_extra_tlrr_extra_size : i2) {
    %true = hw.constant true
    %false = hw.constant false
    %ram = seq.firreg %11 clock %clock : i104
    %0 = comb.concat %io_enq_bits_extra_tlrr_extra_size, %io_enq_bits_extra_tlrr_extra_source, %io_enq_bits_mask, %io_enq_bits_data, %io_enq_bits_index, %io_enq_bits_read : i2, i6, i8, i64, i23, i1
    %1 = comb.extract %ram from 0 {sv.namehint = "ram_io_deq_bits_MPORT_data_read"} : (i104) -> i1
    %2 = comb.extract %ram from 1 {sv.namehint = "ram_io_deq_bits_MPORT_data_index"} : (i104) -> i23
    %3 = comb.extract %ram from 88 {sv.namehint = "ram_io_deq_bits_MPORT_data_mask"} : (i104) -> i8
    %4 = comb.extract %ram from 96 {sv.namehint = "ram_io_deq_bits_MPORT_data_extra_tlrr_extra_source"} : (i104) -> i6
    %5 = comb.extract %ram from 102 {sv.namehint = "ram_io_deq_bits_MPORT_data_extra_tlrr_extra_size"} : (i104) -> i2
    %full = seq.firreg %9 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "full"} : i1
    %6 = comb.and bin %10, %io_enq_valid {sv.namehint = "do_enq"} : i1
    %7 = comb.and bin %io_deq_ready, %full {sv.namehint = "do_deq"} : i1
    %8 = comb.icmp bin eq %6, %7 : i1
    %9 = comb.mux bin %8, %full, %6 : i1
    %10 = comb.xor bin %full, %true {sv.namehint = "io_enq_ready"} : i1
    %11 = comb.mux bin %6, %0, %ram : i104
    hw.output %10, %full, %1, %2, %3, %4, %5 : i1, i1, i1, i23, i8, i6, i2
  }
  hw.module private @TLPLIC(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i2, in %auto_in_a_bits_source : i6, in %auto_in_a_bits_address : i28, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i6, out auto_in_d_bits_data : i64) {
    %c0_i64 = hw.constant 0 : i64
    %c-2_i2 = hw.constant -2 : i2
    %c0_i21 = hw.constant 0 : i21
    %false = hw.constant false
    %true = hw.constant true
    %c-4_i3 = hw.constant -4 : i3
    %c0_i2 = hw.constant 0 : i2
    %c0_i32 = hw.constant 0 : i32
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_21(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %out_back.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i2, io_in_a_bits_source: %auto_in_a_bits_source: i6, io_in_a_bits_address: %auto_in_a_bits_address: i28, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %out_back.io_deq_valid: i1, io_in_d_bits_opcode: %28: i3, io_in_d_bits_size: %out_back.io_deq_bits_extra_tlrr_extra_size: i2, io_in_d_bits_source: %out_back.io_deq_bits_extra_tlrr_extra_source: i6) -> ()
    %1 = comb.add %23, %true : i1
    %2 = comb.and bin %23, %1 : i1
    %3 = comb.xor bin %2, %true : i1
    %4 = comb.or bin %3, %reset : i1
    %5 = comb.xor bin %4, %true : i1
    %6 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %7 = comb.extract %auto_in_a_bits_address from 3 {sv.namehint = "in_bits_index"} : (i28) -> i23
    %out_back.io_enq_ready, %out_back.io_deq_valid, %out_back.io_deq_bits_read, %out_back.io_deq_bits_index, %out_back.io_deq_bits_mask, %out_back.io_deq_bits_extra_tlrr_extra_source, %out_back.io_deq_bits_extra_tlrr_extra_size = hw.instance "out_back" @Queue_26(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_read: %6: i1, io_enq_bits_index: %7: i23, io_enq_bits_data: %auto_in_a_bits_data: i64, io_enq_bits_mask: %auto_in_a_bits_mask: i8, io_enq_bits_extra_tlrr_extra_source: %auto_in_a_bits_source: i6, io_enq_bits_extra_tlrr_extra_size: %auto_in_a_bits_size: i2, io_deq_ready: %auto_in_d_ready: i1) -> (io_enq_ready: i1, io_deq_valid: i1, io_deq_bits_read: i1, io_deq_bits_index: i23, io_deq_bits_mask: i8, io_deq_bits_extra_tlrr_extra_source: i6, io_deq_bits_extra_tlrr_extra_size: i2) {sv.namehint = "out_back.io_deq_valid"}
    %8 = comb.extract %out_back.io_deq_bits_index from 19 : (i23) -> i4
    %9 = comb.extract %out_back.io_deq_bits_index from 11 : (i23) -> i7
    %10 = comb.extract %out_back.io_deq_bits_index from 0 : (i23) -> i10
    %11 = comb.concat %8, %9, %10 : i4, i7, i10
    %12 = comb.icmp bin eq %11, %c0_i21 {sv.namehint = "_out_T_5"} : i21
    %13 = comb.extract %out_back.io_deq_bits_mask from 4 {sv.namehint = "_out_backMask_T_12"} : (i8) -> i1
    %14 = comb.extract %out_back.io_deq_bits_mask from 5 {sv.namehint = "_out_backMask_T_13"} : (i8) -> i1
    %15 = comb.extract %out_back.io_deq_bits_mask from 6 {sv.namehint = "_out_backMask_T_14"} : (i8) -> i1
    %16 = comb.extract %out_back.io_deq_bits_mask from 7 {sv.namehint = "_out_backMask_T_15"} : (i8) -> i1
    %17 = comb.replicate %13 {sv.namehint = "out_backMask_hi_lo_lo"} : (i1) -> i8
    %18 = comb.replicate %14 {sv.namehint = "out_backMask_hi_lo_hi"} : (i1) -> i8
    %19 = comb.replicate %15 {sv.namehint = "out_backMask_hi_hi_lo"} : (i1) -> i8
    %20 = comb.replicate %16 {sv.namehint = "out_backMask_hi_hi_hi"} : (i1) -> i8
    %21 = comb.concat %20, %19, %18, %17 {sv.namehint = "_out_womask_T_4"} : i8, i8, i8, i8
    %22 = comb.icmp bin ne %21, %c0_i32 {sv.namehint = "out_romask_4"} : i32
    %23 = comb.and bin %out_back.io_deq_valid, %auto_in_d_ready, %out_back.io_deq_bits_read, %27, %12, %22 {sv.namehint = "claimer_0"} : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %29 = comb.and bin %STOP_COND_, %5 : i1
        sv.if %29 {
          sv.fatal 1
        }
        %30 = comb.and bin %STOP_COND_, %false : i1
        sv.if %30 {
          sv.fatal 1
        }
        sv.if %30 {
          sv.fatal 1
        }
      }
    }
    %24 = comb.extract %out_back.io_deq_bits_index from 10 {sv.namehint = "out_oindex_lo"} : (i23) -> i1
    %25 = comb.extract %out_back.io_deq_bits_index from 18 {sv.namehint = "out_oindex_hi"} : (i23) -> i1
    %26 = comb.concat %25, %24 : i1, i1
    %27 = comb.icmp eq %26, %c-2_i2 {sv.namehint = "out_backSel_2"} : i2
    %28 = comb.concat %c0_i2, %out_back.io_deq_bits_read {sv.namehint = "bundleIn_0_d_bits_opcode"} : i2, i1
    hw.output %out_back.io_enq_ready, %out_back.io_deq_valid, %28, %out_back.io_deq_bits_extra_tlrr_extra_size, %out_back.io_deq_bits_extra_tlrr_extra_source, %c0_i64 : i1, i1, i3, i2, i6, i64
  }
  hw.module private @ClockSinkDomain(out auto_plic_in_a_ready : i1, in %auto_plic_in_a_valid : i1, in %auto_plic_in_a_bits_opcode : i3, in %auto_plic_in_a_bits_param : i3, in %auto_plic_in_a_bits_size : i2, in %auto_plic_in_a_bits_source : i6, in %auto_plic_in_a_bits_address : i28, in %auto_plic_in_a_bits_mask : i8, in %auto_plic_in_a_bits_data : i64, in %auto_plic_in_a_bits_corrupt : i1, in %auto_plic_in_d_ready : i1, out auto_plic_in_d_valid : i1, out auto_plic_in_d_bits_opcode : i3, out auto_plic_in_d_bits_size : i2, out auto_plic_in_d_bits_source : i6, out auto_plic_in_d_bits_data : i64, in %auto_clock_in_clock : !seq.clock, in %auto_clock_in_reset : i1) {
    %plic.auto_in_a_ready, %plic.auto_in_d_valid, %plic.auto_in_d_bits_opcode, %plic.auto_in_d_bits_size, %plic.auto_in_d_bits_source, %plic.auto_in_d_bits_data = hw.instance "plic" @TLPLIC(clock: %auto_clock_in_clock: !seq.clock, reset: %auto_clock_in_reset: i1, auto_in_a_valid: %auto_plic_in_a_valid: i1, auto_in_a_bits_opcode: %auto_plic_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_plic_in_a_bits_param: i3, auto_in_a_bits_size: %auto_plic_in_a_bits_size: i2, auto_in_a_bits_source: %auto_plic_in_a_bits_source: i6, auto_in_a_bits_address: %auto_plic_in_a_bits_address: i28, auto_in_a_bits_mask: %auto_plic_in_a_bits_mask: i8, auto_in_a_bits_data: %auto_plic_in_a_bits_data: i64, auto_in_a_bits_corrupt: %auto_plic_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_plic_in_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i2, auto_in_d_bits_source: i6, auto_in_d_bits_data: i64) {sv.namehint = "plic.auto_in_d_valid"}
    hw.output %plic.auto_in_a_ready, %plic.auto_in_d_valid, %plic.auto_in_d_bits_opcode, %plic.auto_in_d_bits_size, %plic.auto_in_d_bits_source, %plic.auto_in_d_bits_data : i1, i1, i3, i2, i6, i64
  }
  hw.module private @TLMonitor_22(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i26, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c-512_i10 = hw.constant -512 : i10
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i26) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %13 = comb.icmp eq %io_in_a_bits_size, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %14 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i26) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "mask_eq"} : i1
    %16 = comb.and bin %13, %15 {sv.namehint = "_mask_acc_T"} : i1
    %17 = comb.or bin %12, %16 {sv.namehint = "mask_acc"} : i1
    %18 = comb.and bin %13, %14 {sv.namehint = "_mask_acc_T_1"} : i1
    %19 = comb.or bin %12, %18 {sv.namehint = "mask_acc_1"} : i1
    %20 = comb.icmp eq %io_in_a_bits_size, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %21 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i26) -> i1
    %22 = comb.xor bin %21, %true {sv.namehint = "mask_nbit_1"} : i1
    %23 = comb.and bin %15, %22 {sv.namehint = "mask_eq_2"} : i1
    %24 = comb.and bin %20, %23 {sv.namehint = "_mask_acc_T_2"} : i1
    %25 = comb.or bin %17, %24 {sv.namehint = "mask_acc_2"} : i1
    %26 = comb.and bin %15, %21 {sv.namehint = "mask_eq_3"} : i1
    %27 = comb.and bin %20, %26 {sv.namehint = "_mask_acc_T_3"} : i1
    %28 = comb.or bin %17, %27 {sv.namehint = "mask_acc_3"} : i1
    %29 = comb.and bin %14, %22 {sv.namehint = "mask_eq_4"} : i1
    %30 = comb.and bin %20, %29 {sv.namehint = "_mask_acc_T_4"} : i1
    %31 = comb.or bin %19, %30 {sv.namehint = "mask_acc_4"} : i1
    %32 = comb.and bin %14, %21 {sv.namehint = "mask_eq_5"} : i1
    %33 = comb.and bin %20, %32 {sv.namehint = "_mask_acc_T_5"} : i1
    %34 = comb.or bin %19, %33 {sv.namehint = "mask_acc_5"} : i1
    %35 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i26) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "mask_nbit_2"} : i1
    %37 = comb.and bin %23, %36 {sv.namehint = "mask_eq_6"} : i1
    %38 = comb.or bin %25, %37 {sv.namehint = "mask_lo_lo_lo"} : i1
    %39 = comb.and bin %23, %35 {sv.namehint = "mask_eq_7"} : i1
    %40 = comb.or bin %25, %39 {sv.namehint = "mask_lo_lo_hi"} : i1
    %41 = comb.and bin %26, %36 {sv.namehint = "mask_eq_8"} : i1
    %42 = comb.or bin %28, %41 {sv.namehint = "mask_lo_hi_lo"} : i1
    %43 = comb.and bin %26, %35 {sv.namehint = "mask_eq_9"} : i1
    %44 = comb.or bin %28, %43 {sv.namehint = "mask_lo_hi_hi"} : i1
    %45 = comb.and bin %29, %36 {sv.namehint = "mask_eq_10"} : i1
    %46 = comb.or bin %31, %45 {sv.namehint = "mask_hi_lo_lo"} : i1
    %47 = comb.and bin %29, %35 {sv.namehint = "mask_eq_11"} : i1
    %48 = comb.or bin %31, %47 {sv.namehint = "mask_hi_lo_hi"} : i1
    %49 = comb.and bin %32, %36 {sv.namehint = "mask_eq_12"} : i1
    %50 = comb.or bin %34, %49 {sv.namehint = "mask_hi_hi_lo"} : i1
    %51 = comb.and bin %32, %35 {sv.namehint = "mask_eq_13"} : i1
    %52 = comb.or bin %34, %51 {sv.namehint = "mask_hi_hi_hi"} : i1
    %53 = comb.concat %52, %50, %48, %46, %44, %42, %40, %38 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %54 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %55 = comb.and bin %io_in_a_valid, %54 : i1
    %56 = comb.xor bin %reset, %true : i1
    %57 = comb.and bin %55, %56 : i1
    %58 = comb.or bin %4, %reset : i1
    %59 = comb.xor bin %58, %true : i1
    %60 = comb.and bin %55, %59 : i1
    %61 = comb.or bin %12, %reset : i1
    %62 = comb.xor bin %61, %true : i1
    %63 = comb.and bin %55, %62 : i1
    %64 = comb.or bin %11, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %55, %65 : i1
    %67 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %68 = comb.or bin %67, %reset : i1
    %69 = comb.xor bin %68, %true : i1
    %70 = comb.and bin %55, %69 : i1
    %71 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %72 = comb.or bin %71, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %55, %73 : i1
    %75 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %55, %77 : i1
    %79 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %80 = comb.and bin %io_in_a_valid, %79 : i1
    %81 = comb.and bin %80, %56 : i1
    %82 = comb.and bin %80, %59 : i1
    %83 = comb.and bin %80, %62 : i1
    %84 = comb.and bin %80, %65 : i1
    %85 = comb.and bin %80, %69 : i1
    %86 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %87 = comb.or bin %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %80, %88 : i1
    %90 = comb.and bin %80, %73 : i1
    %91 = comb.and bin %80, %77 : i1
    %92 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %93 = comb.and bin %io_in_a_valid, %92 : i1
    %94 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %95 = comb.icmp bin ne %94, %c-1_i2 : i2
    %96 = comb.or bin %95, %reset : i1
    %97 = comb.xor bin %96, %true : i1
    %98 = comb.and bin %93, %97 : i1
    %99 = comb.extract %io_in_a_bits_address from 16 : (i26) -> i10
    %100 = comb.icmp eq %99, %c-512_i10 : i10
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %93, %102 : i1
    %104 = comb.and bin %93, %59 : i1
    %105 = comb.and bin %93, %65 : i1
    %106 = comb.xor bin %86, %true : i1
    %107 = comb.or bin %106, %reset : i1
    %108 = comb.xor bin %107, %true : i1
    %109 = comb.and bin %93, %108 : i1
    %110 = comb.icmp bin eq %io_in_a_bits_mask, %53 : i8
    %111 = comb.or bin %110, %reset : i1
    %112 = comb.xor bin %111, %true : i1
    %113 = comb.and bin %93, %112 : i1
    %114 = comb.and bin %93, %77 : i1
    %115 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %116 = comb.and bin %io_in_a_valid, %115 : i1
    %117 = comb.and bin %95, %100 : i1
    %118 = comb.or bin %117, %reset : i1
    %119 = comb.xor bin %118, %true : i1
    %120 = comb.and bin %116, %119 : i1
    %121 = comb.and bin %116, %59 : i1
    %122 = comb.and bin %116, %65 : i1
    %123 = comb.and bin %116, %108 : i1
    %124 = comb.and bin %116, %112 : i1
    %125 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %126 = comb.and bin %io_in_a_valid, %125 : i1
    %127 = comb.and bin %126, %119 : i1
    %128 = comb.and bin %126, %59 : i1
    %129 = comb.and bin %126, %65 : i1
    %130 = comb.and bin %126, %108 : i1
    %131 = comb.xor bin %53, %c-1_i8 : i8
    %132 = comb.and bin %io_in_a_bits_mask, %131 : i8
    %133 = comb.icmp bin eq %132, %c0_i8 : i8
    %134 = comb.or bin %133, %reset : i1
    %135 = comb.xor bin %134, %true : i1
    %136 = comb.and bin %126, %135 : i1
    %137 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %138 = comb.and bin %io_in_a_valid, %137 : i1
    %139 = comb.and bin %138, %56 : i1
    %140 = comb.and bin %138, %59 : i1
    %141 = comb.and bin %138, %65 : i1
    %142 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %143 = comb.or bin %142, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.and bin %138, %144 : i1
    %146 = comb.and bin %138, %112 : i1
    %147 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %148 = comb.and bin %io_in_a_valid, %147 : i1
    %149 = comb.and bin %148, %56 : i1
    %150 = comb.and bin %148, %59 : i1
    %151 = comb.and bin %148, %65 : i1
    %152 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %153 = comb.xor bin %152, %true : i1
    %154 = comb.or bin %153, %reset : i1
    %155 = comb.xor bin %154, %true : i1
    %156 = comb.and bin %148, %155 : i1
    %157 = comb.and bin %148, %112 : i1
    %158 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %159 = comb.and bin %io_in_a_valid, %158 : i1
    %160 = comb.and bin %159, %56 : i1
    %161 = comb.and bin %159, %59 : i1
    %162 = comb.and bin %159, %65 : i1
    %163 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %164 = comb.or bin %163, %reset : i1
    %165 = comb.xor bin %164, %true : i1
    %166 = comb.and bin %159, %165 : i1
    %167 = comb.and bin %159, %112 : i1
    %168 = comb.and bin %159, %77 : i1
    %169 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %170 = comb.or bin %169, %reset : i1
    %171 = comb.xor bin %170, %true : i1
    %172 = comb.and bin %io_in_d_valid, %171 : i1
    %173 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %174 = comb.icmp bin ne %173, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %175 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %176 = comb.and bin %io_in_d_valid, %175 : i1
    %177 = comb.or bin %174, %reset : i1
    %178 = comb.xor bin %177, %true : i1
    %179 = comb.and bin %176, %178 : i1
    %180 = comb.icmp bin eq %io_in_d_bits_size, %c-1_i2 : i2
    %181 = comb.or bin %180, %reset : i1
    %182 = comb.xor bin %181, %true : i1
    %183 = comb.and bin %176, %182 : i1
    %184 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %185 = comb.and bin %io_in_d_valid, %184 : i1
    %186 = comb.and bin %185, %178 : i1
    %187 = comb.and bin %185, %56 : i1
    %188 = comb.and bin %185, %182 : i1
    %189 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %190 = comb.and bin %io_in_d_valid, %189 : i1
    %191 = comb.and bin %190, %178 : i1
    %192 = comb.and bin %190, %56 : i1
    %193 = comb.and bin %190, %182 : i1
    %194 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %195 = comb.and bin %io_in_d_valid, %194 : i1
    %196 = comb.and bin %195, %178 : i1
    %197 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %198 = comb.and bin %io_in_d_valid, %197 : i1
    %199 = comb.and bin %198, %178 : i1
    %200 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %201 = comb.and bin %io_in_d_valid, %200 : i1
    %202 = comb.and bin %201, %178 : i1
    %203 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %208 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %204 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %205 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %206 = comb.xor %203, %true : i1
    %207 = comb.or %206, %204 : i1
    %208 = comb.and %207, %a_first_counter : i1
    %opcode = seq.firreg %231 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %232 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %233 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %234 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %235 clock %clock {firrtl.random_init_start = 15 : ui64} : i26
    %209 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %210 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %211 = comb.or bin %210, %reset : i1
    %212 = comb.xor bin %211, %true : i1
    %213 = comb.and bin %209, %212 : i1
    %214 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %215 = comb.or bin %214, %reset : i1
    %216 = comb.xor bin %215, %true : i1
    %217 = comb.and bin %209, %216 : i1
    %218 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %219 = comb.or bin %218, %reset : i1
    %220 = comb.xor bin %219, %true : i1
    %221 = comb.and bin %209, %220 : i1
    %222 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %223 = comb.or bin %222, %reset : i1
    %224 = comb.xor bin %223, %true : i1
    %225 = comb.and bin %209, %224 : i1
    %226 = comb.icmp bin eq %io_in_a_bits_address, %address : i26
    %227 = comb.or bin %226, %reset : i1
    %228 = comb.xor bin %227, %true : i1
    %229 = comb.and bin %209, %228 : i1
    %230 = comb.and bin %203, %205 : i1
    %231 = comb.mux bin %230, %io_in_a_bits_opcode, %opcode : i3
    %232 = comb.mux bin %230, %io_in_a_bits_param, %param : i3
    %233 = comb.mux bin %230, %io_in_a_bits_size, %size : i2
    %234 = comb.mux bin %230, %io_in_a_bits_source, %source : i6
    %235 = comb.mux bin %230, %io_in_a_bits_address, %address : i26
    %236 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %241 clock %clock reset sync %reset, %false {firrtl.random_init_start = 41 : ui64} : i1
    %237 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %238 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %239 = comb.xor %236, %true : i1
    %240 = comb.or %239, %237 : i1
    %241 = comb.and %240, %d_first_counter : i1
    %opcode_1 = seq.firreg %256 clock %clock {firrtl.random_init_start = 42 : ui64} : i3
    %size_1 = seq.firreg %257 clock %clock {firrtl.random_init_start = 47 : ui64} : i2
    %source_1 = seq.firreg %258 clock %clock {firrtl.random_init_start = 49 : ui64} : i6
    %242 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %243 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %244 = comb.or bin %243, %reset : i1
    %245 = comb.xor bin %244, %true : i1
    %246 = comb.and bin %242, %245 : i1
    %247 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %248 = comb.or bin %247, %reset : i1
    %249 = comb.xor bin %248, %true : i1
    %250 = comb.and bin %242, %249 : i1
    %251 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %252 = comb.or bin %251, %reset : i1
    %253 = comb.xor bin %252, %true : i1
    %254 = comb.and bin %242, %253 : i1
    %255 = comb.and bin %236, %238 : i1
    %256 = comb.mux bin %255, %io_in_d_bits_opcode, %opcode_1 : i3
    %257 = comb.mux bin %255, %io_in_d_bits_size, %size_1 : i2
    %258 = comb.mux bin %255, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %362 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 57 : ui64} : i48
    %inflight_opcodes = seq.firreg %365 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 105 : ui64} : i192
    %inflight_sizes = seq.firreg %368 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 297 : ui64} : i192
    %a_first_counter_1 = seq.firreg %263 clock %clock reset sync %reset, %false {firrtl.random_init_start = 489 : ui64} : i1
    %259 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %260 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %261 = comb.xor %203, %true : i1
    %262 = comb.or %261, %259 : i1
    %263 = comb.and %262, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %268 clock %clock reset sync %reset, %false {firrtl.random_init_start = 490 : ui64} : i1
    %264 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %265 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %266 = comb.xor %236, %true : i1
    %267 = comb.or %266, %264 : i1
    %268 = comb.and %267, %d_first_counter_1 : i1
    %269 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %270 = comb.shru bin %inflight_opcodes, %269 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %271 = comb.extract %270 from 1 : (i192) -> i3
    %272 = comb.shru bin %inflight_sizes, %269 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %273 = comb.extract %272 from 1 : (i192) -> i3
    %274 = comb.concat %false, %273 {sv.namehint = "a_size_lookup"} : i1, i3
    %275 = comb.and bin %203, %260 : i1
    %276 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %277 = comb.shl bin %c1_i64, %276 {sv.namehint = "_a_set_T"} : i64
    %278 = comb.extract %277 from 0 : (i64) -> i48
    %279 = comb.mux bin %275, %278, %c0_i48 {sv.namehint = "a_set"} : i48
    %280 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %281 = comb.mux bin %275, %280, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %282 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %283 = comb.mux bin %275, %282, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %284 = comb.concat %c0_i511, %281 : i511, i4
    %285 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %286 = comb.shl bin %284, %285 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %287 = comb.extract %286 from 0 : (i515) -> i192
    %288 = comb.mux bin %275, %287, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %289 = comb.concat %c0_i511, %283 : i511, i3
    %290 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %291 = comb.shl bin %289, %290 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %292 = comb.extract %291 from 0 : (i514) -> i192
    %293 = comb.mux bin %275, %292, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %294 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %295 = comb.shru bin %inflight, %294 : i48
    %296 = comb.extract %295 from 0 : (i48) -> i1
    %297 = comb.xor bin %296, %true : i1
    %298 = comb.or bin %297, %reset : i1
    %299 = comb.xor bin %298, %true : i1
    %300 = comb.and bin %275, %299 : i1
    %301 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %302 = comb.and bin %io_in_d_valid, %265 : i1
    %303 = comb.xor bin %301, %true : i1
    %304 = comb.and bin %236, %265, %303 : i1
    %305 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %306 = comb.shl bin %c1_i64, %305 {sv.namehint = "_d_clr_T"} : i64
    %307 = comb.extract %306 from 0 : (i64) -> i48
    %308 = comb.mux bin %304, %307, %c0_i48 {sv.namehint = "d_clr"} : i48
    %309 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %310 = comb.shl bin %c15_i527, %309 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %311 = comb.extract %310 from 0 : (i527) -> i192
    %312 = comb.mux bin %304, %311, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %313 = comb.shl bin %c15_i527, %309 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %314 = comb.extract %313 from 0 : (i527) -> i192
    %315 = comb.mux bin %304, %314, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %316 = comb.and bin %302, %303 : i1
    %317 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %318 = comb.and bin %io_in_a_valid, %260, %317 {sv.namehint = "same_cycle_resp"} : i1
    %319 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %320 = comb.shru bin %inflight, %319 : i48
    %321 = comb.extract %320 from 0 : (i48) -> i1
    %322 = comb.or bin %321, %318, %reset : i1
    %323 = comb.xor bin %322, %true : i1
    %324 = comb.and bin %316, %323 : i1
    %325 = comb.and bin %316, %318 : i1
    %326 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %327 = comb.icmp bin eq %io_in_d_bits_opcode, %326 : i3
    %328 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %329 = comb.icmp bin eq %io_in_d_bits_opcode, %328 : i3
    %330 = comb.or bin %327, %329, %reset : i1
    %331 = comb.xor bin %330, %true : i1
    %332 = comb.and bin %325, %331 : i1
    %333 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %334 = comb.or bin %333, %reset : i1
    %335 = comb.xor bin %334, %true : i1
    %336 = comb.and bin %325, %335 : i1
    %337 = comb.xor bin %318, %true : i1
    %338 = comb.and bin %316, %337 : i1
    %339 = hw.array_get %1[%271] : !hw.array<8xi3>, i3
    %340 = comb.icmp bin eq %io_in_d_bits_opcode, %339 : i3
    %341 = hw.array_get %0[%271] : !hw.array<8xi3>, i3
    %342 = comb.icmp bin eq %io_in_d_bits_opcode, %341 : i3
    %343 = comb.or bin %340, %342, %reset : i1
    %344 = comb.xor bin %343, %true : i1
    %345 = comb.and bin %338, %344 : i1
    %346 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %347 = comb.icmp bin eq %346, %274 : i4
    %348 = comb.or bin %347, %reset : i1
    %349 = comb.xor bin %348, %true : i1
    %350 = comb.and bin %338, %349 : i1
    %351 = comb.and bin %302, %260 : i1
    %352 = comb.and bin %351, %io_in_a_valid : i1
    %353 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %354 = comb.and bin %352, %353 : i1
    %355 = comb.and bin %354, %303 : i1
    %356 = comb.xor bin %io_in_d_ready, %true : i1
    %357 = comb.or bin %356, %io_in_a_ready, %reset : i1
    %358 = comb.xor bin %357, %true : i1
    %359 = comb.and bin %355, %358 : i1
    %360 = comb.or bin %inflight, %279 {sv.namehint = "_inflight_T"} : i48
    %361 = comb.xor bin %308, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %362 = comb.and bin %360, %361 {sv.namehint = "_inflight_T_2"} : i48
    %363 = comb.or bin %inflight_opcodes, %288 {sv.namehint = "_inflight_opcodes_T"} : i192
    %364 = comb.xor bin %312, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %365 = comb.and bin %363, %364 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %366 = comb.or bin %inflight_sizes, %293 {sv.namehint = "_inflight_sizes_T"} : i192
    %367 = comb.xor bin %315, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %368 = comb.and bin %366, %367 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %376 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 491 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %369 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %370 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %371 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %372 = comb.or bin %369, %370, %371, %reset : i1
    %373 = comb.xor bin %372, %true : i1
    %374 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %375 = comb.or bin %203, %236 : i1
    %376 = comb.mux bin %375, %c0_i32, %374 : i32
    %inflight_1 = seq.firreg %403 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 523 : ui64} : i48
    %inflight_sizes_1 = seq.firreg %405 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 763 : ui64} : i192
    %d_first_counter_2 = seq.firreg %381 clock %clock reset sync %reset, %false {firrtl.random_init_start = 956 : ui64} : i1
    %377 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %378 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %379 = comb.xor %236, %true : i1
    %380 = comb.or %379, %377 : i1
    %381 = comb.and %380, %d_first_counter_2 : i1
    %382 = comb.shru bin %inflight_sizes_1, %269 {sv.namehint = "_c_size_lookup_T_1"} : i192
    %383 = comb.extract %382 from 1 : (i192) -> i3
    %384 = comb.concat %false, %383 {sv.namehint = "c_size_lookup"} : i1, i3
    %385 = comb.and bin %236, %378, %301 : i1
    %386 = comb.shl bin %c1_i64, %305 {sv.namehint = "_d_clr_T_1"} : i64
    %387 = comb.extract %386 from 0 : (i64) -> i48
    %388 = comb.mux bin %385, %387, %c0_i48 {sv.namehint = "d_clr_1"} : i48
    %389 = comb.shl bin %c15_i527, %309 {sv.namehint = "_d_sizes_clr_T_11"} : i527
    %390 = comb.extract %389 from 0 : (i527) -> i192
    %391 = comb.mux bin %385, %390, %c0_i192 {sv.namehint = "d_sizes_clr_1"} : i192
    %392 = comb.and bin %io_in_d_valid, %378, %301 : i1
    %393 = comb.shru bin %inflight_1, %319 : i48
    %394 = comb.extract %393 from 0 : (i48) -> i1
    %395 = comb.or bin %394, %reset : i1
    %396 = comb.xor bin %395, %true : i1
    %397 = comb.and bin %392, %396 : i1
    %398 = comb.icmp bin eq %346, %384 : i4
    %399 = comb.or bin %398, %reset : i1
    %400 = comb.xor bin %399, %true : i1
    %401 = comb.and bin %392, %400 : i1
    %402 = comb.xor bin %388, %c-1_i48 {sv.namehint = "_inflight_T_4"} : i48
    %403 = comb.and bin %inflight_1, %402 {sv.namehint = "_inflight_T_5"} : i48
    %404 = comb.xor bin %391, %c-1_i192 {sv.namehint = "_inflight_sizes_T_4"} : i192
    %405 = comb.and bin %inflight_sizes_1, %404 {sv.namehint = "_inflight_sizes_T_5"} : i192
    %watchdog_1 = seq.firreg %412 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 957 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %406 = comb.icmp bin eq %inflight_1, %c0_i48 : i48
    %407 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %408 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %409 = comb.or bin %406, %407, %408, %reset : i1
    %410 = comb.xor bin %409, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %413 = comb.and bin %STOP_COND_, %false : i1
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %414 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %414 {
          sv.fatal 1
        }
        sv.if %414 {
          sv.fatal 1
        }
        %415 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %415 {
          sv.fatal 1
        }
        %416 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %416 {
          sv.fatal 1
        }
        %417 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %417 {
          sv.fatal 1
        }
        %418 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %418 {
          sv.fatal 1
        }
        %419 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %419 {
          sv.fatal 1
        }
        %420 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %420 {
          sv.fatal 1
        }
        %421 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %421 {
          sv.fatal 1
        }
        sv.if %421 {
          sv.fatal 1
        }
        %422 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %422 {
          sv.fatal 1
        }
        %423 = comb.and bin %STOP_COND_, %83 : i1
        sv.if %423 {
          sv.fatal 1
        }
        %424 = comb.and bin %STOP_COND_, %84 : i1
        sv.if %424 {
          sv.fatal 1
        }
        %425 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %425 {
          sv.fatal 1
        }
        %426 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %426 {
          sv.fatal 1
        }
        %427 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %427 {
          sv.fatal 1
        }
        %428 = comb.and bin %STOP_COND_, %91 : i1
        sv.if %428 {
          sv.fatal 1
        }
        %429 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %429 {
          sv.fatal 1
        }
        %430 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %430 {
          sv.fatal 1
        }
        %431 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %431 {
          sv.fatal 1
        }
        %432 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %432 {
          sv.fatal 1
        }
        %433 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %433 {
          sv.fatal 1
        }
        %434 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %434 {
          sv.fatal 1
        }
        %435 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %435 {
          sv.fatal 1
        }
        %436 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %436 {
          sv.fatal 1
        }
        %437 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %437 {
          sv.fatal 1
        }
        %438 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %438 {
          sv.fatal 1
        }
        %439 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %439 {
          sv.fatal 1
        }
        %440 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %440 {
          sv.fatal 1
        }
        %441 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %441 {
          sv.fatal 1
        }
        %442 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %442 {
          sv.fatal 1
        }
        %443 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %443 {
          sv.fatal 1
        }
        %444 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %444 {
          sv.fatal 1
        }
        %445 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %445 {
          sv.fatal 1
        }
        %446 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %446 {
          sv.fatal 1
        }
        %447 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %447 {
          sv.fatal 1
        }
        %448 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %448 {
          sv.fatal 1
        }
        %449 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %449 {
          sv.fatal 1
        }
        %450 = comb.and bin %STOP_COND_, %146 : i1
        sv.if %450 {
          sv.fatal 1
        }
        %451 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %451 {
          sv.fatal 1
        }
        %452 = comb.and bin %STOP_COND_, %150 : i1
        sv.if %452 {
          sv.fatal 1
        }
        %453 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %453 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %454 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %455 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %456 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %458 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %459 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %460 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %461 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %462 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %463 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %464 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %186 : i1
        sv.if %465 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %187 : i1
        sv.if %466 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %467 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %191 : i1
        sv.if %468 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %193 : i1
        sv.if %470 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %471 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %199 : i1
        sv.if %472 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %202 : i1
        sv.if %473 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %475 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %221 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %225 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %229 : i1
        sv.if %478 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %479 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %250 : i1
        sv.if %480 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %254 : i1
        sv.if %481 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %482 = comb.and bin %STOP_COND_, %300 : i1
        sv.if %482 {
          sv.fatal 1
        }
        %483 = comb.and bin %STOP_COND_, %324 : i1
        sv.if %483 {
          sv.fatal 1
        }
        %484 = comb.and bin %STOP_COND_, %332 : i1
        sv.if %484 {
          sv.fatal 1
        }
        %485 = comb.and bin %STOP_COND_, %336 : i1
        sv.if %485 {
          sv.fatal 1
        }
        %486 = comb.and bin %STOP_COND_, %345 : i1
        sv.if %486 {
          sv.fatal 1
        }
        %487 = comb.and bin %STOP_COND_, %350 : i1
        sv.if %487 {
          sv.fatal 1
        }
        %488 = comb.and bin %STOP_COND_, %359 : i1
        sv.if %488 {
          sv.fatal 1
        }
        %489 = comb.and bin %STOP_COND_, %373 : i1
        sv.if %489 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %490 = comb.and bin %STOP_COND_, %397 : i1
        sv.if %490 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %491 = comb.and bin %STOP_COND_, %401 : i1
        sv.if %491 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %492 = comb.and bin %STOP_COND_, %410 : i1
        sv.if %492 {
          sv.fatal 1
        }
      }
    }
    %411 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %412 = comb.mux bin %236, %c0_i32, %411 : i32
    hw.output
  }
  hw.module private @CLINT(in %clock : !seq.clock, in %reset : i1, out auto_int_out_0 : i1, out auto_int_out_1 : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i2, in %auto_in_a_bits_source : i6, in %auto_in_a_bits_address : i26, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_data : i64, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i6, out auto_in_d_bits_data : i64) {
    %c0_i63 = hw.constant 0 : i63
    %c-2_i2 = hw.constant -2 : i2
    %c1_i2 = hw.constant 1 : i2
    %c-1_i11 = hw.constant -1 : i11
    %c0_i11 = hw.constant 0 : i11
    %c0_i2 = hw.constant 0 : i2
    %c-4_i3 = hw.constant -4 : i3
    %true = hw.constant true
    %c0_i64 = hw.constant 0 : i64
    %false = hw.constant false
    hw.instance "monitor" @TLMonitor_22(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_in_d_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i2, io_in_a_bits_source: %auto_in_a_bits_source: i6, io_in_a_bits_address: %auto_in_a_bits_address: i26, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_in_a_valid: i1, io_in_d_bits_opcode: %92: i3, io_in_d_bits_size: %auto_in_a_bits_size: i2, io_in_d_bits_source: %auto_in_a_bits_source: i6) -> ()
    %time = seq.firreg %22 clock %clock reset sync %reset, %c0_i64 {firrtl.random_init_start = 0 : ui64, sv.namehint = "time"} : i64
    %pad = seq.firreg %11 clock %clock {firrtl.random_init_start = 64 : ui64, sv.namehint = "pad"} : i64
    %ipi_0 = seq.firreg %37 clock %clock reset sync %reset, %false {firrtl.random_init_start = 128 : ui64, sv.namehint = "ipi_0"} : i1
    %0 = comb.icmp bin uge %time, %pad {sv.namehint = "intnode_out_0_1"} : i64
    %1 = comb.extract %pad from 0 {sv.namehint = "oldBytes_0"} : (i64) -> i8
    %2 = comb.extract %pad from 8 {sv.namehint = "oldBytes_1"} : (i64) -> i8
    %3 = comb.extract %pad from 16 {sv.namehint = "oldBytes_2"} : (i64) -> i8
    %4 = comb.extract %pad from 24 {sv.namehint = "oldBytes_3"} : (i64) -> i8
    %5 = comb.extract %pad from 32 {sv.namehint = "oldBytes_4"} : (i64) -> i8
    %6 = comb.extract %pad from 40 {sv.namehint = "oldBytes_5"} : (i64) -> i8
    %7 = comb.extract %pad from 48 {sv.namehint = "oldBytes_6"} : (i64) -> i8
    %8 = comb.extract %pad from 56 {sv.namehint = "oldBytes_7"} : (i64) -> i8
    %9 = comb.or bin %38, %41, %44, %47, %50, %53, %56, %59 : i1
    %10 = comb.concat %61, %58, %55, %52, %49, %46, %43, %40 {sv.namehint = "_timecmp_0_T"} : i8, i8, i8, i8, i8, i8, i8, i8
    %11 = comb.mux bin %9, %10, %pad : i64
    %12 = comb.extract %time from 0 {sv.namehint = "oldBytes_1_0"} : (i64) -> i8
    %13 = comb.extract %time from 8 {sv.namehint = "oldBytes_1_1"} : (i64) -> i8
    %14 = comb.extract %time from 16 {sv.namehint = "oldBytes_1_2"} : (i64) -> i8
    %15 = comb.extract %time from 24 {sv.namehint = "oldBytes_1_3"} : (i64) -> i8
    %16 = comb.extract %time from 32 {sv.namehint = "oldBytes_1_4"} : (i64) -> i8
    %17 = comb.extract %time from 40 {sv.namehint = "oldBytes_1_5"} : (i64) -> i8
    %18 = comb.extract %time from 48 {sv.namehint = "oldBytes_1_6"} : (i64) -> i8
    %19 = comb.extract %time from 56 {sv.namehint = "oldBytes_1_7"} : (i64) -> i8
    %20 = comb.or bin %62, %64, %66, %68, %70, %72, %74, %76 : i1
    %21 = comb.concat %77, %75, %73, %71, %69, %67, %65, %63 {sv.namehint = "_time_T_2"} : i8, i8, i8, i8, i8, i8, i8, i8
    %22 = comb.mux bin %20, %21, %time : i64
    %23 = comb.icmp bin eq %auto_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %24 = comb.extract %auto_in_a_bits_address from 3 : (i26) -> i11
    %25 = comb.icmp bin eq %24, %c0_i11 {sv.namehint = "_out_T_3"} : i11
    %26 = comb.icmp bin eq %24, %c-1_i11 {sv.namehint = "_out_T_5"} : i11
    %27 = comb.extract %auto_in_a_bits_mask from 0 {sv.namehint = "_out_backMask_T_8"} : (i8) -> i1
    %28 = comb.extract %auto_in_a_bits_mask from 1 {sv.namehint = "_out_backMask_T_9"} : (i8) -> i1
    %29 = comb.extract %auto_in_a_bits_mask from 2 {sv.namehint = "_out_backMask_T_10"} : (i8) -> i1
    %30 = comb.extract %auto_in_a_bits_mask from 3 {sv.namehint = "_out_backMask_T_11"} : (i8) -> i1
    %31 = comb.extract %auto_in_a_bits_mask from 4 {sv.namehint = "_out_backMask_T_12"} : (i8) -> i1
    %32 = comb.extract %auto_in_a_bits_mask from 5 {sv.namehint = "_out_backMask_T_13"} : (i8) -> i1
    %33 = comb.extract %auto_in_a_bits_mask from 6 {sv.namehint = "_out_backMask_T_14"} : (i8) -> i1
    %34 = comb.extract %auto_in_a_bits_mask from 7 {sv.namehint = "_out_backMask_T_15"} : (i8) -> i1
    %35 = comb.and bin %83, %79, %25, %27 {sv.namehint = "out_f_woready"} : i1
    %36 = comb.extract %auto_in_a_bits_data from 0 {sv.namehint = "_out_T_6"} : (i64) -> i1
    %37 = comb.mux bin %35, %36, %ipi_0 : i1
    %38 = comb.and bin %84, %27 {sv.namehint = "valids_0"} : i1
    %39 = comb.extract %auto_in_a_bits_data from 0 {sv.namehint = "_out_T_114"} : (i64) -> i8
    %40 = comb.mux bin %38, %39, %1 {sv.namehint = "newBytes_0"} : i8
    %41 = comb.and bin %84, %28 {sv.namehint = "valids_1"} : i1
    %42 = comb.extract %auto_in_a_bits_data from 8 {sv.namehint = "_out_T_125"} : (i64) -> i8
    %43 = comb.mux bin %41, %42, %2 {sv.namehint = "newBytes_1"} : i8
    %44 = comb.and bin %84, %29 {sv.namehint = "valids_2"} : i1
    %45 = comb.extract %auto_in_a_bits_data from 16 {sv.namehint = "_out_T_136"} : (i64) -> i8
    %46 = comb.mux bin %44, %45, %3 {sv.namehint = "newBytes_2"} : i8
    %47 = comb.and bin %84, %30 {sv.namehint = "valids_3"} : i1
    %48 = comb.extract %auto_in_a_bits_data from 24 {sv.namehint = "_out_T_147"} : (i64) -> i8
    %49 = comb.mux bin %47, %48, %4 {sv.namehint = "newBytes_3"} : i8
    %50 = comb.and bin %84, %31 {sv.namehint = "valids_4"} : i1
    %51 = comb.extract %auto_in_a_bits_data from 32 {sv.namehint = "_out_T_158"} : (i64) -> i8
    %52 = comb.mux bin %50, %51, %5 {sv.namehint = "newBytes_4"} : i8
    %53 = comb.and bin %84, %32 {sv.namehint = "valids_5"} : i1
    %54 = comb.extract %auto_in_a_bits_data from 40 {sv.namehint = "_out_T_169"} : (i64) -> i8
    %55 = comb.mux bin %53, %54, %6 {sv.namehint = "newBytes_5"} : i8
    %56 = comb.and bin %84, %33 {sv.namehint = "valids_6"} : i1
    %57 = comb.extract %auto_in_a_bits_data from 48 {sv.namehint = "_out_T_180"} : (i64) -> i8
    %58 = comb.mux bin %56, %57, %7 {sv.namehint = "newBytes_6"} : i8
    %59 = comb.and bin %84, %34 {sv.namehint = "valids_7"} : i1
    %60 = comb.extract %auto_in_a_bits_data from 56 {sv.namehint = "_out_T_191"} : (i64) -> i8
    %61 = comb.mux bin %59, %60, %8 {sv.namehint = "newBytes_7"} : i8
    %62 = comb.and bin %85, %27 {sv.namehint = "valids_1_0"} : i1
    %63 = comb.mux bin %62, %39, %12 {sv.namehint = "newBytes_1_0"} : i8
    %64 = comb.and bin %85, %28 {sv.namehint = "valids_1_1"} : i1
    %65 = comb.mux bin %64, %42, %13 {sv.namehint = "newBytes_1_1"} : i8
    %66 = comb.and bin %85, %29 {sv.namehint = "valids_1_2"} : i1
    %67 = comb.mux bin %66, %45, %14 {sv.namehint = "newBytes_1_2"} : i8
    %68 = comb.and bin %85, %30 {sv.namehint = "valids_1_3"} : i1
    %69 = comb.mux bin %68, %48, %15 {sv.namehint = "newBytes_1_3"} : i8
    %70 = comb.and bin %85, %31 {sv.namehint = "valids_1_4"} : i1
    %71 = comb.mux bin %70, %51, %16 {sv.namehint = "newBytes_1_4"} : i8
    %72 = comb.and bin %85, %32 {sv.namehint = "valids_1_5"} : i1
    %73 = comb.mux bin %72, %54, %17 {sv.namehint = "newBytes_1_5"} : i8
    %74 = comb.and bin %85, %33 {sv.namehint = "valids_1_6"} : i1
    %75 = comb.mux bin %74, %57, %18 {sv.namehint = "newBytes_1_6"} : i8
    %76 = comb.and bin %85, %34 {sv.namehint = "valids_1_7"} : i1
    %77 = comb.mux bin %76, %60, %19 {sv.namehint = "newBytes_1_7"} : i8
    %78 = comb.extract %auto_in_a_bits_address from 14 {sv.namehint = "out_oindex"} : (i26) -> i2
    %79 = comb.icmp eq %78, %c0_i2 {sv.namehint = "out_backSel_0"} : i2
    %80 = comb.icmp eq %78, %c1_i2 {sv.namehint = "out_backSel_1"} : i2
    %81 = comb.icmp eq %78, %c-2_i2 {sv.namehint = "out_backSel_2"} : i2
    %82 = comb.xor bin %23, %true {sv.namehint = "_out_wofireMux_T_1"} : i1
    %83 = comb.and bin %auto_in_a_valid, %auto_in_d_ready, %82 {sv.namehint = "_out_wofireMux_T_2"} : i1
    %84 = comb.and bin %83, %80, %25 {sv.namehint = "out_woready_9"} : i1
    %85 = comb.and bin %83, %81, %26 {sv.namehint = "out_woready_17"} : i1
    %86 = hw.array_create %true, %26, %25, %25 : i1
    %87 = hw.array_get %86[%78] : !hw.array<4xi1>, i2
    %88 = comb.concat %c0_i63, %ipi_0 {sv.namehint = "_out_out_bits_data_WIRE_1_0"} : i63, i1
    %89 = hw.array_create %c0_i64, %time, %pad, %88 : i64
    %90 = hw.array_get %89[%78] : !hw.array<4xi64>, i2
    %91 = comb.mux bin %87, %90, %c0_i64 {sv.namehint = "out_bits_data"} : i64
    %92 = comb.concat %c0_i2, %23 {sv.namehint = "bundleIn_0_d_bits_opcode"} : i2, i1
    hw.output %ipi_0, %0, %auto_in_d_ready, %auto_in_a_valid, %92, %auto_in_a_bits_size, %auto_in_a_bits_source, %91 : i1, i1, i1, i1, i3, i2, i6, i64
  }
  hw.module private @TLMonitor_23(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i9, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i2, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c-1_i2 = hw.constant -1 : i2
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-1_i4 = hw.constant -1 : i4
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.and bin %io_in_a_valid, %5 : i1
    %7 = comb.xor bin %reset, %true : i1
    %8 = comb.and bin %6, %7 : i1
    %9 = comb.or bin %4, %reset : i1
    %10 = comb.xor bin %9, %true : i1
    %11 = comb.and bin %6, %10 : i1
    %12 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %13 = comb.and bin %io_in_a_valid, %12 : i1
    %14 = comb.and bin %13, %7 : i1
    %15 = comb.and bin %13, %10 : i1
    %16 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %17 = comb.and bin %io_in_a_valid, %16 : i1
    %18 = comb.and bin %17, %10 : i1
    %19 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %20 = comb.and bin %io_in_a_valid, %19 : i1
    %21 = comb.and bin %20, %10 : i1
    %22 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %23 = comb.and bin %io_in_a_valid, %22 : i1
    %24 = comb.and bin %23, %7 : i1
    %25 = comb.and bin %23, %10 : i1
    %26 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %27 = comb.and bin %io_in_a_valid, %26 : i1
    %28 = comb.and bin %27, %7 : i1
    %29 = comb.and bin %27, %10 : i1
    %30 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %31 = comb.and bin %io_in_a_valid, %30 : i1
    %32 = comb.and bin %31, %7 : i1
    %33 = comb.and bin %31, %10 : i1
    %34 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %35 = comb.and bin %io_in_a_valid, %34 : i1
    %36 = comb.and bin %35, %7 : i1
    %37 = comb.and bin %35, %10 : i1
    %38 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %39 = comb.or bin %38, %reset : i1
    %40 = comb.xor bin %39, %true : i1
    %41 = comb.and bin %io_in_d_valid, %40 : i1
    %42 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %43 = comb.and bin %io_in_d_valid, %42 : i1
    %44 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %45 = comb.or bin %44, %reset : i1
    %46 = comb.xor bin %45, %true : i1
    %47 = comb.and bin %43, %46 : i1
    %48 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %49 = comb.or bin %48, %reset : i1
    %50 = comb.xor bin %49, %true : i1
    %51 = comb.and bin %43, %50 : i1
    %52 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %53 = comb.or bin %52, %reset : i1
    %54 = comb.xor bin %53, %true : i1
    %55 = comb.and bin %43, %54 : i1
    %56 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %57 = comb.or bin %56, %reset : i1
    %58 = comb.xor bin %57, %true : i1
    %59 = comb.and bin %43, %58 : i1
    %60 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %61 = comb.and bin %io_in_d_valid, %60 : i1
    %62 = comb.and bin %61, %7 : i1
    %63 = comb.and bin %61, %46 : i1
    %64 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %65 = comb.or bin %64, %reset : i1
    %66 = comb.xor bin %65, %true : i1
    %67 = comb.and bin %61, %66 : i1
    %68 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %69 = comb.or bin %68, %reset : i1
    %70 = comb.xor bin %69, %true : i1
    %71 = comb.and bin %61, %70 : i1
    %72 = comb.and bin %61, %54 : i1
    %73 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %74 = comb.and bin %io_in_d_valid, %73 : i1
    %75 = comb.and bin %74, %7 : i1
    %76 = comb.and bin %74, %46 : i1
    %77 = comb.and bin %74, %66 : i1
    %78 = comb.and bin %74, %70 : i1
    %79 = comb.or bin %56, %io_in_d_bits_corrupt, %reset : i1
    %80 = comb.xor bin %79, %true : i1
    %81 = comb.and bin %74, %80 : i1
    %82 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %83 = comb.and bin %io_in_d_valid, %82 : i1
    %84 = comb.and bin %83, %50 : i1
    %85 = comb.and bin %83, %54 : i1
    %86 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %87 = comb.and bin %io_in_d_valid, %86 : i1
    %88 = comb.and bin %87, %50 : i1
    %89 = comb.and bin %87, %80 : i1
    %90 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %91 = comb.and bin %io_in_d_valid, %90 : i1
    %92 = comb.and bin %91, %50 : i1
    %93 = comb.and bin %91, %54 : i1
    %94 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %99 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %95 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %96 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %97 = comb.xor %94, %true : i1
    %98 = comb.or %97, %95 : i1
    %99 = comb.and %98, %a_first_counter : i1
    %opcode = seq.firreg %110 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %111 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %100 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %101 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %102 = comb.or bin %101, %reset : i1
    %103 = comb.xor bin %102, %true : i1
    %104 = comb.and bin %100, %103 : i1
    %105 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %106 = comb.or bin %105, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %100, %107 : i1
    %109 = comb.and bin %94, %96 : i1
    %110 = comb.mux bin %109, %io_in_a_bits_opcode, %opcode : i3
    %111 = comb.mux bin %109, %io_in_a_bits_address, %address : i9
    %112 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %117 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %113 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %114 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %115 = comb.xor %112, %true : i1
    %116 = comb.or %115, %113 : i1
    %117 = comb.and %116, %d_first_counter : i1
    %opcode_1 = seq.firreg %140 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %param_1 = seq.firreg %141 clock %clock {firrtl.random_init_start = 23 : ui64} : i2
    %size_1 = seq.firreg %142 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %sink = seq.firreg %143 clock %clock {firrtl.random_init_start = 28 : ui64} : i1
    %denied = seq.firreg %144 clock %clock {firrtl.random_init_start = 29 : ui64} : i1
    %118 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %119 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %120 = comb.or bin %119, %reset : i1
    %121 = comb.xor bin %120, %true : i1
    %122 = comb.and bin %118, %121 : i1
    %123 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %124 = comb.or bin %123, %reset : i1
    %125 = comb.xor bin %124, %true : i1
    %126 = comb.and bin %118, %125 : i1
    %127 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %128 = comb.or bin %127, %reset : i1
    %129 = comb.xor bin %128, %true : i1
    %130 = comb.and bin %118, %129 : i1
    %131 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %132 = comb.or bin %131, %reset : i1
    %133 = comb.xor bin %132, %true : i1
    %134 = comb.and bin %118, %133 : i1
    %135 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %136 = comb.or bin %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %138 = comb.and bin %118, %137 : i1
    %139 = comb.and bin %112, %114 : i1
    %140 = comb.mux bin %139, %io_in_d_bits_opcode, %opcode_1 : i3
    %141 = comb.mux bin %139, %io_in_d_bits_param, %param_1 : i2
    %142 = comb.mux bin %139, %io_in_d_bits_size, %size_1 : i2
    %143 = comb.mux bin %139, %io_in_d_bits_sink, %sink : i1
    %144 = comb.mux bin %139, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %213 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %216 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %219 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %149 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %145 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %146 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %147 = comb.xor %94, %true : i1
    %148 = comb.or %147, %145 : i1
    %149 = comb.and %148, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %154 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %150 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %151 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %152 = comb.xor %112, %true : i1
    %153 = comb.or %152, %150 : i1
    %154 = comb.and %153, %d_first_counter_1 : i1
    %155 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %156 = comb.extract %inflight_sizes from 1 : (i4) -> i3
    %157 = comb.concat %false, %156 {sv.namehint = "a_size_lookup"} : i1, i3
    %158 = comb.and bin %io_in_a_valid, %146 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %159 = comb.and bin %94, %146 {sv.namehint = "a_set"} : i1
    %160 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %161 = comb.mux bin %159, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %162 = comb.mux bin %159, %160, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %163 = comb.concat %false, %161 : i1, i3
    %164 = comb.mux bin %159, %163, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %165 = comb.xor bin %inflight, %true : i1
    %166 = comb.or bin %165, %reset : i1
    %167 = comb.xor bin %166, %true : i1
    %168 = comb.and bin %159, %167 : i1
    %169 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %170 = comb.and bin %io_in_d_valid, %151 : i1
    %171 = comb.xor bin %169, %true : i1
    %172 = comb.and bin %112, %151, %171 {sv.namehint = "d_clr"} : i1
    %173 = comb.replicate %172 {sv.namehint = "d_sizes_clr"} : (i1) -> i4
    %174 = comb.and bin %170, %171 : i1
    %175 = comb.or bin %inflight, %158, %reset : i1
    %176 = comb.xor bin %175, %true : i1
    %177 = comb.and bin %174, %176 : i1
    %178 = comb.and bin %174, %158 : i1
    %179 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %180 = comb.icmp bin eq %io_in_d_bits_opcode, %179 : i3
    %181 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %182 = comb.icmp bin eq %io_in_d_bits_opcode, %181 : i3
    %183 = comb.or bin %180, %182, %reset : i1
    %184 = comb.xor bin %183, %true : i1
    %185 = comb.and bin %178, %184 : i1
    %186 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %187 = comb.or bin %186, %reset : i1
    %188 = comb.xor bin %187, %true : i1
    %189 = comb.and bin %178, %188 : i1
    %190 = comb.xor bin %158, %true : i1
    %191 = comb.and bin %174, %190 : i1
    %192 = hw.array_get %1[%155] : !hw.array<8xi3>, i3
    %193 = comb.icmp bin eq %io_in_d_bits_opcode, %192 : i3
    %194 = hw.array_get %0[%155] : !hw.array<8xi3>, i3
    %195 = comb.icmp bin eq %io_in_d_bits_opcode, %194 : i3
    %196 = comb.or bin %193, %195, %reset : i1
    %197 = comb.xor bin %196, %true : i1
    %198 = comb.and bin %191, %197 : i1
    %199 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %200 = comb.icmp bin eq %199, %157 : i4
    %201 = comb.or bin %200, %reset : i1
    %202 = comb.xor bin %201, %true : i1
    %203 = comb.and bin %191, %202 : i1
    %204 = comb.and bin %170, %146 : i1
    %205 = comb.and bin %204, %io_in_a_valid : i1
    %206 = comb.and bin %205, %171 : i1
    %207 = comb.xor bin %io_in_d_ready, %true : i1
    %208 = comb.or bin %207, %io_in_a_ready, %reset : i1
    %209 = comb.xor bin %208, %true : i1
    %210 = comb.and bin %206, %209 : i1
    %211 = comb.or bin %inflight, %159 {sv.namehint = "_inflight_T"} : i1
    %212 = comb.xor bin %172, %true {sv.namehint = "_inflight_T_1"} : i1
    %213 = comb.and bin %211, %212 {sv.namehint = "_inflight_T_2"} : i1
    %214 = comb.or bin %inflight_opcodes, %162 {sv.namehint = "_inflight_opcodes_T"} : i4
    %215 = comb.xor bin %173, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %216 = comb.and bin %214, %215 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %217 = comb.or bin %inflight_sizes, %164 {sv.namehint = "_inflight_sizes_T"} : i4
    %218 = comb.xor bin %173, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %219 = comb.and bin %217, %218 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %226 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %220 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %221 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %222 = comb.or bin %165, %220, %221, %reset : i1
    %223 = comb.xor bin %222, %true : i1
    %224 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %225 = comb.or bin %94, %112 : i1
    %226 = comb.mux bin %225, %c0_i32, %224 : i32
    %inflight_1 = seq.firreg %245 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %247 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %231 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %227 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %228 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %229 = comb.xor %112, %true : i1
    %230 = comb.or %229, %227 : i1
    %231 = comb.and %230, %d_first_counter_2 : i1
    %232 = comb.extract %inflight_sizes_1 from 1 : (i4) -> i3
    %233 = comb.concat %false, %232 {sv.namehint = "c_size_lookup"} : i1, i3
    %234 = comb.and bin %112, %228, %169 {sv.namehint = "d_clr_1"} : i1
    %235 = comb.replicate %234 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i4
    %236 = comb.and bin %io_in_d_valid, %228, %169 : i1
    %237 = comb.or bin %inflight_1, %reset : i1
    %238 = comb.xor bin %237, %true : i1
    %239 = comb.and bin %236, %238 : i1
    %240 = comb.icmp bin eq %199, %233 : i4
    %241 = comb.or bin %240, %reset : i1
    %242 = comb.xor bin %241, %true : i1
    %243 = comb.and bin %236, %242 : i1
    %244 = comb.xor bin %234, %true {sv.namehint = "_inflight_T_4"} : i1
    %245 = comb.and bin %inflight_1, %244 {sv.namehint = "_inflight_T_5"} : i1
    %246 = comb.xor bin %235, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %247 = comb.and bin %inflight_sizes_1, %246 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %254 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %248 = comb.xor bin %inflight_1, %true : i1
    %249 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %250 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %251 = comb.or bin %248, %249, %250, %reset : i1
    %252 = comb.xor bin %251, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %255 = comb.and bin %STOP_COND_, %false : i1
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %256 = comb.and bin %STOP_COND_, %8 : i1
        sv.if %256 {
          sv.fatal 1
        }
        sv.if %256 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %257 = comb.and bin %STOP_COND_, %11 : i1
        sv.if %257 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %258 = comb.and bin %STOP_COND_, %14 : i1
        sv.if %258 {
          sv.fatal 1
        }
        sv.if %258 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %259 = comb.and bin %STOP_COND_, %15 : i1
        sv.if %259 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %258 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %260 = comb.and bin %STOP_COND_, %18 : i1
        sv.if %260 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %261 = comb.and bin %STOP_COND_, %21 : i1
        sv.if %261 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %262 = comb.and bin %STOP_COND_, %24 : i1
        sv.if %262 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %263 = comb.and bin %STOP_COND_, %25 : i1
        sv.if %263 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %264 = comb.and bin %STOP_COND_, %28 : i1
        sv.if %264 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %265 = comb.and bin %STOP_COND_, %29 : i1
        sv.if %265 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %266 = comb.and bin %STOP_COND_, %32 : i1
        sv.if %266 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %267 = comb.and bin %STOP_COND_, %33 : i1
        sv.if %267 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %268 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %268 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %269 = comb.and bin %STOP_COND_, %37 : i1
        sv.if %269 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %270 = comb.and bin %STOP_COND_, %41 : i1
        sv.if %270 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %271 = comb.and bin %STOP_COND_, %47 : i1
        sv.if %271 {
          sv.fatal 1
        }
        %272 = comb.and bin %STOP_COND_, %51 : i1
        sv.if %272 {
          sv.fatal 1
        }
        %273 = comb.and bin %STOP_COND_, %55 : i1
        sv.if %273 {
          sv.fatal 1
        }
        %274 = comb.and bin %STOP_COND_, %59 : i1
        sv.if %274 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %275 = comb.and bin %STOP_COND_, %62 : i1
        sv.if %275 {
          sv.fatal 1
        }
        %276 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %276 {
          sv.fatal 1
        }
        %277 = comb.and bin %STOP_COND_, %67 : i1
        sv.if %277 {
          sv.fatal 1
        }
        %278 = comb.and bin %STOP_COND_, %71 : i1
        sv.if %278 {
          sv.fatal 1
        }
        %279 = comb.and bin %STOP_COND_, %72 : i1
        sv.if %279 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %280 = comb.and bin %STOP_COND_, %75 : i1
        sv.if %280 {
          sv.fatal 1
        }
        %281 = comb.and bin %STOP_COND_, %76 : i1
        sv.if %281 {
          sv.fatal 1
        }
        %282 = comb.and bin %STOP_COND_, %77 : i1
        sv.if %282 {
          sv.fatal 1
        }
        %283 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %283 {
          sv.fatal 1
        }
        %284 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %284 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %285 = comb.and bin %STOP_COND_, %84 : i1
        sv.if %285 {
          sv.fatal 1
        }
        %286 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %286 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %287 = comb.and bin %STOP_COND_, %88 : i1
        sv.if %287 {
          sv.fatal 1
        }
        %288 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %288 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %289 = comb.and bin %STOP_COND_, %92 : i1
        sv.if %289 {
          sv.fatal 1
        }
        %290 = comb.and bin %STOP_COND_, %93 : i1
        sv.if %290 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %291 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %291 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %292 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %292 {
          sv.fatal 1
        }
        %293 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %293 {
          sv.fatal 1
        }
        %294 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %294 {
          sv.fatal 1
        }
        %295 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %295 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %296 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %296 {
          sv.fatal 1
        }
        %297 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %297 {
          sv.fatal 1
        }
        %298 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %298 {
          sv.fatal 1
        }
        %299 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %299 {
          sv.fatal 1
        }
        %300 = comb.and bin %STOP_COND_, %185 : i1
        sv.if %300 {
          sv.fatal 1
        }
        %301 = comb.and bin %STOP_COND_, %189 : i1
        sv.if %301 {
          sv.fatal 1
        }
        %302 = comb.and bin %STOP_COND_, %198 : i1
        sv.if %302 {
          sv.fatal 1
        }
        %303 = comb.and bin %STOP_COND_, %203 : i1
        sv.if %303 {
          sv.fatal 1
        }
        %304 = comb.and bin %STOP_COND_, %210 : i1
        sv.if %304 {
          sv.fatal 1
        }
        %305 = comb.and bin %STOP_COND_, %223 : i1
        sv.if %305 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %306 = comb.and bin %STOP_COND_, %239 : i1
        sv.if %306 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %307 = comb.and bin %STOP_COND_, %243 : i1
        sv.if %307 {
          sv.fatal 1
        }
        sv.if %255 {
          sv.fatal 1
        }
        %308 = comb.and bin %STOP_COND_, %252 : i1
        sv.if %308 {
          sv.fatal 1
        }
      }
    }
    %253 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %254 = comb.mux bin %112, %c0_i32, %253 : i32
    hw.output
  }
  hw.module private @TLXbar_9(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i9, in %auto_in_a_bits_data : i32, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i32, out auto_in_d_bits_corrupt : i1, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_address : i7, out auto_out_1_a_bits_data : i32, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_data : i32, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_address : i9, out auto_out_0_a_bits_data : i32, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_param : i2, in %auto_out_0_d_bits_size : i2, in %auto_out_0_d_bits_sink : i1, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_data : i32, in %auto_out_0_d_bits_corrupt : i1) {
    %c-6_i4 = hw.constant -6 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-5_i4 = hw.constant -5 : i4
    %c-15_i5 = hw.constant -15 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i6 = hw.constant 0 : i6
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    %c0_i32 = hw.constant 0 : i32
    %c0_i3 = hw.constant 0 : i3
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_23(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %40: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i9, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %92: i1, io_in_d_bits_opcode: %105: i3, io_in_d_bits_param: %102: i2, io_in_d_bits_size: %101: i2, io_in_d_bits_sink: %98: i1, io_in_d_bits_denied: %97: i1, io_in_d_bits_corrupt: %93: i1) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 0 {sv.namehint = "bundleOut_1_out_1_bits_address"} : (i9) -> i7
    %2 = comb.extract %auto_in_a_bits_address from 6 : (i9) -> i3
    %3 = comb.icmp bin eq %2, %c0_i3 {sv.namehint = "_requestAIO_T_4"} : i3
    %4 = comb.extract %auto_in_a_bits_address from 7 : (i9) -> i2
    %5 = comb.extract %auto_in_a_bits_address from 2 : (i9) -> i5
    %6 = comb.xor %5, %c-15_i5 : i5
    %7 = comb.extract %6 from 2 : (i5) -> i3
    %8 = comb.extract %6 from 0 : (i5) -> i1
    %9 = comb.concat %4, %7, %8 : i2, i3, i1
    %10 = comb.icmp bin eq %9, %c0_i6 {sv.namehint = "_requestAIO_T_9"} : i6
    %11 = comb.extract %auto_in_a_bits_address from 3 : (i9) -> i4
    %12 = comb.xor %11, %c-5_i4 : i4
    %13 = comb.concat %4, %12 : i2, i4
    %14 = comb.icmp bin eq %13, %c0_i6 {sv.namehint = "_requestAIO_T_14"} : i6
    %15 = comb.extract %auto_in_a_bits_address from 5 : (i9) -> i2
    %16 = comb.xor %15, %c-1_i2 : i2
    %17 = comb.concat %4, %16 : i2, i2
    %18 = comb.icmp bin eq %17, %c0_i4 {sv.namehint = "_requestAIO_T_19"} : i4
    %19 = comb.extract %auto_in_a_bits_address from 8 : (i9) -> i1
    %20 = comb.extract %auto_in_a_bits_address from 7 : (i9) -> i1
    %21 = comb.xor %20, %true : i1
    %22 = comb.concat %19, %21 : i1, i1
    %23 = comb.icmp bin eq %22, %c0_i2 {sv.namehint = "_requestAIO_T_24"} : i2
    %24 = comb.extract %auto_in_a_bits_address from 8 : (i9) -> i1
    %25 = comb.or bin %3, %10, %14, %18, %23, %24 {sv.namehint = "requestAIO_0_0"} : i1
    %26 = comb.extract %auto_in_a_bits_address from 4 : (i9) -> i3
    %27 = comb.xor %26, %c-4_i3 : i3
    %28 = comb.extract %auto_in_a_bits_address from 2 : (i9) -> i1
    %29 = comb.concat %4, %27, %28 : i2, i3, i1
    %30 = comb.icmp bin eq %29, %c0_i6 {sv.namehint = "_requestAIO_T_39"} : i6
    %31 = comb.extract %auto_in_a_bits_address from 3 : (i9) -> i4
    %32 = comb.xor %31, %c-6_i4 : i4
    %33 = comb.concat %4, %32 : i2, i4
    %34 = comb.icmp bin eq %33, %c0_i6 {sv.namehint = "_requestAIO_T_44"} : i6
    %35 = comb.or bin %30, %34 {sv.namehint = "requestAIO_0_1"} : i1
    %36 = comb.and bin %auto_in_a_valid, %25 {sv.namehint = "portsAOI_filtered_0_earlyValid"} : i1
    %37 = comb.and bin %auto_in_a_valid, %35 {sv.namehint = "portsAOI_filtered_1_earlyValid"} : i1
    %38 = comb.and %25, %auto_out_0_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T"} : i1
    %39 = comb.and %35, %auto_out_1_a_ready {sv.namehint = "_portsAOI_in_0_a_ready_T_1"} : i1
    %40 = comb.or bin %38, %39 {sv.namehint = "_portsAOI_in_0_a_ready_T_2"} : i1
    %beatsLeft = seq.firreg %80 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %41 = comb.xor bin %beatsLeft, %true {sv.namehint = "idle"} : i1
    %42 = comb.and bin %41, %auto_in_d_ready {sv.namehint = "latch"} : i1
    %43 = comb.concat %auto_out_1_d_valid, %auto_out_0_d_valid {sv.namehint = "readys_filter_lo"} : i1, i1
    %readys_mask = seq.firreg %62 clock %clock reset sync %reset, %c-1_i2 {firrtl.random_init_start = 1 : ui64} : i2
    %44 = comb.xor bin %readys_mask, %c-1_i2 {sv.namehint = "_readys_filter_T"} : i2
    %45 = comb.and bin %43, %44 {sv.namehint = "readys_filter_hi"} : i2
    %46 = comb.extract %45 from 1 : (i2) -> i1
    %47 = comb.extract %45 from 0 : (i2) -> i1
    %48 = comb.concat %47, %auto_out_1_d_valid : i1, i1
    %49 = comb.or %48, %45 {sv.namehint = "_readys_readys_T_1"} : i2
    %50 = comb.extract %readys_mask from 1 : (i2) -> i1
    %51 = comb.extract %readys_mask from 0 : (i2) -> i1
    %52 = comb.or %46, %51 : i1
    %53 = comb.concat %50, %52 {sv.namehint = "_readys_readys_T"} : i1, i1
    %54 = comb.and bin %53, %49 {sv.namehint = "_readys_readys_T_2"} : i2
    %55 = comb.xor bin %54, %c-1_i2 {sv.namehint = "readys_readys"} : i2
    %56 = comb.icmp bin ne %43, %c0_i2 {sv.namehint = "_readys_T_5"} : i2
    %57 = comb.and bin %42, %56 {sv.namehint = "_readys_T_6"} : i1
    %58 = comb.and bin %55, %43 {sv.namehint = "_readys_mask_T"} : i2
    %59 = comb.extract %58 from 0 : (i2) -> i1
    %60 = comb.concat %59, %false {sv.namehint = "_readys_mask_T_2"} : i1, i1
    %61 = comb.or bin %58, %60 {sv.namehint = "_readys_mask_T_4"} : i2
    %62 = comb.mux bin %57, %61, %readys_mask : i2
    %63 = comb.extract %55 from 0 {sv.namehint = "readys_0"} : (i2) -> i1
    %64 = comb.extract %55 from 1 {sv.namehint = "readys_1"} : (i2) -> i1
    %65 = comb.and bin %63, %auto_out_0_d_valid {sv.namehint = "prefixOR_1"} : i1
    %66 = comb.and bin %64, %auto_out_1_d_valid {sv.namehint = "earlyWinner_1"} : i1
    %67 = comb.and bin %63, %auto_out_0_d_valid {sv.namehint = "winnerQual_0"} : i1
    %68 = comb.and bin %64, %auto_out_1_d_valid {sv.namehint = "winnerQual_1"} : i1
    %69 = comb.xor bin %65, %true : i1
    %70 = comb.xor bin %66, %true : i1
    %71 = comb.or bin %69, %70, %reset : i1
    %72 = comb.xor bin %71, %true : i1
    %73 = comb.or bin %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T"} : i1
    %74 = comb.xor bin %73, %true : i1
    %75 = comb.or bin %74, %65, %66, %reset : i1
    %76 = comb.xor bin %75, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %106 = comb.and bin %STOP_COND_, %false : i1
        sv.if %106 {
          sv.fatal 1
        }
        %107 = comb.and bin %STOP_COND_, %72 : i1
        sv.if %107 {
          sv.fatal 1
        }
        %108 = comb.and bin %STOP_COND_, %76 : i1
        sv.if %108 {
          sv.fatal 1
        }
        sv.if %106 {
          sv.fatal 1
        }
      }
    }
    %77 = comb.and bin %auto_in_d_ready, %92 {sv.namehint = "_beatsLeft_T_2"} : i1
    %78 = comb.sub %beatsLeft, %77 {sv.namehint = "_beatsLeft_T_3"} : i1
    %79 = comb.xor %42, %true : i1
    %80 = comb.and %79, %78 {sv.namehint = "_beatsLeft_T_5"} : i1
    %state_0 = seq.firreg %83 clock %clock reset sync %reset, %false {firrtl.random_init_start = 3 : ui64} : i1
    %state_1 = seq.firreg %84 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %81 = comb.mux bin %beatsLeft, %state_0, %65 {sv.namehint = "muxStateEarly_0"} : i1
    %82 = comb.mux bin %beatsLeft, %state_1, %66 {sv.namehint = "muxStateEarly_1"} : i1
    %83 = comb.mux bin %beatsLeft, %state_0, %67 {sv.namehint = "muxStateQual_0"} : i1
    %84 = comb.mux bin %beatsLeft, %state_1, %68 {sv.namehint = "muxStateQual_1"} : i1
    %85 = comb.mux bin %beatsLeft, %state_0, %63 {sv.namehint = "allowed_0"} : i1
    %86 = comb.mux bin %beatsLeft, %state_1, %64 {sv.namehint = "allowed_1"} : i1
    %87 = comb.and bin %auto_in_d_ready, %85 {sv.namehint = "out_7_ready"} : i1
    %88 = comb.and bin %auto_in_d_ready, %86 {sv.namehint = "out_8_ready"} : i1
    %89 = comb.and %state_0, %auto_out_0_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_1"} : i1
    %90 = comb.and %state_1, %auto_out_1_d_valid {sv.namehint = "_sink_ACancel_earlyValid_T_2"} : i1
    %91 = comb.or bin %89, %90 {sv.namehint = "_sink_ACancel_earlyValid_T_3"} : i1
    %92 = comb.mux bin %beatsLeft, %91, %73 {sv.namehint = "out_9_valid"} : i1
    %93 = comb.and %81, %auto_out_0_d_bits_corrupt {sv.namehint = "out_9_bits_corrupt"} : i1
    %94 = comb.mux bin %81, %auto_out_0_d_bits_data, %c0_i32 : i32
    %95 = comb.mux bin %82, %auto_out_1_d_bits_data, %c0_i32 : i32
    %96 = comb.or bin %94, %95 {sv.namehint = "out_9_bits_data"} : i32
    %97 = comb.and %81, %auto_out_0_d_bits_denied {sv.namehint = "out_9_bits_denied"} : i1
    %98 = comb.and %81, %auto_out_0_d_bits_sink {sv.namehint = "out_9_bits_sink"} : i1
    %99 = comb.mux bin %81, %auto_out_0_d_bits_size, %c0_i2 : i2
    %100 = comb.concat %82, %false : i1, i1
    %101 = comb.or bin %99, %100 {sv.namehint = "out_9_bits_size"} : i2
    %102 = comb.mux bin %81, %auto_out_0_d_bits_param, %c0_i2 {sv.namehint = "out_9_bits_param"} : i2
    %103 = comb.mux bin %81, %auto_out_0_d_bits_opcode, %c0_i3 : i3
    %104 = comb.mux bin %82, %auto_out_1_d_bits_opcode, %c0_i3 : i3
    %105 = comb.or bin %103, %104 {sv.namehint = "out_9_bits_opcode"} : i3
    hw.output %40, %92, %97, %96, %93, %37, %auto_in_a_bits_opcode, %1, %auto_in_a_bits_data, %88, %36, %auto_in_a_bits_opcode, %auto_in_a_bits_address, %auto_in_a_bits_data, %87 : i1, i1, i1, i32, i1, i1, i3, i7, i32, i1, i1, i3, i9, i32, i1
  }
  hw.module private @DMIToTL(in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_address : i9, out auto_out_a_bits_data : i32, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_denied : i1, in %auto_out_d_bits_data : i32, in %auto_out_d_bits_corrupt : i1, out io_dmi_req_ready : i1, in %io_dmi_req_valid : i1, in %io_dmi_req_bits_addr : i7, in %io_dmi_req_bits_data : i32, in %io_dmi_req_bits_op : i2, in %io_dmi_resp_ready : i1, out io_dmi_resp_valid : i1, out io_dmi_resp_bits_data : i32, out io_dmi_resp_bits_resp : i2) {
    %c1_i2 = hw.constant 1 : i2
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    %c72_i9 = hw.constant 72 : i9
    %c0_i32 = hw.constant 0 : i32
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %0 = comb.concat %io_dmi_req_bits_addr, %c0_i2 {sv.namehint = "addr"} : i7, i2
    %1 = comb.icmp bin eq %io_dmi_req_bits_op, %c-2_i2 : i2
    %2 = comb.icmp bin eq %io_dmi_req_bits_op, %c1_i2 : i2
    %3 = comb.mux bin %1, %io_dmi_req_bits_data, %c0_i32 {sv.namehint = "tl_a_bits_data"} : i32
    %4 = comb.or %1, %2 : i1
    %5 = comb.mux bin %4, %0, %c72_i9 {sv.namehint = "tl_a_bits_address"} : i9
    %6 = comb.concat %2, %c0_i2 : i1, i2
    %7 = comb.mux bin %1, %c0_i3, %6 {sv.namehint = "tl_a_bits_opcode"} : i3
    %8 = comb.or bin %auto_out_d_bits_corrupt, %auto_out_d_bits_denied {sv.namehint = "_io_dmi_resp_bits_resp_T_1"} : i1
    %9 = comb.concat %false, %8 {sv.namehint = "io_dmi_resp_bits_resp"} : i1, i1
    hw.output %io_dmi_req_valid, %7, %5, %3, %io_dmi_resp_ready, %auto_out_a_ready, %auto_out_d_valid, %auto_out_d_bits_data, %9 : i1, i3, i9, i32, i1, i1, i1, i32, i2
  }
  hw.module private @TLMonitor_24(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i7, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3) {
    %c-6_i4 = hw.constant -6 : i4
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c-1_i4 = hw.constant -1 : i4
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i7) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.and bin %io_in_a_valid, %5 : i1
    %7 = comb.xor bin %reset, %true : i1
    %8 = comb.and bin %6, %7 : i1
    %9 = comb.or bin %4, %reset : i1
    %10 = comb.xor bin %9, %true : i1
    %11 = comb.and bin %6, %10 : i1
    %12 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %13 = comb.and bin %io_in_a_valid, %12 : i1
    %14 = comb.and bin %13, %7 : i1
    %15 = comb.and bin %13, %10 : i1
    %16 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %17 = comb.and bin %io_in_a_valid, %16 : i1
    %18 = comb.extract %io_in_a_bits_address from 4 : (i7) -> i3
    %19 = comb.xor %18, %c-4_i3 : i3
    %20 = comb.extract %io_in_a_bits_address from 2 : (i7) -> i1
    %21 = comb.concat %19, %20 : i3, i1
    %22 = comb.icmp bin eq %21, %c0_i4 : i4
    %23 = comb.extract %io_in_a_bits_address from 3 : (i7) -> i4
    %24 = comb.icmp eq %23, %c-6_i4 : i4
    %25 = comb.or bin %22, %24, %reset : i1
    %26 = comb.xor bin %25, %true : i1
    %27 = comb.and bin %17, %26 : i1
    %28 = comb.and bin %17, %10 : i1
    %29 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %30 = comb.and bin %io_in_a_valid, %29 : i1
    %31 = comb.and bin %30, %26 : i1
    %32 = comb.and bin %30, %10 : i1
    %33 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %34 = comb.and bin %io_in_a_valid, %33 : i1
    %35 = comb.and bin %34, %7 : i1
    %36 = comb.and bin %34, %10 : i1
    %37 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %38 = comb.and bin %io_in_a_valid, %37 : i1
    %39 = comb.and bin %38, %7 : i1
    %40 = comb.and bin %38, %10 : i1
    %41 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %42 = comb.and bin %io_in_a_valid, %41 : i1
    %43 = comb.and bin %42, %7 : i1
    %44 = comb.and bin %42, %10 : i1
    %45 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %46 = comb.and bin %io_in_a_valid, %45 : i1
    %47 = comb.and bin %46, %7 : i1
    %48 = comb.and bin %46, %10 : i1
    %49 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %50 = comb.or bin %49, %reset : i1
    %51 = comb.xor bin %50, %true : i1
    %52 = comb.and bin %io_in_d_valid, %51 : i1
    %53 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %54 = comb.and bin %io_in_d_valid, %53 : i1
    %55 = comb.and bin %54, %7 : i1
    %56 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %57 = comb.and bin %io_in_d_valid, %56 : i1
    %58 = comb.and bin %57, %7 : i1
    %59 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %64 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %60 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %61 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %62 = comb.xor %59, %true : i1
    %63 = comb.or %62, %60 : i1
    %64 = comb.and %63, %a_first_counter : i1
    %opcode = seq.firreg %75 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %76 clock %clock {firrtl.random_init_start = 10 : ui64} : i7
    %65 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %66 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %67 = comb.or bin %66, %reset : i1
    %68 = comb.xor bin %67, %true : i1
    %69 = comb.and bin %65, %68 : i1
    %70 = comb.icmp bin eq %io_in_a_bits_address, %address : i7
    %71 = comb.or bin %70, %reset : i1
    %72 = comb.xor bin %71, %true : i1
    %73 = comb.and bin %65, %72 : i1
    %74 = comb.and bin %59, %61 : i1
    %75 = comb.mux bin %74, %io_in_a_bits_opcode, %opcode : i3
    %76 = comb.mux bin %74, %io_in_a_bits_address, %address : i7
    %77 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %82 clock %clock reset sync %reset, %false {firrtl.random_init_start = 17 : ui64} : i1
    %78 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %79 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %80 = comb.xor %77, %true : i1
    %81 = comb.or %80, %78 : i1
    %82 = comb.and %81, %d_first_counter : i1
    %opcode_1 = seq.firreg %89 clock %clock {firrtl.random_init_start = 18 : ui64} : i3
    %83 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %84 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %85 = comb.or bin %84, %reset : i1
    %86 = comb.xor bin %85, %true : i1
    %87 = comb.and bin %83, %86 : i1
    %88 = comb.and bin %77, %79 : i1
    %89 = comb.mux bin %88, %io_in_d_bits_opcode, %opcode_1 : i3
    %inflight = seq.firreg %152 clock %clock reset sync %reset, %false {firrtl.random_init_start = 28 : ui64} : i1
    %inflight_opcodes = seq.firreg %155 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 29 : ui64} : i4
    %inflight_sizes = seq.firreg %158 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 33 : ui64} : i4
    %a_first_counter_1 = seq.firreg %94 clock %clock reset sync %reset, %false {firrtl.random_init_start = 37 : ui64} : i1
    %90 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %91 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %92 = comb.xor %59, %true : i1
    %93 = comb.or %92, %90 : i1
    %94 = comb.and %93, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %99 clock %clock reset sync %reset, %false {firrtl.random_init_start = 38 : ui64} : i1
    %95 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %96 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %97 = comb.xor %77, %true : i1
    %98 = comb.or %97, %95 : i1
    %99 = comb.and %98, %d_first_counter_1 : i1
    %100 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %101 = comb.extract %inflight_sizes from 1 : (i4) -> i3
    %102 = comb.and bin %io_in_a_valid, %91 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %103 = comb.and bin %59, %91 {sv.namehint = "a_set"} : i1
    %104 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %105 = comb.mux bin %103, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %106 = comb.mux bin %103, %104, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %107 = comb.concat %false, %105 : i1, i3
    %108 = comb.mux bin %103, %107, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %109 = comb.xor bin %inflight, %true : i1
    %110 = comb.or bin %109, %reset : i1
    %111 = comb.xor bin %110, %true : i1
    %112 = comb.and bin %103, %111 : i1
    %113 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %114 = comb.and bin %io_in_d_valid, %96 : i1
    %115 = comb.xor bin %113, %true : i1
    %116 = comb.and bin %77, %96, %115 {sv.namehint = "d_clr"} : i1
    %117 = comb.replicate %116 {sv.namehint = "d_sizes_clr"} : (i1) -> i4
    %118 = comb.and bin %114, %115 : i1
    %119 = comb.or bin %inflight, %102, %reset : i1
    %120 = comb.xor bin %119, %true : i1
    %121 = comb.and bin %118, %120 : i1
    %122 = comb.and bin %118, %102 : i1
    %123 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %124 = comb.icmp bin eq %io_in_d_bits_opcode, %123 : i3
    %125 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %126 = comb.icmp bin eq %io_in_d_bits_opcode, %125 : i3
    %127 = comb.or bin %124, %126, %reset : i1
    %128 = comb.xor bin %127, %true : i1
    %129 = comb.and bin %122, %128 : i1
    %130 = comb.xor bin %102, %true : i1
    %131 = comb.and bin %118, %130 : i1
    %132 = hw.array_get %1[%100] : !hw.array<8xi3>, i3
    %133 = comb.icmp bin eq %io_in_d_bits_opcode, %132 : i3
    %134 = hw.array_get %0[%100] : !hw.array<8xi3>, i3
    %135 = comb.icmp bin eq %io_in_d_bits_opcode, %134 : i3
    %136 = comb.or bin %133, %135, %reset : i1
    %137 = comb.xor bin %136, %true : i1
    %138 = comb.and bin %131, %137 : i1
    %139 = comb.icmp bin eq %101, %c2_i3 : i3
    %140 = comb.or bin %139, %reset : i1
    %141 = comb.xor bin %140, %true : i1
    %142 = comb.and bin %131, %141 : i1
    %143 = comb.and bin %114, %91 : i1
    %144 = comb.and bin %143, %io_in_a_valid : i1
    %145 = comb.and bin %144, %115 : i1
    %146 = comb.xor bin %io_in_d_ready, %true : i1
    %147 = comb.or bin %146, %io_in_a_ready, %reset : i1
    %148 = comb.xor bin %147, %true : i1
    %149 = comb.and bin %145, %148 : i1
    %150 = comb.or bin %inflight, %103 {sv.namehint = "_inflight_T"} : i1
    %151 = comb.xor bin %116, %true {sv.namehint = "_inflight_T_1"} : i1
    %152 = comb.and bin %150, %151 {sv.namehint = "_inflight_T_2"} : i1
    %153 = comb.or bin %inflight_opcodes, %106 {sv.namehint = "_inflight_opcodes_T"} : i4
    %154 = comb.xor bin %117, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %155 = comb.and bin %153, %154 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %156 = comb.or bin %inflight_sizes, %108 {sv.namehint = "_inflight_sizes_T"} : i4
    %157 = comb.xor bin %117, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %158 = comb.and bin %156, %157 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %165 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 39 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %159 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %160 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %161 = comb.or bin %109, %159, %160, %reset : i1
    %162 = comb.xor bin %161, %true : i1
    %163 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %164 = comb.or bin %59, %77 : i1
    %165 = comb.mux bin %164, %c0_i32, %163 : i32
    %inflight_1 = seq.firreg %183 clock %clock reset sync %reset, %false {firrtl.random_init_start = 71 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %185 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 76 : ui64} : i4
    %d_first_counter_2 = seq.firreg %170 clock %clock reset sync %reset, %false {firrtl.random_init_start = 81 : ui64} : i1
    %166 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %167 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %168 = comb.xor %77, %true : i1
    %169 = comb.or %168, %166 : i1
    %170 = comb.and %169, %d_first_counter_2 : i1
    %171 = comb.extract %inflight_sizes_1 from 1 : (i4) -> i3
    %172 = comb.and bin %77, %167, %113 {sv.namehint = "d_clr_1"} : i1
    %173 = comb.replicate %172 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i4
    %174 = comb.and bin %io_in_d_valid, %167, %113 : i1
    %175 = comb.or bin %inflight_1, %reset : i1
    %176 = comb.xor bin %175, %true : i1
    %177 = comb.and bin %174, %176 : i1
    %178 = comb.icmp bin eq %171, %c2_i3 : i3
    %179 = comb.or bin %178, %reset : i1
    %180 = comb.xor bin %179, %true : i1
    %181 = comb.and bin %174, %180 : i1
    %182 = comb.xor bin %172, %true {sv.namehint = "_inflight_T_4"} : i1
    %183 = comb.and bin %inflight_1, %182 {sv.namehint = "_inflight_T_5"} : i1
    %184 = comb.xor bin %173, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %185 = comb.and bin %inflight_sizes_1, %184 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %192 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 82 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %186 = comb.xor bin %inflight_1, %true : i1
    %187 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %188 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %189 = comb.or bin %186, %187, %188, %reset : i1
    %190 = comb.xor bin %189, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %193 = comb.and bin %STOP_COND_, %false : i1
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %194 = comb.and bin %STOP_COND_, %8 : i1
        sv.if %194 {
          sv.fatal 1
        }
        sv.if %194 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %195 = comb.and bin %STOP_COND_, %11 : i1
        sv.if %195 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %196 = comb.and bin %STOP_COND_, %14 : i1
        sv.if %196 {
          sv.fatal 1
        }
        sv.if %196 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %197 = comb.and bin %STOP_COND_, %15 : i1
        sv.if %197 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %196 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %198 = comb.and bin %STOP_COND_, %27 : i1
        sv.if %198 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %199 = comb.and bin %STOP_COND_, %28 : i1
        sv.if %199 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %200 = comb.and bin %STOP_COND_, %31 : i1
        sv.if %200 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %201 = comb.and bin %STOP_COND_, %32 : i1
        sv.if %201 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %202 = comb.and bin %STOP_COND_, %35 : i1
        sv.if %202 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %203 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %203 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %204 = comb.and bin %STOP_COND_, %39 : i1
        sv.if %204 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %205 = comb.and bin %STOP_COND_, %40 : i1
        sv.if %205 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %206 = comb.and bin %STOP_COND_, %43 : i1
        sv.if %206 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %207 = comb.and bin %STOP_COND_, %44 : i1
        sv.if %207 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %208 = comb.and bin %STOP_COND_, %47 : i1
        sv.if %208 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %209 = comb.and bin %STOP_COND_, %48 : i1
        sv.if %209 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %210 = comb.and bin %STOP_COND_, %52 : i1
        sv.if %210 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %211 = comb.and bin %STOP_COND_, %55 : i1
        sv.if %211 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %212 = comb.and bin %STOP_COND_, %58 : i1
        sv.if %212 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %213 = comb.and bin %STOP_COND_, %69 : i1
        sv.if %213 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %214 = comb.and bin %STOP_COND_, %73 : i1
        sv.if %214 {
          sv.fatal 1
        }
        %215 = comb.and bin %STOP_COND_, %87 : i1
        sv.if %215 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %216 = comb.and bin %STOP_COND_, %112 : i1
        sv.if %216 {
          sv.fatal 1
        }
        %217 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %217 {
          sv.fatal 1
        }
        %218 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %218 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %219 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %219 {
          sv.fatal 1
        }
        %220 = comb.and bin %STOP_COND_, %142 : i1
        sv.if %220 {
          sv.fatal 1
        }
        %221 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %221 {
          sv.fatal 1
        }
        %222 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %222 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %223 = comb.and bin %STOP_COND_, %177 : i1
        sv.if %223 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %224 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %224 {
          sv.fatal 1
        }
        sv.if %193 {
          sv.fatal 1
        }
        %225 = comb.and bin %STOP_COND_, %190 : i1
        sv.if %225 {
          sv.fatal 1
        }
      }
    }
    %191 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %192 = comb.mux bin %77, %c0_i32, %191 : i32
    hw.output
  }
  hw.module private @TLDebugModuleOuter(in %clock : !seq.clock, in %reset : i1, out auto_dmi_in_a_ready : i1, in %auto_dmi_in_a_valid : i1, in %auto_dmi_in_a_bits_opcode : i3, in %auto_dmi_in_a_bits_address : i7, in %auto_dmi_in_a_bits_data : i32, in %auto_dmi_in_d_ready : i1, out auto_dmi_in_d_valid : i1, out auto_dmi_in_d_bits_opcode : i3, out auto_dmi_in_d_bits_data : i32, out auto_int_out_0 : i1, out io_ctrl_ndreset : i1, out io_ctrl_dmactive : i1, in %io_ctrl_dmactiveAck : i1, in %io_innerCtrl_ready : i1, out io_innerCtrl_valid : i1, out io_innerCtrl_bits_resumereq : i1, out io_innerCtrl_bits_hartsel : i10, out io_innerCtrl_bits_ackhavereset : i1, out io_innerCtrl_bits_hrmask_0 : i1, in %io_hgDebugInt_0 : i1) {
    %c0_i29 = hw.constant 0 : i29
    %c-4_i3 = hw.constant -4 : i3
    %c0_i10 = hw.constant 0 : i10
    %c0_i32 = hw.constant 0 : i32
    %c1123200_i32 = hw.constant 1123200 : i32
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false
    %true = hw.constant true
    hw.instance "monitor" @TLMonitor_24(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_dmi_in_d_ready: i1, io_in_a_valid: %auto_dmi_in_a_valid: i1, io_in_a_bits_opcode: %auto_dmi_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_dmi_in_a_bits_address: i7, io_in_d_ready: %auto_dmi_in_d_ready: i1, io_in_d_valid: %auto_dmi_in_a_valid: i1, io_in_d_bits_opcode: %34: i3) -> ()
    %DMCONTROLReg_haltreq = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %DMCONTROLReg_hartsello = seq.firreg %3 clock %clock reset async %reset, %c0_i10 {firrtl.random_init_start = 6 : ui64, sv.namehint = "DMCONTROLReg_hartsello"} : i10
    %DMCONTROLReg_ndmreset = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 30 : ui64, sv.namehint = "DMCONTROLReg_ndmreset"} : i1
    %DMCONTROLReg_dmactive = seq.firreg %6 clock %clock reset async %reset, %false {firrtl.random_init_start = 31 : ui64, sv.namehint = "DMCONTROLReg_dmactive"} : i1
    %0 = comb.xor bin %DMCONTROLReg_dmactive, %true : i1
    %1 = comb.mux bin %31, %21, %DMCONTROLReg_ndmreset : i1
    %2 = comb.and %DMCONTROLReg_dmactive, %1 {sv.namehint = "DMCONTROLNxt_ndmreset"} : i1
    %3 = comb.mux bin %DMCONTROLReg_dmactive, %DMCONTROLReg_hartsello, %c0_i10 {sv.namehint = "DMCONTROLNxt_hartsello"} : i10
    %4 = comb.mux bin %31, %26, %DMCONTROLReg_haltreq : i1
    %5 = comb.and %DMCONTROLReg_dmactive, %4 {sv.namehint = "DMCONTROLNxt_haltreq"} : i1
    %6 = comb.mux bin %31, %20, %DMCONTROLReg_dmactive {sv.namehint = "DMCONTROLNxt_dmactive"} : i1
    %hrmaskReg_0 = seq.firreg %13 clock %clock reset async %reset, %false {firrtl.random_init_start = 64 : ui64} : i1
    %7 = comb.icmp bin eq %DMCONTROLReg_hartsello, %c0_i10 : i10
    %8 = comb.and bin %31, %22, %7 : i1
    %9 = comb.and bin %31, %23, %7 : i1
    %10 = comb.or %9, %hrmaskReg_0 : i1
    %11 = comb.or bin %0, %8 : i1
    %12 = comb.xor %11, %true : i1
    %13 = comb.and %12, %10 {sv.namehint = "hrmaskNxt_0"} : i1
    %14 = comb.and bin %DMCONTROLReg_dmactive, %io_ctrl_dmactiveAck {sv.namehint = "out_prepend_lo"} : i1
    %15 = comb.icmp bin eq %auto_dmi_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %16 = comb.extract %auto_dmi_in_a_bits_address from 4 : (i7) -> i1
    %17 = comb.extract %auto_dmi_in_a_bits_address from 2 : (i7) -> i1
    %18 = comb.concat %16, %17 : i1, i1
    %19 = comb.icmp bin eq %18, %c0_i2 {sv.namehint = "_out_T_3"} : i2
    %20 = comb.extract %auto_dmi_in_a_bits_data from 0 {sv.namehint = "DMCONTROLWrData_dmactive"} : (i32) -> i1
    %21 = comb.extract %auto_dmi_in_a_bits_data from 1 {sv.namehint = "DMCONTROLWrData_ndmreset"} : (i32) -> i1
    %22 = comb.extract %auto_dmi_in_a_bits_data from 2 {sv.namehint = "DMCONTROLWrData_clrresethaltreq"} : (i32) -> i1
    %23 = comb.extract %auto_dmi_in_a_bits_data from 3 {sv.namehint = "DMCONTROLWrData_setresethaltreq"} : (i32) -> i1
    %24 = comb.extract %auto_dmi_in_a_bits_data from 28 {sv.namehint = "DMCONTROLWrData_ackhavereset"} : (i32) -> i1
    %25 = comb.extract %auto_dmi_in_a_bits_data from 30 {sv.namehint = "DMCONTROLWrData_resumereq"} : (i32) -> i1
    %26 = comb.extract %auto_dmi_in_a_bits_data from 31 {sv.namehint = "DMCONTROLWrData_haltreq"} : (i32) -> i1
    %27 = comb.concat %DMCONTROLReg_haltreq, %c0_i29, %DMCONTROLReg_ndmreset, %14 {sv.namehint = "out_prepend_11"} : i1, i29, i1, i1
    %28 = comb.extract %auto_dmi_in_a_bits_address from 3 {sv.namehint = "out_iindex"} : (i7) -> i1
    %29 = comb.xor %28, %true {sv.namehint = "out_backSel_0"} : i1
    %30 = comb.xor bin %15, %true {sv.namehint = "_out_wofireMux_T_1"} : i1
    %31 = comb.and bin %auto_dmi_in_a_valid, %auto_dmi_in_d_ready, %30, %29, %19 {sv.namehint = "out_woready_9"} : i1
    %32 = comb.mux bin %28, %c1123200_i32, %27 {sv.namehint = "_out_out_bits_data_T_3"} : i32
    %33 = comb.mux bin %19, %32, %c0_i32 {sv.namehint = "out_bits_data"} : i32
    %34 = comb.concat %c0_i2, %15 {sv.namehint = "bundleIn_0_d_bits_opcode"} : i2, i1
    %debugIntRegs_0 = seq.firreg %37 clock %clock reset async %reset, %false {firrtl.random_init_start = 65 : ui64} : i1
    %35 = comb.or bin %debugIntRegs_0, %io_hgDebugInt_0 {sv.namehint = "bundleOut_0_0"} : i1
    %36 = comb.mux bin %31, %26, %debugIntRegs_0 : i1
    %37 = comb.and %DMCONTROLReg_dmactive, %36 {sv.namehint = "debugIntNxt_0"} : i1
    %innerCtrlValidReg = seq.firreg %39 clock %clock reset async %reset, %false {firrtl.random_init_start = 66 : ui64} : i1
    %innerCtrlResumeReqReg = seq.firreg %40 clock %clock reset async %reset, %false {firrtl.random_init_start = 67 : ui64} : i1
    %innerCtrlAckHaveResetReg = seq.firreg %41 clock %clock reset async %reset, %false {firrtl.random_init_start = 68 : ui64} : i1
    %38 = comb.xor bin %io_innerCtrl_ready, %true {sv.namehint = "_innerCtrlAckHaveResetReg_T"} : i1
    %39 = comb.and bin %42, %38 {sv.namehint = "_innerCtrlValidReg_T_1"} : i1
    %40 = comb.and bin %44, %38 {sv.namehint = "_innerCtrlResumeReqReg_T_1"} : i1
    %41 = comb.and bin %46, %38 {sv.namehint = "_innerCtrlAckHaveResetReg_T_1"} : i1
    %42 = comb.or bin %31, %innerCtrlValidReg {sv.namehint = "io_innerCtrl_valid"} : i1
    %43 = comb.and bin %31, %25 {sv.namehint = "_io_innerCtrl_bits_resumereq_T"} : i1
    %44 = comb.or bin %43, %innerCtrlResumeReqReg {sv.namehint = "io_innerCtrl_bits_resumereq"} : i1
    %45 = comb.and bin %31, %24 {sv.namehint = "_io_innerCtrl_bits_ackhavereset_T"} : i1
    %46 = comb.or bin %45, %innerCtrlAckHaveResetReg {sv.namehint = "io_innerCtrl_bits_ackhavereset"} : i1
    hw.output %auto_dmi_in_d_ready, %auto_dmi_in_a_valid, %34, %33, %35, %DMCONTROLReg_ndmreset, %DMCONTROLReg_dmactive, %42, %44, %DMCONTROLReg_hartsello, %46, %13 : i1, i1, i3, i32, i1, i1, i1, i1, i1, i10, i1, i1
  }
  hw.module private @IntSyncCrossingSource_4(in %auto_in_0 : i1, out auto_out_sync_0 : i1) {
    hw.output %auto_in_0 : i1
  }
  hw.module private @TLMonitor_25(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i9, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i1, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-5_i4 = hw.constant -5 : i4
    %c-15_i5 = hw.constant -15 : i5
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c-1_i2 = hw.constant -1 : i2
    %c0_i6 = hw.constant 0 : i6
    %c15_i31 = hw.constant 15 : i31
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %true = hw.constant true
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i3 = hw.constant -1 : i3
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.and bin %io_in_a_valid, %5 : i1
    %7 = comb.xor bin %reset, %true : i1
    %8 = comb.and bin %6, %7 : i1
    %9 = comb.or bin %4, %reset : i1
    %10 = comb.xor bin %9, %true : i1
    %11 = comb.and bin %6, %10 : i1
    %12 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %13 = comb.and bin %io_in_a_valid, %12 : i1
    %14 = comb.and bin %13, %7 : i1
    %15 = comb.and bin %13, %10 : i1
    %16 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %17 = comb.and bin %io_in_a_valid, %16 : i1
    %18 = comb.extract %io_in_a_bits_address from 6 : (i9) -> i3
    %19 = comb.icmp bin eq %18, %c0_i3 : i3
    %20 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i2
    %21 = comb.extract %io_in_a_bits_address from 2 : (i9) -> i5
    %22 = comb.xor %21, %c-15_i5 : i5
    %23 = comb.extract %22 from 2 : (i5) -> i3
    %24 = comb.extract %22 from 0 : (i5) -> i1
    %25 = comb.concat %20, %23, %24 : i2, i3, i1
    %26 = comb.icmp bin eq %25, %c0_i6 : i6
    %27 = comb.extract %io_in_a_bits_address from 3 : (i9) -> i4
    %28 = comb.xor %27, %c-5_i4 : i4
    %29 = comb.concat %20, %28 : i2, i4
    %30 = comb.icmp bin eq %29, %c0_i6 : i6
    %31 = comb.extract %io_in_a_bits_address from 5 : (i9) -> i2
    %32 = comb.xor %31, %c-1_i2 : i2
    %33 = comb.concat %20, %32 : i2, i2
    %34 = comb.icmp bin eq %33, %c0_i4 : i4
    %35 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %36 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i1
    %37 = comb.xor %36, %true : i1
    %38 = comb.concat %35, %37 : i1, i1
    %39 = comb.icmp bin eq %38, %c0_i2 : i2
    %40 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %41 = comb.or bin %19, %26, %30, %34, %39, %40, %reset : i1
    %42 = comb.xor bin %41, %true : i1
    %43 = comb.and bin %17, %42 : i1
    %44 = comb.and bin %17, %10 : i1
    %45 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %46 = comb.and bin %io_in_a_valid, %45 : i1
    %47 = comb.and bin %46, %42 : i1
    %48 = comb.and bin %46, %10 : i1
    %49 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %50 = comb.and bin %io_in_a_valid, %49 : i1
    %51 = comb.and bin %50, %7 : i1
    %52 = comb.and bin %50, %10 : i1
    %53 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %54 = comb.and bin %io_in_a_valid, %53 : i1
    %55 = comb.and bin %54, %7 : i1
    %56 = comb.and bin %54, %10 : i1
    %57 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %58 = comb.and bin %io_in_a_valid, %57 : i1
    %59 = comb.and bin %58, %7 : i1
    %60 = comb.and bin %58, %10 : i1
    %61 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %62 = comb.and bin %io_in_a_valid, %61 : i1
    %63 = comb.and bin %62, %7 : i1
    %64 = comb.and bin %62, %10 : i1
    %65 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %66 = comb.or bin %65, %reset : i1
    %67 = comb.xor bin %66, %true : i1
    %68 = comb.and bin %io_in_d_valid, %67 : i1
    %69 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_source_ok_T_1"} : i1
    %70 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %71 = comb.and bin %io_in_d_valid, %70 : i1
    %72 = comb.or bin %69, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %71, %73 : i1
    %75 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %71, %77 : i1
    %79 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %80 = comb.or bin %79, %reset : i1
    %81 = comb.xor bin %80, %true : i1
    %82 = comb.and bin %71, %81 : i1
    %83 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %84 = comb.or bin %83, %reset : i1
    %85 = comb.xor bin %84, %true : i1
    %86 = comb.and bin %71, %85 : i1
    %87 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %88 = comb.or bin %87, %reset : i1
    %89 = comb.xor bin %88, %true : i1
    %90 = comb.and bin %71, %89 : i1
    %91 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %92 = comb.and bin %io_in_d_valid, %91 : i1
    %93 = comb.and bin %92, %73 : i1
    %94 = comb.and bin %92, %7 : i1
    %95 = comb.and bin %92, %77 : i1
    %96 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %97 = comb.or bin %96, %reset : i1
    %98 = comb.xor bin %97, %true : i1
    %99 = comb.and bin %92, %98 : i1
    %100 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %92, %102 : i1
    %104 = comb.and bin %92, %85 : i1
    %105 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %106 = comb.and bin %io_in_d_valid, %105 : i1
    %107 = comb.and bin %106, %73 : i1
    %108 = comb.and bin %106, %7 : i1
    %109 = comb.and bin %106, %77 : i1
    %110 = comb.and bin %106, %98 : i1
    %111 = comb.and bin %106, %102 : i1
    %112 = comb.or bin %87, %io_in_d_bits_corrupt, %reset : i1
    %113 = comb.xor bin %112, %true : i1
    %114 = comb.and bin %106, %113 : i1
    %115 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %116 = comb.and bin %io_in_d_valid, %115 : i1
    %117 = comb.and bin %116, %73 : i1
    %118 = comb.and bin %116, %81 : i1
    %119 = comb.and bin %116, %85 : i1
    %120 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %121 = comb.and bin %io_in_d_valid, %120 : i1
    %122 = comb.and bin %121, %73 : i1
    %123 = comb.and bin %121, %81 : i1
    %124 = comb.and bin %121, %113 : i1
    %125 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %126 = comb.and bin %io_in_d_valid, %125 : i1
    %127 = comb.and bin %126, %73 : i1
    %128 = comb.and bin %126, %81 : i1
    %129 = comb.and bin %126, %85 : i1
    %130 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %135 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %131 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %132 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %133 = comb.xor %130, %true : i1
    %134 = comb.or %133, %131 : i1
    %135 = comb.and %134, %a_first_counter : i1
    %opcode = seq.firreg %146 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %147 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %136 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %137 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %138 = comb.or bin %137, %reset : i1
    %139 = comb.xor bin %138, %true : i1
    %140 = comb.and bin %136, %139 : i1
    %141 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %142 = comb.or bin %141, %reset : i1
    %143 = comb.xor bin %142, %true : i1
    %144 = comb.and bin %136, %143 : i1
    %145 = comb.and bin %130, %132 : i1
    %146 = comb.mux bin %145, %io_in_a_bits_opcode, %opcode : i3
    %147 = comb.mux bin %145, %io_in_a_bits_address, %address : i9
    %148 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %153 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %149 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %150 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %151 = comb.xor %148, %true : i1
    %152 = comb.or %151, %149 : i1
    %153 = comb.and %152, %d_first_counter : i1
    %opcode_1 = seq.firreg %180 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %param_1 = seq.firreg %181 clock %clock {firrtl.random_init_start = 23 : ui64} : i2
    %size_1 = seq.firreg %182 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %source_1 = seq.firreg %183 clock %clock {firrtl.random_init_start = 27 : ui64} : i1
    %sink = seq.firreg %184 clock %clock {firrtl.random_init_start = 28 : ui64} : i1
    %denied = seq.firreg %185 clock %clock {firrtl.random_init_start = 29 : ui64} : i1
    %154 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %155 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %156 = comb.or bin %155, %reset : i1
    %157 = comb.xor bin %156, %true : i1
    %158 = comb.and bin %154, %157 : i1
    %159 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %160 = comb.or bin %159, %reset : i1
    %161 = comb.xor bin %160, %true : i1
    %162 = comb.and bin %154, %161 : i1
    %163 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %164 = comb.or bin %163, %reset : i1
    %165 = comb.xor bin %164, %true : i1
    %166 = comb.and bin %154, %165 : i1
    %167 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %168 = comb.or bin %167, %reset : i1
    %169 = comb.xor bin %168, %true : i1
    %170 = comb.and bin %154, %169 : i1
    %171 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %172 = comb.or bin %171, %reset : i1
    %173 = comb.xor bin %172, %true : i1
    %174 = comb.and bin %154, %173 : i1
    %175 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %176 = comb.or bin %175, %reset : i1
    %177 = comb.xor bin %176, %true : i1
    %178 = comb.and bin %154, %177 : i1
    %179 = comb.and bin %148, %150 : i1
    %180 = comb.mux bin %179, %io_in_d_bits_opcode, %opcode_1 : i3
    %181 = comb.mux bin %179, %io_in_d_bits_param, %param_1 : i2
    %182 = comb.mux bin %179, %io_in_d_bits_size, %size_1 : i2
    %183 = comb.mux bin %179, %io_in_d_bits_source, %source_1 : i1
    %184 = comb.mux bin %179, %io_in_d_bits_sink, %sink : i1
    %185 = comb.mux bin %179, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %269 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %272 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %275 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %190 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %186 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %187 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %188 = comb.xor %130, %true : i1
    %189 = comb.or %188, %186 : i1
    %190 = comb.and %189, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %195 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %191 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %192 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %193 = comb.xor %148, %true : i1
    %194 = comb.or %193, %191 : i1
    %195 = comb.and %194, %d_first_counter_1 : i1
    %196 = comb.concat %false, %io_in_d_bits_source, %c0_i2 : i1, i1, i2
    %197 = comb.shru bin %inflight_opcodes, %196 {sv.namehint = "_a_opcode_lookup_T_1"} : i4
    %198 = comb.extract %197 from 1 : (i4) -> i3
    %199 = comb.shru bin %inflight_sizes, %196 {sv.namehint = "_a_size_lookup_T_1"} : i4
    %200 = comb.extract %199 from 1 : (i4) -> i3
    %201 = comb.concat %false, %200 {sv.namehint = "a_size_lookup"} : i1, i3
    %202 = comb.and bin %130, %187 {sv.namehint = "a_set"} : i1
    %203 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %204 = comb.mux bin %202, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %205 = comb.mux bin %202, %203, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %206 = comb.concat %false, %204 : i1, i3
    %207 = comb.mux bin %202, %206, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %208 = comb.xor bin %inflight, %true : i1
    %209 = comb.or bin %208, %reset : i1
    %210 = comb.xor bin %209, %true : i1
    %211 = comb.and bin %202, %210 : i1
    %212 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %213 = comb.and bin %io_in_d_valid, %192 : i1
    %214 = comb.xor bin %212, %true : i1
    %215 = comb.and bin %148, %192, %214 : i1
    %216 = comb.xor %io_in_d_bits_source, %true : i1
    %217 = comb.and %215, %216 {sv.namehint = "d_clr"} : i1
    %218 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %219 = comb.shl bin %c15_i31, %218 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %220 = comb.extract %219 from 0 : (i31) -> i4
    %221 = comb.mux bin %215, %220, %c0_i4 {sv.namehint = "d_opcodes_clr"} : i4
    %222 = comb.shl bin %c15_i31, %218 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %223 = comb.extract %222 from 0 : (i31) -> i4
    %224 = comb.mux bin %215, %223, %c0_i4 {sv.namehint = "d_sizes_clr"} : i4
    %225 = comb.and bin %213, %214 : i1
    %226 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %227 = comb.and bin %io_in_a_valid, %187, %226 {sv.namehint = "same_cycle_resp"} : i1
    %228 = comb.shru bin %inflight, %io_in_d_bits_source : i1
    %229 = comb.or bin %228, %227, %reset : i1
    %230 = comb.xor bin %229, %true : i1
    %231 = comb.and bin %225, %230 : i1
    %232 = comb.and bin %225, %227 : i1
    %233 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %234 = comb.icmp bin eq %io_in_d_bits_opcode, %233 : i3
    %235 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %236 = comb.icmp bin eq %io_in_d_bits_opcode, %235 : i3
    %237 = comb.or bin %234, %236, %reset : i1
    %238 = comb.xor bin %237, %true : i1
    %239 = comb.and bin %232, %238 : i1
    %240 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %241 = comb.or bin %240, %reset : i1
    %242 = comb.xor bin %241, %true : i1
    %243 = comb.and bin %232, %242 : i1
    %244 = comb.xor bin %227, %true : i1
    %245 = comb.and bin %225, %244 : i1
    %246 = hw.array_get %1[%198] : !hw.array<8xi3>, i3
    %247 = comb.icmp bin eq %io_in_d_bits_opcode, %246 : i3
    %248 = hw.array_get %0[%198] : !hw.array<8xi3>, i3
    %249 = comb.icmp bin eq %io_in_d_bits_opcode, %248 : i3
    %250 = comb.or bin %247, %249, %reset : i1
    %251 = comb.xor bin %250, %true : i1
    %252 = comb.and bin %245, %251 : i1
    %253 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %254 = comb.icmp bin eq %253, %201 : i4
    %255 = comb.or bin %254, %reset : i1
    %256 = comb.xor bin %255, %true : i1
    %257 = comb.and bin %245, %256 : i1
    %258 = comb.and bin %213, %187 : i1
    %259 = comb.and bin %258, %io_in_a_valid : i1
    %260 = comb.xor bin %io_in_d_bits_source, %true : i1
    %261 = comb.and bin %259, %260 : i1
    %262 = comb.and bin %261, %214 : i1
    %263 = comb.xor bin %io_in_d_ready, %true : i1
    %264 = comb.or bin %263, %io_in_a_ready, %reset : i1
    %265 = comb.xor bin %264, %true : i1
    %266 = comb.and bin %262, %265 : i1
    %267 = comb.or bin %inflight, %202 {sv.namehint = "_inflight_T"} : i1
    %268 = comb.xor bin %217, %true {sv.namehint = "_inflight_T_1"} : i1
    %269 = comb.and bin %267, %268 {sv.namehint = "_inflight_T_2"} : i1
    %270 = comb.or bin %inflight_opcodes, %205 {sv.namehint = "_inflight_opcodes_T"} : i4
    %271 = comb.xor bin %221, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %272 = comb.and bin %270, %271 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %273 = comb.or bin %inflight_sizes, %207 {sv.namehint = "_inflight_sizes_T"} : i4
    %274 = comb.xor bin %224, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %275 = comb.and bin %273, %274 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %282 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %276 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %277 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %278 = comb.or bin %208, %276, %277, %reset : i1
    %279 = comb.xor bin %278, %true : i1
    %280 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %281 = comb.or bin %130, %148 : i1
    %282 = comb.mux bin %281, %c0_i32, %280 : i32
    %inflight_1 = seq.firreg %307 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %309 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %287 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %283 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %284 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %285 = comb.xor %148, %true : i1
    %286 = comb.or %285, %283 : i1
    %287 = comb.and %286, %d_first_counter_2 : i1
    %288 = comb.shru bin %inflight_sizes_1, %196 {sv.namehint = "_c_size_lookup_T_1"} : i4
    %289 = comb.extract %288 from 1 : (i4) -> i3
    %290 = comb.concat %false, %289 {sv.namehint = "c_size_lookup"} : i1, i3
    %291 = comb.and bin %148, %284, %212 : i1
    %292 = comb.xor %io_in_d_bits_source, %true : i1
    %293 = comb.and %291, %292 {sv.namehint = "d_clr_1"} : i1
    %294 = comb.shl bin %c15_i31, %218 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %295 = comb.extract %294 from 0 : (i31) -> i4
    %296 = comb.mux bin %291, %295, %c0_i4 {sv.namehint = "d_sizes_clr_1"} : i4
    %297 = comb.and bin %io_in_d_valid, %284, %212 : i1
    %298 = comb.shru bin %inflight_1, %io_in_d_bits_source : i1
    %299 = comb.or bin %298, %reset : i1
    %300 = comb.xor bin %299, %true : i1
    %301 = comb.and bin %297, %300 : i1
    %302 = comb.icmp bin eq %253, %290 : i4
    %303 = comb.or bin %302, %reset : i1
    %304 = comb.xor bin %303, %true : i1
    %305 = comb.and bin %297, %304 : i1
    %306 = comb.xor bin %293, %true {sv.namehint = "_inflight_T_4"} : i1
    %307 = comb.and bin %inflight_1, %306 {sv.namehint = "_inflight_T_5"} : i1
    %308 = comb.xor bin %296, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %309 = comb.and bin %inflight_sizes_1, %308 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %316 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %310 = comb.xor bin %inflight_1, %true : i1
    %311 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %312 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %313 = comb.or bin %310, %311, %312, %reset : i1
    %314 = comb.xor bin %313, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %317 = comb.and bin %STOP_COND_, %false : i1
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %318 = comb.and bin %STOP_COND_, %8 : i1
        sv.if %318 {
          sv.fatal 1
        }
        sv.if %318 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %319 = comb.and bin %STOP_COND_, %11 : i1
        sv.if %319 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %320 = comb.and bin %STOP_COND_, %14 : i1
        sv.if %320 {
          sv.fatal 1
        }
        sv.if %320 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %321 = comb.and bin %STOP_COND_, %15 : i1
        sv.if %321 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %320 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %322 = comb.and bin %STOP_COND_, %43 : i1
        sv.if %322 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %323 = comb.and bin %STOP_COND_, %44 : i1
        sv.if %323 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %324 = comb.and bin %STOP_COND_, %47 : i1
        sv.if %324 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %325 = comb.and bin %STOP_COND_, %48 : i1
        sv.if %325 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %326 = comb.and bin %STOP_COND_, %51 : i1
        sv.if %326 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %327 = comb.and bin %STOP_COND_, %52 : i1
        sv.if %327 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %328 = comb.and bin %STOP_COND_, %55 : i1
        sv.if %328 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %329 = comb.and bin %STOP_COND_, %56 : i1
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %330 = comb.and bin %STOP_COND_, %59 : i1
        sv.if %330 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %331 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %331 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %332 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %332 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %333 = comb.and bin %STOP_COND_, %64 : i1
        sv.if %333 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %334 = comb.and bin %STOP_COND_, %68 : i1
        sv.if %334 {
          sv.fatal 1
        }
        %335 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %335 {
          sv.fatal 1
        }
        %336 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %336 {
          sv.fatal 1
        }
        %337 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %337 {
          sv.fatal 1
        }
        %338 = comb.and bin %STOP_COND_, %86 : i1
        sv.if %338 {
          sv.fatal 1
        }
        %339 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %339 {
          sv.fatal 1
        }
        %340 = comb.and bin %STOP_COND_, %93 : i1
        sv.if %340 {
          sv.fatal 1
        }
        %341 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %341 {
          sv.fatal 1
        }
        %342 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %342 {
          sv.fatal 1
        }
        %343 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %343 {
          sv.fatal 1
        }
        %344 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %344 {
          sv.fatal 1
        }
        %345 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %345 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %346 = comb.and bin %STOP_COND_, %107 : i1
        sv.if %346 {
          sv.fatal 1
        }
        %347 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %347 {
          sv.fatal 1
        }
        %348 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %348 {
          sv.fatal 1
        }
        %349 = comb.and bin %STOP_COND_, %110 : i1
        sv.if %349 {
          sv.fatal 1
        }
        %350 = comb.and bin %STOP_COND_, %111 : i1
        sv.if %350 {
          sv.fatal 1
        }
        %351 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %351 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %352 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %352 {
          sv.fatal 1
        }
        %353 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %353 {
          sv.fatal 1
        }
        %354 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %354 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %355 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %355 {
          sv.fatal 1
        }
        %356 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %356 {
          sv.fatal 1
        }
        %357 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %357 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %358 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %358 {
          sv.fatal 1
        }
        %359 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %359 {
          sv.fatal 1
        }
        %360 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %360 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %361 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %361 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %362 = comb.and bin %STOP_COND_, %144 : i1
        sv.if %362 {
          sv.fatal 1
        }
        %363 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %363 {
          sv.fatal 1
        }
        %364 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %364 {
          sv.fatal 1
        }
        %365 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %365 {
          sv.fatal 1
        }
        %366 = comb.and bin %STOP_COND_, %170 : i1
        sv.if %366 {
          sv.fatal 1
        }
        %367 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %367 {
          sv.fatal 1
        }
        %368 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %368 {
          sv.fatal 1
        }
        %369 = comb.and bin %STOP_COND_, %211 : i1
        sv.if %369 {
          sv.fatal 1
        }
        %370 = comb.and bin %STOP_COND_, %231 : i1
        sv.if %370 {
          sv.fatal 1
        }
        %371 = comb.and bin %STOP_COND_, %239 : i1
        sv.if %371 {
          sv.fatal 1
        }
        %372 = comb.and bin %STOP_COND_, %243 : i1
        sv.if %372 {
          sv.fatal 1
        }
        %373 = comb.and bin %STOP_COND_, %252 : i1
        sv.if %373 {
          sv.fatal 1
        }
        %374 = comb.and bin %STOP_COND_, %257 : i1
        sv.if %374 {
          sv.fatal 1
        }
        %375 = comb.and bin %STOP_COND_, %266 : i1
        sv.if %375 {
          sv.fatal 1
        }
        %376 = comb.and bin %STOP_COND_, %279 : i1
        sv.if %376 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %377 = comb.and bin %STOP_COND_, %301 : i1
        sv.if %377 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %378 = comb.and bin %STOP_COND_, %305 : i1
        sv.if %378 {
          sv.fatal 1
        }
        sv.if %317 {
          sv.fatal 1
        }
        %379 = comb.and bin %STOP_COND_, %314 : i1
        sv.if %379 {
          sv.fatal 1
        }
      }
    }
    %315 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %316 = comb.mux bin %148, %c0_i32, %315 : i32
    hw.output
  }
  hw.module private @TLBusBypassBar(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i9, in %auto_in_a_bits_data : i32, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i2, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i32, out auto_in_d_bits_corrupt : i1, in %auto_out_1_a_ready : i1, out auto_out_1_a_valid : i1, out auto_out_1_a_bits_opcode : i3, out auto_out_1_a_bits_address : i9, out auto_out_1_a_bits_data : i32, out auto_out_1_d_ready : i1, in %auto_out_1_d_valid : i1, in %auto_out_1_d_bits_opcode : i3, in %auto_out_1_d_bits_param : i2, in %auto_out_1_d_bits_size : i2, in %auto_out_1_d_bits_source : i1, in %auto_out_1_d_bits_sink : i1, in %auto_out_1_d_bits_denied : i1, in %auto_out_1_d_bits_data : i32, in %auto_out_1_d_bits_corrupt : i1, in %auto_out_0_a_ready : i1, out auto_out_0_a_valid : i1, out auto_out_0_a_bits_opcode : i3, out auto_out_0_a_bits_address : i128, out auto_out_0_d_ready : i1, in %auto_out_0_d_valid : i1, in %auto_out_0_d_bits_opcode : i3, in %auto_out_0_d_bits_size : i2, in %auto_out_0_d_bits_denied : i1, in %auto_out_0_d_bits_corrupt : i1, in %io_bypass : i1) {
    %c0_i119 = hw.constant 0 : i119
    %true = hw.constant true
    %c0_i32 = hw.constant 0 : i32
    %c0_i2 = hw.constant 0 : i2
    %false = hw.constant false {sv.namehint = "_next_flight_T_7"}
    hw.instance "monitor" @TLMonitor_25(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %38: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i9, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %42: i1, io_in_d_bits_opcode: %43: i3, io_in_d_bits_param: %44: i2, io_in_d_bits_size: %45: i2, io_in_d_bits_source: %47: i1, io_in_d_bits_sink: %49: i1, io_in_d_bits_denied: %50: i1, io_in_d_bits_corrupt: %52: i1) -> ()
    %in_reset = seq.firreg %false clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %bypass_reg = seq.firreg %25 clock %clock {firrtl.random_init_start = 1 : ui64} : i1
    %0 = comb.mux bin %in_reset, %io_bypass, %bypass_reg {sv.namehint = "bypass"} : i1
    %flight = seq.firreg %22 clock %clock reset sync %reset, %c0_i2 {firrtl.random_init_start = 2 : ui64} : i2
    %1 = comb.and bin %38, %auto_in_a_valid {sv.namehint = "done"} : i1
    %counter = seq.firreg %6 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %2 = comb.add %counter, %true {sv.namehint = "_counter1_T"} : i1
    %3 = comb.xor bin %counter, %true {sv.namehint = "a_first"} : i1
    %4 = comb.xor %1, %true : i1
    %5 = comb.or %4, %2 : i1
    %6 = comb.and %5, %counter : i1
    %7 = comb.and bin %auto_in_d_ready, %42 {sv.namehint = "done_3"} : i1
    %counter_3 = seq.firreg %12 clock %clock reset sync %reset, %false {firrtl.random_init_start = 7 : ui64} : i1
    %8 = comb.add %counter_3, %true {sv.namehint = "_counter1_T_3"} : i1
    %9 = comb.xor bin %counter_3, %true {sv.namehint = "d_first"} : i1
    %10 = comb.xor %7, %true : i1
    %11 = comb.or %10, %8 : i1
    %12 = comb.and %11, %counter_3 : i1
    %13 = comb.extract %43 from 2 : (i3) -> i1
    %14 = comb.extract %43 from 1 : (i3) -> i1
    %15 = comb.xor bin %14, %true : i1
    %16 = comb.and bin %1, %3 {sv.namehint = "inc_hi"} : i1
    %17 = comb.and bin %7, %9, %13, %15 {sv.namehint = "inc_lo"} : i1
    %18 = comb.concat %false, %17 : i1, i1
    %19 = comb.concat %false, %16 : i1, i1
    %20 = comb.add %flight, %18, %19 {sv.namehint = "_next_flight_T_4"} : i2
    %21 = comb.concat %false, %7 : i1, i1
    %22 = comb.sub %20, %21 {sv.namehint = "_next_flight_T_10"} : i2
    %23 = comb.icmp bin eq %22, %c0_i2 : i2
    %24 = comb.or bin %in_reset, %23 : i1
    %25 = comb.mux bin %24, %io_bypass, %bypass_reg : i1
    %26 = comb.icmp bin ne %0, %io_bypass {sv.namehint = "_stall_T"} : i1
    %stall_counter = seq.firreg %31 clock %clock reset sync %reset, %false {firrtl.random_init_start = 9 : ui64} : i1
    %27 = comb.add %stall_counter, %true {sv.namehint = "_stall_counter1_T"} : i1
    %28 = comb.xor bin %stall_counter, %true {sv.namehint = "stall_first"} : i1
    %29 = comb.xor %1, %true : i1
    %30 = comb.or %29, %27 : i1
    %31 = comb.and %30, %stall_counter : i1
    %32 = comb.and bin %26, %28 {sv.namehint = "stall"} : i1
    %33 = comb.xor bin %32, %true {sv.namehint = "_bundleIn_0_a_ready_T"} : i1
    %34 = comb.and bin %33, %auto_in_a_valid, %0 {sv.namehint = "out0_a_valid"} : i1
    %35 = comb.xor bin %0, %true {sv.namehint = "_bundleOut_1_d_ready_T"} : i1
    %36 = comb.and bin %33, %auto_in_a_valid, %35 {sv.namehint = "out1_a_valid"} : i1
    %37 = comb.mux bin %0, %auto_out_0_a_ready, %auto_out_1_a_ready {sv.namehint = "_bundleIn_0_a_ready_T_1"} : i1
    %38 = comb.and bin %33, %37 {sv.namehint = "in_a_ready"} : i1
    %39 = comb.concat %c0_i119, %auto_in_a_bits_address {sv.namehint = "out0_a_bits_address"} : i119, i9
    %40 = comb.and bin %auto_in_d_ready, %0 {sv.namehint = "out0_d_ready"} : i1
    %41 = comb.and bin %auto_in_d_ready, %35 {sv.namehint = "out1_d_ready"} : i1
    %42 = comb.mux bin %0, %auto_out_0_d_valid, %auto_out_1_d_valid {sv.namehint = "in_d_valid"} : i1
    %43 = comb.mux bin %0, %auto_out_0_d_bits_opcode, %auto_out_1_d_bits_opcode {sv.namehint = "in_d_bits_opcode"} : i3
    %44 = comb.mux bin %0, %c0_i2, %auto_out_1_d_bits_param {sv.namehint = "in_d_bits_param"} : i2
    %45 = comb.mux bin %0, %auto_out_0_d_bits_size, %auto_out_1_d_bits_size {sv.namehint = "in_d_bits_size"} : i2
    %46 = comb.xor %0, %true : i1
    %47 = comb.and %46, %auto_out_1_d_bits_source {sv.namehint = "in_d_bits_source"} : i1
    %48 = comb.xor %0, %true : i1
    %49 = comb.and %48, %auto_out_1_d_bits_sink {sv.namehint = "in_d_bits_sink"} : i1
    %50 = comb.mux bin %0, %auto_out_0_d_bits_denied, %auto_out_1_d_bits_denied {sv.namehint = "in_d_bits_denied"} : i1
    %51 = comb.mux bin %0, %c0_i32, %auto_out_1_d_bits_data {sv.namehint = "in_d_bits_data"} : i32
    %52 = comb.mux bin %0, %auto_out_0_d_bits_corrupt, %auto_out_1_d_bits_corrupt {sv.namehint = "in_d_bits_corrupt"} : i1
    hw.output %38, %42, %43, %44, %45, %49, %50, %51, %52, %36, %auto_in_a_bits_opcode, %auto_in_a_bits_address, %auto_in_a_bits_data, %41, %34, %auto_in_a_bits_opcode, %39, %40 : i1, i1, i3, i2, i2, i1, i1, i32, i1, i1, i3, i9, i32, i1, i1, i3, i128, i1
  }
  hw.module private @TLMonitor_26(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i128, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c-1_i4 = hw.constant -1 : i4
    %true = hw.constant true
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i3 = hw.constant -1 : i3
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i128) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.and bin %io_in_a_valid, %5 : i1
    %7 = comb.xor bin %reset, %true : i1
    %8 = comb.and bin %6, %7 : i1
    %9 = comb.or bin %4, %reset : i1
    %10 = comb.xor bin %9, %true : i1
    %11 = comb.and bin %6, %10 : i1
    %12 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %13 = comb.and bin %io_in_a_valid, %12 : i1
    %14 = comb.and bin %13, %7 : i1
    %15 = comb.and bin %13, %10 : i1
    %16 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %17 = comb.and bin %io_in_a_valid, %16 : i1
    %18 = comb.and bin %17, %10 : i1
    %19 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %20 = comb.and bin %io_in_a_valid, %19 : i1
    %21 = comb.and bin %20, %10 : i1
    %22 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %23 = comb.and bin %io_in_a_valid, %22 : i1
    %24 = comb.and bin %23, %7 : i1
    %25 = comb.and bin %23, %10 : i1
    %26 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %27 = comb.and bin %io_in_a_valid, %26 : i1
    %28 = comb.and bin %27, %7 : i1
    %29 = comb.and bin %27, %10 : i1
    %30 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %31 = comb.and bin %io_in_a_valid, %30 : i1
    %32 = comb.and bin %31, %7 : i1
    %33 = comb.and bin %31, %10 : i1
    %34 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %35 = comb.and bin %io_in_a_valid, %34 : i1
    %36 = comb.and bin %35, %7 : i1
    %37 = comb.and bin %35, %10 : i1
    %38 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %39 = comb.or bin %38, %reset : i1
    %40 = comb.xor bin %39, %true : i1
    %41 = comb.and bin %io_in_d_valid, %40 : i1
    %42 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %43 = comb.and bin %io_in_d_valid, %42 : i1
    %44 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %45 = comb.or bin %44, %reset : i1
    %46 = comb.xor bin %45, %true : i1
    %47 = comb.and bin %43, %46 : i1
    %48 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %49 = comb.or bin %48, %reset : i1
    %50 = comb.xor bin %49, %true : i1
    %51 = comb.and bin %43, %50 : i1
    %52 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %53 = comb.or bin %52, %reset : i1
    %54 = comb.xor bin %53, %true : i1
    %55 = comb.and bin %43, %54 : i1
    %56 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %57 = comb.and bin %io_in_d_valid, %56 : i1
    %58 = comb.and bin %57, %46 : i1
    %59 = comb.and bin %57, %50 : i1
    %60 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %61 = comb.and bin %io_in_d_valid, %60 : i1
    %62 = comb.and bin %61, %46 : i1
    %63 = comb.or bin %52, %io_in_d_bits_corrupt, %reset : i1
    %64 = comb.xor bin %63, %true : i1
    %65 = comb.and bin %61, %64 : i1
    %66 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %67 = comb.and bin %io_in_d_valid, %66 : i1
    %68 = comb.and bin %67, %50 : i1
    %69 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %70 = comb.and bin %io_in_d_valid, %69 : i1
    %71 = comb.and bin %70, %64 : i1
    %72 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %73 = comb.and bin %io_in_d_valid, %72 : i1
    %74 = comb.and bin %73, %50 : i1
    %75 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %80 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %76 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %77 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %78 = comb.xor %75, %true : i1
    %79 = comb.or %78, %76 : i1
    %80 = comb.and %79, %a_first_counter : i1
    %opcode = seq.firreg %91 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %92 clock %clock {firrtl.random_init_start = 10 : ui64} : i128
    %81 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %82 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %83 = comb.or bin %82, %reset : i1
    %84 = comb.xor bin %83, %true : i1
    %85 = comb.and bin %81, %84 : i1
    %86 = comb.icmp bin eq %io_in_a_bits_address, %address : i128
    %87 = comb.or bin %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %81, %88 : i1
    %90 = comb.and bin %75, %77 : i1
    %91 = comb.mux bin %90, %io_in_a_bits_opcode, %opcode : i3
    %92 = comb.mux bin %90, %io_in_a_bits_address, %address : i128
    %93 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %98 clock %clock reset sync %reset, %false {firrtl.random_init_start = 138 : ui64} : i1
    %94 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %95 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %96 = comb.xor %93, %true : i1
    %97 = comb.or %96, %94 : i1
    %98 = comb.and %97, %d_first_counter : i1
    %opcode_1 = seq.firreg %113 clock %clock {firrtl.random_init_start = 139 : ui64} : i3
    %size_1 = seq.firreg %114 clock %clock {firrtl.random_init_start = 144 : ui64} : i2
    %denied = seq.firreg %115 clock %clock {firrtl.random_init_start = 148 : ui64} : i1
    %99 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %100 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %99, %102 : i1
    %104 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %105 = comb.or bin %104, %reset : i1
    %106 = comb.xor bin %105, %true : i1
    %107 = comb.and bin %99, %106 : i1
    %108 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %109 = comb.or bin %108, %reset : i1
    %110 = comb.xor bin %109, %true : i1
    %111 = comb.and bin %99, %110 : i1
    %112 = comb.and bin %93, %95 : i1
    %113 = comb.mux bin %112, %io_in_d_bits_opcode, %opcode_1 : i3
    %114 = comb.mux bin %112, %io_in_d_bits_size, %size_1 : i2
    %115 = comb.mux bin %112, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %184 clock %clock reset sync %reset, %false {firrtl.random_init_start = 149 : ui64} : i1
    %inflight_opcodes = seq.firreg %187 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 150 : ui64} : i4
    %inflight_sizes = seq.firreg %190 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 154 : ui64} : i4
    %a_first_counter_1 = seq.firreg %120 clock %clock reset sync %reset, %false {firrtl.random_init_start = 158 : ui64} : i1
    %116 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %117 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %118 = comb.xor %75, %true : i1
    %119 = comb.or %118, %116 : i1
    %120 = comb.and %119, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %125 clock %clock reset sync %reset, %false {firrtl.random_init_start = 159 : ui64} : i1
    %121 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %122 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %123 = comb.xor %93, %true : i1
    %124 = comb.or %123, %121 : i1
    %125 = comb.and %124, %d_first_counter_1 : i1
    %126 = comb.extract %inflight_opcodes from 1 : (i4) -> i3
    %127 = comb.extract %inflight_sizes from 1 : (i4) -> i3
    %128 = comb.concat %false, %127 {sv.namehint = "a_size_lookup"} : i1, i3
    %129 = comb.and bin %io_in_a_valid, %117 {sv.namehint = "_same_cycle_resp_T_1"} : i1
    %130 = comb.and bin %75, %117 {sv.namehint = "a_set"} : i1
    %131 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %132 = comb.mux bin %130, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %133 = comb.mux bin %130, %131, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %134 = comb.concat %false, %132 : i1, i3
    %135 = comb.mux bin %130, %134, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %136 = comb.xor bin %inflight, %true : i1
    %137 = comb.or bin %136, %reset : i1
    %138 = comb.xor bin %137, %true : i1
    %139 = comb.and bin %130, %138 : i1
    %140 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %141 = comb.and bin %io_in_d_valid, %122 : i1
    %142 = comb.xor bin %140, %true : i1
    %143 = comb.and bin %93, %122, %142 {sv.namehint = "d_clr"} : i1
    %144 = comb.replicate %143 {sv.namehint = "d_sizes_clr"} : (i1) -> i4
    %145 = comb.and bin %141, %142 : i1
    %146 = comb.or bin %inflight, %129, %reset : i1
    %147 = comb.xor bin %146, %true : i1
    %148 = comb.and bin %145, %147 : i1
    %149 = comb.and bin %145, %129 : i1
    %150 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %151 = comb.icmp bin eq %io_in_d_bits_opcode, %150 : i3
    %152 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %153 = comb.icmp bin eq %io_in_d_bits_opcode, %152 : i3
    %154 = comb.or bin %151, %153, %reset : i1
    %155 = comb.xor bin %154, %true : i1
    %156 = comb.and bin %149, %155 : i1
    %157 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %158 = comb.or bin %157, %reset : i1
    %159 = comb.xor bin %158, %true : i1
    %160 = comb.and bin %149, %159 : i1
    %161 = comb.xor bin %129, %true : i1
    %162 = comb.and bin %145, %161 : i1
    %163 = hw.array_get %1[%126] : !hw.array<8xi3>, i3
    %164 = comb.icmp bin eq %io_in_d_bits_opcode, %163 : i3
    %165 = hw.array_get %0[%126] : !hw.array<8xi3>, i3
    %166 = comb.icmp bin eq %io_in_d_bits_opcode, %165 : i3
    %167 = comb.or bin %164, %166, %reset : i1
    %168 = comb.xor bin %167, %true : i1
    %169 = comb.and bin %162, %168 : i1
    %170 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %171 = comb.icmp bin eq %170, %128 : i4
    %172 = comb.or bin %171, %reset : i1
    %173 = comb.xor bin %172, %true : i1
    %174 = comb.and bin %162, %173 : i1
    %175 = comb.and bin %141, %117 : i1
    %176 = comb.and bin %175, %io_in_a_valid : i1
    %177 = comb.and bin %176, %142 : i1
    %178 = comb.xor bin %io_in_d_ready, %true : i1
    %179 = comb.or bin %178, %io_in_a_ready, %reset : i1
    %180 = comb.xor bin %179, %true : i1
    %181 = comb.and bin %177, %180 : i1
    %182 = comb.or bin %inflight, %130 {sv.namehint = "_inflight_T"} : i1
    %183 = comb.xor bin %143, %true {sv.namehint = "_inflight_T_1"} : i1
    %184 = comb.and bin %182, %183 {sv.namehint = "_inflight_T_2"} : i1
    %185 = comb.or bin %inflight_opcodes, %133 {sv.namehint = "_inflight_opcodes_T"} : i4
    %186 = comb.xor bin %144, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %187 = comb.and bin %185, %186 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %188 = comb.or bin %inflight_sizes, %135 {sv.namehint = "_inflight_sizes_T"} : i4
    %189 = comb.xor bin %144, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %190 = comb.and bin %188, %189 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %197 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 160 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %191 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %192 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %193 = comb.or bin %136, %191, %192, %reset : i1
    %194 = comb.xor bin %193, %true : i1
    %195 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %196 = comb.or bin %75, %93 : i1
    %197 = comb.mux bin %196, %c0_i32, %195 : i32
    %inflight_1 = seq.firreg %216 clock %clock reset sync %reset, %false {firrtl.random_init_start = 192 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %218 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 197 : ui64} : i4
    %d_first_counter_2 = seq.firreg %202 clock %clock reset sync %reset, %false {firrtl.random_init_start = 202 : ui64} : i1
    %198 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %199 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %200 = comb.xor %93, %true : i1
    %201 = comb.or %200, %198 : i1
    %202 = comb.and %201, %d_first_counter_2 : i1
    %203 = comb.extract %inflight_sizes_1 from 1 : (i4) -> i3
    %204 = comb.concat %false, %203 {sv.namehint = "c_size_lookup"} : i1, i3
    %205 = comb.and bin %93, %199, %140 {sv.namehint = "d_clr_1"} : i1
    %206 = comb.replicate %205 {sv.namehint = "d_sizes_clr_1"} : (i1) -> i4
    %207 = comb.and bin %io_in_d_valid, %199, %140 : i1
    %208 = comb.or bin %inflight_1, %reset : i1
    %209 = comb.xor bin %208, %true : i1
    %210 = comb.and bin %207, %209 : i1
    %211 = comb.icmp bin eq %170, %204 : i4
    %212 = comb.or bin %211, %reset : i1
    %213 = comb.xor bin %212, %true : i1
    %214 = comb.and bin %207, %213 : i1
    %215 = comb.xor bin %205, %true {sv.namehint = "_inflight_T_4"} : i1
    %216 = comb.and bin %inflight_1, %215 {sv.namehint = "_inflight_T_5"} : i1
    %217 = comb.xor bin %206, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %218 = comb.and bin %inflight_sizes_1, %217 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %225 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 203 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %219 = comb.xor bin %inflight_1, %true : i1
    %220 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %221 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %222 = comb.or bin %219, %220, %221, %reset : i1
    %223 = comb.xor bin %222, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %226 = comb.and bin %STOP_COND_, %false : i1
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %227 = comb.and bin %STOP_COND_, %8 : i1
        sv.if %227 {
          sv.fatal 1
        }
        sv.if %227 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %228 = comb.and bin %STOP_COND_, %11 : i1
        sv.if %228 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %229 = comb.and bin %STOP_COND_, %14 : i1
        sv.if %229 {
          sv.fatal 1
        }
        sv.if %229 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %230 = comb.and bin %STOP_COND_, %15 : i1
        sv.if %230 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %229 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %231 = comb.and bin %STOP_COND_, %18 : i1
        sv.if %231 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %232 = comb.and bin %STOP_COND_, %21 : i1
        sv.if %232 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %233 = comb.and bin %STOP_COND_, %24 : i1
        sv.if %233 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %234 = comb.and bin %STOP_COND_, %25 : i1
        sv.if %234 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %235 = comb.and bin %STOP_COND_, %28 : i1
        sv.if %235 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %236 = comb.and bin %STOP_COND_, %29 : i1
        sv.if %236 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %237 = comb.and bin %STOP_COND_, %32 : i1
        sv.if %237 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %238 = comb.and bin %STOP_COND_, %33 : i1
        sv.if %238 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %239 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %239 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %240 = comb.and bin %STOP_COND_, %37 : i1
        sv.if %240 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %241 = comb.and bin %STOP_COND_, %41 : i1
        sv.if %241 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %242 = comb.and bin %STOP_COND_, %47 : i1
        sv.if %242 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %243 = comb.and bin %STOP_COND_, %51 : i1
        sv.if %243 {
          sv.fatal 1
        }
        %244 = comb.and bin %STOP_COND_, %55 : i1
        sv.if %244 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %245 = comb.and bin %STOP_COND_, %58 : i1
        sv.if %245 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %246 = comb.and bin %STOP_COND_, %59 : i1
        sv.if %246 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %247 = comb.and bin %STOP_COND_, %62 : i1
        sv.if %247 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %248 = comb.and bin %STOP_COND_, %65 : i1
        sv.if %248 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %249 = comb.and bin %STOP_COND_, %68 : i1
        sv.if %249 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %250 = comb.and bin %STOP_COND_, %71 : i1
        sv.if %250 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %251 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %251 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %252 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %252 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %253 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %253 {
          sv.fatal 1
        }
        %254 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %254 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %255 = comb.and bin %STOP_COND_, %107 : i1
        sv.if %255 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %256 = comb.and bin %STOP_COND_, %111 : i1
        sv.if %256 {
          sv.fatal 1
        }
        %257 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %257 {
          sv.fatal 1
        }
        %258 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %258 {
          sv.fatal 1
        }
        %259 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %259 {
          sv.fatal 1
        }
        %260 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %260 {
          sv.fatal 1
        }
        %261 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %261 {
          sv.fatal 1
        }
        %262 = comb.and bin %STOP_COND_, %174 : i1
        sv.if %262 {
          sv.fatal 1
        }
        %263 = comb.and bin %STOP_COND_, %181 : i1
        sv.if %263 {
          sv.fatal 1
        }
        %264 = comb.and bin %STOP_COND_, %194 : i1
        sv.if %264 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %265 = comb.and bin %STOP_COND_, %210 : i1
        sv.if %265 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %266 = comb.and bin %STOP_COND_, %214 : i1
        sv.if %266 {
          sv.fatal 1
        }
        sv.if %226 {
          sv.fatal 1
        }
        %267 = comb.and bin %STOP_COND_, %223 : i1
        sv.if %267 {
          sv.fatal 1
        }
      }
    }
    %224 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %225 = comb.mux bin %93, %c0_i32, %224 : i32
    hw.output
  }
  hw.module private @TLError_1(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i128, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_size : i2, out auto_in_d_bits_denied : i1, out auto_in_d_bits_corrupt : i1) {
    %0 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %false = hw.constant false
    %true = hw.constant true
    %c0_i3 = hw.constant 0 : i3
    %c-4_i3 = hw.constant -4 : i3
    %1 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_26(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %11: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i128, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %30: i1, io_in_d_bits_opcode: %33: i3, io_in_d_bits_size: %32: i2, io_in_d_bits_denied: %24: i1, io_in_d_bits_corrupt: %31: i1) -> ()
    %idle = seq.firreg %17 clock %clock reset sync %reset, %true {firrtl.random_init_start = 0 : ui64} : i1
    %2 = comb.and bin %27, %12 {sv.namehint = "done"} : i1
    %3 = comb.extract %13 from 0 {sv.namehint = "opdata_1"} : (i3) -> i1
    %counter = seq.firreg %8 clock %clock reset sync %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    %4 = comb.add %counter, %true {sv.namehint = "_counter1_T"} : i1
    %5 = comb.xor bin %counter, %true {sv.namehint = "da_first"} : i1
    %6 = comb.xor %2, %true : i1
    %7 = comb.or %6, %4 : i1
    %8 = comb.and %7, %counter : i1
    %9 = comb.or bin %idle, %5, %reset : i1
    %10 = comb.xor bin %9, %true : i1
    %11 = comb.and bin %27, %idle {sv.namehint = "in_a_ready"} : i1
    %12 = comb.and bin %auto_in_a_valid, %idle {sv.namehint = "da_valid"} : i1
    %13 = hw.array_get %0[%auto_in_a_bits_opcode] {sv.namehint = "da_bits_opcode"} : !hw.array<8xi3>, i3
    %14 = comb.icmp bin eq %13, %c-4_i3 : i3
    %15 = comb.and bin %2, %14 : i1
    %16 = comb.xor %15, %true : i1
    %17 = comb.and %16, %idle : i1
    %beatsLeft = seq.firreg %23 clock %clock reset sync %reset, %false {firrtl.random_init_start = 5 : ui64} : i1
    %18 = comb.xor bin %beatsLeft, %true {sv.namehint = "idle_1"} : i1
    %19 = comb.and bin %18, %auto_in_d_ready {sv.namehint = "latch"} : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %1 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %34 = comb.and bin %STOP_COND_, %10 : i1
        sv.if %34 {
          sv.fatal 1
        }
        %35 = comb.and bin %STOP_COND_, %false : i1
        sv.if %35 {
          sv.fatal 1
        }
        %36 = comb.and bin %STOP_COND_, %false : i1
        sv.if %36 {
          sv.fatal 1
        }
        sv.if %35 {
          sv.fatal 1
        }
      }
    }
    %20 = comb.and bin %auto_in_d_ready, %30 {sv.namehint = "_beatsLeft_T_2"} : i1
    %21 = comb.sub %beatsLeft, %20 {sv.namehint = "_beatsLeft_T_3"} : i1
    %22 = comb.xor %19, %true : i1
    %23 = comb.and %22, %21 {sv.namehint = "_beatsLeft_T_5"} : i1
    %state_1 = seq.firreg %25 clock %clock reset sync %reset, %false {firrtl.random_init_start = 7 : ui64} : i1
    %24 = comb.mux bin %beatsLeft, %state_1, %12 {sv.namehint = "muxStateEarly_1"} : i1
    %25 = comb.mux bin %beatsLeft, %state_1, %12 {sv.namehint = "muxStateQual_1"} : i1
    %26 = comb.or %18, %state_1 {sv.namehint = "allowed_1"} : i1
    %27 = comb.and bin %auto_in_d_ready, %26 {sv.namehint = "out_1_ready"} : i1
    %28 = comb.xor %beatsLeft, %true : i1
    %29 = comb.or %28, %state_1 : i1
    %30 = comb.and %29, %12 {sv.namehint = "out_2_valid"} : i1
    %31 = comb.and %24, %3 {sv.namehint = "out_2_bits_corrupt"} : i1
    %32 = comb.concat %24, %false {sv.namehint = "out_2_bits_size"} : i1, i1
    %33 = comb.mux bin %24, %13, %c0_i3 {sv.namehint = "out_2_bits_opcode"} : i3
    hw.output %11, %30, %33, %32, %24, %31 : i1, i1, i3, i2, i1, i1
  }
  hw.module private @TLBusBypass(in %clock : !seq.clock, in %reset : i1, in %auto_node_out_out_a_ready : i1, out auto_node_out_out_a_valid : i1, out auto_node_out_out_a_bits_opcode : i3, out auto_node_out_out_a_bits_address : i9, out auto_node_out_out_a_bits_data : i32, out auto_node_out_out_d_ready : i1, in %auto_node_out_out_d_valid : i1, in %auto_node_out_out_d_bits_opcode : i3, in %auto_node_out_out_d_bits_param : i2, in %auto_node_out_out_d_bits_size : i2, in %auto_node_out_out_d_bits_source : i1, in %auto_node_out_out_d_bits_sink : i1, in %auto_node_out_out_d_bits_denied : i1, in %auto_node_out_out_d_bits_data : i32, in %auto_node_out_out_d_bits_corrupt : i1, out auto_node_in_in_a_ready : i1, in %auto_node_in_in_a_valid : i1, in %auto_node_in_in_a_bits_opcode : i3, in %auto_node_in_in_a_bits_address : i9, in %auto_node_in_in_a_bits_data : i32, in %auto_node_in_in_d_ready : i1, out auto_node_in_in_d_valid : i1, out auto_node_in_in_d_bits_opcode : i3, out auto_node_in_in_d_bits_param : i2, out auto_node_in_in_d_bits_size : i2, out auto_node_in_in_d_bits_sink : i1, out auto_node_in_in_d_bits_denied : i1, out auto_node_in_in_d_bits_data : i32, out auto_node_in_in_d_bits_corrupt : i1, in %io_bypass : i1) {
    %bar.auto_in_a_ready, %bar.auto_in_d_valid, %bar.auto_in_d_bits_opcode, %bar.auto_in_d_bits_param, %bar.auto_in_d_bits_size, %bar.auto_in_d_bits_sink, %bar.auto_in_d_bits_denied, %bar.auto_in_d_bits_data, %bar.auto_in_d_bits_corrupt, %bar.auto_out_1_a_valid, %bar.auto_out_1_a_bits_opcode, %bar.auto_out_1_a_bits_address, %bar.auto_out_1_a_bits_data, %bar.auto_out_1_d_ready, %bar.auto_out_0_a_valid, %bar.auto_out_0_a_bits_opcode, %bar.auto_out_0_a_bits_address, %bar.auto_out_0_d_ready = hw.instance "bar" @TLBusBypassBar(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %auto_node_in_in_a_valid: i1, auto_in_a_bits_opcode: %auto_node_in_in_a_bits_opcode: i3, auto_in_a_bits_address: %auto_node_in_in_a_bits_address: i9, auto_in_a_bits_data: %auto_node_in_in_a_bits_data: i32, auto_in_d_ready: %auto_node_in_in_d_ready: i1, auto_out_1_a_ready: %auto_node_out_out_a_ready: i1, auto_out_1_d_valid: %auto_node_out_out_d_valid: i1, auto_out_1_d_bits_opcode: %auto_node_out_out_d_bits_opcode: i3, auto_out_1_d_bits_param: %auto_node_out_out_d_bits_param: i2, auto_out_1_d_bits_size: %auto_node_out_out_d_bits_size: i2, auto_out_1_d_bits_source: %auto_node_out_out_d_bits_source: i1, auto_out_1_d_bits_sink: %auto_node_out_out_d_bits_sink: i1, auto_out_1_d_bits_denied: %auto_node_out_out_d_bits_denied: i1, auto_out_1_d_bits_data: %auto_node_out_out_d_bits_data: i32, auto_out_1_d_bits_corrupt: %auto_node_out_out_d_bits_corrupt: i1, auto_out_0_a_ready: %error.auto_in_a_ready: i1, auto_out_0_d_valid: %error.auto_in_d_valid: i1, auto_out_0_d_bits_opcode: %error.auto_in_d_bits_opcode: i3, auto_out_0_d_bits_size: %error.auto_in_d_bits_size: i2, auto_out_0_d_bits_denied: %error.auto_in_d_bits_denied: i1, auto_out_0_d_bits_corrupt: %error.auto_in_d_bits_corrupt: i1, io_bypass: %io_bypass: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i2, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i32, auto_in_d_bits_corrupt: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_address: i9, auto_out_1_a_bits_data: i32, auto_out_1_d_ready: i1, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_address: i128, auto_out_0_d_ready: i1) {sv.namehint = "bundleIn_0_d_valid"}
    %error.auto_in_a_ready, %error.auto_in_d_valid, %error.auto_in_d_bits_opcode, %error.auto_in_d_bits_size, %error.auto_in_d_bits_denied, %error.auto_in_d_bits_corrupt = hw.instance "error" @TLError_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_a_valid: %bar.auto_out_0_a_valid: i1, auto_in_a_bits_opcode: %bar.auto_out_0_a_bits_opcode: i3, auto_in_a_bits_address: %bar.auto_out_0_a_bits_address: i128, auto_in_d_ready: %bar.auto_out_0_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i2, auto_in_d_bits_denied: i1, auto_in_d_bits_corrupt: i1) {sv.namehint = "error.auto_in_d_valid"}
    hw.output %bar.auto_out_1_a_valid, %bar.auto_out_1_a_bits_opcode, %bar.auto_out_1_a_bits_address, %bar.auto_out_1_a_bits_data, %bar.auto_out_1_d_ready, %bar.auto_in_a_ready, %bar.auto_in_d_valid, %bar.auto_in_d_bits_opcode, %bar.auto_in_d_bits_param, %bar.auto_in_d_bits_size, %bar.auto_in_d_bits_sink, %bar.auto_in_d_bits_denied, %bar.auto_in_d_bits_data, %bar.auto_in_d_bits_corrupt : i1, i3, i9, i32, i1, i1, i1, i3, i2, i2, i1, i1, i32, i1
  }
  hw.module private @TLMonitor_27(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_address : i9, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_param : i2, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i1, in %io_in_d_bits_sink : i1, in %io_in_d_bits_denied : i1, in %io_in_d_bits_corrupt : i1) {
    %c-5_i4 = hw.constant -5 : i4
    %c-15_i5 = hw.constant -15 : i5
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c-1_i2 = hw.constant -1 : i2
    %c0_i6 = hw.constant 0 : i6
    %c15_i31 = hw.constant 15 : i31
    %c3_i3 = hw.constant 3 : i3
    %false = hw.constant false
    %c-2_i2 = hw.constant -2 : i2
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-3_i3 = hw.constant -3 : i3
    %true = hw.constant true
    %c-4_i3 = hw.constant -4 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i4 = hw.constant -1 : i4
    %c-1_i3 = hw.constant -1 : i3
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %4 = comb.icmp bin eq %3, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %5 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %6 = comb.and bin %io_in_a_valid, %5 : i1
    %7 = comb.xor bin %reset, %true : i1
    %8 = comb.and bin %6, %7 : i1
    %9 = comb.or bin %4, %reset : i1
    %10 = comb.xor bin %9, %true : i1
    %11 = comb.and bin %6, %10 : i1
    %12 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %13 = comb.and bin %io_in_a_valid, %12 : i1
    %14 = comb.and bin %13, %7 : i1
    %15 = comb.and bin %13, %10 : i1
    %16 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %17 = comb.and bin %io_in_a_valid, %16 : i1
    %18 = comb.extract %io_in_a_bits_address from 6 : (i9) -> i3
    %19 = comb.icmp bin eq %18, %c0_i3 : i3
    %20 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i2
    %21 = comb.extract %io_in_a_bits_address from 2 : (i9) -> i5
    %22 = comb.xor %21, %c-15_i5 : i5
    %23 = comb.extract %22 from 2 : (i5) -> i3
    %24 = comb.extract %22 from 0 : (i5) -> i1
    %25 = comb.concat %20, %23, %24 : i2, i3, i1
    %26 = comb.icmp bin eq %25, %c0_i6 : i6
    %27 = comb.extract %io_in_a_bits_address from 3 : (i9) -> i4
    %28 = comb.xor %27, %c-5_i4 : i4
    %29 = comb.concat %20, %28 : i2, i4
    %30 = comb.icmp bin eq %29, %c0_i6 : i6
    %31 = comb.extract %io_in_a_bits_address from 5 : (i9) -> i2
    %32 = comb.xor %31, %c-1_i2 : i2
    %33 = comb.concat %20, %32 : i2, i2
    %34 = comb.icmp bin eq %33, %c0_i4 : i4
    %35 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %36 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i1
    %37 = comb.xor %36, %true : i1
    %38 = comb.concat %35, %37 : i1, i1
    %39 = comb.icmp bin eq %38, %c0_i2 : i2
    %40 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %41 = comb.or bin %19, %26, %30, %34, %39, %40, %reset : i1
    %42 = comb.xor bin %41, %true : i1
    %43 = comb.and bin %17, %42 : i1
    %44 = comb.and bin %17, %10 : i1
    %45 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %46 = comb.and bin %io_in_a_valid, %45 : i1
    %47 = comb.and bin %46, %42 : i1
    %48 = comb.and bin %46, %10 : i1
    %49 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %50 = comb.and bin %io_in_a_valid, %49 : i1
    %51 = comb.and bin %50, %7 : i1
    %52 = comb.and bin %50, %10 : i1
    %53 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %54 = comb.and bin %io_in_a_valid, %53 : i1
    %55 = comb.and bin %54, %7 : i1
    %56 = comb.and bin %54, %10 : i1
    %57 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %58 = comb.and bin %io_in_a_valid, %57 : i1
    %59 = comb.and bin %58, %7 : i1
    %60 = comb.and bin %58, %10 : i1
    %61 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %62 = comb.and bin %io_in_a_valid, %61 : i1
    %63 = comb.and bin %62, %7 : i1
    %64 = comb.and bin %62, %10 : i1
    %65 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %66 = comb.or bin %65, %reset : i1
    %67 = comb.xor bin %66, %true : i1
    %68 = comb.and bin %io_in_d_valid, %67 : i1
    %69 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_source_ok_T_1"} : i1
    %70 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %71 = comb.and bin %io_in_d_valid, %70 : i1
    %72 = comb.or bin %69, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %71, %73 : i1
    %75 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %71, %77 : i1
    %79 = comb.icmp bin eq %io_in_d_bits_param, %c0_i2 : i2
    %80 = comb.or bin %79, %reset : i1
    %81 = comb.xor bin %80, %true : i1
    %82 = comb.and bin %71, %81 : i1
    %83 = comb.xor bin %io_in_d_bits_corrupt, %true : i1
    %84 = comb.or bin %83, %reset : i1
    %85 = comb.xor bin %84, %true : i1
    %86 = comb.and bin %71, %85 : i1
    %87 = comb.xor bin %io_in_d_bits_denied, %true : i1
    %88 = comb.or bin %87, %reset : i1
    %89 = comb.xor bin %88, %true : i1
    %90 = comb.and bin %71, %89 : i1
    %91 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %92 = comb.and bin %io_in_d_valid, %91 : i1
    %93 = comb.and bin %92, %73 : i1
    %94 = comb.and bin %92, %7 : i1
    %95 = comb.and bin %92, %77 : i1
    %96 = comb.icmp bin ne %io_in_d_bits_param, %c-1_i2 : i2
    %97 = comb.or bin %96, %reset : i1
    %98 = comb.xor bin %97, %true : i1
    %99 = comb.and bin %92, %98 : i1
    %100 = comb.icmp bin ne %io_in_d_bits_param, %c-2_i2 : i2
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %92, %102 : i1
    %104 = comb.and bin %92, %85 : i1
    %105 = comb.and bin %92, %89 : i1
    %106 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %107 = comb.and bin %io_in_d_valid, %106 : i1
    %108 = comb.and bin %107, %73 : i1
    %109 = comb.and bin %107, %7 : i1
    %110 = comb.and bin %107, %77 : i1
    %111 = comb.and bin %107, %98 : i1
    %112 = comb.and bin %107, %102 : i1
    %113 = comb.or bin %87, %io_in_d_bits_corrupt, %reset : i1
    %114 = comb.xor bin %113, %true : i1
    %115 = comb.and bin %107, %114 : i1
    %116 = comb.and bin %107, %89 : i1
    %117 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %118 = comb.and bin %io_in_d_valid, %117 : i1
    %119 = comb.and bin %118, %73 : i1
    %120 = comb.and bin %118, %81 : i1
    %121 = comb.and bin %118, %85 : i1
    %122 = comb.and bin %118, %89 : i1
    %123 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %124 = comb.and bin %io_in_d_valid, %123 : i1
    %125 = comb.and bin %124, %73 : i1
    %126 = comb.and bin %124, %81 : i1
    %127 = comb.and bin %124, %114 : i1
    %128 = comb.and bin %124, %89 : i1
    %129 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %130 = comb.and bin %io_in_d_valid, %129 : i1
    %131 = comb.and bin %130, %73 : i1
    %132 = comb.and bin %130, %81 : i1
    %133 = comb.and bin %130, %85 : i1
    %134 = comb.and bin %130, %89 : i1
    %135 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %140 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %136 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %137 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %138 = comb.xor %135, %true : i1
    %139 = comb.or %138, %136 : i1
    %140 = comb.and %139, %a_first_counter : i1
    %opcode = seq.firreg %151 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %address = seq.firreg %152 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %141 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %142 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %143 = comb.or bin %142, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.and bin %141, %144 : i1
    %146 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %147 = comb.or bin %146, %reset : i1
    %148 = comb.xor bin %147, %true : i1
    %149 = comb.and bin %141, %148 : i1
    %150 = comb.and bin %135, %137 : i1
    %151 = comb.mux bin %150, %io_in_a_bits_opcode, %opcode : i3
    %152 = comb.mux bin %150, %io_in_a_bits_address, %address : i9
    %153 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %158 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %154 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %155 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %156 = comb.xor %153, %true : i1
    %157 = comb.or %156, %154 : i1
    %158 = comb.and %157, %d_first_counter : i1
    %opcode_1 = seq.firreg %185 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %param_1 = seq.firreg %186 clock %clock {firrtl.random_init_start = 23 : ui64} : i2
    %size_1 = seq.firreg %187 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %source_1 = seq.firreg %188 clock %clock {firrtl.random_init_start = 27 : ui64} : i1
    %sink = seq.firreg %189 clock %clock {firrtl.random_init_start = 28 : ui64} : i1
    %denied = seq.firreg %190 clock %clock {firrtl.random_init_start = 29 : ui64} : i1
    %159 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %160 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %161 = comb.or bin %160, %reset : i1
    %162 = comb.xor bin %161, %true : i1
    %163 = comb.and bin %159, %162 : i1
    %164 = comb.icmp bin eq %io_in_d_bits_param, %param_1 : i2
    %165 = comb.or bin %164, %reset : i1
    %166 = comb.xor bin %165, %true : i1
    %167 = comb.and bin %159, %166 : i1
    %168 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %169 = comb.or bin %168, %reset : i1
    %170 = comb.xor bin %169, %true : i1
    %171 = comb.and bin %159, %170 : i1
    %172 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %173 = comb.or bin %172, %reset : i1
    %174 = comb.xor bin %173, %true : i1
    %175 = comb.and bin %159, %174 : i1
    %176 = comb.icmp bin eq %io_in_d_bits_sink, %sink : i1
    %177 = comb.or bin %176, %reset : i1
    %178 = comb.xor bin %177, %true : i1
    %179 = comb.and bin %159, %178 : i1
    %180 = comb.icmp bin eq %io_in_d_bits_denied, %denied : i1
    %181 = comb.or bin %180, %reset : i1
    %182 = comb.xor bin %181, %true : i1
    %183 = comb.and bin %159, %182 : i1
    %184 = comb.and bin %153, %155 : i1
    %185 = comb.mux bin %184, %io_in_d_bits_opcode, %opcode_1 : i3
    %186 = comb.mux bin %184, %io_in_d_bits_param, %param_1 : i2
    %187 = comb.mux bin %184, %io_in_d_bits_size, %size_1 : i2
    %188 = comb.mux bin %184, %io_in_d_bits_source, %source_1 : i1
    %189 = comb.mux bin %184, %io_in_d_bits_sink, %sink : i1
    %190 = comb.mux bin %184, %io_in_d_bits_denied, %denied : i1
    %inflight = seq.firreg %281 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %284 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %287 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %195 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %191 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %192 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %193 = comb.xor %135, %true : i1
    %194 = comb.or %193, %191 : i1
    %195 = comb.and %194, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %200 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %196 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %197 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %198 = comb.xor %153, %true : i1
    %199 = comb.or %198, %196 : i1
    %200 = comb.and %199, %d_first_counter_1 : i1
    %201 = comb.concat %false, %io_in_d_bits_source, %c0_i2 : i1, i1, i2
    %202 = comb.shru bin %inflight_opcodes, %201 {sv.namehint = "_a_opcode_lookup_T_1"} : i4
    %203 = comb.extract %202 from 1 : (i4) -> i3
    %204 = comb.shru bin %inflight_sizes, %201 {sv.namehint = "_a_size_lookup_T_1"} : i4
    %205 = comb.extract %204 from 1 : (i4) -> i3
    %206 = comb.concat %false, %205 {sv.namehint = "a_size_lookup"} : i1, i3
    %207 = comb.and bin %io_in_a_valid, %192 {sv.namehint = "a_set_wo_ready"} : i1
    %208 = comb.and bin %135, %192 {sv.namehint = "a_set"} : i1
    %209 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %210 = comb.mux bin %208, %c-3_i3, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %211 = comb.mux bin %208, %209, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %212 = comb.concat %false, %210 : i1, i3
    %213 = comb.mux bin %208, %212, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %214 = comb.xor bin %inflight, %true : i1
    %215 = comb.or bin %214, %reset : i1
    %216 = comb.xor bin %215, %true : i1
    %217 = comb.and bin %208, %216 : i1
    %218 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %219 = comb.and bin %io_in_d_valid, %197 : i1
    %220 = comb.xor bin %218, %true : i1
    %221 = comb.and bin %219, %220 : i1
    %222 = comb.xor %io_in_d_bits_source, %true : i1
    %223 = comb.and %221, %222 {sv.namehint = "d_clr_wo_ready"} : i1
    %224 = comb.and bin %153, %197, %220 : i1
    %225 = comb.xor %io_in_d_bits_source, %true : i1
    %226 = comb.and %224, %225 {sv.namehint = "d_clr"} : i1
    %227 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %228 = comb.shl bin %c15_i31, %227 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %229 = comb.extract %228 from 0 : (i31) -> i4
    %230 = comb.mux bin %224, %229, %c0_i4 {sv.namehint = "d_opcodes_clr"} : i4
    %231 = comb.shl bin %c15_i31, %227 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %232 = comb.extract %231 from 0 : (i31) -> i4
    %233 = comb.mux bin %224, %232, %c0_i4 {sv.namehint = "d_sizes_clr"} : i4
    %234 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %235 = comb.and bin %207, %234 {sv.namehint = "same_cycle_resp"} : i1
    %236 = comb.shru bin %inflight, %io_in_d_bits_source : i1
    %237 = comb.or bin %236, %235, %reset : i1
    %238 = comb.xor bin %237, %true : i1
    %239 = comb.and bin %221, %238 : i1
    %240 = comb.and bin %221, %235 : i1
    %241 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %242 = comb.icmp bin eq %io_in_d_bits_opcode, %241 : i3
    %243 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %244 = comb.icmp bin eq %io_in_d_bits_opcode, %243 : i3
    %245 = comb.or bin %242, %244, %reset : i1
    %246 = comb.xor bin %245, %true : i1
    %247 = comb.and bin %240, %246 : i1
    %248 = comb.icmp bin eq %io_in_d_bits_size, %c-2_i2 : i2
    %249 = comb.or bin %248, %reset : i1
    %250 = comb.xor bin %249, %true : i1
    %251 = comb.and bin %240, %250 : i1
    %252 = comb.xor bin %235, %true : i1
    %253 = comb.and bin %221, %252 : i1
    %254 = hw.array_get %1[%203] : !hw.array<8xi3>, i3
    %255 = comb.icmp bin eq %io_in_d_bits_opcode, %254 : i3
    %256 = hw.array_get %0[%203] : !hw.array<8xi3>, i3
    %257 = comb.icmp bin eq %io_in_d_bits_opcode, %256 : i3
    %258 = comb.or bin %255, %257, %reset : i1
    %259 = comb.xor bin %258, %true : i1
    %260 = comb.and bin %253, %259 : i1
    %261 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %262 = comb.icmp bin eq %261, %206 : i4
    %263 = comb.or bin %262, %reset : i1
    %264 = comb.xor bin %263, %true : i1
    %265 = comb.and bin %253, %264 : i1
    %266 = comb.and bin %219, %192 : i1
    %267 = comb.and bin %266, %io_in_a_valid : i1
    %268 = comb.xor bin %io_in_d_bits_source, %true : i1
    %269 = comb.and bin %267, %268 : i1
    %270 = comb.and bin %269, %220 : i1
    %271 = comb.xor bin %io_in_d_ready, %true : i1
    %272 = comb.or bin %271, %io_in_a_ready, %reset : i1
    %273 = comb.xor bin %272, %true : i1
    %274 = comb.and bin %270, %273 : i1
    %275 = comb.icmp bin ne %207, %223 : i1
    %276 = comb.xor bin %207, %true : i1
    %277 = comb.or bin %275, %276, %reset : i1
    %278 = comb.xor bin %277, %true : i1
    %279 = comb.or bin %inflight, %208 {sv.namehint = "_inflight_T"} : i1
    %280 = comb.xor bin %226, %true {sv.namehint = "_inflight_T_1"} : i1
    %281 = comb.and bin %279, %280 {sv.namehint = "_inflight_T_2"} : i1
    %282 = comb.or bin %inflight_opcodes, %211 {sv.namehint = "_inflight_opcodes_T"} : i4
    %283 = comb.xor bin %230, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %284 = comb.and bin %282, %283 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %285 = comb.or bin %inflight_sizes, %213 {sv.namehint = "_inflight_sizes_T"} : i4
    %286 = comb.xor bin %233, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %287 = comb.and bin %285, %286 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %294 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %288 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %289 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %290 = comb.or bin %214, %288, %289, %reset : i1
    %291 = comb.xor bin %290, %true : i1
    %292 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %293 = comb.or bin %135, %153 : i1
    %294 = comb.mux bin %293, %c0_i32, %292 : i32
    %inflight_1 = seq.firreg %319 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %321 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %299 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %295 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %296 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %297 = comb.xor %153, %true : i1
    %298 = comb.or %297, %295 : i1
    %299 = comb.and %298, %d_first_counter_2 : i1
    %300 = comb.shru bin %inflight_sizes_1, %201 {sv.namehint = "_c_size_lookup_T_1"} : i4
    %301 = comb.extract %300 from 1 : (i4) -> i3
    %302 = comb.concat %false, %301 {sv.namehint = "c_size_lookup"} : i1, i3
    %303 = comb.and bin %153, %296, %218 : i1
    %304 = comb.xor %io_in_d_bits_source, %true : i1
    %305 = comb.and %303, %304 {sv.namehint = "d_clr_1"} : i1
    %306 = comb.shl bin %c15_i31, %227 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %307 = comb.extract %306 from 0 : (i31) -> i4
    %308 = comb.mux bin %303, %307, %c0_i4 {sv.namehint = "d_sizes_clr_1"} : i4
    %309 = comb.and bin %io_in_d_valid, %296, %218 : i1
    %310 = comb.shru bin %inflight_1, %io_in_d_bits_source : i1
    %311 = comb.or bin %310, %reset : i1
    %312 = comb.xor bin %311, %true : i1
    %313 = comb.and bin %309, %312 : i1
    %314 = comb.icmp bin eq %261, %302 : i4
    %315 = comb.or bin %314, %reset : i1
    %316 = comb.xor bin %315, %true : i1
    %317 = comb.and bin %309, %316 : i1
    %318 = comb.xor bin %305, %true {sv.namehint = "_inflight_T_4"} : i1
    %319 = comb.and bin %inflight_1, %318 {sv.namehint = "_inflight_T_5"} : i1
    %320 = comb.xor bin %308, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %321 = comb.and bin %inflight_sizes_1, %320 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %328 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %322 = comb.xor bin %inflight_1, %true : i1
    %323 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %324 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %325 = comb.or bin %322, %323, %324, %reset : i1
    %326 = comb.xor bin %325, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %329 = comb.and bin %STOP_COND_, %false : i1
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %330 = comb.and bin %STOP_COND_, %8 : i1
        sv.if %330 {
          sv.fatal 1
        }
        sv.if %330 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %331 = comb.and bin %STOP_COND_, %11 : i1
        sv.if %331 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %332 = comb.and bin %STOP_COND_, %14 : i1
        sv.if %332 {
          sv.fatal 1
        }
        sv.if %332 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %333 = comb.and bin %STOP_COND_, %15 : i1
        sv.if %333 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %332 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %334 = comb.and bin %STOP_COND_, %43 : i1
        sv.if %334 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %335 = comb.and bin %STOP_COND_, %44 : i1
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %336 = comb.and bin %STOP_COND_, %47 : i1
        sv.if %336 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %337 = comb.and bin %STOP_COND_, %48 : i1
        sv.if %337 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %338 = comb.and bin %STOP_COND_, %51 : i1
        sv.if %338 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %339 = comb.and bin %STOP_COND_, %52 : i1
        sv.if %339 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %340 = comb.and bin %STOP_COND_, %55 : i1
        sv.if %340 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %341 = comb.and bin %STOP_COND_, %56 : i1
        sv.if %341 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %342 = comb.and bin %STOP_COND_, %59 : i1
        sv.if %342 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %343 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %343 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %344 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %344 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %345 = comb.and bin %STOP_COND_, %64 : i1
        sv.if %345 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %346 = comb.and bin %STOP_COND_, %68 : i1
        sv.if %346 {
          sv.fatal 1
        }
        %347 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %347 {
          sv.fatal 1
        }
        %348 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %348 {
          sv.fatal 1
        }
        %349 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %349 {
          sv.fatal 1
        }
        %350 = comb.and bin %STOP_COND_, %86 : i1
        sv.if %350 {
          sv.fatal 1
        }
        %351 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %351 {
          sv.fatal 1
        }
        %352 = comb.and bin %STOP_COND_, %93 : i1
        sv.if %352 {
          sv.fatal 1
        }
        %353 = comb.and bin %STOP_COND_, %94 : i1
        sv.if %353 {
          sv.fatal 1
        }
        %354 = comb.and bin %STOP_COND_, %95 : i1
        sv.if %354 {
          sv.fatal 1
        }
        %355 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %355 {
          sv.fatal 1
        }
        %356 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %356 {
          sv.fatal 1
        }
        %357 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %357 {
          sv.fatal 1
        }
        %358 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %358 {
          sv.fatal 1
        }
        %359 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %359 {
          sv.fatal 1
        }
        %360 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %360 {
          sv.fatal 1
        }
        %361 = comb.and bin %STOP_COND_, %110 : i1
        sv.if %361 {
          sv.fatal 1
        }
        %362 = comb.and bin %STOP_COND_, %111 : i1
        sv.if %362 {
          sv.fatal 1
        }
        %363 = comb.and bin %STOP_COND_, %112 : i1
        sv.if %363 {
          sv.fatal 1
        }
        %364 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %364 {
          sv.fatal 1
        }
        %365 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %365 {
          sv.fatal 1
        }
        %366 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %366 {
          sv.fatal 1
        }
        %367 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %367 {
          sv.fatal 1
        }
        %368 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %368 {
          sv.fatal 1
        }
        %369 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %369 {
          sv.fatal 1
        }
        %370 = comb.and bin %STOP_COND_, %125 : i1
        sv.if %370 {
          sv.fatal 1
        }
        %371 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %371 {
          sv.fatal 1
        }
        %372 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %372 {
          sv.fatal 1
        }
        %373 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %373 {
          sv.fatal 1
        }
        %374 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %374 {
          sv.fatal 1
        }
        %375 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %375 {
          sv.fatal 1
        }
        %376 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %376 {
          sv.fatal 1
        }
        %377 = comb.and bin %STOP_COND_, %134 : i1
        sv.if %377 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %378 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %378 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %379 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %379 {
          sv.fatal 1
        }
        %380 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %380 {
          sv.fatal 1
        }
        %381 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %381 {
          sv.fatal 1
        }
        %382 = comb.and bin %STOP_COND_, %171 : i1
        sv.if %382 {
          sv.fatal 1
        }
        %383 = comb.and bin %STOP_COND_, %175 : i1
        sv.if %383 {
          sv.fatal 1
        }
        %384 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %384 {
          sv.fatal 1
        }
        %385 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %385 {
          sv.fatal 1
        }
        %386 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %386 {
          sv.fatal 1
        }
        %387 = comb.and bin %STOP_COND_, %239 : i1
        sv.if %387 {
          sv.fatal 1
        }
        %388 = comb.and bin %STOP_COND_, %247 : i1
        sv.if %388 {
          sv.fatal 1
        }
        %389 = comb.and bin %STOP_COND_, %251 : i1
        sv.if %389 {
          sv.fatal 1
        }
        %390 = comb.and bin %STOP_COND_, %260 : i1
        sv.if %390 {
          sv.fatal 1
        }
        %391 = comb.and bin %STOP_COND_, %265 : i1
        sv.if %391 {
          sv.fatal 1
        }
        %392 = comb.and bin %STOP_COND_, %274 : i1
        sv.if %392 {
          sv.fatal 1
        }
        %393 = comb.and bin %STOP_COND_, %278 : i1
        sv.if %393 {
          sv.fatal 1
        }
        %394 = comb.and bin %STOP_COND_, %291 : i1
        sv.if %394 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %395 = comb.and bin %STOP_COND_, %313 : i1
        sv.if %395 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %396 = comb.and bin %STOP_COND_, %317 : i1
        sv.if %396 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        sv.if %329 {
          sv.fatal 1
        }
        %397 = comb.and bin %STOP_COND_, %326 : i1
        sv.if %397 {
          sv.fatal 1
        }
      }
    }
    %327 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %328 = comb.mux bin %153, %c0_i32, %327 : i32
    hw.output
  }
  hw.module private @AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %false = hw.constant false
    %sync_0 = seq.firreg %sync_1 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i1
    %sync_1 = seq.firreg %sync_2 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %sync_2 = seq.firreg %io_d clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64} : i1
    hw.output %sync_0 : i1
  }
  hw.module private @AsyncResetSynchronizerShiftReg_w1_d3_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %output_chain.io_q = hw.instance "output_chain" @AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_d: i1) -> (io_q: i1) {sv.namehint = "output_0"}
    hw.output %output_chain.io_q : i1
  }
  hw.module private @AsyncResetSynchronizerShiftReg_w1_d3_i0_1(in %clock : !seq.clock, in %reset : i1, in %io_d : i1, out io_q : i1) {
    %output_chain.io_q = hw.instance "output_chain" @AsyncResetSynchronizerPrimitiveShiftReg_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_d: i1) -> (io_q: i1) {sv.namehint = "output_0"}
    hw.output %output_chain.io_q : i1
  }
  hw.module private @AsyncValidSync(in %io_in : i1, out io_out : i1, in %clock : !seq.clock, in %reset : i1) {
    %io_out_source_valid_0.io_q = hw.instance "io_out_source_valid_0" @AsyncResetSynchronizerShiftReg_w1_d3_i0_1(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_in: i1) -> (io_q: i1) {sv.namehint = "io_out_source_valid_0.io_q"}
    hw.output %io_out_source_valid_0.io_q : i1
  }
  hw.module private @AsyncQueueSource(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_address : i9, in %io_enq_bits_data : i32, out io_async_mem_0_opcode : i3, out io_async_mem_0_address : i9, out io_async_mem_0_data : i32, in %io_async_ridx : i1, out io_async_widx : i1, in %io_async_safe_ridx_valid : i1, out io_async_safe_widx_valid : i1, out io_async_safe_source_reset_n : i1, in %io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %mem_0_opcode = seq.firreg %8 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "mem_0_opcode"} : i3
    %mem_0_address = seq.firreg %7 clock %clock {firrtl.random_init_start = 9 : ui64, sv.namehint = "mem_0_address"} : i9
    %mem_0_data = seq.firreg %6 clock %clock {firrtl.random_init_start = 22 : ui64, sv.namehint = "mem_0_data"} : i32
    %0 = comb.and bin %9, %io_enq_valid {sv.namehint = "_widx_T_1"} : i1
    %widx_widx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 55 : ui64} : i1
    %1 = comb.add %widx_widx_bin, %0 {sv.namehint = "_widx_incremented_T"} : i1
    %2 = comb.and %sink_valid.io_out, %1 {sv.namehint = "widx"} : i1
    %ridx_ridx_gray.io_q = hw.instance "ridx_ridx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_ridx: i1) -> (io_q: i1) {sv.namehint = "ridx"}
    %3 = comb.xor bin %ridx_ridx_gray.io_q, %true {sv.namehint = "_ready_T"} : i1
    %4 = comb.icmp bin ne %2, %3 {sv.namehint = "_ready_T_1"} : i1
    %5 = comb.and bin %sink_valid.io_out, %4 {sv.namehint = "ready"} : i1
    %6 = comb.mux bin %0, %io_enq_bits_data, %mem_0_data : i32
    %7 = comb.mux bin %0, %io_enq_bits_address, %mem_0_address : i9
    %8 = comb.mux bin %0, %io_enq_bits_opcode, %mem_0_opcode : i3
    %ready_reg = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 56 : ui64} : i1
    %9 = comb.and bin %ready_reg, %sink_valid.io_out {sv.namehint = "io_enq_ready"} : i1
    %widx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 57 : ui64, sv.namehint = "widx_gray"} : i1
    %source_valid_0.io_out = hw.instance "source_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %11: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_in"}
    %source_valid_1.io_out = hw.instance "source_valid_1" @AsyncValidSync(io_in: %source_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_out"}
    %sink_extend.io_out = hw.instance "sink_extend" @AsyncValidSync(io_in: %io_async_safe_ridx_valid: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_in"}
    %sink_valid.io_out = hw.instance "sink_valid" @AsyncValidSync(io_in: %sink_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_out"}
    %10 = comb.xor bin %io_async_safe_sink_reset_n, %true {sv.namehint = "_sink_extend_reset_T_1"} : i1
    %11 = comb.or bin %reset, %10 {sv.namehint = "_source_valid_0_reset_T_2"} : i1
    %12 = comb.or bin %reset, %10 {sv.namehint = "_source_valid_1_reset_T_2"} : i1
    %13 = comb.or bin %reset, %10 {sv.namehint = "_sink_extend_reset_T_2"} : i1
    %14 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_source_reset_n"} : i1
    hw.output %9, %mem_0_opcode, %mem_0_address, %mem_0_data, %widx_gray, %source_valid_1.io_out, %14 : i1, i3, i9, i32, i1, i1, i1
  }
  hw.module private @ClockCrossingReg_w43(in %clock : !seq.clock, in %io_d : i43, out io_q : i43, in %io_en : i1) {
    %cdc_reg = seq.firreg %0 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i43
    %0 = comb.mux bin %io_en, %io_d, %cdc_reg : i43
    hw.output %cdc_reg : i43
  }
  hw.module private @AsyncQueueSink(in %clock : !seq.clock, in %reset : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i2, out io_deq_bits_size : i2, out io_deq_bits_source : i1, out io_deq_bits_sink : i1, out io_deq_bits_denied : i1, out io_deq_bits_data : i32, out io_deq_bits_corrupt : i1, in %io_async_mem_0_opcode : i3, in %io_async_mem_0_size : i2, in %io_async_mem_0_source : i1, in %io_async_mem_0_data : i32, out io_async_ridx : i1, in %io_async_widx : i1, out io_async_safe_ridx_valid : i1, in %io_async_safe_widx_valid : i1, in %io_async_safe_source_reset_n : i1, out io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %c0_i2 = hw.constant 0 : i2
    %0 = comb.and bin %io_deq_ready, %14 {sv.namehint = "_ridx_T_1"} : i1
    %ridx_ridx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %1 = comb.add %ridx_ridx_bin, %0 {sv.namehint = "_ridx_incremented_T"} : i1
    %2 = comb.and %source_valid.io_out, %1 {sv.namehint = "ridx"} : i1
    %widx_widx_gray.io_q = hw.instance "widx_widx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_widx: i1) -> (io_q: i1) {sv.namehint = "widx"}
    %3 = comb.icmp bin ne %2, %widx_widx_gray.io_q {sv.namehint = "_valid_T"} : i1
    %4 = comb.and bin %source_valid.io_out, %3 {sv.namehint = "valid"} : i1
    %io_deq_bits_deq_bits_reg.io_q = hw.instance "io_deq_bits_deq_bits_reg" @ClockCrossingReg_w43(clock: %clock: !seq.clock, io_d: %5: i43, io_en: %4: i1) -> (io_q: i43) {sv.namehint = "io_deq_bits_deq_bits_reg.io_q"}
    %5 = comb.concat %io_async_mem_0_opcode, %c0_i2, %io_async_mem_0_size, %io_async_mem_0_source, %c0_i2, %io_async_mem_0_data, %false {sv.namehint = "io_deq_bits_deq_bits_reg.io_d"} : i3, i2, i2, i1, i2, i32, i1
    %6 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 0 {sv.namehint = "_io_deq_bits_T"} : (i43) -> i1
    %7 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 1 {sv.namehint = "_io_deq_bits_T_1"} : (i43) -> i32
    %8 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 33 {sv.namehint = "_io_deq_bits_T_2"} : (i43) -> i1
    %9 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 34 {sv.namehint = "_io_deq_bits_T_3"} : (i43) -> i1
    %10 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 35 {sv.namehint = "_io_deq_bits_T_4"} : (i43) -> i1
    %11 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 36 {sv.namehint = "_io_deq_bits_T_5"} : (i43) -> i2
    %12 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 38 {sv.namehint = "_io_deq_bits_T_6"} : (i43) -> i2
    %13 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 40 {sv.namehint = "_io_deq_bits_T_7"} : (i43) -> i3
    %valid_reg = seq.firreg %4 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %14 = comb.and bin %valid_reg, %source_valid.io_out {sv.namehint = "io_deq_valid"} : i1
    %ridx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64, sv.namehint = "ridx_gray"} : i1
    %sink_valid_0.io_out = hw.instance "sink_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %16: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_in"}
    %sink_valid_1.io_out = hw.instance "sink_valid_1" @AsyncValidSync(io_in: %sink_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %17: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_out"}
    %source_extend.io_out = hw.instance "source_extend" @AsyncValidSync(io_in: %io_async_safe_widx_valid: i1, clock: %clock: !seq.clock, reset: %18: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_in"}
    %source_valid.io_out = hw.instance "source_valid" @AsyncValidSync(io_in: %source_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_out"}
    %15 = comb.xor bin %io_async_safe_source_reset_n, %true {sv.namehint = "_source_extend_reset_T_1"} : i1
    %16 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_0_reset_T_2"} : i1
    %17 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_1_reset_T_2"} : i1
    %18 = comb.or bin %reset, %15 {sv.namehint = "_source_extend_reset_T_2"} : i1
    %19 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_sink_reset_n"} : i1
    hw.output %14, %13, %12, %11, %10, %9, %8, %7, %6, %ridx_gray, %sink_valid_1.io_out, %19 : i1, i3, i2, i2, i1, i1, i1, i32, i1, i1, i1, i1
  }
  hw.module private @TLAsyncCrossingSource(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_address : i9, in %auto_in_a_bits_data : i32, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_opcode : i3, out auto_in_d_bits_param : i2, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i1, out auto_in_d_bits_sink : i1, out auto_in_d_bits_denied : i1, out auto_in_d_bits_data : i32, out auto_in_d_bits_corrupt : i1, out auto_out_a_mem_0_opcode : i3, out auto_out_a_mem_0_address : i9, out auto_out_a_mem_0_data : i32, in %auto_out_a_ridx : i1, out auto_out_a_widx : i1, in %auto_out_a_safe_ridx_valid : i1, out auto_out_a_safe_widx_valid : i1, out auto_out_a_safe_source_reset_n : i1, in %auto_out_a_safe_sink_reset_n : i1, in %auto_out_d_mem_0_opcode : i3, in %auto_out_d_mem_0_size : i2, in %auto_out_d_mem_0_source : i1, in %auto_out_d_mem_0_data : i32, out auto_out_d_ridx : i1, in %auto_out_d_widx : i1, out auto_out_d_safe_ridx_valid : i1, in %auto_out_d_safe_widx_valid : i1, in %auto_out_d_safe_source_reset_n : i1, out auto_out_d_safe_sink_reset_n : i1) {
    hw.instance "monitor" @TLMonitor_27(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %bundleOut_0_a_source.io_enq_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_address: %auto_in_a_bits_address: i9, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %bundleIn_0_d_sink.io_deq_valid: i1, io_in_d_bits_opcode: %bundleIn_0_d_sink.io_deq_bits_opcode: i3, io_in_d_bits_param: %bundleIn_0_d_sink.io_deq_bits_param: i2, io_in_d_bits_size: %bundleIn_0_d_sink.io_deq_bits_size: i2, io_in_d_bits_source: %bundleIn_0_d_sink.io_deq_bits_source: i1, io_in_d_bits_sink: %bundleIn_0_d_sink.io_deq_bits_sink: i1, io_in_d_bits_denied: %bundleIn_0_d_sink.io_deq_bits_denied: i1, io_in_d_bits_corrupt: %bundleIn_0_d_sink.io_deq_bits_corrupt: i1) -> ()
    %bundleOut_0_a_source.io_enq_ready, %bundleOut_0_a_source.io_async_mem_0_opcode, %bundleOut_0_a_source.io_async_mem_0_address, %bundleOut_0_a_source.io_async_mem_0_data, %bundleOut_0_a_source.io_async_widx, %bundleOut_0_a_source.io_async_safe_widx_valid, %bundleOut_0_a_source.io_async_safe_source_reset_n = hw.instance "bundleOut_0_a_source" @AsyncQueueSource(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_in_a_valid: i1, io_enq_bits_opcode: %auto_in_a_bits_opcode: i3, io_enq_bits_address: %auto_in_a_bits_address: i9, io_enq_bits_data: %auto_in_a_bits_data: i32, io_async_ridx: %auto_out_a_ridx: i1, io_async_safe_ridx_valid: %auto_out_a_safe_ridx_valid: i1, io_async_safe_sink_reset_n: %auto_out_a_safe_sink_reset_n: i1) -> (io_enq_ready: i1, io_async_mem_0_opcode: i3, io_async_mem_0_address: i9, io_async_mem_0_data: i32, io_async_widx: i1, io_async_safe_widx_valid: i1, io_async_safe_source_reset_n: i1) {sv.namehint = "bundleOut_0_a_source.io_enq_ready"}
    %bundleIn_0_d_sink.io_deq_valid, %bundleIn_0_d_sink.io_deq_bits_opcode, %bundleIn_0_d_sink.io_deq_bits_param, %bundleIn_0_d_sink.io_deq_bits_size, %bundleIn_0_d_sink.io_deq_bits_source, %bundleIn_0_d_sink.io_deq_bits_sink, %bundleIn_0_d_sink.io_deq_bits_denied, %bundleIn_0_d_sink.io_deq_bits_data, %bundleIn_0_d_sink.io_deq_bits_corrupt, %bundleIn_0_d_sink.io_async_ridx, %bundleIn_0_d_sink.io_async_safe_ridx_valid, %bundleIn_0_d_sink.io_async_safe_sink_reset_n = hw.instance "bundleIn_0_d_sink" @AsyncQueueSink(clock: %clock: !seq.clock, reset: %reset: i1, io_deq_ready: %auto_in_d_ready: i1, io_async_mem_0_opcode: %auto_out_d_mem_0_opcode: i3, io_async_mem_0_size: %auto_out_d_mem_0_size: i2, io_async_mem_0_source: %auto_out_d_mem_0_source: i1, io_async_mem_0_data: %auto_out_d_mem_0_data: i32, io_async_widx: %auto_out_d_widx: i1, io_async_safe_widx_valid: %auto_out_d_safe_widx_valid: i1, io_async_safe_source_reset_n: %auto_out_d_safe_source_reset_n: i1) -> (io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i2, io_deq_bits_size: i2, io_deq_bits_source: i1, io_deq_bits_sink: i1, io_deq_bits_denied: i1, io_deq_bits_data: i32, io_deq_bits_corrupt: i1, io_async_ridx: i1, io_async_safe_ridx_valid: i1, io_async_safe_sink_reset_n: i1) {sv.namehint = "bundleIn_0_d_sink.io_deq_valid"}
    hw.output %bundleOut_0_a_source.io_enq_ready, %bundleIn_0_d_sink.io_deq_valid, %bundleIn_0_d_sink.io_deq_bits_opcode, %bundleIn_0_d_sink.io_deq_bits_param, %bundleIn_0_d_sink.io_deq_bits_size, %bundleIn_0_d_sink.io_deq_bits_source, %bundleIn_0_d_sink.io_deq_bits_sink, %bundleIn_0_d_sink.io_deq_bits_denied, %bundleIn_0_d_sink.io_deq_bits_data, %bundleIn_0_d_sink.io_deq_bits_corrupt, %bundleOut_0_a_source.io_async_mem_0_opcode, %bundleOut_0_a_source.io_async_mem_0_address, %bundleOut_0_a_source.io_async_mem_0_data, %bundleOut_0_a_source.io_async_widx, %bundleOut_0_a_source.io_async_safe_widx_valid, %bundleOut_0_a_source.io_async_safe_source_reset_n, %bundleIn_0_d_sink.io_async_ridx, %bundleIn_0_d_sink.io_async_safe_ridx_valid, %bundleIn_0_d_sink.io_async_safe_sink_reset_n : i1, i1, i3, i2, i2, i1, i1, i1, i32, i1, i3, i9, i32, i1, i1, i1, i1, i1, i1
  }
  hw.module private @AsyncQueueSource_1(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_resumereq : i1, in %io_enq_bits_hartsel : i10, in %io_enq_bits_ackhavereset : i1, in %io_enq_bits_hrmask_0 : i1, out io_async_mem_0_resumereq : i1, out io_async_mem_0_hartsel : i10, out io_async_mem_0_ackhavereset : i1, out io_async_mem_0_hrmask_0 : i1, in %io_async_ridx : i1, out io_async_widx : i1, in %io_async_safe_ridx_valid : i1, out io_async_safe_widx_valid : i1, out io_async_safe_source_reset_n : i1, in %io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %mem_0_resumereq = seq.firreg %9 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "mem_0_resumereq"} : i1
    %mem_0_hartsel = seq.firreg %8 clock %clock {firrtl.random_init_start = 1 : ui64, sv.namehint = "mem_0_hartsel"} : i10
    %mem_0_ackhavereset = seq.firreg %7 clock %clock {firrtl.random_init_start = 11 : ui64, sv.namehint = "mem_0_ackhavereset"} : i1
    %mem_0_hrmask_0 = seq.firreg %6 clock %clock {firrtl.random_init_start = 14 : ui64, sv.namehint = "mem_0_hrmask_0"} : i1
    %0 = comb.and bin %10, %io_enq_valid {sv.namehint = "_widx_T_1"} : i1
    %widx_widx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 15 : ui64} : i1
    %1 = comb.add %widx_widx_bin, %0 {sv.namehint = "_widx_incremented_T"} : i1
    %2 = comb.and %sink_valid.io_out, %1 {sv.namehint = "widx"} : i1
    %ridx_ridx_gray.io_q = hw.instance "ridx_ridx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_ridx: i1) -> (io_q: i1) {sv.namehint = "ridx"}
    %3 = comb.xor bin %ridx_ridx_gray.io_q, %true {sv.namehint = "_ready_T"} : i1
    %4 = comb.icmp bin ne %2, %3 {sv.namehint = "_ready_T_1"} : i1
    %5 = comb.and bin %sink_valid.io_out, %4 {sv.namehint = "ready"} : i1
    %6 = comb.mux bin %0, %io_enq_bits_hrmask_0, %mem_0_hrmask_0 : i1
    %7 = comb.mux bin %0, %io_enq_bits_ackhavereset, %mem_0_ackhavereset : i1
    %8 = comb.mux bin %0, %io_enq_bits_hartsel, %mem_0_hartsel : i10
    %9 = comb.mux bin %0, %io_enq_bits_resumereq, %mem_0_resumereq : i1
    %ready_reg = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 16 : ui64} : i1
    %10 = comb.and bin %ready_reg, %sink_valid.io_out {sv.namehint = "io_enq_ready"} : i1
    %widx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 17 : ui64, sv.namehint = "widx_gray"} : i1
    %source_valid_0.io_out = hw.instance "source_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_in"}
    %source_valid_1.io_out = hw.instance "source_valid_1" @AsyncValidSync(io_in: %source_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_out"}
    %sink_extend.io_out = hw.instance "sink_extend" @AsyncValidSync(io_in: %io_async_safe_ridx_valid: i1, clock: %clock: !seq.clock, reset: %14: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_in"}
    %sink_valid.io_out = hw.instance "sink_valid" @AsyncValidSync(io_in: %sink_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_out"}
    %11 = comb.xor bin %io_async_safe_sink_reset_n, %true {sv.namehint = "_sink_extend_reset_T_1"} : i1
    %12 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_0_reset_T_2"} : i1
    %13 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_1_reset_T_2"} : i1
    %14 = comb.or bin %reset, %11 {sv.namehint = "_sink_extend_reset_T_2"} : i1
    %15 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_source_reset_n"} : i1
    hw.output %10, %mem_0_resumereq, %mem_0_hartsel, %mem_0_ackhavereset, %mem_0_hrmask_0, %widx_gray, %source_valid_1.io_out, %15 : i1, i1, i10, i1, i1, i1, i1, i1
  }
  hw.module private @TLDebugModuleOuterAsync(out auto_asource_out_a_mem_0_opcode : i3, out auto_asource_out_a_mem_0_address : i9, out auto_asource_out_a_mem_0_data : i32, in %auto_asource_out_a_ridx : i1, out auto_asource_out_a_widx : i1, in %auto_asource_out_a_safe_ridx_valid : i1, out auto_asource_out_a_safe_widx_valid : i1, out auto_asource_out_a_safe_source_reset_n : i1, in %auto_asource_out_a_safe_sink_reset_n : i1, in %auto_asource_out_d_mem_0_opcode : i3, in %auto_asource_out_d_mem_0_size : i2, in %auto_asource_out_d_mem_0_source : i1, in %auto_asource_out_d_mem_0_data : i32, out auto_asource_out_d_ridx : i1, in %auto_asource_out_d_widx : i1, out auto_asource_out_d_safe_ridx_valid : i1, in %auto_asource_out_d_safe_widx_valid : i1, in %auto_asource_out_d_safe_source_reset_n : i1, out auto_asource_out_d_safe_sink_reset_n : i1, out auto_intsource_out_sync_0 : i1, in %io_dmi_clock : !seq.clock, in %io_dmi_reset : i1, out io_dmi_req_ready : i1, in %io_dmi_req_valid : i1, in %io_dmi_req_bits_addr : i7, in %io_dmi_req_bits_data : i32, in %io_dmi_req_bits_op : i2, in %io_dmi_resp_ready : i1, out io_dmi_resp_valid : i1, out io_dmi_resp_bits_data : i32, out io_dmi_resp_bits_resp : i2, out io_ctrl_ndreset : i1, out io_ctrl_dmactive : i1, in %io_ctrl_dmactiveAck : i1, out io_innerCtrl_mem_0_resumereq : i1, out io_innerCtrl_mem_0_hartsel : i10, out io_innerCtrl_mem_0_ackhavereset : i1, out io_innerCtrl_mem_0_hrmask_0 : i1, in %io_innerCtrl_ridx : i1, out io_innerCtrl_widx : i1, in %io_innerCtrl_safe_ridx_valid : i1, out io_innerCtrl_safe_widx_valid : i1, out io_innerCtrl_safe_source_reset_n : i1, in %io_innerCtrl_safe_sink_reset_n : i1, in %io_hgDebugInt_0 : i1) {
    %true = hw.constant true
    %dmiXbar.auto_in_a_ready, %dmiXbar.auto_in_d_valid, %dmiXbar.auto_in_d_bits_denied, %dmiXbar.auto_in_d_bits_data, %dmiXbar.auto_in_d_bits_corrupt, %dmiXbar.auto_out_1_a_valid, %dmiXbar.auto_out_1_a_bits_opcode, %dmiXbar.auto_out_1_a_bits_address, %dmiXbar.auto_out_1_a_bits_data, %dmiXbar.auto_out_1_d_ready, %dmiXbar.auto_out_0_a_valid, %dmiXbar.auto_out_0_a_bits_opcode, %dmiXbar.auto_out_0_a_bits_address, %dmiXbar.auto_out_0_a_bits_data, %dmiXbar.auto_out_0_d_ready = hw.instance "dmiXbar" @TLXbar_9(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_in_a_valid: %dmi2tl.auto_out_a_valid: i1, auto_in_a_bits_opcode: %dmi2tl.auto_out_a_bits_opcode: i3, auto_in_a_bits_address: %dmi2tl.auto_out_a_bits_address: i9, auto_in_a_bits_data: %dmi2tl.auto_out_a_bits_data: i32, auto_in_d_ready: %dmi2tl.auto_out_d_ready: i1, auto_out_1_a_ready: %dmOuter.auto_dmi_in_a_ready: i1, auto_out_1_d_valid: %dmOuter.auto_dmi_in_d_valid: i1, auto_out_1_d_bits_opcode: %dmOuter.auto_dmi_in_d_bits_opcode: i3, auto_out_1_d_bits_data: %dmOuter.auto_dmi_in_d_bits_data: i32, auto_out_0_a_ready: %dmiBypass.auto_node_in_in_a_ready: i1, auto_out_0_d_valid: %dmiBypass.auto_node_in_in_d_valid: i1, auto_out_0_d_bits_opcode: %dmiBypass.auto_node_in_in_d_bits_opcode: i3, auto_out_0_d_bits_param: %dmiBypass.auto_node_in_in_d_bits_param: i2, auto_out_0_d_bits_size: %dmiBypass.auto_node_in_in_d_bits_size: i2, auto_out_0_d_bits_sink: %dmiBypass.auto_node_in_in_d_bits_sink: i1, auto_out_0_d_bits_denied: %dmiBypass.auto_node_in_in_d_bits_denied: i1, auto_out_0_d_bits_data: %dmiBypass.auto_node_in_in_d_bits_data: i32, auto_out_0_d_bits_corrupt: %dmiBypass.auto_node_in_in_d_bits_corrupt: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i32, auto_in_d_bits_corrupt: i1, auto_out_1_a_valid: i1, auto_out_1_a_bits_opcode: i3, auto_out_1_a_bits_address: i7, auto_out_1_a_bits_data: i32, auto_out_1_d_ready: i1, auto_out_0_a_valid: i1, auto_out_0_a_bits_opcode: i3, auto_out_0_a_bits_address: i9, auto_out_0_a_bits_data: i32, auto_out_0_d_ready: i1) {sv.namehint = "dmi2tl.auto_out_d_valid"}
    %dmi2tl.auto_out_a_valid, %dmi2tl.auto_out_a_bits_opcode, %dmi2tl.auto_out_a_bits_address, %dmi2tl.auto_out_a_bits_data, %dmi2tl.auto_out_d_ready, %dmi2tl.io_dmi_req_ready, %dmi2tl.io_dmi_resp_valid, %dmi2tl.io_dmi_resp_bits_data, %dmi2tl.io_dmi_resp_bits_resp = hw.instance "dmi2tl" @DMIToTL(auto_out_a_ready: %dmiXbar.auto_in_a_ready: i1, auto_out_d_valid: %dmiXbar.auto_in_d_valid: i1, auto_out_d_bits_denied: %dmiXbar.auto_in_d_bits_denied: i1, auto_out_d_bits_data: %dmiXbar.auto_in_d_bits_data: i32, auto_out_d_bits_corrupt: %dmiXbar.auto_in_d_bits_corrupt: i1, io_dmi_req_valid: %io_dmi_req_valid: i1, io_dmi_req_bits_addr: %io_dmi_req_bits_addr: i7, io_dmi_req_bits_data: %io_dmi_req_bits_data: i32, io_dmi_req_bits_op: %io_dmi_req_bits_op: i2, io_dmi_resp_ready: %io_dmi_resp_ready: i1) -> (auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_address: i9, auto_out_a_bits_data: i32, auto_out_d_ready: i1, io_dmi_req_ready: i1, io_dmi_resp_valid: i1, io_dmi_resp_bits_data: i32, io_dmi_resp_bits_resp: i2) {sv.namehint = "dmi2tl.io_dmi_req_ready"}
    %dmOuter.auto_dmi_in_a_ready, %dmOuter.auto_dmi_in_d_valid, %dmOuter.auto_dmi_in_d_bits_opcode, %dmOuter.auto_dmi_in_d_bits_data, %dmOuter.auto_int_out_0, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %dmOuter.io_innerCtrl_valid, %dmOuter.io_innerCtrl_bits_resumereq, %dmOuter.io_innerCtrl_bits_hartsel, %dmOuter.io_innerCtrl_bits_ackhavereset, %dmOuter.io_innerCtrl_bits_hrmask_0 = hw.instance "dmOuter" @TLDebugModuleOuter(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_dmi_in_a_valid: %dmiXbar.auto_out_1_a_valid: i1, auto_dmi_in_a_bits_opcode: %dmiXbar.auto_out_1_a_bits_opcode: i3, auto_dmi_in_a_bits_address: %dmiXbar.auto_out_1_a_bits_address: i7, auto_dmi_in_a_bits_data: %dmiXbar.auto_out_1_a_bits_data: i32, auto_dmi_in_d_ready: %dmiXbar.auto_out_1_d_ready: i1, io_ctrl_dmactiveAck: %dmactiveAck_dmactiveAckSync.io_q: i1, io_innerCtrl_ready: %io_innerCtrl_source.io_enq_ready: i1, io_hgDebugInt_0: %io_hgDebugInt_0: i1) -> (auto_dmi_in_a_ready: i1, auto_dmi_in_d_valid: i1, auto_dmi_in_d_bits_opcode: i3, auto_dmi_in_d_bits_data: i32, auto_int_out_0: i1, io_ctrl_ndreset: i1, io_ctrl_dmactive: i1, io_innerCtrl_valid: i1, io_innerCtrl_bits_resumereq: i1, io_innerCtrl_bits_hartsel: i10, io_innerCtrl_bits_ackhavereset: i1, io_innerCtrl_bits_hrmask_0: i1) {sv.namehint = "intsource.auto_in_0"}
    %intsource.auto_out_sync_0 = hw.instance "intsource" @IntSyncCrossingSource_4(auto_in_0: %dmOuter.auto_int_out_0: i1) -> (auto_out_sync_0: i1) {sv.namehint = "intsource.auto_out_sync_0"}
    %dmiBypass.auto_node_out_out_a_valid, %dmiBypass.auto_node_out_out_a_bits_opcode, %dmiBypass.auto_node_out_out_a_bits_address, %dmiBypass.auto_node_out_out_a_bits_data, %dmiBypass.auto_node_out_out_d_ready, %dmiBypass.auto_node_in_in_a_ready, %dmiBypass.auto_node_in_in_d_valid, %dmiBypass.auto_node_in_in_d_bits_opcode, %dmiBypass.auto_node_in_in_d_bits_param, %dmiBypass.auto_node_in_in_d_bits_size, %dmiBypass.auto_node_in_in_d_bits_sink, %dmiBypass.auto_node_in_in_d_bits_denied, %dmiBypass.auto_node_in_in_d_bits_data, %dmiBypass.auto_node_in_in_d_bits_corrupt = hw.instance "dmiBypass" @TLBusBypass(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_node_out_out_a_ready: %asource.auto_in_a_ready: i1, auto_node_out_out_d_valid: %asource.auto_in_d_valid: i1, auto_node_out_out_d_bits_opcode: %asource.auto_in_d_bits_opcode: i3, auto_node_out_out_d_bits_param: %asource.auto_in_d_bits_param: i2, auto_node_out_out_d_bits_size: %asource.auto_in_d_bits_size: i2, auto_node_out_out_d_bits_source: %asource.auto_in_d_bits_source: i1, auto_node_out_out_d_bits_sink: %asource.auto_in_d_bits_sink: i1, auto_node_out_out_d_bits_denied: %asource.auto_in_d_bits_denied: i1, auto_node_out_out_d_bits_data: %asource.auto_in_d_bits_data: i32, auto_node_out_out_d_bits_corrupt: %asource.auto_in_d_bits_corrupt: i1, auto_node_in_in_a_valid: %dmiXbar.auto_out_0_a_valid: i1, auto_node_in_in_a_bits_opcode: %dmiXbar.auto_out_0_a_bits_opcode: i3, auto_node_in_in_a_bits_address: %dmiXbar.auto_out_0_a_bits_address: i9, auto_node_in_in_a_bits_data: %dmiXbar.auto_out_0_a_bits_data: i32, auto_node_in_in_d_ready: %dmiXbar.auto_out_0_d_ready: i1, io_bypass: %2: i1) -> (auto_node_out_out_a_valid: i1, auto_node_out_out_a_bits_opcode: i3, auto_node_out_out_a_bits_address: i9, auto_node_out_out_a_bits_data: i32, auto_node_out_out_d_ready: i1, auto_node_in_in_a_ready: i1, auto_node_in_in_d_valid: i1, auto_node_in_in_d_bits_opcode: i3, auto_node_in_in_d_bits_param: i2, auto_node_in_in_d_bits_size: i2, auto_node_in_in_d_bits_sink: i1, auto_node_in_in_d_bits_denied: i1, auto_node_in_in_d_bits_data: i32, auto_node_in_in_d_bits_corrupt: i1) {sv.namehint = "asource.auto_in_d_ready"}
    %asource.auto_in_a_ready, %asource.auto_in_d_valid, %asource.auto_in_d_bits_opcode, %asource.auto_in_d_bits_param, %asource.auto_in_d_bits_size, %asource.auto_in_d_bits_source, %asource.auto_in_d_bits_sink, %asource.auto_in_d_bits_denied, %asource.auto_in_d_bits_data, %asource.auto_in_d_bits_corrupt, %asource.auto_out_a_mem_0_opcode, %asource.auto_out_a_mem_0_address, %asource.auto_out_a_mem_0_data, %asource.auto_out_a_widx, %asource.auto_out_a_safe_widx_valid, %asource.auto_out_a_safe_source_reset_n, %asource.auto_out_d_ridx, %asource.auto_out_d_safe_ridx_valid, %asource.auto_out_d_safe_sink_reset_n = hw.instance "asource" @TLAsyncCrossingSource(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, auto_in_a_valid: %dmiBypass.auto_node_out_out_a_valid: i1, auto_in_a_bits_opcode: %dmiBypass.auto_node_out_out_a_bits_opcode: i3, auto_in_a_bits_address: %dmiBypass.auto_node_out_out_a_bits_address: i9, auto_in_a_bits_data: %dmiBypass.auto_node_out_out_a_bits_data: i32, auto_in_d_ready: %dmiBypass.auto_node_out_out_d_ready: i1, auto_out_a_ridx: %auto_asource_out_a_ridx: i1, auto_out_a_safe_ridx_valid: %auto_asource_out_a_safe_ridx_valid: i1, auto_out_a_safe_sink_reset_n: %auto_asource_out_a_safe_sink_reset_n: i1, auto_out_d_mem_0_opcode: %auto_asource_out_d_mem_0_opcode: i3, auto_out_d_mem_0_size: %auto_asource_out_d_mem_0_size: i2, auto_out_d_mem_0_source: %auto_asource_out_d_mem_0_source: i1, auto_out_d_mem_0_data: %auto_asource_out_d_mem_0_data: i32, auto_out_d_widx: %auto_asource_out_d_widx: i1, auto_out_d_safe_widx_valid: %auto_asource_out_d_safe_widx_valid: i1, auto_out_d_safe_source_reset_n: %auto_asource_out_d_safe_source_reset_n: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_param: i2, auto_in_d_bits_size: i2, auto_in_d_bits_source: i1, auto_in_d_bits_sink: i1, auto_in_d_bits_denied: i1, auto_in_d_bits_data: i32, auto_in_d_bits_corrupt: i1, auto_out_a_mem_0_opcode: i3, auto_out_a_mem_0_address: i9, auto_out_a_mem_0_data: i32, auto_out_a_widx: i1, auto_out_a_safe_widx_valid: i1, auto_out_a_safe_source_reset_n: i1, auto_out_d_ridx: i1, auto_out_d_safe_ridx_valid: i1, auto_out_d_safe_sink_reset_n: i1) {sv.namehint = "asource.auto_out_d_ridx"}
    %dmactiveAck_dmactiveAckSync.io_q = hw.instance "dmactiveAck_dmactiveAckSync" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, io_d: %io_ctrl_dmactiveAck: i1) -> (io_q: i1) {sv.namehint = "dmactiveAck"}
    %0 = comb.xor bin %dmOuter.io_ctrl_dmactive, %true {sv.namehint = "_dmiBypass_io_bypass_T"} : i1
    %1 = comb.xor bin %dmactiveAck_dmactiveAckSync.io_q, %true {sv.namehint = "_dmiBypass_io_bypass_T_1"} : i1
    %2 = comb.or bin %0, %1 {sv.namehint = "dmiBypass.io_bypass"} : i1
    %io_innerCtrl_source.io_enq_ready, %io_innerCtrl_source.io_async_mem_0_resumereq, %io_innerCtrl_source.io_async_mem_0_hartsel, %io_innerCtrl_source.io_async_mem_0_ackhavereset, %io_innerCtrl_source.io_async_mem_0_hrmask_0, %io_innerCtrl_source.io_async_widx, %io_innerCtrl_source.io_async_safe_widx_valid, %io_innerCtrl_source.io_async_safe_source_reset_n = hw.instance "io_innerCtrl_source" @AsyncQueueSource_1(clock: %io_dmi_clock: !seq.clock, reset: %io_dmi_reset: i1, io_enq_valid: %dmOuter.io_innerCtrl_valid: i1, io_enq_bits_resumereq: %dmOuter.io_innerCtrl_bits_resumereq: i1, io_enq_bits_hartsel: %dmOuter.io_innerCtrl_bits_hartsel: i10, io_enq_bits_ackhavereset: %dmOuter.io_innerCtrl_bits_ackhavereset: i1, io_enq_bits_hrmask_0: %dmOuter.io_innerCtrl_bits_hrmask_0: i1, io_async_ridx: %io_innerCtrl_ridx: i1, io_async_safe_ridx_valid: %io_innerCtrl_safe_ridx_valid: i1, io_async_safe_sink_reset_n: %io_innerCtrl_safe_sink_reset_n: i1) -> (io_enq_ready: i1, io_async_mem_0_resumereq: i1, io_async_mem_0_hartsel: i10, io_async_mem_0_ackhavereset: i1, io_async_mem_0_hrmask_0: i1, io_async_widx: i1, io_async_safe_widx_valid: i1, io_async_safe_source_reset_n: i1) {sv.namehint = "io_innerCtrl_source.io_enq_ready"}
    hw.output %asource.auto_out_a_mem_0_opcode, %asource.auto_out_a_mem_0_address, %asource.auto_out_a_mem_0_data, %asource.auto_out_a_widx, %asource.auto_out_a_safe_widx_valid, %asource.auto_out_a_safe_source_reset_n, %asource.auto_out_d_ridx, %asource.auto_out_d_safe_ridx_valid, %asource.auto_out_d_safe_sink_reset_n, %intsource.auto_out_sync_0, %dmi2tl.io_dmi_req_ready, %dmi2tl.io_dmi_resp_valid, %dmi2tl.io_dmi_resp_bits_data, %dmi2tl.io_dmi_resp_bits_resp, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %io_innerCtrl_source.io_async_mem_0_resumereq, %io_innerCtrl_source.io_async_mem_0_hartsel, %io_innerCtrl_source.io_async_mem_0_ackhavereset, %io_innerCtrl_source.io_async_mem_0_hrmask_0, %io_innerCtrl_source.io_async_widx, %io_innerCtrl_source.io_async_safe_widx_valid, %io_innerCtrl_source.io_async_safe_source_reset_n : i3, i9, i32, i1, i1, i1, i1, i1, i1, i1, i1, i1, i32, i2, i1, i1, i1, i10, i1, i1, i1, i1, i1
  }
  hw.module private @TLMonitor_28(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i1, in %io_in_a_bits_address : i9, in %io_in_a_bits_mask : i4, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i1) {
    %c-5_i4 = hw.constant -5 : i4
    %c-15_i5 = hw.constant -15 : i5
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i28 = hw.constant 0 : i28
    %c0_i16 = hw.constant 0 : i16
    %c0_i6 = hw.constant 0 : i6
    %c15_i31 = hw.constant 15 : i31
    %c3_i5 = hw.constant 3 : i5
    %false = hw.constant false
    %c0_i3 = hw.constant 0 : i3
    %c0_i4 = hw.constant 0 : i4
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i2 = hw.constant -1 : i2
    %true = hw.constant true {sv.namehint = "mask_size_1"}
    %c0_i15 = hw.constant 0 : i15
    %c-1_i3 = hw.constant -1 : i3
    %c-1_i4 = hw.constant -1 : i4
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.xor bin %io_in_a_bits_source, %true {sv.namehint = "_source_ok_T"} : i1
    %4 = comb.concat %c0_i3, %io_in_a_bits_size : i3, i2
    %5 = comb.shl bin %c3_i5, %4 {sv.namehint = "_is_aligned_mask_T_1"} : i5
    %6 = comb.extract %5 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i5) -> i2
    %7 = comb.xor bin %6, %c-1_i2 {sv.namehint = "is_aligned_mask"} : i2
    %8 = comb.extract %io_in_a_bits_address from 0 : (i9) -> i2
    %9 = comb.and bin %8, %7 : i2
    %10 = comb.icmp bin eq %9, %c0_i2 {sv.namehint = "is_aligned"} : i2
    %11 = comb.extract %io_in_a_bits_size from 0 {sv.namehint = "mask_sizeOH_shiftAmount"} : (i2) -> i1
    %12 = comb.extract %io_in_a_bits_size from 1 {sv.namehint = "_mask_T"} : (i2) -> i1
    %13 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit"} : (i9) -> i1
    %14 = comb.xor bin %13, %true {sv.namehint = "mask_eq"} : i1
    %15 = comb.and bin %11, %14 {sv.namehint = "_mask_acc_T"} : i1
    %16 = comb.or bin %12, %15 {sv.namehint = "mask_acc"} : i1
    %17 = comb.and bin %11, %13 {sv.namehint = "_mask_acc_T_1"} : i1
    %18 = comb.or bin %12, %17 {sv.namehint = "mask_acc_1"} : i1
    %19 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_1"} : (i9) -> i1
    %20 = comb.xor bin %19, %true {sv.namehint = "mask_nbit_1"} : i1
    %21 = comb.and bin %14, %20 {sv.namehint = "mask_eq_2"} : i1
    %22 = comb.or bin %16, %21 {sv.namehint = "mask_lo_lo"} : i1
    %23 = comb.and bin %14, %19 {sv.namehint = "mask_eq_3"} : i1
    %24 = comb.or bin %16, %23 {sv.namehint = "mask_lo_hi"} : i1
    %25 = comb.and bin %13, %20 {sv.namehint = "mask_eq_4"} : i1
    %26 = comb.or bin %18, %25 {sv.namehint = "mask_hi_lo"} : i1
    %27 = comb.and bin %13, %19 {sv.namehint = "mask_eq_5"} : i1
    %28 = comb.or bin %18, %27 {sv.namehint = "mask_hi_hi"} : i1
    %29 = comb.concat %28, %26, %24, %22 {sv.namehint = "mask"} : i1, i1, i1, i1
    %30 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %31 = comb.and bin %io_in_a_valid, %30 : i1
    %32 = comb.xor bin %reset, %true : i1
    %33 = comb.and bin %31, %32 : i1
    %34 = comb.or bin %3, %reset : i1
    %35 = comb.xor bin %34, %true : i1
    %36 = comb.and bin %31, %35 : i1
    %37 = comb.or bin %12, %reset : i1
    %38 = comb.xor bin %37, %true : i1
    %39 = comb.and bin %31, %38 : i1
    %40 = comb.or bin %10, %reset : i1
    %41 = comb.xor bin %40, %true : i1
    %42 = comb.and bin %31, %41 : i1
    %43 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %44 = comb.or bin %43, %reset : i1
    %45 = comb.xor bin %44, %true : i1
    %46 = comb.and bin %31, %45 : i1
    %47 = comb.icmp eq %io_in_a_bits_mask, %c-1_i4 : i4
    %48 = comb.or bin %47, %reset : i1
    %49 = comb.xor bin %48, %true : i1
    %50 = comb.and bin %31, %49 : i1
    %51 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %52 = comb.or bin %51, %reset : i1
    %53 = comb.xor bin %52, %true : i1
    %54 = comb.and bin %31, %53 : i1
    %55 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %56 = comb.and bin %io_in_a_valid, %55 : i1
    %57 = comb.and bin %56, %32 : i1
    %58 = comb.and bin %56, %35 : i1
    %59 = comb.and bin %56, %38 : i1
    %60 = comb.and bin %56, %41 : i1
    %61 = comb.and bin %56, %45 : i1
    %62 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %63 = comb.or bin %62, %reset : i1
    %64 = comb.xor bin %63, %true : i1
    %65 = comb.and bin %56, %64 : i1
    %66 = comb.and bin %56, %49 : i1
    %67 = comb.and bin %56, %53 : i1
    %68 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %69 = comb.and bin %io_in_a_valid, %68 : i1
    %70 = comb.icmp bin eq %io_in_a_bits_size, %c-2_i2 : i2
    %71 = comb.and bin %70, %3 : i1
    %72 = comb.or bin %71, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %69, %73 : i1
    %75 = comb.icmp bin ne %io_in_a_bits_size, %c-1_i2 : i2
    %76 = comb.extract %io_in_a_bits_address from 6 : (i9) -> i3
    %77 = comb.icmp bin eq %76, %c0_i3 : i3
    %78 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i2
    %79 = comb.extract %io_in_a_bits_address from 2 : (i9) -> i5
    %80 = comb.xor %79, %c-15_i5 : i5
    %81 = comb.extract %80 from 2 : (i5) -> i3
    %82 = comb.extract %80 from 0 : (i5) -> i1
    %83 = comb.concat %78, %81, %82 : i2, i3, i1
    %84 = comb.icmp bin eq %83, %c0_i6 : i6
    %85 = comb.extract %io_in_a_bits_address from 3 : (i9) -> i4
    %86 = comb.xor %85, %c-5_i4 : i4
    %87 = comb.concat %78, %86 : i2, i4
    %88 = comb.icmp bin eq %87, %c0_i6 : i6
    %89 = comb.extract %io_in_a_bits_address from 5 : (i9) -> i2
    %90 = comb.xor %89, %c-1_i2 : i2
    %91 = comb.concat %78, %90 : i2, i2
    %92 = comb.icmp bin eq %91, %c0_i4 : i4
    %93 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %94 = comb.extract %io_in_a_bits_address from 7 : (i9) -> i1
    %95 = comb.xor %94, %true : i1
    %96 = comb.concat %93, %95 : i1, i1
    %97 = comb.icmp bin eq %96, %c0_i2 : i2
    %98 = comb.extract %io_in_a_bits_address from 8 : (i9) -> i1
    %99 = comb.or bin %77, %84, %88, %92, %97, %98 : i1
    %100 = comb.and bin %75, %99 : i1
    %101 = comb.or bin %100, %reset : i1
    %102 = comb.xor bin %101, %true : i1
    %103 = comb.and bin %69, %102 : i1
    %104 = comb.and bin %69, %35 : i1
    %105 = comb.and bin %69, %41 : i1
    %106 = comb.xor bin %62, %true : i1
    %107 = comb.or bin %106, %reset : i1
    %108 = comb.xor bin %107, %true : i1
    %109 = comb.and bin %69, %108 : i1
    %110 = comb.icmp bin eq %io_in_a_bits_mask, %29 : i4
    %111 = comb.or bin %110, %reset : i1
    %112 = comb.xor bin %111, %true : i1
    %113 = comb.and bin %69, %112 : i1
    %114 = comb.and bin %69, %53 : i1
    %115 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %116 = comb.and bin %io_in_a_valid, %115 : i1
    %117 = comb.and bin %71, %100 : i1
    %118 = comb.or bin %117, %reset : i1
    %119 = comb.xor bin %118, %true : i1
    %120 = comb.and bin %116, %119 : i1
    %121 = comb.and bin %116, %35 : i1
    %122 = comb.and bin %116, %41 : i1
    %123 = comb.and bin %116, %108 : i1
    %124 = comb.and bin %116, %112 : i1
    %125 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %126 = comb.and bin %io_in_a_valid, %125 : i1
    %127 = comb.and bin %126, %32 : i1
    %128 = comb.and bin %126, %35 : i1
    %129 = comb.and bin %126, %41 : i1
    %130 = comb.and bin %126, %108 : i1
    %131 = comb.xor bin %29, %c-1_i4 : i4
    %132 = comb.and bin %io_in_a_bits_mask, %131 : i4
    %133 = comb.icmp bin eq %132, %c0_i4 : i4
    %134 = comb.or bin %133, %reset : i1
    %135 = comb.xor bin %134, %true : i1
    %136 = comb.and bin %126, %135 : i1
    %137 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %138 = comb.and bin %io_in_a_valid, %137 : i1
    %139 = comb.and bin %138, %32 : i1
    %140 = comb.and bin %138, %35 : i1
    %141 = comb.and bin %138, %41 : i1
    %142 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %143 = comb.or bin %142, %reset : i1
    %144 = comb.xor bin %143, %true : i1
    %145 = comb.and bin %138, %144 : i1
    %146 = comb.and bin %138, %112 : i1
    %147 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %148 = comb.and bin %io_in_a_valid, %147 : i1
    %149 = comb.and bin %148, %32 : i1
    %150 = comb.and bin %148, %35 : i1
    %151 = comb.and bin %148, %41 : i1
    %152 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %153 = comb.xor bin %152, %true : i1
    %154 = comb.or bin %153, %reset : i1
    %155 = comb.xor bin %154, %true : i1
    %156 = comb.and bin %148, %155 : i1
    %157 = comb.and bin %148, %112 : i1
    %158 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %159 = comb.and bin %io_in_a_valid, %158 : i1
    %160 = comb.and bin %159, %32 : i1
    %161 = comb.and bin %159, %35 : i1
    %162 = comb.and bin %159, %41 : i1
    %163 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %164 = comb.or bin %163, %reset : i1
    %165 = comb.xor bin %164, %true : i1
    %166 = comb.and bin %159, %165 : i1
    %167 = comb.and bin %159, %112 : i1
    %168 = comb.and bin %159, %53 : i1
    %169 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %170 = comb.or bin %169, %reset : i1
    %171 = comb.xor bin %170, %true : i1
    %172 = comb.and bin %io_in_d_valid, %171 : i1
    %173 = comb.xor bin %io_in_d_bits_source, %true {sv.namehint = "_source_ok_T_1"} : i1
    %174 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %175 = comb.and bin %io_in_d_valid, %174 : i1
    %176 = comb.or bin %173, %reset : i1
    %177 = comb.xor bin %176, %true : i1
    %178 = comb.and bin %175, %177 : i1
    %179 = comb.extract %io_in_d_bits_size from 1 : (i2) -> i1
    %180 = comb.or bin %179, %reset : i1
    %181 = comb.xor bin %180, %true : i1
    %182 = comb.and bin %175, %181 : i1
    %183 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %184 = comb.and bin %io_in_d_valid, %183 : i1
    %185 = comb.and bin %184, %177 : i1
    %186 = comb.and bin %184, %32 : i1
    %187 = comb.and bin %184, %181 : i1
    %188 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %189 = comb.and bin %io_in_d_valid, %188 : i1
    %190 = comb.and bin %189, %177 : i1
    %191 = comb.and bin %189, %32 : i1
    %192 = comb.and bin %189, %181 : i1
    %193 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %194 = comb.and bin %io_in_d_valid, %193 : i1
    %195 = comb.and bin %194, %177 : i1
    %196 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %197 = comb.and bin %io_in_d_valid, %196 : i1
    %198 = comb.and bin %197, %177 : i1
    %199 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %200 = comb.and bin %io_in_d_valid, %199 : i1
    %201 = comb.and bin %200, %177 : i1
    %202 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %207 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %203 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %204 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %205 = comb.xor %202, %true : i1
    %206 = comb.or %205, %203 : i1
    %207 = comb.and %206, %a_first_counter : i1
    %opcode = seq.firreg %230 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %231 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %232 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %233 clock %clock {firrtl.random_init_start = 9 : ui64} : i1
    %address = seq.firreg %234 clock %clock {firrtl.random_init_start = 10 : ui64} : i9
    %208 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %209 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %210 = comb.or bin %209, %reset : i1
    %211 = comb.xor bin %210, %true : i1
    %212 = comb.and bin %208, %211 : i1
    %213 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %214 = comb.or bin %213, %reset : i1
    %215 = comb.xor bin %214, %true : i1
    %216 = comb.and bin %208, %215 : i1
    %217 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %218 = comb.or bin %217, %reset : i1
    %219 = comb.xor bin %218, %true : i1
    %220 = comb.and bin %208, %219 : i1
    %221 = comb.icmp bin eq %io_in_a_bits_source, %source : i1
    %222 = comb.or bin %221, %reset : i1
    %223 = comb.xor bin %222, %true : i1
    %224 = comb.and bin %208, %223 : i1
    %225 = comb.icmp bin eq %io_in_a_bits_address, %address : i9
    %226 = comb.or bin %225, %reset : i1
    %227 = comb.xor bin %226, %true : i1
    %228 = comb.and bin %208, %227 : i1
    %229 = comb.and bin %202, %204 : i1
    %230 = comb.mux bin %229, %io_in_a_bits_opcode, %opcode : i3
    %231 = comb.mux bin %229, %io_in_a_bits_param, %param : i3
    %232 = comb.mux bin %229, %io_in_a_bits_size, %size : i2
    %233 = comb.mux bin %229, %io_in_a_bits_source, %source : i1
    %234 = comb.mux bin %229, %io_in_a_bits_address, %address : i9
    %235 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %240 clock %clock reset sync %reset, %false {firrtl.random_init_start = 19 : ui64} : i1
    %236 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %237 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %238 = comb.xor %235, %true : i1
    %239 = comb.or %238, %236 : i1
    %240 = comb.and %239, %d_first_counter : i1
    %opcode_1 = seq.firreg %255 clock %clock {firrtl.random_init_start = 20 : ui64} : i3
    %size_1 = seq.firreg %256 clock %clock {firrtl.random_init_start = 25 : ui64} : i2
    %source_1 = seq.firreg %257 clock %clock {firrtl.random_init_start = 27 : ui64} : i1
    %241 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %242 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %243 = comb.or bin %242, %reset : i1
    %244 = comb.xor bin %243, %true : i1
    %245 = comb.and bin %241, %244 : i1
    %246 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %247 = comb.or bin %246, %reset : i1
    %248 = comb.xor bin %247, %true : i1
    %249 = comb.and bin %241, %248 : i1
    %250 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i1
    %251 = comb.or bin %250, %reset : i1
    %252 = comb.xor bin %251, %true : i1
    %253 = comb.and bin %241, %252 : i1
    %254 = comb.and bin %235, %237 : i1
    %255 = comb.mux bin %254, %io_in_d_bits_opcode, %opcode_1 : i3
    %256 = comb.mux bin %254, %io_in_d_bits_size, %size_1 : i2
    %257 = comb.mux bin %254, %io_in_d_bits_source, %source_1 : i1
    %inflight = seq.firreg %353 clock %clock reset sync %reset, %false {firrtl.random_init_start = 30 : ui64} : i1
    %inflight_opcodes = seq.firreg %356 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 31 : ui64} : i4
    %inflight_sizes = seq.firreg %359 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 35 : ui64} : i4
    %a_first_counter_1 = seq.firreg %262 clock %clock reset sync %reset, %false {firrtl.random_init_start = 39 : ui64} : i1
    %258 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %259 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %260 = comb.xor %202, %true : i1
    %261 = comb.or %260, %258 : i1
    %262 = comb.and %261, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %267 clock %clock reset sync %reset, %false {firrtl.random_init_start = 40 : ui64} : i1
    %263 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %264 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %265 = comb.xor %235, %true : i1
    %266 = comb.or %265, %263 : i1
    %267 = comb.and %266, %d_first_counter_1 : i1
    %268 = comb.concat %false, %io_in_d_bits_source, %c0_i2 : i1, i1, i2
    %269 = comb.shru bin %inflight_opcodes, %268 {sv.namehint = "_a_opcode_lookup_T_1"} : i4
    %270 = comb.extract %269 from 1 : (i4) -> i3
    %271 = comb.shru bin %inflight_sizes, %268 {sv.namehint = "_a_size_lookup_T_1"} : i4
    %272 = comb.extract %271 from 1 : (i4) -> i3
    %273 = comb.concat %false, %272 {sv.namehint = "a_size_lookup"} : i1, i3
    %274 = comb.and bin %202, %259 : i1
    %275 = comb.xor %io_in_a_bits_source, %true : i1
    %276 = comb.and %274, %275 {sv.namehint = "a_set"} : i1
    %277 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %278 = comb.mux bin %274, %277, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %279 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %280 = comb.mux bin %274, %279, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %281 = comb.concat %c0_i15, %278 : i15, i4
    %282 = comb.concat %c0_i16, %io_in_a_bits_source, %c0_i2 : i16, i1, i2
    %283 = comb.shl bin %281, %282 {sv.namehint = "_a_opcodes_set_T_1"} : i19
    %284 = comb.extract %283 from 0 : (i19) -> i4
    %285 = comb.mux bin %274, %284, %c0_i4 {sv.namehint = "a_opcodes_set"} : i4
    %286 = comb.concat %c0_i15, %280 : i15, i3
    %287 = comb.concat %c0_i15, %io_in_a_bits_source, %c0_i2 : i15, i1, i2
    %288 = comb.shl bin %286, %287 {sv.namehint = "_a_sizes_set_T_1"} : i18
    %289 = comb.extract %288 from 0 : (i18) -> i4
    %290 = comb.mux bin %274, %289, %c0_i4 {sv.namehint = "a_sizes_set"} : i4
    %291 = comb.shru bin %inflight, %io_in_a_bits_source : i1
    %292 = comb.xor bin %291, %true : i1
    %293 = comb.or bin %292, %reset : i1
    %294 = comb.xor bin %293, %true : i1
    %295 = comb.and bin %274, %294 : i1
    %296 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %297 = comb.and bin %io_in_d_valid, %264 : i1
    %298 = comb.xor bin %296, %true : i1
    %299 = comb.and bin %235, %264, %298 : i1
    %300 = comb.xor %io_in_d_bits_source, %true : i1
    %301 = comb.and %299, %300 {sv.namehint = "d_clr"} : i1
    %302 = comb.concat %c0_i28, %io_in_d_bits_source, %c0_i2 : i28, i1, i2
    %303 = comb.shl bin %c15_i31, %302 {sv.namehint = "_d_opcodes_clr_T_5"} : i31
    %304 = comb.extract %303 from 0 : (i31) -> i4
    %305 = comb.mux bin %299, %304, %c0_i4 {sv.namehint = "d_opcodes_clr"} : i4
    %306 = comb.shl bin %c15_i31, %302 {sv.namehint = "_d_sizes_clr_T_5"} : i31
    %307 = comb.extract %306 from 0 : (i31) -> i4
    %308 = comb.mux bin %299, %307, %c0_i4 {sv.namehint = "d_sizes_clr"} : i4
    %309 = comb.and bin %297, %298 : i1
    %310 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i1
    %311 = comb.and bin %io_in_a_valid, %259, %310 {sv.namehint = "same_cycle_resp"} : i1
    %312 = comb.shru bin %inflight, %io_in_d_bits_source : i1
    %313 = comb.or bin %312, %311, %reset : i1
    %314 = comb.xor bin %313, %true : i1
    %315 = comb.and bin %309, %314 : i1
    %316 = comb.and bin %309, %311 : i1
    %317 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %318 = comb.icmp bin eq %io_in_d_bits_opcode, %317 : i3
    %319 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %320 = comb.icmp bin eq %io_in_d_bits_opcode, %319 : i3
    %321 = comb.or bin %318, %320, %reset : i1
    %322 = comb.xor bin %321, %true : i1
    %323 = comb.and bin %316, %322 : i1
    %324 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %325 = comb.or bin %324, %reset : i1
    %326 = comb.xor bin %325, %true : i1
    %327 = comb.and bin %316, %326 : i1
    %328 = comb.xor bin %311, %true : i1
    %329 = comb.and bin %309, %328 : i1
    %330 = hw.array_get %1[%270] : !hw.array<8xi3>, i3
    %331 = comb.icmp bin eq %io_in_d_bits_opcode, %330 : i3
    %332 = hw.array_get %0[%270] : !hw.array<8xi3>, i3
    %333 = comb.icmp bin eq %io_in_d_bits_opcode, %332 : i3
    %334 = comb.or bin %331, %333, %reset : i1
    %335 = comb.xor bin %334, %true : i1
    %336 = comb.and bin %329, %335 : i1
    %337 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %338 = comb.icmp bin eq %337, %273 : i4
    %339 = comb.or bin %338, %reset : i1
    %340 = comb.xor bin %339, %true : i1
    %341 = comb.and bin %329, %340 : i1
    %342 = comb.and bin %297, %259 : i1
    %343 = comb.and bin %342, %io_in_a_valid : i1
    %344 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i1
    %345 = comb.and bin %343, %344 : i1
    %346 = comb.and bin %345, %298 : i1
    %347 = comb.xor bin %io_in_d_ready, %true : i1
    %348 = comb.or bin %347, %io_in_a_ready, %reset : i1
    %349 = comb.xor bin %348, %true : i1
    %350 = comb.and bin %346, %349 : i1
    %351 = comb.or bin %inflight, %276 {sv.namehint = "_inflight_T"} : i1
    %352 = comb.xor bin %301, %true {sv.namehint = "_inflight_T_1"} : i1
    %353 = comb.and bin %351, %352 {sv.namehint = "_inflight_T_2"} : i1
    %354 = comb.or bin %inflight_opcodes, %285 {sv.namehint = "_inflight_opcodes_T"} : i4
    %355 = comb.xor bin %305, %c-1_i4 {sv.namehint = "_inflight_opcodes_T_1"} : i4
    %356 = comb.and bin %354, %355 {sv.namehint = "_inflight_opcodes_T_2"} : i4
    %357 = comb.or bin %inflight_sizes, %290 {sv.namehint = "_inflight_sizes_T"} : i4
    %358 = comb.xor bin %308, %c-1_i4 {sv.namehint = "_inflight_sizes_T_1"} : i4
    %359 = comb.and bin %357, %358 {sv.namehint = "_inflight_sizes_T_2"} : i4
    %watchdog = seq.firreg %367 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 41 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %360 = comb.xor bin %inflight, %true : i1
    %361 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %362 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %363 = comb.or bin %360, %361, %362, %reset : i1
    %364 = comb.xor bin %363, %true : i1
    %365 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %366 = comb.or bin %202, %235 : i1
    %367 = comb.mux bin %366, %c0_i32, %365 : i32
    %inflight_1 = seq.firreg %392 clock %clock reset sync %reset, %false {firrtl.random_init_start = 73 : ui64} : i1
    %inflight_sizes_1 = seq.firreg %394 clock %clock reset sync %reset, %c0_i4 {firrtl.random_init_start = 78 : ui64} : i4
    %d_first_counter_2 = seq.firreg %372 clock %clock reset sync %reset, %false {firrtl.random_init_start = 83 : ui64} : i1
    %368 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %369 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %370 = comb.xor %235, %true : i1
    %371 = comb.or %370, %368 : i1
    %372 = comb.and %371, %d_first_counter_2 : i1
    %373 = comb.shru bin %inflight_sizes_1, %268 {sv.namehint = "_c_size_lookup_T_1"} : i4
    %374 = comb.extract %373 from 1 : (i4) -> i3
    %375 = comb.concat %false, %374 {sv.namehint = "c_size_lookup"} : i1, i3
    %376 = comb.and bin %235, %369, %296 : i1
    %377 = comb.xor %io_in_d_bits_source, %true : i1
    %378 = comb.and %376, %377 {sv.namehint = "d_clr_1"} : i1
    %379 = comb.shl bin %c15_i31, %302 {sv.namehint = "_d_sizes_clr_T_11"} : i31
    %380 = comb.extract %379 from 0 : (i31) -> i4
    %381 = comb.mux bin %376, %380, %c0_i4 {sv.namehint = "d_sizes_clr_1"} : i4
    %382 = comb.and bin %io_in_d_valid, %369, %296 : i1
    %383 = comb.shru bin %inflight_1, %io_in_d_bits_source : i1
    %384 = comb.or bin %383, %reset : i1
    %385 = comb.xor bin %384, %true : i1
    %386 = comb.and bin %382, %385 : i1
    %387 = comb.icmp bin eq %337, %375 : i4
    %388 = comb.or bin %387, %reset : i1
    %389 = comb.xor bin %388, %true : i1
    %390 = comb.and bin %382, %389 : i1
    %391 = comb.xor bin %378, %true {sv.namehint = "_inflight_T_4"} : i1
    %392 = comb.and bin %inflight_1, %391 {sv.namehint = "_inflight_T_5"} : i1
    %393 = comb.xor bin %381, %c-1_i4 {sv.namehint = "_inflight_sizes_T_4"} : i4
    %394 = comb.and bin %inflight_sizes_1, %393 {sv.namehint = "_inflight_sizes_T_5"} : i4
    %watchdog_1 = seq.firreg %401 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 84 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %395 = comb.xor bin %inflight_1, %true : i1
    %396 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %397 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %398 = comb.or bin %395, %396, %397, %reset : i1
    %399 = comb.xor bin %398, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %402 = comb.and bin %STOP_COND_, %false : i1
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %403 = comb.and bin %STOP_COND_, %33 : i1
        sv.if %403 {
          sv.fatal 1
        }
        sv.if %403 {
          sv.fatal 1
        }
        %404 = comb.and bin %STOP_COND_, %36 : i1
        sv.if %404 {
          sv.fatal 1
        }
        %405 = comb.and bin %STOP_COND_, %39 : i1
        sv.if %405 {
          sv.fatal 1
        }
        %406 = comb.and bin %STOP_COND_, %42 : i1
        sv.if %406 {
          sv.fatal 1
        }
        %407 = comb.and bin %STOP_COND_, %46 : i1
        sv.if %407 {
          sv.fatal 1
        }
        %408 = comb.and bin %STOP_COND_, %50 : i1
        sv.if %408 {
          sv.fatal 1
        }
        %409 = comb.and bin %STOP_COND_, %54 : i1
        sv.if %409 {
          sv.fatal 1
        }
        %410 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %410 {
          sv.fatal 1
        }
        sv.if %410 {
          sv.fatal 1
        }
        %411 = comb.and bin %STOP_COND_, %58 : i1
        sv.if %411 {
          sv.fatal 1
        }
        %412 = comb.and bin %STOP_COND_, %59 : i1
        sv.if %412 {
          sv.fatal 1
        }
        %413 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %413 {
          sv.fatal 1
        }
        %414 = comb.and bin %STOP_COND_, %61 : i1
        sv.if %414 {
          sv.fatal 1
        }
        %415 = comb.and bin %STOP_COND_, %65 : i1
        sv.if %415 {
          sv.fatal 1
        }
        %416 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %416 {
          sv.fatal 1
        }
        %417 = comb.and bin %STOP_COND_, %67 : i1
        sv.if %417 {
          sv.fatal 1
        }
        %418 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %418 {
          sv.fatal 1
        }
        %419 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %419 {
          sv.fatal 1
        }
        %420 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %420 {
          sv.fatal 1
        }
        %421 = comb.and bin %STOP_COND_, %105 : i1
        sv.if %421 {
          sv.fatal 1
        }
        %422 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %422 {
          sv.fatal 1
        }
        %423 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %423 {
          sv.fatal 1
        }
        %424 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %424 {
          sv.fatal 1
        }
        %425 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %425 {
          sv.fatal 1
        }
        %426 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %426 {
          sv.fatal 1
        }
        %427 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %427 {
          sv.fatal 1
        }
        %428 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %428 {
          sv.fatal 1
        }
        %429 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %429 {
          sv.fatal 1
        }
        %430 = comb.and bin %STOP_COND_, %127 : i1
        sv.if %430 {
          sv.fatal 1
        }
        %431 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %431 {
          sv.fatal 1
        }
        %432 = comb.and bin %STOP_COND_, %129 : i1
        sv.if %432 {
          sv.fatal 1
        }
        %433 = comb.and bin %STOP_COND_, %130 : i1
        sv.if %433 {
          sv.fatal 1
        }
        %434 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %434 {
          sv.fatal 1
        }
        %435 = comb.and bin %STOP_COND_, %139 : i1
        sv.if %435 {
          sv.fatal 1
        }
        %436 = comb.and bin %STOP_COND_, %140 : i1
        sv.if %436 {
          sv.fatal 1
        }
        %437 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %437 {
          sv.fatal 1
        }
        %438 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %438 {
          sv.fatal 1
        }
        %439 = comb.and bin %STOP_COND_, %146 : i1
        sv.if %439 {
          sv.fatal 1
        }
        %440 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %440 {
          sv.fatal 1
        }
        %441 = comb.and bin %STOP_COND_, %150 : i1
        sv.if %441 {
          sv.fatal 1
        }
        %442 = comb.and bin %STOP_COND_, %151 : i1
        sv.if %442 {
          sv.fatal 1
        }
        %443 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %443 {
          sv.fatal 1
        }
        %444 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %444 {
          sv.fatal 1
        }
        %445 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %445 {
          sv.fatal 1
        }
        %446 = comb.and bin %STOP_COND_, %161 : i1
        sv.if %446 {
          sv.fatal 1
        }
        %447 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %447 {
          sv.fatal 1
        }
        %448 = comb.and bin %STOP_COND_, %166 : i1
        sv.if %448 {
          sv.fatal 1
        }
        %449 = comb.and bin %STOP_COND_, %167 : i1
        sv.if %449 {
          sv.fatal 1
        }
        %450 = comb.and bin %STOP_COND_, %168 : i1
        sv.if %450 {
          sv.fatal 1
        }
        %451 = comb.and bin %STOP_COND_, %172 : i1
        sv.if %451 {
          sv.fatal 1
        }
        %452 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %452 {
          sv.fatal 1
        }
        %453 = comb.and bin %STOP_COND_, %182 : i1
        sv.if %453 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %185 : i1
        sv.if %454 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %186 : i1
        sv.if %455 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %187 : i1
        sv.if %456 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %190 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %191 : i1
        sv.if %458 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %459 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %195 : i1
        sv.if %460 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %198 : i1
        sv.if %461 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %201 : i1
        sv.if %462 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %212 : i1
        sv.if %463 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %216 : i1
        sv.if %464 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %220 : i1
        sv.if %465 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %224 : i1
        sv.if %466 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %228 : i1
        sv.if %467 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %245 : i1
        sv.if %468 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %249 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %253 : i1
        sv.if %470 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %295 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %315 : i1
        sv.if %472 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %323 : i1
        sv.if %473 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %327 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %336 : i1
        sv.if %475 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %341 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %350 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %364 : i1
        sv.if %478 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %386 : i1
        sv.if %479 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %390 : i1
        sv.if %480 {
          sv.fatal 1
        }
        sv.if %402 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %399 : i1
        sv.if %481 {
          sv.fatal 1
        }
      }
    }
    %400 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %401 = comb.mux bin %235, %c0_i32, %400 : i32
    hw.output
  }
  hw.module private @TLMonitor_29(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i12, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_opcode : i3, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i12) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %13 = comb.icmp eq %io_in_a_bits_size, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %14 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i12) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "mask_eq"} : i1
    %16 = comb.and bin %13, %15 {sv.namehint = "_mask_acc_T"} : i1
    %17 = comb.or bin %12, %16 {sv.namehint = "mask_acc"} : i1
    %18 = comb.and bin %13, %14 {sv.namehint = "_mask_acc_T_1"} : i1
    %19 = comb.or bin %12, %18 {sv.namehint = "mask_acc_1"} : i1
    %20 = comb.icmp eq %io_in_a_bits_size, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %21 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i12) -> i1
    %22 = comb.xor bin %21, %true {sv.namehint = "mask_nbit_1"} : i1
    %23 = comb.and bin %15, %22 {sv.namehint = "mask_eq_2"} : i1
    %24 = comb.and bin %20, %23 {sv.namehint = "_mask_acc_T_2"} : i1
    %25 = comb.or bin %17, %24 {sv.namehint = "mask_acc_2"} : i1
    %26 = comb.and bin %15, %21 {sv.namehint = "mask_eq_3"} : i1
    %27 = comb.and bin %20, %26 {sv.namehint = "_mask_acc_T_3"} : i1
    %28 = comb.or bin %17, %27 {sv.namehint = "mask_acc_3"} : i1
    %29 = comb.and bin %14, %22 {sv.namehint = "mask_eq_4"} : i1
    %30 = comb.and bin %20, %29 {sv.namehint = "_mask_acc_T_4"} : i1
    %31 = comb.or bin %19, %30 {sv.namehint = "mask_acc_4"} : i1
    %32 = comb.and bin %14, %21 {sv.namehint = "mask_eq_5"} : i1
    %33 = comb.and bin %20, %32 {sv.namehint = "_mask_acc_T_5"} : i1
    %34 = comb.or bin %19, %33 {sv.namehint = "mask_acc_5"} : i1
    %35 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i12) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "mask_nbit_2"} : i1
    %37 = comb.and bin %23, %36 {sv.namehint = "mask_eq_6"} : i1
    %38 = comb.or bin %25, %37 {sv.namehint = "mask_lo_lo_lo"} : i1
    %39 = comb.and bin %23, %35 {sv.namehint = "mask_eq_7"} : i1
    %40 = comb.or bin %25, %39 {sv.namehint = "mask_lo_lo_hi"} : i1
    %41 = comb.and bin %26, %36 {sv.namehint = "mask_eq_8"} : i1
    %42 = comb.or bin %28, %41 {sv.namehint = "mask_lo_hi_lo"} : i1
    %43 = comb.and bin %26, %35 {sv.namehint = "mask_eq_9"} : i1
    %44 = comb.or bin %28, %43 {sv.namehint = "mask_lo_hi_hi"} : i1
    %45 = comb.and bin %29, %36 {sv.namehint = "mask_eq_10"} : i1
    %46 = comb.or bin %31, %45 {sv.namehint = "mask_hi_lo_lo"} : i1
    %47 = comb.and bin %29, %35 {sv.namehint = "mask_eq_11"} : i1
    %48 = comb.or bin %31, %47 {sv.namehint = "mask_hi_lo_hi"} : i1
    %49 = comb.and bin %32, %36 {sv.namehint = "mask_eq_12"} : i1
    %50 = comb.or bin %34, %49 {sv.namehint = "mask_hi_hi_lo"} : i1
    %51 = comb.and bin %32, %35 {sv.namehint = "mask_eq_13"} : i1
    %52 = comb.or bin %34, %51 {sv.namehint = "mask_hi_hi_hi"} : i1
    %53 = comb.concat %52, %50, %48, %46, %44, %42, %40, %38 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %54 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %55 = comb.and bin %io_in_a_valid, %54 : i1
    %56 = comb.xor bin %reset, %true : i1
    %57 = comb.and bin %55, %56 : i1
    %58 = comb.or bin %4, %reset : i1
    %59 = comb.xor bin %58, %true : i1
    %60 = comb.and bin %55, %59 : i1
    %61 = comb.or bin %12, %reset : i1
    %62 = comb.xor bin %61, %true : i1
    %63 = comb.and bin %55, %62 : i1
    %64 = comb.or bin %11, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %55, %65 : i1
    %67 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %68 = comb.or bin %67, %reset : i1
    %69 = comb.xor bin %68, %true : i1
    %70 = comb.and bin %55, %69 : i1
    %71 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %72 = comb.or bin %71, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %55, %73 : i1
    %75 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %55, %77 : i1
    %79 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %80 = comb.and bin %io_in_a_valid, %79 : i1
    %81 = comb.and bin %80, %56 : i1
    %82 = comb.and bin %80, %59 : i1
    %83 = comb.and bin %80, %62 : i1
    %84 = comb.and bin %80, %65 : i1
    %85 = comb.and bin %80, %69 : i1
    %86 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %87 = comb.or bin %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %80, %88 : i1
    %90 = comb.and bin %80, %73 : i1
    %91 = comb.and bin %80, %77 : i1
    %92 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %93 = comb.and bin %io_in_a_valid, %92 : i1
    %94 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %95 = comb.icmp bin ne %94, %c-1_i2 : i2
    %96 = comb.or bin %95, %reset : i1
    %97 = comb.xor bin %96, %true : i1
    %98 = comb.and bin %93, %97 : i1
    %99 = comb.and bin %93, %59 : i1
    %100 = comb.and bin %93, %65 : i1
    %101 = comb.xor bin %86, %true : i1
    %102 = comb.or bin %101, %reset : i1
    %103 = comb.xor bin %102, %true : i1
    %104 = comb.and bin %93, %103 : i1
    %105 = comb.icmp bin eq %io_in_a_bits_mask, %53 : i8
    %106 = comb.or bin %105, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %93, %107 : i1
    %109 = comb.and bin %93, %77 : i1
    %110 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %111 = comb.and bin %io_in_a_valid, %110 : i1
    %112 = comb.and bin %111, %97 : i1
    %113 = comb.and bin %111, %59 : i1
    %114 = comb.and bin %111, %65 : i1
    %115 = comb.and bin %111, %103 : i1
    %116 = comb.and bin %111, %107 : i1
    %117 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %118 = comb.and bin %io_in_a_valid, %117 : i1
    %119 = comb.and bin %118, %97 : i1
    %120 = comb.and bin %118, %59 : i1
    %121 = comb.and bin %118, %65 : i1
    %122 = comb.and bin %118, %103 : i1
    %123 = comb.xor bin %53, %c-1_i8 : i8
    %124 = comb.and bin %io_in_a_bits_mask, %123 : i8
    %125 = comb.icmp bin eq %124, %c0_i8 : i8
    %126 = comb.or bin %125, %reset : i1
    %127 = comb.xor bin %126, %true : i1
    %128 = comb.and bin %118, %127 : i1
    %129 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %130 = comb.and bin %io_in_a_valid, %129 : i1
    %131 = comb.and bin %130, %56 : i1
    %132 = comb.and bin %130, %59 : i1
    %133 = comb.and bin %130, %65 : i1
    %134 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %135 = comb.or bin %134, %reset : i1
    %136 = comb.xor bin %135, %true : i1
    %137 = comb.and bin %130, %136 : i1
    %138 = comb.and bin %130, %107 : i1
    %139 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %140 = comb.and bin %io_in_a_valid, %139 : i1
    %141 = comb.and bin %140, %56 : i1
    %142 = comb.and bin %140, %59 : i1
    %143 = comb.and bin %140, %65 : i1
    %144 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %145 = comb.xor bin %144, %true : i1
    %146 = comb.or bin %145, %reset : i1
    %147 = comb.xor bin %146, %true : i1
    %148 = comb.and bin %140, %147 : i1
    %149 = comb.and bin %140, %107 : i1
    %150 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %151 = comb.and bin %io_in_a_valid, %150 : i1
    %152 = comb.and bin %151, %56 : i1
    %153 = comb.and bin %151, %59 : i1
    %154 = comb.and bin %151, %65 : i1
    %155 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %156 = comb.or bin %155, %reset : i1
    %157 = comb.xor bin %156, %true : i1
    %158 = comb.and bin %151, %157 : i1
    %159 = comb.and bin %151, %107 : i1
    %160 = comb.and bin %151, %77 : i1
    %161 = comb.icmp bin ne %io_in_d_bits_opcode, %c-1_i3 : i3
    %162 = comb.or bin %161, %reset : i1
    %163 = comb.xor bin %162, %true : i1
    %164 = comb.and bin %io_in_d_valid, %163 : i1
    %165 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %166 = comb.icmp bin ne %165, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %167 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 : i3
    %168 = comb.and bin %io_in_d_valid, %167 : i1
    %169 = comb.or bin %166, %reset : i1
    %170 = comb.xor bin %169, %true : i1
    %171 = comb.and bin %168, %170 : i1
    %172 = comb.icmp bin eq %io_in_d_bits_size, %c-1_i2 : i2
    %173 = comb.or bin %172, %reset : i1
    %174 = comb.xor bin %173, %true : i1
    %175 = comb.and bin %168, %174 : i1
    %176 = comb.icmp bin eq %io_in_d_bits_opcode, %c-4_i3 : i3
    %177 = comb.and bin %io_in_d_valid, %176 : i1
    %178 = comb.and bin %177, %170 : i1
    %179 = comb.and bin %177, %56 : i1
    %180 = comb.and bin %177, %174 : i1
    %181 = comb.icmp bin eq %io_in_d_bits_opcode, %c-3_i3 : i3
    %182 = comb.and bin %io_in_d_valid, %181 : i1
    %183 = comb.and bin %182, %170 : i1
    %184 = comb.and bin %182, %56 : i1
    %185 = comb.and bin %182, %174 : i1
    %186 = comb.icmp bin eq %io_in_d_bits_opcode, %c0_i3 : i3
    %187 = comb.and bin %io_in_d_valid, %186 : i1
    %188 = comb.and bin %187, %170 : i1
    %189 = comb.icmp bin eq %io_in_d_bits_opcode, %c1_i3 : i3
    %190 = comb.and bin %io_in_d_valid, %189 : i1
    %191 = comb.and bin %190, %170 : i1
    %192 = comb.icmp bin eq %io_in_d_bits_opcode, %c2_i3 : i3
    %193 = comb.and bin %io_in_d_valid, %192 : i1
    %194 = comb.and bin %193, %170 : i1
    %195 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %200 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %196 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %197 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %198 = comb.xor %195, %true : i1
    %199 = comb.or %198, %196 : i1
    %200 = comb.and %199, %a_first_counter : i1
    %opcode = seq.firreg %223 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %224 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %225 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %226 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %227 clock %clock {firrtl.random_init_start = 15 : ui64} : i12
    %201 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %202 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %203 = comb.or bin %202, %reset : i1
    %204 = comb.xor bin %203, %true : i1
    %205 = comb.and bin %201, %204 : i1
    %206 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %207 = comb.or bin %206, %reset : i1
    %208 = comb.xor bin %207, %true : i1
    %209 = comb.and bin %201, %208 : i1
    %210 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %211 = comb.or bin %210, %reset : i1
    %212 = comb.xor bin %211, %true : i1
    %213 = comb.and bin %201, %212 : i1
    %214 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %215 = comb.or bin %214, %reset : i1
    %216 = comb.xor bin %215, %true : i1
    %217 = comb.and bin %201, %216 : i1
    %218 = comb.icmp bin eq %io_in_a_bits_address, %address : i12
    %219 = comb.or bin %218, %reset : i1
    %220 = comb.xor bin %219, %true : i1
    %221 = comb.and bin %201, %220 : i1
    %222 = comb.and bin %195, %197 : i1
    %223 = comb.mux bin %222, %io_in_a_bits_opcode, %opcode : i3
    %224 = comb.mux bin %222, %io_in_a_bits_param, %param : i3
    %225 = comb.mux bin %222, %io_in_a_bits_size, %size : i2
    %226 = comb.mux bin %222, %io_in_a_bits_source, %source : i6
    %227 = comb.mux bin %222, %io_in_a_bits_address, %address : i12
    %228 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %233 clock %clock reset sync %reset, %false {firrtl.random_init_start = 27 : ui64} : i1
    %229 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %230 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %231 = comb.xor %228, %true : i1
    %232 = comb.or %231, %229 : i1
    %233 = comb.and %232, %d_first_counter : i1
    %opcode_1 = seq.firreg %248 clock %clock {firrtl.random_init_start = 28 : ui64} : i3
    %size_1 = seq.firreg %249 clock %clock {firrtl.random_init_start = 33 : ui64} : i2
    %source_1 = seq.firreg %250 clock %clock {firrtl.random_init_start = 35 : ui64} : i6
    %234 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %235 = comb.icmp bin eq %io_in_d_bits_opcode, %opcode_1 : i3
    %236 = comb.or bin %235, %reset : i1
    %237 = comb.xor bin %236, %true : i1
    %238 = comb.and bin %234, %237 : i1
    %239 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %240 = comb.or bin %239, %reset : i1
    %241 = comb.xor bin %240, %true : i1
    %242 = comb.and bin %234, %241 : i1
    %243 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %244 = comb.or bin %243, %reset : i1
    %245 = comb.xor bin %244, %true : i1
    %246 = comb.and bin %234, %245 : i1
    %247 = comb.and bin %228, %230 : i1
    %248 = comb.mux bin %247, %io_in_d_bits_opcode, %opcode_1 : i3
    %249 = comb.mux bin %247, %io_in_d_bits_size, %size_1 : i2
    %250 = comb.mux bin %247, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %354 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 43 : ui64} : i48
    %inflight_opcodes = seq.firreg %357 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 91 : ui64} : i192
    %inflight_sizes = seq.firreg %360 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 283 : ui64} : i192
    %a_first_counter_1 = seq.firreg %255 clock %clock reset sync %reset, %false {firrtl.random_init_start = 475 : ui64} : i1
    %251 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %252 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %253 = comb.xor %195, %true : i1
    %254 = comb.or %253, %251 : i1
    %255 = comb.and %254, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %260 clock %clock reset sync %reset, %false {firrtl.random_init_start = 476 : ui64} : i1
    %256 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %257 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %258 = comb.xor %228, %true : i1
    %259 = comb.or %258, %256 : i1
    %260 = comb.and %259, %d_first_counter_1 : i1
    %261 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %262 = comb.shru bin %inflight_opcodes, %261 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %263 = comb.extract %262 from 1 : (i192) -> i3
    %264 = comb.shru bin %inflight_sizes, %261 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %265 = comb.extract %264 from 1 : (i192) -> i3
    %266 = comb.concat %false, %265 {sv.namehint = "a_size_lookup"} : i1, i3
    %267 = comb.and bin %195, %252 : i1
    %268 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %269 = comb.shl bin %c1_i64, %268 {sv.namehint = "_a_set_T"} : i64
    %270 = comb.extract %269 from 0 : (i64) -> i48
    %271 = comb.mux bin %267, %270, %c0_i48 {sv.namehint = "a_set"} : i48
    %272 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %273 = comb.mux bin %267, %272, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %274 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %275 = comb.mux bin %267, %274, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %276 = comb.concat %c0_i511, %273 : i511, i4
    %277 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %278 = comb.shl bin %276, %277 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %279 = comb.extract %278 from 0 : (i515) -> i192
    %280 = comb.mux bin %267, %279, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %281 = comb.concat %c0_i511, %275 : i511, i3
    %282 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %283 = comb.shl bin %281, %282 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %284 = comb.extract %283 from 0 : (i514) -> i192
    %285 = comb.mux bin %267, %284, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %286 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %287 = comb.shru bin %inflight, %286 : i48
    %288 = comb.extract %287 from 0 : (i48) -> i1
    %289 = comb.xor bin %288, %true : i1
    %290 = comb.or bin %289, %reset : i1
    %291 = comb.xor bin %290, %true : i1
    %292 = comb.and bin %267, %291 : i1
    %293 = comb.icmp bin eq %io_in_d_bits_opcode, %c-2_i3 {sv.namehint = "d_release_ack"} : i3
    %294 = comb.and bin %io_in_d_valid, %257 : i1
    %295 = comb.xor bin %293, %true : i1
    %296 = comb.and bin %228, %257, %295 : i1
    %297 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %298 = comb.shl bin %c1_i64, %297 {sv.namehint = "_d_clr_T"} : i64
    %299 = comb.extract %298 from 0 : (i64) -> i48
    %300 = comb.mux bin %296, %299, %c0_i48 {sv.namehint = "d_clr"} : i48
    %301 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %302 = comb.shl bin %c15_i527, %301 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %303 = comb.extract %302 from 0 : (i527) -> i192
    %304 = comb.mux bin %296, %303, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %305 = comb.shl bin %c15_i527, %301 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %306 = comb.extract %305 from 0 : (i527) -> i192
    %307 = comb.mux bin %296, %306, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %308 = comb.and bin %294, %295 : i1
    %309 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %310 = comb.and bin %io_in_a_valid, %252, %309 {sv.namehint = "same_cycle_resp"} : i1
    %311 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %312 = comb.shru bin %inflight, %311 : i48
    %313 = comb.extract %312 from 0 : (i48) -> i1
    %314 = comb.or bin %313, %310, %reset : i1
    %315 = comb.xor bin %314, %true : i1
    %316 = comb.and bin %308, %315 : i1
    %317 = comb.and bin %308, %310 : i1
    %318 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %319 = comb.icmp bin eq %io_in_d_bits_opcode, %318 : i3
    %320 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %321 = comb.icmp bin eq %io_in_d_bits_opcode, %320 : i3
    %322 = comb.or bin %319, %321, %reset : i1
    %323 = comb.xor bin %322, %true : i1
    %324 = comb.and bin %317, %323 : i1
    %325 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %326 = comb.or bin %325, %reset : i1
    %327 = comb.xor bin %326, %true : i1
    %328 = comb.and bin %317, %327 : i1
    %329 = comb.xor bin %310, %true : i1
    %330 = comb.and bin %308, %329 : i1
    %331 = hw.array_get %1[%263] : !hw.array<8xi3>, i3
    %332 = comb.icmp bin eq %io_in_d_bits_opcode, %331 : i3
    %333 = hw.array_get %0[%263] : !hw.array<8xi3>, i3
    %334 = comb.icmp bin eq %io_in_d_bits_opcode, %333 : i3
    %335 = comb.or bin %332, %334, %reset : i1
    %336 = comb.xor bin %335, %true : i1
    %337 = comb.and bin %330, %336 : i1
    %338 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %339 = comb.icmp bin eq %338, %266 : i4
    %340 = comb.or bin %339, %reset : i1
    %341 = comb.xor bin %340, %true : i1
    %342 = comb.and bin %330, %341 : i1
    %343 = comb.and bin %294, %252 : i1
    %344 = comb.and bin %343, %io_in_a_valid : i1
    %345 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %346 = comb.and bin %344, %345 : i1
    %347 = comb.and bin %346, %295 : i1
    %348 = comb.xor bin %io_in_d_ready, %true : i1
    %349 = comb.or bin %348, %io_in_a_ready, %reset : i1
    %350 = comb.xor bin %349, %true : i1
    %351 = comb.and bin %347, %350 : i1
    %352 = comb.or bin %inflight, %271 {sv.namehint = "_inflight_T"} : i48
    %353 = comb.xor bin %300, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %354 = comb.and bin %352, %353 {sv.namehint = "_inflight_T_2"} : i48
    %355 = comb.or bin %inflight_opcodes, %280 {sv.namehint = "_inflight_opcodes_T"} : i192
    %356 = comb.xor bin %304, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %357 = comb.and bin %355, %356 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %358 = comb.or bin %inflight_sizes, %285 {sv.namehint = "_inflight_sizes_T"} : i192
    %359 = comb.xor bin %307, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %360 = comb.and bin %358, %359 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %368 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 477 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %361 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %362 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %363 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %364 = comb.or bin %361, %362, %363, %reset : i1
    %365 = comb.xor bin %364, %true : i1
    %366 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %367 = comb.or bin %195, %228 : i1
    %368 = comb.mux bin %367, %c0_i32, %366 : i32
    %inflight_1 = seq.firreg %395 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 509 : ui64} : i48
    %inflight_sizes_1 = seq.firreg %397 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 749 : ui64} : i192
    %d_first_counter_2 = seq.firreg %373 clock %clock reset sync %reset, %false {firrtl.random_init_start = 942 : ui64} : i1
    %369 = comb.add %d_first_counter_2, %true {sv.namehint = "_d_first_counter1_T_2"} : i1
    %370 = comb.xor bin %d_first_counter_2, %true {sv.namehint = "d_first_2"} : i1
    %371 = comb.xor %228, %true : i1
    %372 = comb.or %371, %369 : i1
    %373 = comb.and %372, %d_first_counter_2 : i1
    %374 = comb.shru bin %inflight_sizes_1, %261 {sv.namehint = "_c_size_lookup_T_1"} : i192
    %375 = comb.extract %374 from 1 : (i192) -> i3
    %376 = comb.concat %false, %375 {sv.namehint = "c_size_lookup"} : i1, i3
    %377 = comb.and bin %228, %370, %293 : i1
    %378 = comb.shl bin %c1_i64, %297 {sv.namehint = "_d_clr_T_1"} : i64
    %379 = comb.extract %378 from 0 : (i64) -> i48
    %380 = comb.mux bin %377, %379, %c0_i48 {sv.namehint = "d_clr_1"} : i48
    %381 = comb.shl bin %c15_i527, %301 {sv.namehint = "_d_sizes_clr_T_11"} : i527
    %382 = comb.extract %381 from 0 : (i527) -> i192
    %383 = comb.mux bin %377, %382, %c0_i192 {sv.namehint = "d_sizes_clr_1"} : i192
    %384 = comb.and bin %io_in_d_valid, %370, %293 : i1
    %385 = comb.shru bin %inflight_1, %311 : i48
    %386 = comb.extract %385 from 0 : (i48) -> i1
    %387 = comb.or bin %386, %reset : i1
    %388 = comb.xor bin %387, %true : i1
    %389 = comb.and bin %384, %388 : i1
    %390 = comb.icmp bin eq %338, %376 : i4
    %391 = comb.or bin %390, %reset : i1
    %392 = comb.xor bin %391, %true : i1
    %393 = comb.and bin %384, %392 : i1
    %394 = comb.xor bin %380, %c-1_i48 {sv.namehint = "_inflight_T_4"} : i48
    %395 = comb.and bin %inflight_1, %394 {sv.namehint = "_inflight_T_5"} : i48
    %396 = comb.xor bin %383, %c-1_i192 {sv.namehint = "_inflight_sizes_T_4"} : i192
    %397 = comb.and bin %inflight_sizes_1, %396 {sv.namehint = "_inflight_sizes_T_5"} : i192
    %watchdog_1 = seq.firreg %404 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 943 : ui64} : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %398 = comb.icmp bin eq %inflight_1, %c0_i48 : i48
    %399 = comb.icmp bin eq %plusarg_reader_1.out, %c0_i32 : i32
    %400 = comb.icmp bin ult %watchdog_1, %plusarg_reader_1.out : i32
    %401 = comb.or bin %398, %399, %400, %reset : i1
    %402 = comb.xor bin %401, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %405 = comb.and bin %STOP_COND_, %false : i1
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %406 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %406 {
          sv.fatal 1
        }
        sv.if %406 {
          sv.fatal 1
        }
        %407 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %407 {
          sv.fatal 1
        }
        %408 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %408 {
          sv.fatal 1
        }
        %409 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %409 {
          sv.fatal 1
        }
        %410 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %410 {
          sv.fatal 1
        }
        %411 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %411 {
          sv.fatal 1
        }
        %412 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %412 {
          sv.fatal 1
        }
        %413 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %413 {
          sv.fatal 1
        }
        sv.if %413 {
          sv.fatal 1
        }
        %414 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %414 {
          sv.fatal 1
        }
        %415 = comb.and bin %STOP_COND_, %83 : i1
        sv.if %415 {
          sv.fatal 1
        }
        %416 = comb.and bin %STOP_COND_, %84 : i1
        sv.if %416 {
          sv.fatal 1
        }
        %417 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %417 {
          sv.fatal 1
        }
        %418 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %418 {
          sv.fatal 1
        }
        %419 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %419 {
          sv.fatal 1
        }
        %420 = comb.and bin %STOP_COND_, %91 : i1
        sv.if %420 {
          sv.fatal 1
        }
        %421 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %421 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %422 = comb.and bin %STOP_COND_, %99 : i1
        sv.if %422 {
          sv.fatal 1
        }
        %423 = comb.and bin %STOP_COND_, %100 : i1
        sv.if %423 {
          sv.fatal 1
        }
        %424 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %424 {
          sv.fatal 1
        }
        %425 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %425 {
          sv.fatal 1
        }
        %426 = comb.and bin %STOP_COND_, %109 : i1
        sv.if %426 {
          sv.fatal 1
        }
        %427 = comb.and bin %STOP_COND_, %112 : i1
        sv.if %427 {
          sv.fatal 1
        }
        %428 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %428 {
          sv.fatal 1
        }
        %429 = comb.and bin %STOP_COND_, %114 : i1
        sv.if %429 {
          sv.fatal 1
        }
        %430 = comb.and bin %STOP_COND_, %115 : i1
        sv.if %430 {
          sv.fatal 1
        }
        %431 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %431 {
          sv.fatal 1
        }
        %432 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %432 {
          sv.fatal 1
        }
        %433 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %433 {
          sv.fatal 1
        }
        %434 = comb.and bin %STOP_COND_, %121 : i1
        sv.if %434 {
          sv.fatal 1
        }
        %435 = comb.and bin %STOP_COND_, %122 : i1
        sv.if %435 {
          sv.fatal 1
        }
        %436 = comb.and bin %STOP_COND_, %128 : i1
        sv.if %436 {
          sv.fatal 1
        }
        %437 = comb.and bin %STOP_COND_, %131 : i1
        sv.if %437 {
          sv.fatal 1
        }
        %438 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %438 {
          sv.fatal 1
        }
        %439 = comb.and bin %STOP_COND_, %133 : i1
        sv.if %439 {
          sv.fatal 1
        }
        %440 = comb.and bin %STOP_COND_, %137 : i1
        sv.if %440 {
          sv.fatal 1
        }
        %441 = comb.and bin %STOP_COND_, %138 : i1
        sv.if %441 {
          sv.fatal 1
        }
        %442 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %442 {
          sv.fatal 1
        }
        %443 = comb.and bin %STOP_COND_, %142 : i1
        sv.if %443 {
          sv.fatal 1
        }
        %444 = comb.and bin %STOP_COND_, %143 : i1
        sv.if %444 {
          sv.fatal 1
        }
        %445 = comb.and bin %STOP_COND_, %148 : i1
        sv.if %445 {
          sv.fatal 1
        }
        %446 = comb.and bin %STOP_COND_, %149 : i1
        sv.if %446 {
          sv.fatal 1
        }
        %447 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %447 {
          sv.fatal 1
        }
        %448 = comb.and bin %STOP_COND_, %153 : i1
        sv.if %448 {
          sv.fatal 1
        }
        %449 = comb.and bin %STOP_COND_, %154 : i1
        sv.if %449 {
          sv.fatal 1
        }
        %450 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %450 {
          sv.fatal 1
        }
        %451 = comb.and bin %STOP_COND_, %159 : i1
        sv.if %451 {
          sv.fatal 1
        }
        %452 = comb.and bin %STOP_COND_, %160 : i1
        sv.if %452 {
          sv.fatal 1
        }
        %453 = comb.and bin %STOP_COND_, %164 : i1
        sv.if %453 {
          sv.fatal 1
        }
        %454 = comb.and bin %STOP_COND_, %171 : i1
        sv.if %454 {
          sv.fatal 1
        }
        %455 = comb.and bin %STOP_COND_, %175 : i1
        sv.if %455 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %456 = comb.and bin %STOP_COND_, %178 : i1
        sv.if %456 {
          sv.fatal 1
        }
        %457 = comb.and bin %STOP_COND_, %179 : i1
        sv.if %457 {
          sv.fatal 1
        }
        %458 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %458 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %459 = comb.and bin %STOP_COND_, %183 : i1
        sv.if %459 {
          sv.fatal 1
        }
        %460 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %460 {
          sv.fatal 1
        }
        %461 = comb.and bin %STOP_COND_, %185 : i1
        sv.if %461 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %462 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %462 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %463 = comb.and bin %STOP_COND_, %191 : i1
        sv.if %463 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %464 = comb.and bin %STOP_COND_, %194 : i1
        sv.if %464 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %465 = comb.and bin %STOP_COND_, %205 : i1
        sv.if %465 {
          sv.fatal 1
        }
        %466 = comb.and bin %STOP_COND_, %209 : i1
        sv.if %466 {
          sv.fatal 1
        }
        %467 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %467 {
          sv.fatal 1
        }
        %468 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %468 {
          sv.fatal 1
        }
        %469 = comb.and bin %STOP_COND_, %221 : i1
        sv.if %469 {
          sv.fatal 1
        }
        %470 = comb.and bin %STOP_COND_, %238 : i1
        sv.if %470 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %471 = comb.and bin %STOP_COND_, %242 : i1
        sv.if %471 {
          sv.fatal 1
        }
        %472 = comb.and bin %STOP_COND_, %246 : i1
        sv.if %472 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %473 = comb.and bin %STOP_COND_, %292 : i1
        sv.if %473 {
          sv.fatal 1
        }
        %474 = comb.and bin %STOP_COND_, %316 : i1
        sv.if %474 {
          sv.fatal 1
        }
        %475 = comb.and bin %STOP_COND_, %324 : i1
        sv.if %475 {
          sv.fatal 1
        }
        %476 = comb.and bin %STOP_COND_, %328 : i1
        sv.if %476 {
          sv.fatal 1
        }
        %477 = comb.and bin %STOP_COND_, %337 : i1
        sv.if %477 {
          sv.fatal 1
        }
        %478 = comb.and bin %STOP_COND_, %342 : i1
        sv.if %478 {
          sv.fatal 1
        }
        %479 = comb.and bin %STOP_COND_, %351 : i1
        sv.if %479 {
          sv.fatal 1
        }
        %480 = comb.and bin %STOP_COND_, %365 : i1
        sv.if %480 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %481 = comb.and bin %STOP_COND_, %389 : i1
        sv.if %481 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %482 = comb.and bin %STOP_COND_, %393 : i1
        sv.if %482 {
          sv.fatal 1
        }
        sv.if %405 {
          sv.fatal 1
        }
        %483 = comb.and bin %STOP_COND_, %402 : i1
        sv.if %483 {
          sv.fatal 1
        }
      }
    }
    %403 = comb.add %watchdog_1, %c1_i32 {sv.namehint = "_watchdog_T_2"} : i32
    %404 = comb.mux bin %228, %c0_i32, %403 : i32
    hw.output
  }
  hw.module private @TLDebugModuleInner(in %clock : !seq.clock, in %reset : i1, out auto_tl_in_a_ready : i1, in %auto_tl_in_a_valid : i1, in %auto_tl_in_a_bits_opcode : i3, in %auto_tl_in_a_bits_param : i3, in %auto_tl_in_a_bits_size : i2, in %auto_tl_in_a_bits_source : i6, in %auto_tl_in_a_bits_address : i12, in %auto_tl_in_a_bits_mask : i8, in %auto_tl_in_a_bits_data : i64, in %auto_tl_in_a_bits_corrupt : i1, in %auto_tl_in_d_ready : i1, out auto_tl_in_d_valid : i1, out auto_tl_in_d_bits_opcode : i3, out auto_tl_in_d_bits_size : i2, out auto_tl_in_d_bits_source : i6, out auto_tl_in_d_bits_data : i64, out auto_dmi_in_a_ready : i1, in %auto_dmi_in_a_valid : i1, in %auto_dmi_in_a_bits_opcode : i3, in %auto_dmi_in_a_bits_param : i3, in %auto_dmi_in_a_bits_size : i2, in %auto_dmi_in_a_bits_source : i1, in %auto_dmi_in_a_bits_address : i9, in %auto_dmi_in_a_bits_mask : i4, in %auto_dmi_in_a_bits_data : i32, in %auto_dmi_in_a_bits_corrupt : i1, in %auto_dmi_in_d_ready : i1, out auto_dmi_in_d_valid : i1, out auto_dmi_in_d_bits_opcode : i3, out auto_dmi_in_d_bits_size : i2, out auto_dmi_in_d_bits_source : i1, out auto_dmi_in_d_bits_data : i32, in %io_dmactive : i1, in %io_innerCtrl_valid : i1, in %io_innerCtrl_bits_resumereq : i1, in %io_innerCtrl_bits_hartsel : i10, in %io_innerCtrl_bits_ackhavereset : i1, in %io_innerCtrl_bits_hrmask_0 : i1, out io_hgDebugInt_0 : i1, in %io_hartIsInReset_0 : i1) {
    %c4128_i16 = hw.constant 4128 : i16
    %c112_i8 = hw.constant 112 : i8
    %c111_i8 = hw.constant 111 : i8
    %c110_i8 = hw.constant 110 : i8
    %c109_i8 = hw.constant 109 : i8
    %c108_i8 = hw.constant 108 : i8
    %c107_i8 = hw.constant 107 : i8
    %c106_i8 = hw.constant 106 : i8
    %c105_i8 = hw.constant 105 : i8
    %c104_i8 = hw.constant 104 : i8
    %c33_i8 = hw.constant 33 : i8
    %c32_i8 = hw.constant 32 : i8
    %c35_i12 = hw.constant 35 : i12
    %c32768_i19 = hw.constant 32768 : i19
    %c-1_i5 = hw.constant -1 : i5
    %c-2_i5 = hw.constant -2 : i5
    %c-3_i5 = hw.constant -3 : i5
    %c-4_i5 = hw.constant -4 : i5
    %c-5_i5 = hw.constant -5 : i5
    %c-6_i5 = hw.constant -6 : i5
    %c-7_i5 = hw.constant -7 : i5
    %c-8_i5 = hw.constant -8 : i5
    %c-9_i5 = hw.constant -9 : i5
    %c-10_i5 = hw.constant -10 : i5
    %c-11_i5 = hw.constant -11 : i5
    %c-12_i5 = hw.constant -12 : i5
    %c-13_i5 = hw.constant -13 : i5
    %c-14_i5 = hw.constant -14 : i5
    %c-15_i5 = hw.constant -15 : i5
    %c-16_i5 = hw.constant -16 : i5
    %c8_i5 = hw.constant 8 : i5
    %c7_i5 = hw.constant 7 : i5
    %c6_i5 = hw.constant 6 : i5
    %c5_i5 = hw.constant 5 : i5
    %c4_i5 = hw.constant 4 : i5
    %c0_i4 = hw.constant 0 : i4
    %c0_i14 = hw.constant 0 : i14
    %false = hw.constant false {sv.namehint = "DMSTATUSRdData_anynonexistent"}
    %true = hw.constant true {sv.namehint = "hamaskFull_0"}
    %c2_i8 = hw.constant 2 : i8
    %c0_i3 = hw.constant 0 : i3
    %c1048691_i32 = hw.constant 1048691 : i32
    %c19_i32 = hw.constant 19 : i32
    %c28672_i17 = hw.constant 28672 : i17
    %c-94_i8 = hw.constant -94 : i8
    %c3_i3 = hw.constant 3 : i3
    %c1_i3 = hw.constant 1 : i3
    %c0_i2 = hw.constant 0 : i2
    %c0_i64 = hw.constant 0 : i64
    %c58720367_i64 = hw.constant 58720367 : i64
    %c1048691_i64 = hw.constant 1048691 : i64
    %c1152963438438252659_i64 = hw.constant 1152963438438252659 : i64
    %c8872131342536549411_i64 = hw.constant 8872131342536549411 : i64
    %c-1062809434914291609_i64 = hw.constant -1062809434914291609 : i64
    %c1152959040391750771_i64 = hw.constant 1152959040391750771 : i64
    %c1135121202967571_i64 = hw.constant 1135121202967571 : i64
    %c-142979517114977261_i64 = hw.constant -142979517114977261 : i64
    %c4612886698286653475_i64 = hw.constant 4612886698286653475 : i64
    %c-1062809433653637005_i64 = hw.constant -1062809433653637005 : i64
    %c1148417969475289199_i64 = hw.constant 1148417969475289199 : i64
    %c252202055886700655_i64 = hw.constant 252202055886700655 : i64
    %c28_i7 = hw.constant 28 : i7
    %c0_i5 = hw.constant 0 : i5
    %c3_i7 = hw.constant 3 : i7
    %c0_i12 = hw.constant 0 : i12
    %c0_i6 = hw.constant 0 : i6
    %c0_i32 = hw.constant 0 : i32
    %c0_i8 = hw.constant 0 : i8
    %c0_i24 = hw.constant 0 : i24
    %c0_i16 = hw.constant 0 : i16
    %c1_i2 = hw.constant 1 : i2
    %c2_i3 = hw.constant 2 : i3
    %c-4_i3 = hw.constant -4 : i3
    %c-1_i2 = hw.constant -1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c0_i10 = hw.constant 0 : i10
    %c0_i31 = hw.constant 0 : i31
    %c-1_i3 = hw.constant -1 : i3
    %c-1_i16 = hw.constant -1 : i16
    %c-1_i32 = hw.constant -1 : i32
    %c-1_i10 = hw.constant -1 : i10
    %0 = seq.from_clock %clock
    hw.instance "monitor" @TLMonitor_28(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_dmi_in_d_ready: i1, io_in_a_valid: %auto_dmi_in_a_valid: i1, io_in_a_bits_opcode: %auto_dmi_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_dmi_in_a_bits_param: i3, io_in_a_bits_size: %auto_dmi_in_a_bits_size: i2, io_in_a_bits_source: %auto_dmi_in_a_bits_source: i1, io_in_a_bits_address: %auto_dmi_in_a_bits_address: i9, io_in_a_bits_mask: %auto_dmi_in_a_bits_mask: i4, io_in_a_bits_corrupt: %auto_dmi_in_a_bits_corrupt: i1, io_in_d_ready: %auto_dmi_in_d_ready: i1, io_in_d_valid: %auto_dmi_in_a_valid: i1, io_in_d_bits_opcode: %417: i3, io_in_d_bits_size: %auto_dmi_in_a_bits_size: i2, io_in_d_bits_source: %auto_dmi_in_a_bits_source: i1) -> ()
    hw.instance "monitor_1" @TLMonitor_29(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_tl_in_d_ready: i1, io_in_a_valid: %auto_tl_in_a_valid: i1, io_in_a_bits_opcode: %auto_tl_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_tl_in_a_bits_param: i3, io_in_a_bits_size: %auto_tl_in_a_bits_size: i2, io_in_a_bits_source: %auto_tl_in_a_bits_source: i6, io_in_a_bits_address: %auto_tl_in_a_bits_address: i12, io_in_a_bits_mask: %auto_tl_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_tl_in_a_bits_corrupt: i1, io_in_d_ready: %auto_tl_in_d_ready: i1, io_in_d_valid: %auto_tl_in_a_valid: i1, io_in_d_bits_opcode: %932: i3, io_in_d_bits_size: %auto_tl_in_a_bits_size: i2, io_in_d_bits_source: %auto_tl_in_a_bits_source: i6) -> ()
    %haltedBitRegs = seq.firreg %107 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "haltedSummary"} : i1
    %resumeReqRegs = seq.firreg %113 clock %clock {firrtl.random_init_start = 1 : ui64, sv.namehint = "resumeReqRegs"} : i1
    %haveResetBitRegs = seq.firreg %18 clock %clock {firrtl.random_init_start = 2 : ui64} : i1
    %1 = comb.icmp bin eq %io_innerCtrl_bits_hartsel, %c0_i10 {sv.namehint = "hamaskWrSel_0"} : i10
    %hrmaskReg_0 = seq.firreg %4 clock %clock reset sync %reset, %false {firrtl.random_init_start = 4 : ui64} : i1
    %hartIsInResetSync_0_debug_hartReset_0.io_q = hw.instance "hartIsInResetSync_0_debug_hartReset_0" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_hartIsInReset_0: i1) -> (io_q: i1) {sv.namehint = "hartIsInResetSync_0_debug_hartReset_0.io_q"}
    %2 = comb.xor bin %io_dmactive, %true : i1
    %3 = comb.mux bin %io_innerCtrl_valid, %io_innerCtrl_bits_hrmask_0, %hrmaskReg_0 : i1
    %4 = comb.and %io_dmactive, %3 : i1
    %hrDebugIntReg_0 = seq.firreg %8 clock %clock reset async %reset, %false {firrtl.random_init_start = 5 : ui64, sv.namehint = "hrDebugInt_0"} : i1
    %5 = comb.xor bin %haltedBitRegs, %true : i1
    %6 = comb.and bin %hrDebugIntReg_0, %5 : i1
    %7 = comb.or bin %hartIsInResetSync_0_debug_hartReset_0.io_q, %6 : i1
    %8 = comb.and %io_dmactive, %hrmaskReg_0, %7 : i1
    %9 = comb.and bin %io_innerCtrl_valid, %io_innerCtrl_bits_resumereq {sv.namehint = "resumereq"} : i1
    %10 = comb.xor bin %haltedBitRegs, %true {sv.namehint = "_DMSTATUSRdData_anyrunning_T_2"} : i1
    %11 = comb.xor bin %haltedBitRegs, %true {sv.namehint = "_DMSTATUSRdData_allrunning_T_2"} : i1
    %12 = comb.and bin %io_innerCtrl_valid, %io_innerCtrl_bits_ackhavereset : i1
    %13 = comb.xor bin %1, %true {sv.namehint = "_haveResetBitRegs_T"} : i1
    %14 = comb.and bin %haveResetBitRegs, %13 {sv.namehint = "_haveResetBitRegs_T_1"} : i1
    %15 = comb.or bin %14, %hartIsInResetSync_0_debug_hartReset_0.io_q {sv.namehint = "_haveResetBitRegs_T_2"} : i1
    %16 = comb.or bin %haveResetBitRegs, %hartIsInResetSync_0_debug_hartReset_0.io_q {sv.namehint = "_haveResetBitRegs_T_3"} : i1
    %17 = comb.mux bin %12, %15, %16 : i1
    %18 = comb.and %io_dmactive, %17 : i1
    %19 = comb.concat %c0_i31, %haltedBitRegs {sv.namehint = "selectedHaltedStatus"} : i31, i1
    %20 = comb.concat %c0_i31, %haltedBitRegs {sv.namehint = "_HALTSUM1RdData_T"} : i31, i1
    %ABSTRACTCSReg_cmderr = seq.firreg %31 clock %clock {firrtl.random_init_start = 27 : ui64, sv.namehint = "ABSTRACTCSReg_cmderr"} : i3
    %21 = comb.and bin %247, %1007 {sv.namehint = "ABSTRACTCSWrEn"} : i1
    %22 = comb.xor bin %248, %c-1_i3 {sv.namehint = "_ABSTRACTCSReg_cmderr_T"} : i3
    %23 = comb.xor %21, %true : i1
    %24 = comb.replicate %23 : (i1) -> i3
    %25 = comb.or %24, %22 : i3
    %26 = comb.and %25, %ABSTRACTCSReg_cmderr : i3
    %27 = comb.mux bin %1046, %c-4_i3, %26 : i3
    %28 = comb.mux bin %1044, %c2_i3, %27 : i3
    %29 = comb.mux bin %1066, %c3_i3, %28 : i3
    %30 = comb.mux bin %1014, %c1_i3, %29 : i3
    %31 = comb.mux bin %io_dmactive, %30, %c0_i3 : i3
    %ABSTRACTAUTOReg_autoexecprogbuf = seq.firreg %34 clock %clock {firrtl.random_init_start = 38 : ui64, sv.namehint = "ABSTRACTAUTOReg_autoexecprogbuf"} : i16
    %ABSTRACTAUTOReg_autoexecdata = seq.firreg %38 clock %clock {firrtl.random_init_start = 58 : ui64, sv.namehint = "ABSTRACTAUTOReg_autoexecdata"} : i12
    %32 = comb.and bin %169, %1007 : i1
    %33 = comb.mux bin %32, %170, %ABSTRACTAUTOReg_autoexecprogbuf : i16
    %34 = comb.mux bin %io_dmactive, %33, %c0_i16 : i16
    %35 = comb.and bin %164, %1007 : i1
    %36 = comb.concat %c0_i10, %165 : i10, i2
    %37 = comb.mux bin %35, %36, %ABSTRACTAUTOReg_autoexecdata : i12
    %38 = comb.mux bin %io_dmactive, %37, %c0_i12 : i12
    %39 = comb.or bin %307, %306 {sv.namehint = "dmiAbstractDataAccessVec_0"} : i1
    %40 = comb.or bin %143, %142 {sv.namehint = "dmiAbstractDataAccessVec_4"} : i1
    %41 = comb.or bin %218, %217 {sv.namehint = "dmiProgramBufferAccessVec_0"} : i1
    %42 = comb.or bin %200, %199 {sv.namehint = "dmiProgramBufferAccessVec_4"} : i1
    %43 = comb.or bin %227, %226 {sv.namehint = "dmiProgramBufferAccessVec_8"} : i1
    %44 = comb.or bin %268, %267 {sv.namehint = "dmiProgramBufferAccessVec_12"} : i1
    %45 = comb.or bin %298, %297 {sv.namehint = "dmiProgramBufferAccessVec_16"} : i1
    %46 = comb.or bin %173, %172 {sv.namehint = "dmiProgramBufferAccessVec_20"} : i1
    %47 = comb.or bin %191, %190 {sv.namehint = "dmiProgramBufferAccessVec_24"} : i1
    %48 = comb.or bin %259, %258 {sv.namehint = "dmiProgramBufferAccessVec_28"} : i1
    %49 = comb.or bin %286, %285 {sv.namehint = "dmiProgramBufferAccessVec_32"} : i1
    %50 = comb.or bin %209, %208 {sv.namehint = "dmiProgramBufferAccessVec_36"} : i1
    %51 = comb.or bin %156, %155 {sv.namehint = "dmiProgramBufferAccessVec_40"} : i1
    %52 = comb.or bin %277, %276 {sv.namehint = "dmiProgramBufferAccessVec_44"} : i1
    %53 = comb.or bin %250, %249 {sv.namehint = "dmiProgramBufferAccessVec_48"} : i1
    %54 = comb.or bin %236, %235 {sv.namehint = "dmiProgramBufferAccessVec_52"} : i1
    %55 = comb.or bin %182, %181 {sv.namehint = "dmiProgramBufferAccessVec_56"} : i1
    %56 = comb.or bin %316, %315 {sv.namehint = "dmiProgramBufferAccessVec_60"} : i1
    %57 = comb.or bin %39, %309, %308, %311, %310, %313, %312, %40, %146, %145, %149, %148, %152, %151 {sv.namehint = "dmiAbstractDataAccess"} : i1
    %58 = comb.or bin %41, %220, %219, %222, %221, %224, %223, %42, %202, %201, %204, %203, %206, %205, %43, %229, %228, %231, %230, %233, %232, %44, %270, %269, %272, %271, %274, %273, %45, %300, %299, %302, %301, %304, %303, %46, %175, %174, %177, %176, %179, %178, %47, %193, %192, %195, %194, %197, %196, %48, %261, %260, %263, %262, %265, %264, %49, %288, %287, %290, %289, %292, %291, %50, %211, %210, %213, %212, %215, %214, %51, %158, %157, %160, %159, %162, %161, %52, %279, %278, %281, %280, %283, %282, %53, %252, %251, %254, %253, %256, %255, %54, %238, %237, %240, %239, %242, %241, %55, %184, %183, %186, %185, %188, %187, %56, %318, %317, %320, %319, %322, %321 {sv.namehint = "dmiProgramBufferAccess"} : i1
    %59 = comb.extract %ABSTRACTAUTOReg_autoexecdata from 0 : (i12) -> i1
    %60 = comb.extract %ABSTRACTAUTOReg_autoexecdata from 1 : (i12) -> i1
    %61 = comb.and bin %39, %59 {sv.namehint = "autoexecData_0"} : i1
    %62 = comb.and bin %40, %60 {sv.namehint = "autoexecData_1"} : i1
    %63 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 0 : (i16) -> i1
    %64 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 1 : (i16) -> i1
    %65 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 2 : (i16) -> i1
    %66 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 3 : (i16) -> i1
    %67 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 4 : (i16) -> i1
    %68 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 5 : (i16) -> i1
    %69 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 6 : (i16) -> i1
    %70 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 7 : (i16) -> i1
    %71 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 8 : (i16) -> i1
    %72 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 9 : (i16) -> i1
    %73 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 10 : (i16) -> i1
    %74 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 11 : (i16) -> i1
    %75 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 12 : (i16) -> i1
    %76 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 13 : (i16) -> i1
    %77 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 14 : (i16) -> i1
    %78 = comb.extract %ABSTRACTAUTOReg_autoexecprogbuf from 15 : (i16) -> i1
    %79 = comb.and bin %41, %63 {sv.namehint = "autoexecProg_0"} : i1
    %80 = comb.and bin %42, %64 {sv.namehint = "autoexecProg_1"} : i1
    %81 = comb.and bin %43, %65 {sv.namehint = "autoexecProg_2"} : i1
    %82 = comb.and bin %44, %66 {sv.namehint = "autoexecProg_3"} : i1
    %83 = comb.and bin %45, %67 {sv.namehint = "autoexecProg_4"} : i1
    %84 = comb.and bin %46, %68 {sv.namehint = "autoexecProg_5"} : i1
    %85 = comb.and bin %47, %69 {sv.namehint = "autoexecProg_6"} : i1
    %86 = comb.and bin %48, %70 {sv.namehint = "autoexecProg_7"} : i1
    %87 = comb.and bin %49, %71 {sv.namehint = "autoexecProg_8"} : i1
    %88 = comb.and bin %50, %72 {sv.namehint = "autoexecProg_9"} : i1
    %89 = comb.and bin %51, %73 {sv.namehint = "autoexecProg_10"} : i1
    %90 = comb.and bin %52, %74 {sv.namehint = "autoexecProg_11"} : i1
    %91 = comb.and bin %53, %75 {sv.namehint = "autoexecProg_12"} : i1
    %92 = comb.and bin %54, %76 {sv.namehint = "autoexecProg_13"} : i1
    %93 = comb.and bin %55, %77 {sv.namehint = "autoexecProg_14"} : i1
    %94 = comb.and bin %56, %78 {sv.namehint = "autoexecProg_15"} : i1
    %95 = comb.or bin %61, %62, %79, %80, %81, %82, %83, %84, %85, %86, %87, %88, %89, %90, %91, %92, %93, %94 {sv.namehint = "autoexec"} : i1
    %COMMANDRdData_cmdtype = seq.firreg %102 clock %clock {firrtl.random_init_start = 70 : ui64} : i8
    %COMMANDRdData_control = seq.firreg %100 clock %clock {firrtl.random_init_start = 78 : ui64} : i24
    %96 = comb.extract %296 from 0 {sv.namehint = "COMMANDWrData_control"} : (i32) -> i24
    %97 = comb.extract %296 from 24 {sv.namehint = "COMMANDWrData_cmdtype"} : (i32) -> i8
    %98 = comb.and bin %295, %1007 {sv.namehint = "COMMANDWrEn"} : i1
    %99 = comb.mux bin %98, %96, %COMMANDRdData_control : i24
    %100 = comb.mux bin %io_dmactive, %99, %c0_i24 : i24
    %101 = comb.mux bin %98, %97, %COMMANDRdData_cmdtype : i8
    %102 = comb.mux bin %io_dmactive, %101, %c0_i8 : i8
    %abstractDataMem_0 = seq.firreg %933 clock %clock {firrtl.random_init_start = 102 : ui64} : i8
    %abstractDataMem_1 = seq.firreg %934 clock %clock {firrtl.random_init_start = 110 : ui64} : i8
    %abstractDataMem_2 = seq.firreg %935 clock %clock {firrtl.random_init_start = 118 : ui64} : i8
    %abstractDataMem_3 = seq.firreg %936 clock %clock {firrtl.random_init_start = 126 : ui64} : i8
    %abstractDataMem_4 = seq.firreg %937 clock %clock {firrtl.random_init_start = 134 : ui64} : i8
    %abstractDataMem_5 = seq.firreg %938 clock %clock {firrtl.random_init_start = 142 : ui64} : i8
    %abstractDataMem_6 = seq.firreg %939 clock %clock {firrtl.random_init_start = 150 : ui64} : i8
    %abstractDataMem_7 = seq.firreg %940 clock %clock {firrtl.random_init_start = 158 : ui64} : i8
    %programBufferMem_0 = seq.firreg %941 clock %clock {firrtl.random_init_start = 166 : ui64} : i8
    %programBufferMem_1 = seq.firreg %942 clock %clock {firrtl.random_init_start = 174 : ui64} : i8
    %programBufferMem_2 = seq.firreg %943 clock %clock {firrtl.random_init_start = 182 : ui64} : i8
    %programBufferMem_3 = seq.firreg %944 clock %clock {firrtl.random_init_start = 190 : ui64} : i8
    %programBufferMem_4 = seq.firreg %945 clock %clock {firrtl.random_init_start = 198 : ui64} : i8
    %programBufferMem_5 = seq.firreg %946 clock %clock {firrtl.random_init_start = 206 : ui64} : i8
    %programBufferMem_6 = seq.firreg %947 clock %clock {firrtl.random_init_start = 214 : ui64} : i8
    %programBufferMem_7 = seq.firreg %948 clock %clock {firrtl.random_init_start = 222 : ui64} : i8
    %programBufferMem_8 = seq.firreg %949 clock %clock {firrtl.random_init_start = 230 : ui64} : i8
    %programBufferMem_9 = seq.firreg %950 clock %clock {firrtl.random_init_start = 238 : ui64} : i8
    %programBufferMem_10 = seq.firreg %951 clock %clock {firrtl.random_init_start = 246 : ui64} : i8
    %programBufferMem_11 = seq.firreg %952 clock %clock {firrtl.random_init_start = 254 : ui64} : i8
    %programBufferMem_12 = seq.firreg %953 clock %clock {firrtl.random_init_start = 262 : ui64} : i8
    %programBufferMem_13 = seq.firreg %954 clock %clock {firrtl.random_init_start = 270 : ui64} : i8
    %programBufferMem_14 = seq.firreg %955 clock %clock {firrtl.random_init_start = 278 : ui64} : i8
    %programBufferMem_15 = seq.firreg %956 clock %clock {firrtl.random_init_start = 286 : ui64} : i8
    %programBufferMem_16 = seq.firreg %957 clock %clock {firrtl.random_init_start = 294 : ui64} : i8
    %programBufferMem_17 = seq.firreg %958 clock %clock {firrtl.random_init_start = 302 : ui64} : i8
    %programBufferMem_18 = seq.firreg %959 clock %clock {firrtl.random_init_start = 310 : ui64} : i8
    %programBufferMem_19 = seq.firreg %960 clock %clock {firrtl.random_init_start = 318 : ui64} : i8
    %programBufferMem_20 = seq.firreg %961 clock %clock {firrtl.random_init_start = 326 : ui64} : i8
    %programBufferMem_21 = seq.firreg %962 clock %clock {firrtl.random_init_start = 334 : ui64} : i8
    %programBufferMem_22 = seq.firreg %963 clock %clock {firrtl.random_init_start = 342 : ui64} : i8
    %programBufferMem_23 = seq.firreg %964 clock %clock {firrtl.random_init_start = 350 : ui64} : i8
    %programBufferMem_24 = seq.firreg %965 clock %clock {firrtl.random_init_start = 358 : ui64} : i8
    %programBufferMem_25 = seq.firreg %966 clock %clock {firrtl.random_init_start = 366 : ui64} : i8
    %programBufferMem_26 = seq.firreg %967 clock %clock {firrtl.random_init_start = 374 : ui64} : i8
    %programBufferMem_27 = seq.firreg %968 clock %clock {firrtl.random_init_start = 382 : ui64} : i8
    %programBufferMem_28 = seq.firreg %969 clock %clock {firrtl.random_init_start = 390 : ui64} : i8
    %programBufferMem_29 = seq.firreg %970 clock %clock {firrtl.random_init_start = 398 : ui64} : i8
    %programBufferMem_30 = seq.firreg %971 clock %clock {firrtl.random_init_start = 406 : ui64} : i8
    %programBufferMem_31 = seq.firreg %972 clock %clock {firrtl.random_init_start = 414 : ui64} : i8
    %programBufferMem_32 = seq.firreg %973 clock %clock {firrtl.random_init_start = 422 : ui64} : i8
    %programBufferMem_33 = seq.firreg %974 clock %clock {firrtl.random_init_start = 430 : ui64} : i8
    %programBufferMem_34 = seq.firreg %975 clock %clock {firrtl.random_init_start = 438 : ui64} : i8
    %programBufferMem_35 = seq.firreg %976 clock %clock {firrtl.random_init_start = 446 : ui64} : i8
    %programBufferMem_36 = seq.firreg %977 clock %clock {firrtl.random_init_start = 454 : ui64} : i8
    %programBufferMem_37 = seq.firreg %978 clock %clock {firrtl.random_init_start = 462 : ui64} : i8
    %programBufferMem_38 = seq.firreg %979 clock %clock {firrtl.random_init_start = 470 : ui64} : i8
    %programBufferMem_39 = seq.firreg %980 clock %clock {firrtl.random_init_start = 478 : ui64} : i8
    %programBufferMem_40 = seq.firreg %981 clock %clock {firrtl.random_init_start = 486 : ui64} : i8
    %programBufferMem_41 = seq.firreg %982 clock %clock {firrtl.random_init_start = 494 : ui64} : i8
    %programBufferMem_42 = seq.firreg %983 clock %clock {firrtl.random_init_start = 502 : ui64} : i8
    %programBufferMem_43 = seq.firreg %984 clock %clock {firrtl.random_init_start = 510 : ui64} : i8
    %programBufferMem_44 = seq.firreg %985 clock %clock {firrtl.random_init_start = 518 : ui64} : i8
    %programBufferMem_45 = seq.firreg %986 clock %clock {firrtl.random_init_start = 526 : ui64} : i8
    %programBufferMem_46 = seq.firreg %987 clock %clock {firrtl.random_init_start = 534 : ui64} : i8
    %programBufferMem_47 = seq.firreg %988 clock %clock {firrtl.random_init_start = 542 : ui64} : i8
    %programBufferMem_48 = seq.firreg %989 clock %clock {firrtl.random_init_start = 550 : ui64} : i8
    %programBufferMem_49 = seq.firreg %990 clock %clock {firrtl.random_init_start = 558 : ui64} : i8
    %programBufferMem_50 = seq.firreg %991 clock %clock {firrtl.random_init_start = 566 : ui64} : i8
    %programBufferMem_51 = seq.firreg %992 clock %clock {firrtl.random_init_start = 574 : ui64} : i8
    %programBufferMem_52 = seq.firreg %993 clock %clock {firrtl.random_init_start = 582 : ui64} : i8
    %programBufferMem_53 = seq.firreg %994 clock %clock {firrtl.random_init_start = 590 : ui64} : i8
    %programBufferMem_54 = seq.firreg %995 clock %clock {firrtl.random_init_start = 598 : ui64} : i8
    %programBufferMem_55 = seq.firreg %996 clock %clock {firrtl.random_init_start = 606 : ui64} : i8
    %programBufferMem_56 = seq.firreg %997 clock %clock {firrtl.random_init_start = 614 : ui64} : i8
    %programBufferMem_57 = seq.firreg %998 clock %clock {firrtl.random_init_start = 622 : ui64} : i8
    %programBufferMem_58 = seq.firreg %999 clock %clock {firrtl.random_init_start = 630 : ui64} : i8
    %programBufferMem_59 = seq.firreg %1000 clock %clock {firrtl.random_init_start = 638 : ui64} : i8
    %programBufferMem_60 = seq.firreg %1001 clock %clock {firrtl.random_init_start = 646 : ui64} : i8
    %programBufferMem_61 = seq.firreg %1002 clock %clock {firrtl.random_init_start = 654 : ui64} : i8
    %programBufferMem_62 = seq.firreg %1003 clock %clock {firrtl.random_init_start = 662 : ui64} : i8
    %programBufferMem_63 = seq.firreg %1004 clock %clock {firrtl.random_init_start = 670 : ui64} : i8
    %103 = comb.xor bin %hartIsInResetSync_0_debug_hartReset_0.io_q, %true {sv.namehint = "_resumeReqRegs_T_7"} : i1
    %104 = comb.xor %681, %true : i1
    %105 = comb.and %104, %haltedBitRegs : i1
    %106 = comb.or %741, %105 : i1
    %107 = comb.and %io_dmactive, %106, %103 : i1
    %108 = comb.xor %681, %true : i1
    %109 = comb.and %108, %resumeReqRegs, %103 : i1
    %110 = comb.or bin %resumeReqRegs, %1 {sv.namehint = "_resumeReqRegs_T_6"} : i1
    %111 = comb.and bin %110, %103 {sv.namehint = "_resumeReqRegs_T_8"} : i1
    %112 = comb.mux bin %9, %111, %109 : i1
    %113 = comb.and %io_dmactive, %112 : i1
    %114 = comb.xor bin %resumeReqRegs, %true {sv.namehint = "_resumeAcks_T"} : i1
    %115 = comb.xor bin %1, %true {sv.namehint = "_resumeAcks_T_1"} : i1
    %116 = comb.and bin %114, %115 {sv.namehint = "_resumeAcks_T_2"} : i1
    %117 = comb.xor bin %resumeReqRegs, %true {sv.namehint = "_resumeAcks_T_3"} : i1
    %118 = comb.mux bin %9, %116, %117 {sv.namehint = "resumeAcks"} : i1
    %119 = comb.concat %COMMANDRdData_cmdtype, %COMMANDRdData_control {sv.namehint = "_accessRegisterCommandReg_T"} : i8, i24
    %120 = comb.icmp bin eq %auto_dmi_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_bits_read"} : i3
    %121 = comb.extract %auto_dmi_in_a_bits_address from 8 : (i9) -> i1
    %122 = comb.extract %auto_dmi_in_a_bits_address from 6 : (i9) -> i1
    %123 = comb.concat %121, %122 : i1, i1
    %124 = comb.icmp bin eq %123, %c0_i2 {sv.namehint = "_out_T_47"} : i2
    %125 = comb.extract %auto_dmi_in_a_bits_address from 8 : (i9) -> i1
    %126 = comb.extract %auto_dmi_in_a_bits_address from 6 : (i9) -> i1
    %127 = comb.concat %125, %126 : i1, i1
    %128 = comb.icmp bin eq %127, %c1_i2 {sv.namehint = "_out_T_43"} : i2
    %129 = comb.extract %auto_dmi_in_a_bits_address from 8 : (i9) -> i1
    %130 = comb.extract %auto_dmi_in_a_bits_address from 6 : (i9) -> i1
    %131 = comb.concat %129, %130 : i1, i1
    %132 = comb.icmp bin eq %131, %c-2_i2 {sv.namehint = "_out_T_23"} : i2
    %133 = comb.extract %auto_dmi_in_a_bits_mask from 0 {sv.namehint = "_out_backMask_T_4"} : (i4) -> i1
    %134 = comb.extract %auto_dmi_in_a_bits_mask from 1 {sv.namehint = "_out_backMask_T_5"} : (i4) -> i1
    %135 = comb.extract %auto_dmi_in_a_bits_mask from 2 {sv.namehint = "_out_backMask_T_6"} : (i4) -> i1
    %136 = comb.extract %auto_dmi_in_a_bits_mask from 3 {sv.namehint = "_out_backMask_T_7"} : (i4) -> i1
    %137 = comb.replicate %133 {sv.namehint = "out_backMask_lo_lo"} : (i1) -> i8
    %138 = comb.replicate %134 {sv.namehint = "out_backMask_lo_hi"} : (i1) -> i8
    %139 = comb.replicate %135 {sv.namehint = "out_backMask_hi_lo"} : (i1) -> i8
    %140 = comb.replicate %136 {sv.namehint = "out_backMask_hi_hi"} : (i1) -> i8
    %141 = comb.concat %140, %139, %138, %137 {sv.namehint = "out_backMask"} : i8, i8, i8, i8
    %142 = comb.and bin %373, %133 {sv.namehint = "dmiAbstractDataRdEn_4"} : i1
    %143 = comb.and bin %392, %133 {sv.namehint = "dmiAbstractDataWrEnMaybe_4"} : i1
    %144 = comb.extract %auto_dmi_in_a_bits_data from 0 {sv.namehint = "_out_T_1092"} : (i32) -> i8
    %145 = comb.and bin %373, %134 {sv.namehint = "dmiAbstractDataRdEn_5"} : i1
    %146 = comb.and bin %392, %134 {sv.namehint = "dmiAbstractDataWrEnMaybe_5"} : i1
    %147 = comb.extract %auto_dmi_in_a_bits_data from 8 {sv.namehint = "_out_T_1103"} : (i32) -> i8
    %148 = comb.and bin %373, %135 {sv.namehint = "dmiAbstractDataRdEn_6"} : i1
    %149 = comb.and bin %392, %135 {sv.namehint = "dmiAbstractDataWrEnMaybe_6"} : i1
    %150 = comb.extract %auto_dmi_in_a_bits_data from 16 {sv.namehint = "_out_T_1114"} : (i32) -> i8
    %151 = comb.and bin %373, %136 {sv.namehint = "dmiAbstractDataRdEn_7"} : i1
    %152 = comb.and bin %392, %136 {sv.namehint = "dmiAbstractDataWrEnMaybe_7"} : i1
    %153 = comb.extract %auto_dmi_in_a_bits_data from 24 {sv.namehint = "_out_T_1125"} : (i32) -> i8
    %154 = comb.concat %abstractDataMem_7, %abstractDataMem_6, %abstractDataMem_5, %abstractDataMem_4 {sv.namehint = "out_prepend_2"} : i8, i8, i8, i8
    %155 = comb.and bin %384, %133 {sv.namehint = "dmiProgramBufferRdEn_40"} : i1
    %156 = comb.and bin %404, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_40"} : i1
    %157 = comb.and bin %384, %134 {sv.namehint = "dmiProgramBufferRdEn_41"} : i1
    %158 = comb.and bin %404, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_41"} : i1
    %159 = comb.and bin %384, %135 {sv.namehint = "dmiProgramBufferRdEn_42"} : i1
    %160 = comb.and bin %404, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_42"} : i1
    %161 = comb.and bin %384, %136 {sv.namehint = "dmiProgramBufferRdEn_43"} : i1
    %162 = comb.and bin %404, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_43"} : i1
    %163 = comb.concat %programBufferMem_43, %programBufferMem_42, %programBufferMem_41, %programBufferMem_40 {sv.namehint = "out_prepend_5"} : i8, i8, i8, i8
    %164 = comb.and bin %393, %133 {sv.namehint = "autoexecdataWrEnMaybe"} : i1
    %165 = comb.extract %auto_dmi_in_a_bits_data from 0 {sv.namehint = "_out_T_136"} : (i32) -> i2
    %166 = comb.extract %ABSTRACTAUTOReg_autoexecdata from 0 {sv.namehint = "out_prepend_lo_6"} : (i12) -> i2
    %167 = comb.concat %140, %139 {sv.namehint = "_out_womask_T_10"} : i8, i8
    %168 = comb.icmp bin eq %167, %c-1_i16 {sv.namehint = "out_womask_10"} : i16
    %169 = comb.and bin %393, %168 {sv.namehint = "autoexecprogbufWrEnMaybe"} : i1
    %170 = comb.extract %auto_dmi_in_a_bits_data from 16 {sv.namehint = "ABSTRACTAUTOWrData_autoexecprogbuf"} : (i32) -> i16
    %171 = comb.concat %ABSTRACTAUTOReg_autoexecprogbuf, %c0_i14, %166 {sv.namehint = "out_prepend_7"} : i16, i14, i2
    %172 = comb.and bin %379, %133 {sv.namehint = "dmiProgramBufferRdEn_20"} : i1
    %173 = comb.and bin %399, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_20"} : i1
    %174 = comb.and bin %379, %134 {sv.namehint = "dmiProgramBufferRdEn_21"} : i1
    %175 = comb.and bin %399, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_21"} : i1
    %176 = comb.and bin %379, %135 {sv.namehint = "dmiProgramBufferRdEn_22"} : i1
    %177 = comb.and bin %399, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_22"} : i1
    %178 = comb.and bin %379, %136 {sv.namehint = "dmiProgramBufferRdEn_23"} : i1
    %179 = comb.and bin %399, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_23"} : i1
    %180 = comb.concat %programBufferMem_23, %programBufferMem_22, %programBufferMem_21, %programBufferMem_20 {sv.namehint = "out_prepend_10"} : i8, i8, i8, i8
    %181 = comb.and bin %388, %133 {sv.namehint = "dmiProgramBufferRdEn_56"} : i1
    %182 = comb.and bin %408, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_56"} : i1
    %183 = comb.and bin %388, %134 {sv.namehint = "dmiProgramBufferRdEn_57"} : i1
    %184 = comb.and bin %408, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_57"} : i1
    %185 = comb.and bin %388, %135 {sv.namehint = "dmiProgramBufferRdEn_58"} : i1
    %186 = comb.and bin %408, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_58"} : i1
    %187 = comb.and bin %388, %136 {sv.namehint = "dmiProgramBufferRdEn_59"} : i1
    %188 = comb.and bin %408, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_59"} : i1
    %189 = comb.concat %programBufferMem_59, %programBufferMem_58, %programBufferMem_57, %programBufferMem_56 {sv.namehint = "out_prepend_13"} : i8, i8, i8, i8
    %190 = comb.and bin %380, %133 {sv.namehint = "dmiProgramBufferRdEn_24"} : i1
    %191 = comb.and bin %400, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_24"} : i1
    %192 = comb.and bin %380, %134 {sv.namehint = "dmiProgramBufferRdEn_25"} : i1
    %193 = comb.and bin %400, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_25"} : i1
    %194 = comb.and bin %380, %135 {sv.namehint = "dmiProgramBufferRdEn_26"} : i1
    %195 = comb.and bin %400, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_26"} : i1
    %196 = comb.and bin %380, %136 {sv.namehint = "dmiProgramBufferRdEn_27"} : i1
    %197 = comb.and bin %400, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_27"} : i1
    %198 = comb.concat %programBufferMem_27, %programBufferMem_26, %programBufferMem_25, %programBufferMem_24 {sv.namehint = "out_prepend_16"} : i8, i8, i8, i8
    %199 = comb.and bin %375, %133 {sv.namehint = "dmiProgramBufferRdEn_4"} : i1
    %200 = comb.and bin %395, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_4"} : i1
    %201 = comb.and bin %375, %134 {sv.namehint = "dmiProgramBufferRdEn_5"} : i1
    %202 = comb.and bin %395, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_5"} : i1
    %203 = comb.and bin %375, %135 {sv.namehint = "dmiProgramBufferRdEn_6"} : i1
    %204 = comb.and bin %395, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_6"} : i1
    %205 = comb.and bin %375, %136 {sv.namehint = "dmiProgramBufferRdEn_7"} : i1
    %206 = comb.and bin %395, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_7"} : i1
    %207 = comb.concat %programBufferMem_7, %programBufferMem_6, %programBufferMem_5, %programBufferMem_4 {sv.namehint = "out_prepend_19"} : i8, i8, i8, i8
    %208 = comb.and bin %383, %133 {sv.namehint = "dmiProgramBufferRdEn_36"} : i1
    %209 = comb.and bin %403, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_36"} : i1
    %210 = comb.and bin %383, %134 {sv.namehint = "dmiProgramBufferRdEn_37"} : i1
    %211 = comb.and bin %403, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_37"} : i1
    %212 = comb.and bin %383, %135 {sv.namehint = "dmiProgramBufferRdEn_38"} : i1
    %213 = comb.and bin %403, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_38"} : i1
    %214 = comb.and bin %383, %136 {sv.namehint = "dmiProgramBufferRdEn_39"} : i1
    %215 = comb.and bin %403, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_39"} : i1
    %216 = comb.concat %programBufferMem_39, %programBufferMem_38, %programBufferMem_37, %programBufferMem_36 {sv.namehint = "out_prepend_22"} : i8, i8, i8, i8
    %217 = comb.and bin %374, %133 {sv.namehint = "dmiProgramBufferRdEn_0"} : i1
    %218 = comb.and bin %394, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_0"} : i1
    %219 = comb.and bin %374, %134 {sv.namehint = "dmiProgramBufferRdEn_1"} : i1
    %220 = comb.and bin %394, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_1"} : i1
    %221 = comb.and bin %374, %135 {sv.namehint = "dmiProgramBufferRdEn_2"} : i1
    %222 = comb.and bin %394, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_2"} : i1
    %223 = comb.and bin %374, %136 {sv.namehint = "dmiProgramBufferRdEn_3"} : i1
    %224 = comb.and bin %394, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_3"} : i1
    %225 = comb.concat %programBufferMem_3, %programBufferMem_2, %programBufferMem_1, %programBufferMem_0 {sv.namehint = "out_prepend_25"} : i8, i8, i8, i8
    %226 = comb.and bin %376, %133 {sv.namehint = "dmiProgramBufferRdEn_8"} : i1
    %227 = comb.and bin %396, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_8"} : i1
    %228 = comb.and bin %376, %134 {sv.namehint = "dmiProgramBufferRdEn_9"} : i1
    %229 = comb.and bin %396, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_9"} : i1
    %230 = comb.and bin %376, %135 {sv.namehint = "dmiProgramBufferRdEn_10"} : i1
    %231 = comb.and bin %396, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_10"} : i1
    %232 = comb.and bin %376, %136 {sv.namehint = "dmiProgramBufferRdEn_11"} : i1
    %233 = comb.and bin %396, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_11"} : i1
    %234 = comb.concat %programBufferMem_11, %programBufferMem_10, %programBufferMem_9, %programBufferMem_8 {sv.namehint = "out_prepend_28"} : i8, i8, i8, i8
    %235 = comb.and bin %387, %133 {sv.namehint = "dmiProgramBufferRdEn_52"} : i1
    %236 = comb.and bin %407, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_52"} : i1
    %237 = comb.and bin %387, %134 {sv.namehint = "dmiProgramBufferRdEn_53"} : i1
    %238 = comb.and bin %407, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_53"} : i1
    %239 = comb.and bin %387, %135 {sv.namehint = "dmiProgramBufferRdEn_54"} : i1
    %240 = comb.and bin %407, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_54"} : i1
    %241 = comb.and bin %387, %136 {sv.namehint = "dmiProgramBufferRdEn_55"} : i1
    %242 = comb.and bin %407, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_55"} : i1
    %243 = comb.concat %programBufferMem_55, %programBufferMem_54, %programBufferMem_53, %programBufferMem_52 {sv.namehint = "out_prepend_31"} : i8, i8, i8, i8
    %244 = comb.replicate %haltedBitRegs : (i1) -> i2
    %245 = comb.replicate %118 : (i1) -> i2
    %246 = comb.replicate %haveResetBitRegs : (i1) -> i2
    %247 = comb.and bin %390, %332, %128, %134 {sv.namehint = "ABSTRACTCSWrEnMaybe"} : i1
    %248 = comb.extract %auto_dmi_in_a_bits_data from 8 {sv.namehint = "ABSTRACTCSWrData_cmderr"} : (i32) -> i3
    %249 = comb.and bin %386, %133 {sv.namehint = "dmiProgramBufferRdEn_48"} : i1
    %250 = comb.and bin %406, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_48"} : i1
    %251 = comb.and bin %386, %134 {sv.namehint = "dmiProgramBufferRdEn_49"} : i1
    %252 = comb.and bin %406, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_49"} : i1
    %253 = comb.and bin %386, %135 {sv.namehint = "dmiProgramBufferRdEn_50"} : i1
    %254 = comb.and bin %406, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_50"} : i1
    %255 = comb.and bin %386, %136 {sv.namehint = "dmiProgramBufferRdEn_51"} : i1
    %256 = comb.and bin %406, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_51"} : i1
    %257 = comb.concat %programBufferMem_51, %programBufferMem_50, %programBufferMem_49, %programBufferMem_48 {sv.namehint = "out_prepend_58"} : i8, i8, i8, i8
    %258 = comb.and bin %381, %133 {sv.namehint = "dmiProgramBufferRdEn_28"} : i1
    %259 = comb.and bin %401, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_28"} : i1
    %260 = comb.and bin %381, %134 {sv.namehint = "dmiProgramBufferRdEn_29"} : i1
    %261 = comb.and bin %401, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_29"} : i1
    %262 = comb.and bin %381, %135 {sv.namehint = "dmiProgramBufferRdEn_30"} : i1
    %263 = comb.and bin %401, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_30"} : i1
    %264 = comb.and bin %381, %136 {sv.namehint = "dmiProgramBufferRdEn_31"} : i1
    %265 = comb.and bin %401, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_31"} : i1
    %266 = comb.concat %programBufferMem_31, %programBufferMem_30, %programBufferMem_29, %programBufferMem_28 {sv.namehint = "out_prepend_61"} : i8, i8, i8, i8
    %267 = comb.and bin %377, %133 {sv.namehint = "dmiProgramBufferRdEn_12"} : i1
    %268 = comb.and bin %397, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_12"} : i1
    %269 = comb.and bin %377, %134 {sv.namehint = "dmiProgramBufferRdEn_13"} : i1
    %270 = comb.and bin %397, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_13"} : i1
    %271 = comb.and bin %377, %135 {sv.namehint = "dmiProgramBufferRdEn_14"} : i1
    %272 = comb.and bin %397, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_14"} : i1
    %273 = comb.and bin %377, %136 {sv.namehint = "dmiProgramBufferRdEn_15"} : i1
    %274 = comb.and bin %397, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_15"} : i1
    %275 = comb.concat %programBufferMem_15, %programBufferMem_14, %programBufferMem_13, %programBufferMem_12 {sv.namehint = "out_prepend_64"} : i8, i8, i8, i8
    %276 = comb.and bin %385, %133 {sv.namehint = "dmiProgramBufferRdEn_44"} : i1
    %277 = comb.and bin %405, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_44"} : i1
    %278 = comb.and bin %385, %134 {sv.namehint = "dmiProgramBufferRdEn_45"} : i1
    %279 = comb.and bin %405, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_45"} : i1
    %280 = comb.and bin %385, %135 {sv.namehint = "dmiProgramBufferRdEn_46"} : i1
    %281 = comb.and bin %405, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_46"} : i1
    %282 = comb.and bin %385, %136 {sv.namehint = "dmiProgramBufferRdEn_47"} : i1
    %283 = comb.and bin %405, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_47"} : i1
    %284 = comb.concat %programBufferMem_47, %programBufferMem_46, %programBufferMem_45, %programBufferMem_44 {sv.namehint = "out_prepend_67"} : i8, i8, i8, i8
    %285 = comb.and bin %382, %133 {sv.namehint = "dmiProgramBufferRdEn_32"} : i1
    %286 = comb.and bin %402, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_32"} : i1
    %287 = comb.and bin %382, %134 {sv.namehint = "dmiProgramBufferRdEn_33"} : i1
    %288 = comb.and bin %402, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_33"} : i1
    %289 = comb.and bin %382, %135 {sv.namehint = "dmiProgramBufferRdEn_34"} : i1
    %290 = comb.and bin %402, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_34"} : i1
    %291 = comb.and bin %382, %136 {sv.namehint = "dmiProgramBufferRdEn_35"} : i1
    %292 = comb.and bin %402, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_35"} : i1
    %293 = comb.concat %programBufferMem_35, %programBufferMem_34, %programBufferMem_33, %programBufferMem_32 {sv.namehint = "out_prepend_70"} : i8, i8, i8, i8
    %294 = comb.icmp bin eq %141, %c-1_i32 {sv.namehint = "out_womask_90"} : i32
    %295 = comb.and bin %390, %334, %128, %294 {sv.namehint = "COMMANDWrEnMaybe"} : i1
    %296 = comb.mux bin %295, %auto_dmi_in_a_bits_data, %c0_i32 {sv.namehint = "COMMANDWrDataVal"} : i32
    %297 = comb.and bin %378, %133 {sv.namehint = "dmiProgramBufferRdEn_16"} : i1
    %298 = comb.and bin %398, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_16"} : i1
    %299 = comb.and bin %378, %134 {sv.namehint = "dmiProgramBufferRdEn_17"} : i1
    %300 = comb.and bin %398, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_17"} : i1
    %301 = comb.and bin %378, %135 {sv.namehint = "dmiProgramBufferRdEn_18"} : i1
    %302 = comb.and bin %398, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_18"} : i1
    %303 = comb.and bin %378, %136 {sv.namehint = "dmiProgramBufferRdEn_19"} : i1
    %304 = comb.and bin %398, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_19"} : i1
    %305 = comb.concat %programBufferMem_19, %programBufferMem_18, %programBufferMem_17, %programBufferMem_16 {sv.namehint = "out_prepend_73"} : i8, i8, i8, i8
    %306 = comb.and bin %372, %133 {sv.namehint = "dmiAbstractDataRdEn_0"} : i1
    %307 = comb.and bin %391, %133 {sv.namehint = "dmiAbstractDataWrEnMaybe_0"} : i1
    %308 = comb.and bin %372, %134 {sv.namehint = "dmiAbstractDataRdEn_1"} : i1
    %309 = comb.and bin %391, %134 {sv.namehint = "dmiAbstractDataWrEnMaybe_1"} : i1
    %310 = comb.and bin %372, %135 {sv.namehint = "dmiAbstractDataRdEn_2"} : i1
    %311 = comb.and bin %391, %135 {sv.namehint = "dmiAbstractDataWrEnMaybe_2"} : i1
    %312 = comb.and bin %372, %136 {sv.namehint = "dmiAbstractDataRdEn_3"} : i1
    %313 = comb.and bin %391, %136 {sv.namehint = "dmiAbstractDataWrEnMaybe_3"} : i1
    %314 = comb.concat %abstractDataMem_3, %abstractDataMem_2, %abstractDataMem_1, %abstractDataMem_0 {sv.namehint = "out_prepend_76"} : i8, i8, i8, i8
    %315 = comb.and bin %389, %133 {sv.namehint = "dmiProgramBufferRdEn_60"} : i1
    %316 = comb.and bin %409, %133 {sv.namehint = "dmiProgramBufferWrEnMaybe_60"} : i1
    %317 = comb.and bin %389, %134 {sv.namehint = "dmiProgramBufferRdEn_61"} : i1
    %318 = comb.and bin %409, %134 {sv.namehint = "dmiProgramBufferWrEnMaybe_61"} : i1
    %319 = comb.and bin %389, %135 {sv.namehint = "dmiProgramBufferRdEn_62"} : i1
    %320 = comb.and bin %409, %135 {sv.namehint = "dmiProgramBufferWrEnMaybe_62"} : i1
    %321 = comb.and bin %389, %136 {sv.namehint = "dmiProgramBufferRdEn_63"} : i1
    %322 = comb.and bin %409, %136 {sv.namehint = "dmiProgramBufferWrEnMaybe_63"} : i1
    %323 = comb.concat %programBufferMem_63, %programBufferMem_62, %programBufferMem_61, %programBufferMem_60 {sv.namehint = "out_prepend_79"} : i8, i8, i8, i8
    %324 = comb.extract %auto_dmi_in_a_bits_address from 7 {sv.namehint = "out_iindex_hi_hi_hi"} : (i9) -> i1
    %325 = comb.extract %auto_dmi_in_a_bits_address from 2 : (i9) -> i4
    %326 = comb.concat %324, %325 {sv.namehint = "out_oindex"} : i1, i4
    %327 = comb.concat %324, %325 : i1, i4
    %328 = comb.icmp eq %327, %c4_i5 {sv.namehint = "out_backSel_4"} : i5
    %329 = comb.concat %324, %325 : i1, i4
    %330 = comb.icmp eq %329, %c5_i5 {sv.namehint = "out_backSel_5"} : i5
    %331 = comb.concat %324, %325 : i1, i4
    %332 = comb.icmp eq %331, %c6_i5 {sv.namehint = "out_backSel_6"} : i5
    %333 = comb.concat %324, %325 : i1, i4
    %334 = comb.icmp eq %333, %c7_i5 {sv.namehint = "out_backSel_7"} : i5
    %335 = comb.concat %324, %325 : i1, i4
    %336 = comb.icmp eq %335, %c8_i5 {sv.namehint = "out_backSel_8"} : i5
    %337 = comb.concat %324, %325 : i1, i4
    %338 = comb.icmp eq %337, %c-16_i5 {sv.namehint = "out_backSel_16"} : i5
    %339 = comb.concat %324, %325 : i1, i4
    %340 = comb.icmp eq %339, %c-15_i5 {sv.namehint = "out_backSel_17"} : i5
    %341 = comb.concat %324, %325 : i1, i4
    %342 = comb.icmp eq %341, %c-14_i5 {sv.namehint = "out_backSel_18"} : i5
    %343 = comb.concat %324, %325 : i1, i4
    %344 = comb.icmp eq %343, %c-13_i5 {sv.namehint = "out_backSel_19"} : i5
    %345 = comb.concat %324, %325 : i1, i4
    %346 = comb.icmp eq %345, %c-12_i5 {sv.namehint = "out_backSel_20"} : i5
    %347 = comb.concat %324, %325 : i1, i4
    %348 = comb.icmp eq %347, %c-11_i5 {sv.namehint = "out_backSel_21"} : i5
    %349 = comb.concat %324, %325 : i1, i4
    %350 = comb.icmp eq %349, %c-10_i5 {sv.namehint = "out_backSel_22"} : i5
    %351 = comb.concat %324, %325 : i1, i4
    %352 = comb.icmp eq %351, %c-9_i5 {sv.namehint = "out_backSel_23"} : i5
    %353 = comb.concat %324, %325 : i1, i4
    %354 = comb.icmp eq %353, %c-8_i5 {sv.namehint = "out_backSel_24"} : i5
    %355 = comb.concat %324, %325 : i1, i4
    %356 = comb.icmp eq %355, %c-7_i5 {sv.namehint = "out_backSel_25"} : i5
    %357 = comb.concat %324, %325 : i1, i4
    %358 = comb.icmp eq %357, %c-6_i5 {sv.namehint = "out_backSel_26"} : i5
    %359 = comb.concat %324, %325 : i1, i4
    %360 = comb.icmp eq %359, %c-5_i5 {sv.namehint = "out_backSel_27"} : i5
    %361 = comb.concat %324, %325 : i1, i4
    %362 = comb.icmp eq %361, %c-4_i5 {sv.namehint = "out_backSel_28"} : i5
    %363 = comb.concat %324, %325 : i1, i4
    %364 = comb.icmp eq %363, %c-3_i5 {sv.namehint = "out_backSel_29"} : i5
    %365 = comb.concat %324, %325 : i1, i4
    %366 = comb.icmp eq %365, %c-2_i5 {sv.namehint = "out_backSel_30"} : i5
    %367 = comb.concat %324, %325 : i1, i4
    %368 = comb.icmp eq %367, %c-1_i5 {sv.namehint = "out_backSel_31"} : i5
    %369 = comb.xor bin %120, %true {sv.namehint = "_out_wofireMux_T_1"} : i1
    %370 = comb.and bin %auto_dmi_in_a_valid, %auto_dmi_in_d_ready {sv.namehint = "_out_wofireMux_T"} : i1
    %371 = comb.and bin %370, %120 {sv.namehint = "_out_rofireMux_T_1"} : i1
    %372 = comb.and bin %371, %328, %124 {sv.namehint = "out_roready_99"} : i1
    %373 = comb.and bin %371, %330, %124 {sv.namehint = "out_roready_3"} : i1
    %374 = comb.and bin %371, %338, %124 {sv.namehint = "out_roready_34"} : i1
    %375 = comb.and bin %371, %340, %124 {sv.namehint = "out_roready_26"} : i1
    %376 = comb.and bin %371, %342, %124 {sv.namehint = "out_roready_38"} : i1
    %377 = comb.and bin %371, %344, %124 {sv.namehint = "out_roready_81"} : i1
    %378 = comb.and bin %371, %346, %124 {sv.namehint = "out_roready_94"} : i1
    %379 = comb.and bin %371, %348, %124 {sv.namehint = "out_roready_14"} : i1
    %380 = comb.and bin %371, %350, %124 {sv.namehint = "out_roready_22"} : i1
    %381 = comb.and bin %371, %352, %124 {sv.namehint = "out_roready_77"} : i1
    %382 = comb.and bin %371, %354, %124 {sv.namehint = "out_roready_89"} : i1
    %383 = comb.and bin %371, %356, %124 {sv.namehint = "out_roready_30"} : i1
    %384 = comb.and bin %371, %358, %124 {sv.namehint = "out_roready_7"} : i1
    %385 = comb.and bin %371, %360, %124 {sv.namehint = "out_roready_85"} : i1
    %386 = comb.and bin %371, %362, %124 {sv.namehint = "out_roready_73"} : i1
    %387 = comb.and bin %371, %364, %124 {sv.namehint = "out_roready_42"} : i1
    %388 = comb.and bin %371, %366, %124 {sv.namehint = "out_roready_18"} : i1
    %389 = comb.and bin %371, %368, %124 {sv.namehint = "out_roready_103"} : i1
    %390 = comb.and bin %370, %369 {sv.namehint = "_out_wofireMux_T_2"} : i1
    %391 = comb.and bin %390, %328, %124 {sv.namehint = "out_woready_99"} : i1
    %392 = comb.and bin %390, %330, %124 {sv.namehint = "out_woready_3"} : i1
    %393 = comb.and bin %390, %336, %128 {sv.namehint = "out_woready_8"} : i1
    %394 = comb.and bin %390, %338, %124 {sv.namehint = "out_woready_34"} : i1
    %395 = comb.and bin %390, %340, %124 {sv.namehint = "out_woready_26"} : i1
    %396 = comb.and bin %390, %342, %124 {sv.namehint = "out_woready_38"} : i1
    %397 = comb.and bin %390, %344, %124 {sv.namehint = "out_woready_81"} : i1
    %398 = comb.and bin %390, %346, %124 {sv.namehint = "out_woready_94"} : i1
    %399 = comb.and bin %390, %348, %124 {sv.namehint = "out_woready_14"} : i1
    %400 = comb.and bin %390, %350, %124 {sv.namehint = "out_woready_22"} : i1
    %401 = comb.and bin %390, %352, %124 {sv.namehint = "out_woready_77"} : i1
    %402 = comb.and bin %390, %354, %124 {sv.namehint = "out_woready_89"} : i1
    %403 = comb.and bin %390, %356, %124 {sv.namehint = "out_woready_30"} : i1
    %404 = comb.and bin %390, %358, %124 {sv.namehint = "out_woready_7"} : i1
    %405 = comb.and bin %390, %360, %124 {sv.namehint = "out_woready_85"} : i1
    %406 = comb.and bin %390, %362, %124 {sv.namehint = "out_woready_73"} : i1
    %407 = comb.and bin %390, %364, %124 {sv.namehint = "out_woready_42"} : i1
    %408 = comb.and bin %390, %366, %124 {sv.namehint = "out_woready_18"} : i1
    %409 = comb.and bin %390, %368, %124 {sv.namehint = "out_woready_103"} : i1
    %410 = hw.array_create %124, %124, %124, %124, %124, %124, %124, %124, %124, %124, %124, %124, %124, %124, %124, %124, %true, %true, %true, %true, %true, %true, %true, %128, %128, %128, %124, %124, %128, %true, %128, %132 : i1
    %411 = hw.array_get %410[%326] : !hw.array<32xi1>, i5
    %412 = comb.concat %c0_i12, %246, %245, %c0_i4, %11, %10, %244, %c-94_i8 {sv.namehint = "_out_out_bits_data_WIRE_1_1"} : i12, i2, i2, i4, i1, i1, i2, i8
    %413 = comb.concat %c32768_i19, %1005, %false, %ABSTRACTCSReg_cmderr, %c2_i8 {sv.namehint = "_out_out_bits_data_WIRE_1_6"} : i19, i1, i1, i3, i8
    %414 = hw.array_create %323, %189, %243, %257, %284, %163, %216, %293, %266, %198, %180, %305, %275, %234, %207, %225, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %c0_i32, %171, %119, %413, %154, %314, %20, %c0_i32, %412, %19 : i32
    %415 = hw.array_get %414[%326] : !hw.array<32xi32>, i5
    %416 = comb.mux bin %411, %415, %c0_i32 {sv.namehint = "out_bits_data"} : i32
    %417 = comb.concat %c0_i2, %120 {sv.namehint = "bundleIn_0_d_bits_opcode"} : i2, i1
    %418 = comb.and %307, %1007 : i1
    %419 = comb.mux bin %418, %144, %abstractDataMem_0 : i8
    %420 = comb.and %309, %1007 : i1
    %421 = comb.mux bin %420, %147, %abstractDataMem_1 : i8
    %422 = comb.and %311, %1007 : i1
    %423 = comb.mux bin %422, %150, %abstractDataMem_2 : i8
    %424 = comb.and %313, %1007 : i1
    %425 = comb.mux bin %424, %153, %abstractDataMem_3 : i8
    %426 = comb.and %143, %1007 : i1
    %427 = comb.mux bin %426, %144, %abstractDataMem_4 : i8
    %428 = comb.and %146, %1007 : i1
    %429 = comb.mux bin %428, %147, %abstractDataMem_5 : i8
    %430 = comb.and %149, %1007 : i1
    %431 = comb.mux bin %430, %150, %abstractDataMem_6 : i8
    %432 = comb.and %152, %1007 : i1
    %433 = comb.mux bin %432, %153, %abstractDataMem_7 : i8
    %434 = comb.and %218, %1007 : i1
    %435 = comb.mux bin %434, %144, %programBufferMem_0 : i8
    %436 = comb.and %220, %1007 : i1
    %437 = comb.mux bin %436, %147, %programBufferMem_1 : i8
    %438 = comb.and %222, %1007 : i1
    %439 = comb.mux bin %438, %150, %programBufferMem_2 : i8
    %440 = comb.and %224, %1007 : i1
    %441 = comb.mux bin %440, %153, %programBufferMem_3 : i8
    %442 = comb.and %200, %1007 : i1
    %443 = comb.mux bin %442, %144, %programBufferMem_4 : i8
    %444 = comb.and %202, %1007 : i1
    %445 = comb.mux bin %444, %147, %programBufferMem_5 : i8
    %446 = comb.and %204, %1007 : i1
    %447 = comb.mux bin %446, %150, %programBufferMem_6 : i8
    %448 = comb.and %206, %1007 : i1
    %449 = comb.mux bin %448, %153, %programBufferMem_7 : i8
    %450 = comb.and %227, %1007 : i1
    %451 = comb.mux bin %450, %144, %programBufferMem_8 : i8
    %452 = comb.and %229, %1007 : i1
    %453 = comb.mux bin %452, %147, %programBufferMem_9 : i8
    %454 = comb.and %231, %1007 : i1
    %455 = comb.mux bin %454, %150, %programBufferMem_10 : i8
    %456 = comb.and %233, %1007 : i1
    %457 = comb.mux bin %456, %153, %programBufferMem_11 : i8
    %458 = comb.and %268, %1007 : i1
    %459 = comb.mux bin %458, %144, %programBufferMem_12 : i8
    %460 = comb.and %270, %1007 : i1
    %461 = comb.mux bin %460, %147, %programBufferMem_13 : i8
    %462 = comb.and %272, %1007 : i1
    %463 = comb.mux bin %462, %150, %programBufferMem_14 : i8
    %464 = comb.and %274, %1007 : i1
    %465 = comb.mux bin %464, %153, %programBufferMem_15 : i8
    %466 = comb.and %298, %1007 : i1
    %467 = comb.mux bin %466, %144, %programBufferMem_16 : i8
    %468 = comb.and %300, %1007 : i1
    %469 = comb.mux bin %468, %147, %programBufferMem_17 : i8
    %470 = comb.and %302, %1007 : i1
    %471 = comb.mux bin %470, %150, %programBufferMem_18 : i8
    %472 = comb.and %304, %1007 : i1
    %473 = comb.mux bin %472, %153, %programBufferMem_19 : i8
    %474 = comb.and %173, %1007 : i1
    %475 = comb.mux bin %474, %144, %programBufferMem_20 : i8
    %476 = comb.and %175, %1007 : i1
    %477 = comb.mux bin %476, %147, %programBufferMem_21 : i8
    %478 = comb.and %177, %1007 : i1
    %479 = comb.mux bin %478, %150, %programBufferMem_22 : i8
    %480 = comb.and %179, %1007 : i1
    %481 = comb.mux bin %480, %153, %programBufferMem_23 : i8
    %482 = comb.and %191, %1007 : i1
    %483 = comb.mux bin %482, %144, %programBufferMem_24 : i8
    %484 = comb.and %193, %1007 : i1
    %485 = comb.mux bin %484, %147, %programBufferMem_25 : i8
    %486 = comb.and %195, %1007 : i1
    %487 = comb.mux bin %486, %150, %programBufferMem_26 : i8
    %488 = comb.and %197, %1007 : i1
    %489 = comb.mux bin %488, %153, %programBufferMem_27 : i8
    %490 = comb.and %259, %1007 : i1
    %491 = comb.mux bin %490, %144, %programBufferMem_28 : i8
    %492 = comb.and %261, %1007 : i1
    %493 = comb.mux bin %492, %147, %programBufferMem_29 : i8
    %494 = comb.and %263, %1007 : i1
    %495 = comb.mux bin %494, %150, %programBufferMem_30 : i8
    %496 = comb.and %265, %1007 : i1
    %497 = comb.mux bin %496, %153, %programBufferMem_31 : i8
    %498 = comb.and %286, %1007 : i1
    %499 = comb.mux bin %498, %144, %programBufferMem_32 : i8
    %500 = comb.and %288, %1007 : i1
    %501 = comb.mux bin %500, %147, %programBufferMem_33 : i8
    %502 = comb.and %290, %1007 : i1
    %503 = comb.mux bin %502, %150, %programBufferMem_34 : i8
    %504 = comb.and %292, %1007 : i1
    %505 = comb.mux bin %504, %153, %programBufferMem_35 : i8
    %506 = comb.and %209, %1007 : i1
    %507 = comb.mux bin %506, %144, %programBufferMem_36 : i8
    %508 = comb.and %211, %1007 : i1
    %509 = comb.mux bin %508, %147, %programBufferMem_37 : i8
    %510 = comb.and %213, %1007 : i1
    %511 = comb.mux bin %510, %150, %programBufferMem_38 : i8
    %512 = comb.and %215, %1007 : i1
    %513 = comb.mux bin %512, %153, %programBufferMem_39 : i8
    %514 = comb.and %156, %1007 : i1
    %515 = comb.mux bin %514, %144, %programBufferMem_40 : i8
    %516 = comb.and %158, %1007 : i1
    %517 = comb.mux bin %516, %147, %programBufferMem_41 : i8
    %518 = comb.and %160, %1007 : i1
    %519 = comb.mux bin %518, %150, %programBufferMem_42 : i8
    %520 = comb.and %162, %1007 : i1
    %521 = comb.mux bin %520, %153, %programBufferMem_43 : i8
    %522 = comb.and %277, %1007 : i1
    %523 = comb.mux bin %522, %144, %programBufferMem_44 : i8
    %524 = comb.and %279, %1007 : i1
    %525 = comb.mux bin %524, %147, %programBufferMem_45 : i8
    %526 = comb.and %281, %1007 : i1
    %527 = comb.mux bin %526, %150, %programBufferMem_46 : i8
    %528 = comb.and %283, %1007 : i1
    %529 = comb.mux bin %528, %153, %programBufferMem_47 : i8
    %530 = comb.and %250, %1007 : i1
    %531 = comb.mux bin %530, %144, %programBufferMem_48 : i8
    %532 = comb.and %252, %1007 : i1
    %533 = comb.mux bin %532, %147, %programBufferMem_49 : i8
    %534 = comb.and %254, %1007 : i1
    %535 = comb.mux bin %534, %150, %programBufferMem_50 : i8
    %536 = comb.and %256, %1007 : i1
    %537 = comb.mux bin %536, %153, %programBufferMem_51 : i8
    %538 = comb.and %236, %1007 : i1
    %539 = comb.mux bin %538, %144, %programBufferMem_52 : i8
    %540 = comb.and %238, %1007 : i1
    %541 = comb.mux bin %540, %147, %programBufferMem_53 : i8
    %542 = comb.and %240, %1007 : i1
    %543 = comb.mux bin %542, %150, %programBufferMem_54 : i8
    %544 = comb.and %242, %1007 : i1
    %545 = comb.mux bin %544, %153, %programBufferMem_55 : i8
    %546 = comb.and %182, %1007 : i1
    %547 = comb.mux bin %546, %144, %programBufferMem_56 : i8
    %548 = comb.and %184, %1007 : i1
    %549 = comb.mux bin %548, %147, %programBufferMem_57 : i8
    %550 = comb.and %186, %1007 : i1
    %551 = comb.mux bin %550, %150, %programBufferMem_58 : i8
    %552 = comb.and %188, %1007 : i1
    %553 = comb.mux bin %552, %153, %programBufferMem_59 : i8
    %554 = comb.and %316, %1007 : i1
    %555 = comb.mux bin %554, %144, %programBufferMem_60 : i8
    %556 = comb.and %318, %1007 : i1
    %557 = comb.mux bin %556, %147, %programBufferMem_61 : i8
    %558 = comb.and %320, %1007 : i1
    %559 = comb.mux bin %558, %150, %programBufferMem_62 : i8
    %560 = comb.and %322, %1007 : i1
    %561 = comb.mux bin %560, %153, %programBufferMem_63 : i8
    %goReg = seq.firreg %572 clock %clock {firrtl.random_init_start = 678 : ui64, sv.namehint = "goReg"} : i1
    %562 = comb.xor bin %1051, %true : i1
    %563 = comb.and bin %io_dmactive, %562 : i1
    %564 = comb.and bin %563, %743 : i1
    %565 = comb.icmp bin eq %686, %c0_i10 : i10
    %566 = comb.or bin %565, %reset : i1
    %567 = comb.xor bin %566, %true : i1
    %568 = comb.and bin %564, %567 : i1
    %569 = comb.xor %743, %true : i1
    %570 = comb.and %569, %goReg : i1
    %571 = comb.or %1051, %570 : i1
    %572 = comb.and %io_dmactive, %571 : i1
    %573 = comb.extract %COMMANDRdData_control from 0 {sv.namehint = "accessRegisterCommandReg_regno"} : (i24) -> i16
    %574 = comb.extract %COMMANDRdData_control from 16 {sv.namehint = "accessRegisterCommandReg_write"} : (i24) -> i1
    %575 = comb.extract %COMMANDRdData_control from 17 {sv.namehint = "accessRegisterCommandReg_transfer"} : (i24) -> i1
    %576 = comb.extract %COMMANDRdData_control from 18 {sv.namehint = "accessRegisterCommandReg_postexec"} : (i24) -> i1
    %577 = comb.extract %COMMANDRdData_control from 20 {sv.namehint = "accessRegisterCommandReg_size"} : (i24) -> i3
    %abstractGeneratedMem_0 = seq.firreg %583 clock %clock {firrtl.random_init_start = 679 : ui64} : i32
    %abstractGeneratedMem_1 = seq.firreg %585 clock %clock {firrtl.random_init_start = 711 : ui64} : i32
    %578 = comb.extract %COMMANDRdData_control from 0 {sv.namehint = "abstractGeneratedMem_0_inst_rd"} : (i24) -> i5
    %579 = comb.concat %c28672_i17, %577, %578, %c3_i7 {sv.namehint = "_abstractGeneratedMem_0_T"} : i17, i3, i5, i7
    %580 = comb.concat %c28_i7, %578, %c0_i5, %577, %c35_i12 {sv.namehint = "_abstractGeneratedMem_0_T_1"} : i7, i5, i5, i3, i12
    %581 = comb.mux bin %574, %579, %580 {sv.namehint = "_abstractGeneratedMem_0_T_2"} : i32
    %582 = comb.mux bin %575, %581, %c19_i32 {sv.namehint = "_abstractGeneratedMem_0_T_4"} : i32
    %583 = comb.mux bin %1051, %582, %abstractGeneratedMem_0 : i32
    %584 = comb.mux bin %576, %c19_i32, %c1048691_i32 {sv.namehint = "_abstractGeneratedMem_1_T_1"} : i32
    %585 = comb.mux bin %1051, %584, %abstractGeneratedMem_1 : i32
    %586 = comb.icmp bin eq %auto_tl_in_a_bits_opcode, %c-4_i3 {sv.namehint = "in_1_bits_read"} : i3
    %587 = comb.extract %auto_tl_in_a_bits_address from 11 {sv.namehint = "_out_wofireMux_T_1157"} : (i12) -> i1
    %588 = comb.xor bin %587, %true {sv.namehint = "_out_T_1439"} : i1
    %589 = comb.extract %auto_tl_in_a_bits_mask from 0 {sv.namehint = "_out_backMask_T_16"} : (i8) -> i1
    %590 = comb.extract %auto_tl_in_a_bits_mask from 1 {sv.namehint = "_out_backMask_T_17"} : (i8) -> i1
    %591 = comb.extract %auto_tl_in_a_bits_mask from 2 {sv.namehint = "_out_backMask_T_18"} : (i8) -> i1
    %592 = comb.extract %auto_tl_in_a_bits_mask from 3 {sv.namehint = "_out_backMask_T_19"} : (i8) -> i1
    %593 = comb.extract %auto_tl_in_a_bits_mask from 4 {sv.namehint = "_out_backMask_T_20"} : (i8) -> i1
    %594 = comb.extract %auto_tl_in_a_bits_mask from 5 {sv.namehint = "_out_backMask_T_21"} : (i8) -> i1
    %595 = comb.extract %auto_tl_in_a_bits_mask from 6 {sv.namehint = "_out_backMask_T_22"} : (i8) -> i1
    %596 = comb.extract %auto_tl_in_a_bits_mask from 7 {sv.namehint = "_out_backMask_T_23"} : (i8) -> i1
    %597 = comb.replicate %589 {sv.namehint = "out_backMask_lo_lo_lo"} : (i1) -> i8
    %598 = comb.replicate %593 {sv.namehint = "out_backMask_hi_lo_lo"} : (i1) -> i8
    %599 = comb.extract %auto_tl_in_a_bits_data from 0 {sv.namehint = "_out_T_12195"} : (i64) -> i8
    %600 = comb.extract %auto_tl_in_a_bits_data from 8 {sv.namehint = "_out_T_12204"} : (i64) -> i8
    %601 = comb.extract %auto_tl_in_a_bits_data from 16 {sv.namehint = "_out_T_12213"} : (i64) -> i8
    %602 = comb.extract %auto_tl_in_a_bits_data from 24 {sv.namehint = "_out_T_12222"} : (i64) -> i8
    %603 = comb.extract %auto_tl_in_a_bits_data from 32 {sv.namehint = "_out_T_12231"} : (i64) -> i8
    %604 = comb.extract %auto_tl_in_a_bits_data from 40 {sv.namehint = "_out_T_12240"} : (i64) -> i8
    %605 = comb.extract %auto_tl_in_a_bits_data from 48 {sv.namehint = "_out_T_12249"} : (i64) -> i8
    %606 = comb.extract %auto_tl_in_a_bits_data from 56 {sv.namehint = "_out_T_12258"} : (i64) -> i8
    %607 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_86"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %608 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_93"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %609 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_100"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %610 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_107"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %611 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_114"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %612 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_121"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %613 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_128"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %614 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_135"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %615 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_142"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %616 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_149"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %617 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_156"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %618 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_170"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %619 = comb.and bin %924, %589 {sv.namehint = "out_f_woready_208"} : i1
    %620 = comb.mux bin %619, %599, %531 : i8
    %621 = comb.and bin %924, %590 {sv.namehint = "out_f_woready_209"} : i1
    %622 = comb.mux bin %621, %600, %533 : i8
    %623 = comb.and bin %924, %591 {sv.namehint = "out_f_woready_210"} : i1
    %624 = comb.mux bin %623, %601, %535 : i8
    %625 = comb.and bin %924, %592 {sv.namehint = "out_f_woready_211"} : i1
    %626 = comb.mux bin %625, %602, %537 : i8
    %627 = comb.and bin %924, %593 {sv.namehint = "out_f_woready_212"} : i1
    %628 = comb.mux bin %627, %603, %539 : i8
    %629 = comb.and bin %924, %594 {sv.namehint = "out_f_woready_213"} : i1
    %630 = comb.mux bin %629, %604, %541 : i8
    %631 = comb.and bin %924, %595 {sv.namehint = "out_f_woready_214"} : i1
    %632 = comb.mux bin %631, %605, %543 : i8
    %633 = comb.and bin %924, %596 {sv.namehint = "out_f_woready_215"} : i1
    %634 = comb.mux bin %633, %606, %545 : i8
    %635 = comb.concat %programBufferMem_55, %programBufferMem_54, %programBufferMem_53, %programBufferMem_52, %programBufferMem_51, %programBufferMem_50, %programBufferMem_49, %programBufferMem_48 {sv.namehint = "out_prepend_177"} : i8, i8, i8, i8, i8, i8, i8, i8
    %636 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_184"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %637 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_191"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %638 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_198"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %639 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_205"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %640 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_212"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %641 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_226"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %642 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_233"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %643 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_240"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %644 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_247"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %645 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_254"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %646 = comb.and bin %920, %589 {sv.namehint = "out_f_woready_304"} : i1
    %647 = comb.mux bin %646, %599, %467 : i8
    %648 = comb.and bin %920, %590 {sv.namehint = "out_f_woready_305"} : i1
    %649 = comb.mux bin %648, %600, %469 : i8
    %650 = comb.and bin %920, %591 {sv.namehint = "out_f_woready_306"} : i1
    %651 = comb.mux bin %650, %601, %471 : i8
    %652 = comb.and bin %920, %592 {sv.namehint = "out_f_woready_307"} : i1
    %653 = comb.mux bin %652, %602, %473 : i8
    %654 = comb.and bin %920, %593 {sv.namehint = "out_f_woready_308"} : i1
    %655 = comb.mux bin %654, %603, %475 : i8
    %656 = comb.and bin %920, %594 {sv.namehint = "out_f_woready_309"} : i1
    %657 = comb.mux bin %656, %604, %477 : i8
    %658 = comb.and bin %920, %595 {sv.namehint = "out_f_woready_310"} : i1
    %659 = comb.mux bin %658, %605, %479 : i8
    %660 = comb.and bin %920, %596 {sv.namehint = "out_f_woready_311"} : i1
    %661 = comb.mux bin %660, %606, %481 : i8
    %662 = comb.concat %programBufferMem_23, %programBufferMem_22, %programBufferMem_21, %programBufferMem_20, %programBufferMem_19, %programBufferMem_18, %programBufferMem_17, %programBufferMem_16 {sv.namehint = "out_prepend_261"} : i8, i8, i8, i8, i8, i8, i8, i8
    %663 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_268"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %664 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_275"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %665 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_282"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %666 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_289"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %667 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_296"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %668 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_303"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %669 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_317"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %670 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_324"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %671 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_331"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %672 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_338"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %673 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_345"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %674 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_359"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %675 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_366"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %676 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_373"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %677 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_380"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %678 = comb.replicate %590 : (i1) -> i2
    %679 = comb.concat %678, %597 {sv.namehint = "_out_womask_T_631"} : i2, i8
    %680 = comb.icmp bin eq %679, %c-1_i10 {sv.namehint = "out_womask_448"} : i10
    %681 = comb.and bin %917, %680 {sv.namehint = "hartResumingWrEn"} : i1
    %682 = comb.replicate %594 : (i1) -> i2
    %683 = comb.concat %682, %598 {sv.namehint = "_out_womask_T_632"} : i2, i8
    %684 = comb.icmp bin eq %683, %c-1_i10 {sv.namehint = "out_womask_449"} : i10
    %685 = comb.and bin %917, %684 {sv.namehint = "hartExceptionWrEn"} : i1
    %686 = comb.extract %auto_tl_in_a_bits_data from 32 {sv.namehint = "hartGoingId"} : (i64) -> i10
    %687 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_388"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %688 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_395"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %689 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_402"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %690 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_409"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %691 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_416"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %692 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_423"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %693 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_430"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %694 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_437"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %695 = comb.and bin %923, %589 {sv.namehint = "out_f_woready_514"} : i1
    %696 = comb.mux bin %695, %599, %515 : i8
    %697 = comb.and bin %923, %590 {sv.namehint = "out_f_woready_515"} : i1
    %698 = comb.mux bin %697, %600, %517 : i8
    %699 = comb.and bin %923, %591 {sv.namehint = "out_f_woready_516"} : i1
    %700 = comb.mux bin %699, %601, %519 : i8
    %701 = comb.and bin %923, %592 {sv.namehint = "out_f_woready_517"} : i1
    %702 = comb.mux bin %701, %602, %521 : i8
    %703 = comb.and bin %923, %593 {sv.namehint = "out_f_woready_518"} : i1
    %704 = comb.mux bin %703, %603, %523 : i8
    %705 = comb.and bin %923, %594 {sv.namehint = "out_f_woready_519"} : i1
    %706 = comb.mux bin %705, %604, %525 : i8
    %707 = comb.and bin %923, %595 {sv.namehint = "out_f_woready_520"} : i1
    %708 = comb.mux bin %707, %605, %527 : i8
    %709 = comb.and bin %923, %596 {sv.namehint = "out_f_woready_521"} : i1
    %710 = comb.mux bin %709, %606, %529 : i8
    %711 = comb.concat %programBufferMem_47, %programBufferMem_46, %programBufferMem_45, %programBufferMem_44, %programBufferMem_43, %programBufferMem_42, %programBufferMem_41, %programBufferMem_40 {sv.namehint = "out_prepend_444"} : i8, i8, i8, i8, i8, i8, i8, i8
    %712 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_458"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %713 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_465"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %714 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_472"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %715 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_479"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %716 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_486"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %717 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_493"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %718 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_500"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %719 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_507"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %720 = comb.and bin %919, %589 {sv.namehint = "out_f_woready_595"} : i1
    %721 = comb.mux bin %720, %599, %451 : i8
    %722 = comb.and bin %919, %590 {sv.namehint = "out_f_woready_596"} : i1
    %723 = comb.mux bin %722, %600, %453 : i8
    %724 = comb.and bin %919, %591 {sv.namehint = "out_f_woready_597"} : i1
    %725 = comb.mux bin %724, %601, %455 : i8
    %726 = comb.and bin %919, %592 {sv.namehint = "out_f_woready_598"} : i1
    %727 = comb.mux bin %726, %602, %457 : i8
    %728 = comb.and bin %919, %593 {sv.namehint = "out_f_woready_599"} : i1
    %729 = comb.mux bin %728, %603, %459 : i8
    %730 = comb.and bin %919, %594 {sv.namehint = "out_f_woready_600"} : i1
    %731 = comb.mux bin %730, %604, %461 : i8
    %732 = comb.and bin %919, %595 {sv.namehint = "out_f_woready_601"} : i1
    %733 = comb.mux bin %732, %605, %463 : i8
    %734 = comb.and bin %919, %596 {sv.namehint = "out_f_woready_602"} : i1
    %735 = comb.mux bin %734, %606, %465 : i8
    %736 = comb.concat %programBufferMem_15, %programBufferMem_14, %programBufferMem_13, %programBufferMem_12, %programBufferMem_11, %programBufferMem_10, %programBufferMem_9, %programBufferMem_8 {sv.namehint = "out_prepend_514"} : i8, i8, i8, i8, i8, i8, i8, i8
    %737 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_521"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %738 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_531"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %739 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_538"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %740 = comb.icmp bin eq %679, %c-1_i10 {sv.namehint = "out_womask_631"} : i10
    %741 = comb.and bin %916, %740 {sv.namehint = "hartHaltedWrEn"} : i1
    %742 = comb.icmp bin eq %683, %c-1_i10 {sv.namehint = "out_womask_632"} : i10
    %743 = comb.and bin %916, %742 {sv.namehint = "hartGoingWrEn"} : i1
    %744 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_546"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %745 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_560"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %746 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_567"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %747 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_574"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %748 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_581"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %749 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_588"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %750 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_595"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %751 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_609"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %752 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_616"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %753 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_623"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %754 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_630"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %755 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_637"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %756 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_644"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %757 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_651"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %758 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_658"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %759 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_665"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %760 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_672"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %761 = comb.concat %abstractGeneratedMem_1, %abstractGeneratedMem_0 {sv.namehint = "out_prepend_673"} : i32, i32
    %762 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_680"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %763 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_687"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %764 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_694"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %765 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_701"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %766 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_708"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %767 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_715"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %768 = comb.and bin %922, %589 {sv.namehint = "out_f_woready_835"} : i1
    %769 = comb.mux bin %768, %599, %499 : i8
    %770 = comb.and bin %922, %590 {sv.namehint = "out_f_woready_836"} : i1
    %771 = comb.mux bin %770, %600, %501 : i8
    %772 = comb.and bin %922, %591 {sv.namehint = "out_f_woready_837"} : i1
    %773 = comb.mux bin %772, %601, %503 : i8
    %774 = comb.and bin %922, %592 {sv.namehint = "out_f_woready_838"} : i1
    %775 = comb.mux bin %774, %602, %505 : i8
    %776 = comb.and bin %922, %593 {sv.namehint = "out_f_woready_839"} : i1
    %777 = comb.mux bin %776, %603, %507 : i8
    %778 = comb.and bin %922, %594 {sv.namehint = "out_f_woready_840"} : i1
    %779 = comb.mux bin %778, %604, %509 : i8
    %780 = comb.and bin %922, %595 {sv.namehint = "out_f_woready_841"} : i1
    %781 = comb.mux bin %780, %605, %511 : i8
    %782 = comb.and bin %922, %596 {sv.namehint = "out_f_woready_842"} : i1
    %783 = comb.mux bin %782, %606, %513 : i8
    %784 = comb.concat %programBufferMem_39, %programBufferMem_38, %programBufferMem_37, %programBufferMem_36, %programBufferMem_35, %programBufferMem_34, %programBufferMem_33, %programBufferMem_32 {sv.namehint = "out_prepend_722"} : i8, i8, i8, i8, i8, i8, i8, i8
    %785 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_729"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %786 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_736"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %787 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_743"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %788 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_750"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %789 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_757"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %790 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_764"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %791 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_771"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %792 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_778"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %793 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_785"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %794 = comb.and bin %926, %589 {sv.namehint = "out_f_woready_915"} : i1
    %795 = comb.mux bin %794, %599, %419 : i8
    %796 = comb.and bin %926, %590 {sv.namehint = "out_f_woready_916"} : i1
    %797 = comb.mux bin %796, %600, %421 : i8
    %798 = comb.and bin %926, %591 {sv.namehint = "out_f_woready_917"} : i1
    %799 = comb.mux bin %798, %601, %423 : i8
    %800 = comb.and bin %926, %592 {sv.namehint = "out_f_woready_918"} : i1
    %801 = comb.mux bin %800, %602, %425 : i8
    %802 = comb.and bin %926, %593 {sv.namehint = "out_f_woready_919"} : i1
    %803 = comb.mux bin %802, %603, %427 : i8
    %804 = comb.and bin %926, %594 {sv.namehint = "out_f_woready_920"} : i1
    %805 = comb.mux bin %804, %604, %429 : i8
    %806 = comb.and bin %926, %595 {sv.namehint = "out_f_woready_921"} : i1
    %807 = comb.mux bin %806, %605, %431 : i8
    %808 = comb.and bin %926, %596 {sv.namehint = "out_f_woready_922"} : i1
    %809 = comb.mux bin %808, %606, %433 : i8
    %810 = comb.concat %abstractDataMem_7, %abstractDataMem_6, %abstractDataMem_5, %abstractDataMem_4, %abstractDataMem_3, %abstractDataMem_2, %abstractDataMem_1, %abstractDataMem_0 {sv.namehint = "out_prepend_792"} : i8, i8, i8, i8, i8, i8, i8, i8
    %811 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_799"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %812 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_806"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %813 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_813"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %814 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_827"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %815 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_834"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %816 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_841"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %817 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_848"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %818 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_855"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %819 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_862"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %820 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_869"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %821 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_876"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %822 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_883"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %823 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_890"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %824 = comb.and bin %918, %589 {sv.namehint = "out_f_woready_1035"} : i1
    %825 = comb.mux bin %824, %599, %435 : i8
    %826 = comb.and bin %918, %590 {sv.namehint = "out_f_woready_1036"} : i1
    %827 = comb.mux bin %826, %600, %437 : i8
    %828 = comb.and bin %918, %591 {sv.namehint = "out_f_woready_1037"} : i1
    %829 = comb.mux bin %828, %601, %439 : i8
    %830 = comb.and bin %918, %592 {sv.namehint = "out_f_woready_1038"} : i1
    %831 = comb.mux bin %830, %602, %441 : i8
    %832 = comb.and bin %918, %593 {sv.namehint = "out_f_woready_1039"} : i1
    %833 = comb.mux bin %832, %603, %443 : i8
    %834 = comb.and bin %918, %594 {sv.namehint = "out_f_woready_1040"} : i1
    %835 = comb.mux bin %834, %604, %445 : i8
    %836 = comb.and bin %918, %595 {sv.namehint = "out_f_woready_1041"} : i1
    %837 = comb.mux bin %836, %605, %447 : i8
    %838 = comb.and bin %918, %596 {sv.namehint = "out_f_woready_1042"} : i1
    %839 = comb.mux bin %838, %606, %449 : i8
    %840 = comb.concat %programBufferMem_7, %programBufferMem_6, %programBufferMem_5, %programBufferMem_4, %programBufferMem_3, %programBufferMem_2, %programBufferMem_1, %programBufferMem_0 {sv.namehint = "out_prepend_897"} : i8, i8, i8, i8, i8, i8, i8, i8
    %841 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_911"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %842 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_918"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %843 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_925"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %844 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_932"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %845 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_939"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %846 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_946"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %847 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_953"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %848 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_960"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %849 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_967"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %850 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_974"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %851 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_988"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %852 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_995"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %853 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1002"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %854 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1009"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %855 = comb.and bin %921, %589 {sv.namehint = "out_f_woready_1171"} : i1
    %856 = comb.mux bin %855, %599, %483 : i8
    %857 = comb.and bin %921, %590 {sv.namehint = "out_f_woready_1172"} : i1
    %858 = comb.mux bin %857, %600, %485 : i8
    %859 = comb.and bin %921, %591 {sv.namehint = "out_f_woready_1173"} : i1
    %860 = comb.mux bin %859, %601, %487 : i8
    %861 = comb.and bin %921, %592 {sv.namehint = "out_f_woready_1174"} : i1
    %862 = comb.mux bin %861, %602, %489 : i8
    %863 = comb.and bin %921, %593 {sv.namehint = "out_f_woready_1175"} : i1
    %864 = comb.mux bin %863, %603, %491 : i8
    %865 = comb.and bin %921, %594 {sv.namehint = "out_f_woready_1176"} : i1
    %866 = comb.mux bin %865, %604, %493 : i8
    %867 = comb.and bin %921, %595 {sv.namehint = "out_f_woready_1177"} : i1
    %868 = comb.mux bin %867, %605, %495 : i8
    %869 = comb.and bin %921, %596 {sv.namehint = "out_f_woready_1178"} : i1
    %870 = comb.mux bin %869, %606, %497 : i8
    %871 = comb.concat %programBufferMem_31, %programBufferMem_30, %programBufferMem_29, %programBufferMem_28, %programBufferMem_27, %programBufferMem_26, %programBufferMem_25, %programBufferMem_24 {sv.namehint = "out_prepend_1016"} : i8, i8, i8, i8, i8, i8, i8, i8
    %872 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1023"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %873 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1030"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %874 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1037"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %875 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1044"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %876 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1051"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %877 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1058"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %878 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1065"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %879 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1072"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %880 = comb.and bin %925, %589 {sv.namehint = "out_f_woready_1243"} : i1
    %881 = comb.mux bin %880, %599, %547 : i8
    %882 = comb.and bin %925, %590 {sv.namehint = "out_f_woready_1244"} : i1
    %883 = comb.mux bin %882, %600, %549 : i8
    %884 = comb.and bin %925, %591 {sv.namehint = "out_f_woready_1245"} : i1
    %885 = comb.mux bin %884, %601, %551 : i8
    %886 = comb.and bin %925, %592 {sv.namehint = "out_f_woready_1246"} : i1
    %887 = comb.mux bin %886, %602, %553 : i8
    %888 = comb.and bin %925, %593 {sv.namehint = "out_f_woready_1247"} : i1
    %889 = comb.mux bin %888, %603, %555 : i8
    %890 = comb.and bin %925, %594 {sv.namehint = "out_f_woready_1248"} : i1
    %891 = comb.mux bin %890, %604, %557 : i8
    %892 = comb.and bin %925, %595 {sv.namehint = "out_f_woready_1249"} : i1
    %893 = comb.mux bin %892, %605, %559 : i8
    %894 = comb.and bin %925, %596 {sv.namehint = "out_f_woready_1250"} : i1
    %895 = comb.mux bin %894, %606, %561 : i8
    %896 = comb.concat %programBufferMem_63, %programBufferMem_62, %programBufferMem_61, %programBufferMem_60, %programBufferMem_59, %programBufferMem_58, %programBufferMem_57, %programBufferMem_56 {sv.namehint = "out_prepend_1079"} : i8, i8, i8, i8, i8, i8, i8, i8
    %897 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1086"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %898 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1093"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %899 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1100"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %900 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1107"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %901 = comb.concat %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg, %c0_i6, %resumeReqRegs, %goReg {sv.namehint = "out_prepend_1114"} : i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1, i6, i1, i1
    %902 = comb.extract %auto_tl_in_a_bits_address from 3 {sv.namehint = "out_oindex_1"} : (i12) -> i8
    %903 = comb.icmp eq %902, %c32_i8 {sv.namehint = "out_backSel_32"} : i8
    %904 = comb.icmp eq %902, %c33_i8 {sv.namehint = "out_backSel_33"} : i8
    %905 = comb.icmp eq %902, %c104_i8 {sv.namehint = "out_backSel_104"} : i8
    %906 = comb.icmp eq %902, %c105_i8 {sv.namehint = "out_backSel_105"} : i8
    %907 = comb.icmp eq %902, %c106_i8 {sv.namehint = "out_backSel_106"} : i8
    %908 = comb.icmp eq %902, %c107_i8 {sv.namehint = "out_backSel_107"} : i8
    %909 = comb.icmp eq %902, %c108_i8 {sv.namehint = "out_backSel_108"} : i8
    %910 = comb.icmp eq %902, %c109_i8 {sv.namehint = "out_backSel_109"} : i8
    %911 = comb.icmp eq %902, %c110_i8 {sv.namehint = "out_backSel_110"} : i8
    %912 = comb.icmp eq %902, %c111_i8 {sv.namehint = "out_backSel_111"} : i8
    %913 = comb.icmp eq %902, %c112_i8 {sv.namehint = "out_backSel_112"} : i8
    %914 = comb.xor bin %586, %true {sv.namehint = "_out_wofireMux_T_133"} : i1
    %915 = comb.and bin %auto_tl_in_a_valid, %auto_tl_in_d_ready, %914 {sv.namehint = "_out_wofireMux_T_134"} : i1
    %916 = comb.and bin %915, %903, %588 {sv.namehint = "out_woready_1_528"} : i1
    %917 = comb.and bin %915, %904, %588 {sv.namehint = "out_woready_1_345"} : i1
    %918 = comb.and bin %915, %905, %588 {sv.namehint = "out_woready_1_938"} : i1
    %919 = comb.and bin %915, %906, %588 {sv.namehint = "out_woready_1_498"} : i1
    %920 = comb.and bin %915, %907, %588 {sv.namehint = "out_woready_1_207"} : i1
    %921 = comb.and bin %915, %908, %588 {sv.namehint = "out_woready_1_1074"} : i1
    %922 = comb.and bin %915, %909, %588 {sv.namehint = "out_woready_1_738"} : i1
    %923 = comb.and bin %915, %910, %588 {sv.namehint = "out_woready_1_417"} : i1
    %924 = comb.and bin %915, %911, %588 {sv.namehint = "out_woready_1_111"} : i1
    %925 = comb.and bin %915, %912, %588 {sv.namehint = "out_woready_1_1146"} : i1
    %926 = comb.and bin %915, %913, %588 {sv.namehint = "out_woready_1_818"} : i1
    %927 = hw.array_createtrue, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %588, %588, %588, %588, %588, %588, %588, %588, %588, %588, %true, %true, %true, %true, %true, %true, %588, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %588, %588, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %true, %587, %587, %587, %587, %587, %587, %587, %587, %587, %587, %587 : i1
    %928 = hw.array_get %927[%902] : !hw.array<256xi1>, i8
    %929 = hw.array_create %792, %897, %645, %688, %765, %820, %608, %671, %612, %846, %759, %737, %668, %873, %789, %764, %872, %663, %719, %752, %845, %609, %670, %901, %821, %758, %687, %640, %898, %788, %712, %690, %786, %900, %665, %673, %757, %823, %611, %641, %899, %848, %763, %714, %644, %854, %793, %760, %847, %669, %738, %750, %822, %613, %672, %878, %814, %767, %689, %636, %875, %811, %713, %675, %749, %852, %638, %692, %755, %842, %617, %618, %853, %816, %753, %746, %643, %879, %815, %748, %818, %616, %715, %756, %843, %610, %693, %850, %790, %739, %677, %642, %877, %791, %745, %674, %754, %841, %637, %691, %766, %817, %615, %639, %849, %813, %747, %744, %664, %851, %812, %751, %819, %614, %694, %762, %844, %607, %676, %874, %787, %717, %667, %666, %876, %785, %716, %718, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %810, %896, %635, %711, %784, %871, %662, %736, %840, %761, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c58720367_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c0_i64, %c1048691_i64, %c1152963438438252659_i64, %c8872131342536549411_i64, %c-1062809434914291609_i64, %c1152959040391750771_i64, %c1135121202967571_i64, %c-142979517114977261_i64, %c4612886698286653475_i64, %c-1062809433653637005_i64, %c1148417969475289199_i64, %c252202055886700655_i64 : i64
    %930 = hw.array_get %929[%902] : !hw.array<256xi64>, i8
    %931 = comb.mux bin %928, %930, %c0_i64 {sv.namehint = "out_1_bits_data"} : i64
    %932 = comb.concat %c0_i2, %586 {sv.namehint = "bundleIn_0_1_d_bits_opcode"} : i2, i1
    %933 = comb.mux bin %io_dmactive, %795, %c0_i8 : i8
    %934 = comb.mux bin %io_dmactive, %797, %c0_i8 : i8
    %935 = comb.mux bin %io_dmactive, %799, %c0_i8 : i8
    %936 = comb.mux bin %io_dmactive, %801, %c0_i8 : i8
    %937 = comb.mux bin %io_dmactive, %803, %c0_i8 : i8
    %938 = comb.mux bin %io_dmactive, %805, %c0_i8 : i8
    %939 = comb.mux bin %io_dmactive, %807, %c0_i8 : i8
    %940 = comb.mux bin %io_dmactive, %809, %c0_i8 : i8
    %941 = comb.mux bin %io_dmactive, %825, %c0_i8 : i8
    %942 = comb.mux bin %io_dmactive, %827, %c0_i8 : i8
    %943 = comb.mux bin %io_dmactive, %829, %c0_i8 : i8
    %944 = comb.mux bin %io_dmactive, %831, %c0_i8 : i8
    %945 = comb.mux bin %io_dmactive, %833, %c0_i8 : i8
    %946 = comb.mux bin %io_dmactive, %835, %c0_i8 : i8
    %947 = comb.mux bin %io_dmactive, %837, %c0_i8 : i8
    %948 = comb.mux bin %io_dmactive, %839, %c0_i8 : i8
    %949 = comb.mux bin %io_dmactive, %721, %c0_i8 : i8
    %950 = comb.mux bin %io_dmactive, %723, %c0_i8 : i8
    %951 = comb.mux bin %io_dmactive, %725, %c0_i8 : i8
    %952 = comb.mux bin %io_dmactive, %727, %c0_i8 : i8
    %953 = comb.mux bin %io_dmactive, %729, %c0_i8 : i8
    %954 = comb.mux bin %io_dmactive, %731, %c0_i8 : i8
    %955 = comb.mux bin %io_dmactive, %733, %c0_i8 : i8
    %956 = comb.mux bin %io_dmactive, %735, %c0_i8 : i8
    %957 = comb.mux bin %io_dmactive, %647, %c0_i8 : i8
    %958 = comb.mux bin %io_dmactive, %649, %c0_i8 : i8
    %959 = comb.mux bin %io_dmactive, %651, %c0_i8 : i8
    %960 = comb.mux bin %io_dmactive, %653, %c0_i8 : i8
    %961 = comb.mux bin %io_dmactive, %655, %c0_i8 : i8
    %962 = comb.mux bin %io_dmactive, %657, %c0_i8 : i8
    %963 = comb.mux bin %io_dmactive, %659, %c0_i8 : i8
    %964 = comb.mux bin %io_dmactive, %661, %c0_i8 : i8
    %965 = comb.mux bin %io_dmactive, %856, %c0_i8 : i8
    %966 = comb.mux bin %io_dmactive, %858, %c0_i8 : i8
    %967 = comb.mux bin %io_dmactive, %860, %c0_i8 : i8
    %968 = comb.mux bin %io_dmactive, %862, %c0_i8 : i8
    %969 = comb.mux bin %io_dmactive, %864, %c0_i8 : i8
    %970 = comb.mux bin %io_dmactive, %866, %c0_i8 : i8
    %971 = comb.mux bin %io_dmactive, %868, %c0_i8 : i8
    %972 = comb.mux bin %io_dmactive, %870, %c0_i8 : i8
    %973 = comb.mux bin %io_dmactive, %769, %c0_i8 : i8
    %974 = comb.mux bin %io_dmactive, %771, %c0_i8 : i8
    %975 = comb.mux bin %io_dmactive, %773, %c0_i8 : i8
    %976 = comb.mux bin %io_dmactive, %775, %c0_i8 : i8
    %977 = comb.mux bin %io_dmactive, %777, %c0_i8 : i8
    %978 = comb.mux bin %io_dmactive, %779, %c0_i8 : i8
    %979 = comb.mux bin %io_dmactive, %781, %c0_i8 : i8
    %980 = comb.mux bin %io_dmactive, %783, %c0_i8 : i8
    %981 = comb.mux bin %io_dmactive, %696, %c0_i8 : i8
    %982 = comb.mux bin %io_dmactive, %698, %c0_i8 : i8
    %983 = comb.mux bin %io_dmactive, %700, %c0_i8 : i8
    %984 = comb.mux bin %io_dmactive, %702, %c0_i8 : i8
    %985 = comb.mux bin %io_dmactive, %704, %c0_i8 : i8
    %986 = comb.mux bin %io_dmactive, %706, %c0_i8 : i8
    %987 = comb.mux bin %io_dmactive, %708, %c0_i8 : i8
    %988 = comb.mux bin %io_dmactive, %710, %c0_i8 : i8
    %989 = comb.mux bin %io_dmactive, %620, %c0_i8 : i8
    %990 = comb.mux bin %io_dmactive, %622, %c0_i8 : i8
    %991 = comb.mux bin %io_dmactive, %624, %c0_i8 : i8
    %992 = comb.mux bin %io_dmactive, %626, %c0_i8 : i8
    %993 = comb.mux bin %io_dmactive, %628, %c0_i8 : i8
    %994 = comb.mux bin %io_dmactive, %630, %c0_i8 : i8
    %995 = comb.mux bin %io_dmactive, %632, %c0_i8 : i8
    %996 = comb.mux bin %io_dmactive, %634, %c0_i8 : i8
    %997 = comb.mux bin %io_dmactive, %881, %c0_i8 : i8
    %998 = comb.mux bin %io_dmactive, %883, %c0_i8 : i8
    %999 = comb.mux bin %io_dmactive, %885, %c0_i8 : i8
    %1000 = comb.mux bin %io_dmactive, %887, %c0_i8 : i8
    %1001 = comb.mux bin %io_dmactive, %889, %c0_i8 : i8
    %1002 = comb.mux bin %io_dmactive, %891, %c0_i8 : i8
    %1003 = comb.mux bin %io_dmactive, %893, %c0_i8 : i8
    %1004 = comb.mux bin %io_dmactive, %895, %c0_i8 : i8
    %ctrlStateReg = seq.firreg %1077 clock %clock {firrtl.random_init_start = 743 : ui64} : i2
    %1005 = comb.icmp bin ne %ctrlStateReg, %c0_i2 {sv.namehint = "abstractCommandBusy"} : i2
    %1006 = comb.icmp bin ne %ctrlStateReg, %c0_i2 : i2
    %1007 = comb.xor bin %1006, %true {sv.namehint = "COMMANDWrEnLegal"} : i1
    %1008 = comb.and bin %247, %1006 {sv.namehint = "_errorBusy_T_1"} : i1
    %1009 = comb.and bin %164, %1006 {sv.namehint = "_errorBusy_T_3"} : i1
    %1010 = comb.and bin %169, %1006 {sv.namehint = "_errorBusy_T_6"} : i1
    %1011 = comb.and bin %295, %1006 {sv.namehint = "_errorBusy_T_9"} : i1
    %1012 = comb.and bin %57, %1006 {sv.namehint = "_errorBusy_T_12"} : i1
    %1013 = comb.and bin %58, %1006 {sv.namehint = "_errorBusy_T_15"} : i1
    %1014 = comb.or bin %1008, %1009, %1010, %1011, %1012, %1013 {sv.namehint = "errorBusy"} : i1
    %1015 = comb.icmp bin ne %97, %c0_i8 {sv.namehint = "_commandWrIsUnsupported_T"} : i8
    %1016 = comb.xor bin %1015, %true {sv.namehint = "commandWrIsAccessRegister"} : i1
    %1017 = comb.icmp bin eq %COMMANDRdData_cmdtype, %c0_i8 {sv.namehint = "commandRegIsAccessRegister"} : i8
    %1018 = comb.and bin %98, %1015 {sv.namehint = "commandWrIsUnsupported"} : i1
    %1019 = comb.icmp bin eq %577, %c2_i3 {sv.namehint = "_accessRegIsLegalSize_T"} : i3
    %1020 = comb.icmp bin eq %577, %c3_i3 {sv.namehint = "_accessRegIsLegalSize_T_1"} : i3
    %1021 = comb.or bin %1019, %1020 {sv.namehint = "accessRegIsLegalSize"} : i1
    %1022 = comb.extract %COMMANDRdData_control from 12 : (i24) -> i4
    %1023 = comb.icmp bin ne %1022, %c0_i4 {sv.namehint = "_accessRegIsGPR_T"} : i4
    %1024 = comb.icmp bin ult %573, %c4128_i16 {sv.namehint = "_accessRegIsGPR_T_1"} : i16
    %1025 = comb.and bin %1023, %1024, %1021 {sv.namehint = "accessRegIsGPR"} : i1
    %1026 = comb.xor bin %575, %true : i1
    %1027 = comb.or bin %1026, %1025 : i1
    %1028 = comb.xor bin %1027, %true : i1
    %1029 = comb.xor %1017, %true : i1
    %1030 = comb.or %1029, %1028 {sv.namehint = "commandRegIsUnsupported"} : i1
    %1031 = comb.xor bin %haltedBitRegs, %true {sv.namehint = "_commandRegBadHaltResume_T"} : i1
    %1032 = comb.and %1017, %1027, %1031 {sv.namehint = "commandRegBadHaltResume"} : i1
    %1033 = comb.icmp bin eq %ABSTRACTCSReg_cmderr, %c0_i3 {sv.namehint = "_regAccessRegisterCommand_T_1"} : i3
    %1034 = comb.and bin %98, %1016, %1033 {sv.namehint = "wrAccessRegisterCommand"} : i1
    %1035 = comb.and bin %95, %1017, %1033 {sv.namehint = "regAccessRegisterCommand"} : i1
    %1036 = comb.or bin %1034, %1035 : i1
    %1037 = comb.mux bin %1036, %c1_i2, %ctrlStateReg : i2
    %1038 = comb.and bin %95, %1030 : i1
    %1039 = comb.or %1018, %1038 : i1
    %1040 = comb.xor %1036, %true : i1
    %1041 = comb.and %1040, %1039 : i1
    %1042 = comb.icmp bin eq %ctrlStateReg, %c1_i2 : i2
    %1043 = comb.and %1042, %1030 : i1
    %1044 = comb.mux bin %1006, %1043, %1041 {sv.namehint = "errorUnsupported"} : i1
    %1045 = comb.xor %1030, %true : i1
    %1046 = comb.and %1006, %1042, %1045, %1032 {sv.namehint = "errorHaltResume"} : i1
    %1047 = comb.or bin %1030, %1032 : i1
    %1048 = comb.xor %1047, %true : i1
    %1049 = comb.concat %1048, %false : i1, i1
    %1050 = comb.xor bin %1047, %true : i1
    %1051 = comb.and %1006, %1042, %1050 {sv.namehint = "goAbstract"} : i1
    %1052 = comb.xor bin %1042, %true : i1
    %1053 = comb.and bin %1006, %1052 : i1
    %1054 = comb.icmp bin eq %ctrlStateReg, %c-2_i2 : i2
    %1055 = comb.and bin %1053, %1054 : i1
    %1056 = comb.xor bin %goReg, %true : i1
    %1057 = comb.and bin %1056, %741 : i1
    %1058 = comb.and bin %1055, %685 : i1
    %1059 = comb.icmp bin eq %686, %c0_i10 : i10
    %1060 = comb.or bin %1059, %reset : i1
    %1061 = comb.xor bin %1060, %true : i1
    %1062 = comb.and bin %1058, %1061 : i1
    %1063 = comb.or bin %685, %1057 : i1
    %1064 = comb.or bin %1007, %1042 : i1
    %1065 = comb.xor %1064, %true : i1
    %1066 = comb.and %1065, %1054, %685 {sv.namehint = "errorException"} : i1
    %1067 = comb.xor bin %1054, %true : i1
    %1068 = comb.and bin %1053, %1067 : i1
    %1069 = comb.icmp bin eq %ctrlStateReg, %c-1_i2 : i2
    %1070 = comb.and bin %1068, %1069 : i1
    %1071 = comb.xor bin %reset, %true : i1
    %1072 = comb.and bin %1070, %1071 : i1
    %1073 = comb.and bin %1054, %1063 : i1
    %1074 = comb.mux bin %1073, %c0_i2, %ctrlStateReg : i2
    %1075 = comb.mux bin %1042, %1049, %1074 : i2
    %1076 = comb.mux bin %1006, %1075, %1037 {sv.namehint = "ctrlStateNxt"} : i2
    %1077 = comb.mux bin %io_dmactive, %1076, %c0_i2 : i2
    %1078 = comb.xor bin %685, %true : i1
    %1079 = comb.or bin %2, %1078, %1054, %reset : i1
    %1080 = comb.xor bin %1079, %true : i1
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %0 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %1081 = comb.and bin %STOP_COND_, %568 : i1
        sv.if %1081 {
          sv.fatal 1
        }
        %1082 = comb.and bin %STOP_COND_, %false : i1
        sv.if %1082 {
          sv.fatal 1
        }
        %1083 = comb.and bin %STOP_COND_, %1062 : i1
        sv.if %1083 {
          sv.fatal 1
        }
        %1084 = comb.and bin %STOP_COND_, %1072 : i1
        sv.if %1084 {
          sv.fatal 1
        }
        %1085 = comb.and bin %STOP_COND_, %1080 : i1
        sv.if %1085 {
          sv.fatal 1
        }
      }
    }
    hw.output %auto_tl_in_d_ready, %auto_tl_in_a_valid, %932, %auto_tl_in_a_bits_size, %auto_tl_in_a_bits_source, %931, %auto_dmi_in_d_ready, %auto_dmi_in_a_valid, %417, %auto_dmi_in_a_bits_size, %auto_dmi_in_a_bits_source, %416, %hrDebugIntReg_0 : i1, i1, i3, i2, i6, i64, i1, i1, i3, i2, i1, i32, i1
  }
  hw.module private @ClockCrossingReg_w55(in %clock : !seq.clock, in %io_d : i55, out io_q : i55, in %io_en : i1) {
    %cdc_reg = seq.firreg %0 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i55
    %0 = comb.mux bin %io_en, %io_d, %cdc_reg : i55
    hw.output %cdc_reg : i55
  }
  hw.module private @AsyncQueueSink_1(in %clock : !seq.clock, in %reset : i1, in %io_deq_ready : i1, out io_deq_valid : i1, out io_deq_bits_opcode : i3, out io_deq_bits_param : i3, out io_deq_bits_size : i2, out io_deq_bits_source : i1, out io_deq_bits_address : i9, out io_deq_bits_mask : i4, out io_deq_bits_data : i32, out io_deq_bits_corrupt : i1, in %io_async_mem_0_opcode : i3, in %io_async_mem_0_address : i9, in %io_async_mem_0_data : i32, out io_async_ridx : i1, in %io_async_widx : i1, out io_async_safe_ridx_valid : i1, in %io_async_safe_widx_valid : i1, in %io_async_safe_source_reset_n : i1, out io_async_safe_sink_reset_n : i1) {
    %c4_i6 = hw.constant 4 : i6
    %true = hw.constant true
    %c-1_i4 = hw.constant -1 : i4
    %false = hw.constant false
    %0 = comb.and bin %io_deq_ready, %14 {sv.namehint = "_ridx_T_1"} : i1
    %ridx_ridx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %1 = comb.add %ridx_ridx_bin, %0 {sv.namehint = "_ridx_incremented_T"} : i1
    %2 = comb.and %source_valid.io_out, %1 {sv.namehint = "ridx"} : i1
    %widx_widx_gray.io_q = hw.instance "widx_widx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_widx: i1) -> (io_q: i1) {sv.namehint = "widx"}
    %3 = comb.icmp bin ne %2, %widx_widx_gray.io_q {sv.namehint = "_valid_T"} : i1
    %4 = comb.and bin %source_valid.io_out, %3 {sv.namehint = "valid"} : i1
    %io_deq_bits_deq_bits_reg.io_q = hw.instance "io_deq_bits_deq_bits_reg" @ClockCrossingReg_w55(clock: %clock: !seq.clock, io_d: %5: i55, io_en: %4: i1) -> (io_q: i55) {sv.namehint = "io_deq_bits_deq_bits_reg.io_q"}
    %5 = comb.concat %io_async_mem_0_opcode, %c4_i6, %io_async_mem_0_address, %c-1_i4, %io_async_mem_0_data, %false {sv.namehint = "io_deq_bits_deq_bits_reg.io_d"} : i3, i6, i9, i4, i32, i1
    %6 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 0 {sv.namehint = "_io_deq_bits_T"} : (i55) -> i1
    %7 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 1 {sv.namehint = "_io_deq_bits_T_1"} : (i55) -> i32
    %8 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 33 {sv.namehint = "_io_deq_bits_T_2"} : (i55) -> i4
    %9 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 37 {sv.namehint = "_io_deq_bits_T_3"} : (i55) -> i9
    %10 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 46 {sv.namehint = "_io_deq_bits_T_4"} : (i55) -> i1
    %11 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 47 {sv.namehint = "_io_deq_bits_T_5"} : (i55) -> i2
    %12 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 49 {sv.namehint = "_io_deq_bits_T_6"} : (i55) -> i3
    %13 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 52 {sv.namehint = "_io_deq_bits_T_7"} : (i55) -> i3
    %valid_reg = seq.firreg %4 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %14 = comb.and bin %valid_reg, %source_valid.io_out {sv.namehint = "io_deq_valid"} : i1
    %ridx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64, sv.namehint = "ridx_gray"} : i1
    %sink_valid_0.io_out = hw.instance "sink_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %16: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_in"}
    %sink_valid_1.io_out = hw.instance "sink_valid_1" @AsyncValidSync(io_in: %sink_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %17: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_out"}
    %source_extend.io_out = hw.instance "source_extend" @AsyncValidSync(io_in: %io_async_safe_widx_valid: i1, clock: %clock: !seq.clock, reset: %18: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_in"}
    %source_valid.io_out = hw.instance "source_valid" @AsyncValidSync(io_in: %source_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_out"}
    %15 = comb.xor bin %io_async_safe_source_reset_n, %true {sv.namehint = "_source_extend_reset_T_1"} : i1
    %16 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_0_reset_T_2"} : i1
    %17 = comb.or bin %reset, %15 {sv.namehint = "_sink_valid_1_reset_T_2"} : i1
    %18 = comb.or bin %reset, %15 {sv.namehint = "_source_extend_reset_T_2"} : i1
    %19 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_sink_reset_n"} : i1
    hw.output %14, %13, %12, %11, %10, %9, %8, %7, %6, %ridx_gray, %sink_valid_1.io_out, %19 : i1, i3, i3, i2, i1, i9, i4, i32, i1, i1, i1, i1
  }
  hw.module private @AsyncQueueSource_2(in %clock : !seq.clock, in %reset : i1, out io_enq_ready : i1, in %io_enq_valid : i1, in %io_enq_bits_opcode : i3, in %io_enq_bits_size : i2, in %io_enq_bits_source : i1, in %io_enq_bits_data : i32, out io_async_mem_0_opcode : i3, out io_async_mem_0_size : i2, out io_async_mem_0_source : i1, out io_async_mem_0_data : i32, in %io_async_ridx : i1, out io_async_widx : i1, in %io_async_safe_ridx_valid : i1, out io_async_safe_widx_valid : i1, out io_async_safe_source_reset_n : i1, in %io_async_safe_sink_reset_n : i1) {
    %true = hw.constant true
    %false = hw.constant false
    %mem_0_opcode = seq.firreg %9 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "mem_0_opcode"} : i3
    %mem_0_size = seq.firreg %8 clock %clock {firrtl.random_init_start = 5 : ui64, sv.namehint = "mem_0_size"} : i2
    %mem_0_source = seq.firreg %7 clock %clock {firrtl.random_init_start = 7 : ui64, sv.namehint = "mem_0_source"} : i1
    %mem_0_data = seq.firreg %6 clock %clock {firrtl.random_init_start = 10 : ui64, sv.namehint = "mem_0_data"} : i32
    %0 = comb.and bin %10, %io_enq_valid {sv.namehint = "_widx_T_1"} : i1
    %widx_widx_bin = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 43 : ui64} : i1
    %1 = comb.add %widx_widx_bin, %0 {sv.namehint = "_widx_incremented_T"} : i1
    %2 = comb.and %sink_valid.io_out, %1 {sv.namehint = "widx"} : i1
    %ridx_ridx_gray.io_q = hw.instance "ridx_ridx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_ridx: i1) -> (io_q: i1) {sv.namehint = "ridx"}
    %3 = comb.xor bin %ridx_ridx_gray.io_q, %true {sv.namehint = "_ready_T"} : i1
    %4 = comb.icmp bin ne %2, %3 {sv.namehint = "_ready_T_1"} : i1
    %5 = comb.and bin %sink_valid.io_out, %4 {sv.namehint = "ready"} : i1
    %6 = comb.mux bin %0, %io_enq_bits_data, %mem_0_data : i32
    %7 = comb.mux bin %0, %io_enq_bits_source, %mem_0_source : i1
    %8 = comb.mux bin %0, %io_enq_bits_size, %mem_0_size : i2
    %9 = comb.mux bin %0, %io_enq_bits_opcode, %mem_0_opcode : i3
    %ready_reg = seq.firreg %5 clock %clock reset async %reset, %false {firrtl.random_init_start = 44 : ui64} : i1
    %10 = comb.and bin %ready_reg, %sink_valid.io_out {sv.namehint = "io_enq_ready"} : i1
    %widx_gray = seq.firreg %2 clock %clock reset async %reset, %false {firrtl.random_init_start = 45 : ui64, sv.namehint = "widx_gray"} : i1
    %source_valid_0.io_out = hw.instance "source_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_in"}
    %source_valid_1.io_out = hw.instance "source_valid_1" @AsyncValidSync(io_in: %source_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "source_valid_1.io_out"}
    %sink_extend.io_out = hw.instance "sink_extend" @AsyncValidSync(io_in: %io_async_safe_ridx_valid: i1, clock: %clock: !seq.clock, reset: %14: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_in"}
    %sink_valid.io_out = hw.instance "sink_valid" @AsyncValidSync(io_in: %sink_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "sink_valid.io_out"}
    %11 = comb.xor bin %io_async_safe_sink_reset_n, %true {sv.namehint = "_sink_extend_reset_T_1"} : i1
    %12 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_0_reset_T_2"} : i1
    %13 = comb.or bin %reset, %11 {sv.namehint = "_source_valid_1_reset_T_2"} : i1
    %14 = comb.or bin %reset, %11 {sv.namehint = "_sink_extend_reset_T_2"} : i1
    %15 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_source_reset_n"} : i1
    hw.output %10, %mem_0_opcode, %mem_0_size, %mem_0_source, %mem_0_data, %widx_gray, %source_valid_1.io_out, %15 : i1, i3, i2, i1, i32, i1, i1, i1
  }
  hw.module private @TLAsyncCrossingSink(in %clock : !seq.clock, in %reset : i1, in %auto_in_a_mem_0_opcode : i3, in %auto_in_a_mem_0_address : i9, in %auto_in_a_mem_0_data : i32, out auto_in_a_ridx : i1, in %auto_in_a_widx : i1, out auto_in_a_safe_ridx_valid : i1, in %auto_in_a_safe_widx_valid : i1, in %auto_in_a_safe_source_reset_n : i1, out auto_in_a_safe_sink_reset_n : i1, out auto_in_d_mem_0_opcode : i3, out auto_in_d_mem_0_size : i2, out auto_in_d_mem_0_source : i1, out auto_in_d_mem_0_data : i32, in %auto_in_d_ridx : i1, out auto_in_d_widx : i1, in %auto_in_d_safe_ridx_valid : i1, out auto_in_d_safe_widx_valid : i1, out auto_in_d_safe_source_reset_n : i1, in %auto_in_d_safe_sink_reset_n : i1, in %auto_out_a_ready : i1, out auto_out_a_valid : i1, out auto_out_a_bits_opcode : i3, out auto_out_a_bits_param : i3, out auto_out_a_bits_size : i2, out auto_out_a_bits_source : i1, out auto_out_a_bits_address : i9, out auto_out_a_bits_mask : i4, out auto_out_a_bits_data : i32, out auto_out_a_bits_corrupt : i1, out auto_out_d_ready : i1, in %auto_out_d_valid : i1, in %auto_out_d_bits_opcode : i3, in %auto_out_d_bits_size : i2, in %auto_out_d_bits_source : i1, in %auto_out_d_bits_data : i32) {
    %bundleOut_0_a_sink.io_deq_valid, %bundleOut_0_a_sink.io_deq_bits_opcode, %bundleOut_0_a_sink.io_deq_bits_param, %bundleOut_0_a_sink.io_deq_bits_size, %bundleOut_0_a_sink.io_deq_bits_source, %bundleOut_0_a_sink.io_deq_bits_address, %bundleOut_0_a_sink.io_deq_bits_mask, %bundleOut_0_a_sink.io_deq_bits_data, %bundleOut_0_a_sink.io_deq_bits_corrupt, %bundleOut_0_a_sink.io_async_ridx, %bundleOut_0_a_sink.io_async_safe_ridx_valid, %bundleOut_0_a_sink.io_async_safe_sink_reset_n = hw.instance "bundleOut_0_a_sink" @AsyncQueueSink_1(clock: %clock: !seq.clock, reset: %reset: i1, io_deq_ready: %auto_out_a_ready: i1, io_async_mem_0_opcode: %auto_in_a_mem_0_opcode: i3, io_async_mem_0_address: %auto_in_a_mem_0_address: i9, io_async_mem_0_data: %auto_in_a_mem_0_data: i32, io_async_widx: %auto_in_a_widx: i1, io_async_safe_widx_valid: %auto_in_a_safe_widx_valid: i1, io_async_safe_source_reset_n: %auto_in_a_safe_source_reset_n: i1) -> (io_deq_valid: i1, io_deq_bits_opcode: i3, io_deq_bits_param: i3, io_deq_bits_size: i2, io_deq_bits_source: i1, io_deq_bits_address: i9, io_deq_bits_mask: i4, io_deq_bits_data: i32, io_deq_bits_corrupt: i1, io_async_ridx: i1, io_async_safe_ridx_valid: i1, io_async_safe_sink_reset_n: i1) {sv.namehint = "bundleOut_0_a_sink.io_deq_valid"}
    %bundleIn_0_d_source.io_enq_ready, %bundleIn_0_d_source.io_async_mem_0_opcode, %bundleIn_0_d_source.io_async_mem_0_size, %bundleIn_0_d_source.io_async_mem_0_source, %bundleIn_0_d_source.io_async_mem_0_data, %bundleIn_0_d_source.io_async_widx, %bundleIn_0_d_source.io_async_safe_widx_valid, %bundleIn_0_d_source.io_async_safe_source_reset_n = hw.instance "bundleIn_0_d_source" @AsyncQueueSource_2(clock: %clock: !seq.clock, reset: %reset: i1, io_enq_valid: %auto_out_d_valid: i1, io_enq_bits_opcode: %auto_out_d_bits_opcode: i3, io_enq_bits_size: %auto_out_d_bits_size: i2, io_enq_bits_source: %auto_out_d_bits_source: i1, io_enq_bits_data: %auto_out_d_bits_data: i32, io_async_ridx: %auto_in_d_ridx: i1, io_async_safe_ridx_valid: %auto_in_d_safe_ridx_valid: i1, io_async_safe_sink_reset_n: %auto_in_d_safe_sink_reset_n: i1) -> (io_enq_ready: i1, io_async_mem_0_opcode: i3, io_async_mem_0_size: i2, io_async_mem_0_source: i1, io_async_mem_0_data: i32, io_async_widx: i1, io_async_safe_widx_valid: i1, io_async_safe_source_reset_n: i1) {sv.namehint = "bundleIn_0_d_source.io_enq_ready"}
    hw.output %bundleOut_0_a_sink.io_async_ridx, %bundleOut_0_a_sink.io_async_safe_ridx_valid, %bundleOut_0_a_sink.io_async_safe_sink_reset_n, %bundleIn_0_d_source.io_async_mem_0_opcode, %bundleIn_0_d_source.io_async_mem_0_size, %bundleIn_0_d_source.io_async_mem_0_source, %bundleIn_0_d_source.io_async_mem_0_data, %bundleIn_0_d_source.io_async_widx, %bundleIn_0_d_source.io_async_safe_widx_valid, %bundleIn_0_d_source.io_async_safe_source_reset_n, %bundleOut_0_a_sink.io_deq_valid, %bundleOut_0_a_sink.io_deq_bits_opcode, %bundleOut_0_a_sink.io_deq_bits_param, %bundleOut_0_a_sink.io_deq_bits_size, %bundleOut_0_a_sink.io_deq_bits_source, %bundleOut_0_a_sink.io_deq_bits_address, %bundleOut_0_a_sink.io_deq_bits_mask, %bundleOut_0_a_sink.io_deq_bits_data, %bundleOut_0_a_sink.io_deq_bits_corrupt, %bundleIn_0_d_source.io_enq_ready : i1, i1, i1, i3, i2, i1, i32, i1, i1, i1, i1, i3, i3, i2, i1, i9, i4, i32, i1, i1
  }
  hw.module private @ClockCrossingReg_w15(in %clock : !seq.clock, in %io_d : i15, out io_q : i15, in %io_en : i1) {
    %cdc_reg = seq.firreg %0 clock %clock {firrtl.random_init_start = 0 : ui64, sv.namehint = "io_q"} : i15
    %0 = comb.mux bin %io_en, %io_d, %cdc_reg : i15
    hw.output %cdc_reg : i15
  }
  hw.module private @AsyncQueueSink_2(in %clock : !seq.clock, in %reset : i1, out io_deq_valid : i1, out io_deq_bits_resumereq : i1, out io_deq_bits_hartsel : i10, out io_deq_bits_ackhavereset : i1, out io_deq_bits_hrmask_0 : i1, in %io_async_mem_0_resumereq : i1, in %io_async_mem_0_hartsel : i10, in %io_async_mem_0_ackhavereset : i1, in %io_async_mem_0_hrmask_0 : i1, out io_async_ridx : i1, in %io_async_widx : i1, out io_async_safe_ridx_valid : i1, in %io_async_safe_widx_valid : i1, in %io_async_safe_source_reset_n : i1, out io_async_safe_sink_reset_n : i1) {
    %false = hw.constant false
    %true = hw.constant true
    %c0_i2 = hw.constant 0 : i2
    %ridx_ridx_bin = seq.firreg %1 clock %clock reset async %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %0 = comb.add %ridx_ridx_bin, %9 {sv.namehint = "_ridx_incremented_T"} : i1
    %1 = comb.and %source_valid.io_out, %0 {sv.namehint = "ridx"} : i1
    %widx_widx_gray.io_q = hw.instance "widx_widx_gray" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %io_async_widx: i1) -> (io_q: i1) {sv.namehint = "widx"}
    %2 = comb.icmp bin ne %1, %widx_widx_gray.io_q {sv.namehint = "_valid_T"} : i1
    %3 = comb.and bin %source_valid.io_out, %2 {sv.namehint = "valid"} : i1
    %io_deq_bits_deq_bits_reg.io_q = hw.instance "io_deq_bits_deq_bits_reg" @ClockCrossingReg_w15(clock: %clock: !seq.clock, io_d: %4: i15, io_en: %3: i1) -> (io_q: i15) {sv.namehint = "io_deq_bits_deq_bits_reg.io_q"}
    %4 = comb.concat %io_async_mem_0_resumereq, %io_async_mem_0_hartsel, %io_async_mem_0_ackhavereset, %c0_i2, %io_async_mem_0_hrmask_0 {sv.namehint = "io_deq_bits_deq_bits_reg.io_d"} : i1, i10, i1, i2, i1
    %5 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 0 {sv.namehint = "_io_deq_bits_T"} : (i15) -> i1
    %6 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 3 {sv.namehint = "_io_deq_bits_T_3"} : (i15) -> i1
    %7 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 4 {sv.namehint = "_io_deq_bits_T_4"} : (i15) -> i10
    %8 = comb.extract %io_deq_bits_deq_bits_reg.io_q from 14 {sv.namehint = "_io_deq_bits_T_5"} : (i15) -> i1
    %valid_reg = seq.firreg %3 clock %clock reset async %reset, %false {firrtl.random_init_start = 1 : ui64} : i1
    %9 = comb.and bin %valid_reg, %source_valid.io_out {sv.namehint = "io_deq_valid"} : i1
    %ridx_gray = seq.firreg %1 clock %clock reset async %reset, %false {firrtl.random_init_start = 2 : ui64, sv.namehint = "ridx_gray"} : i1
    %sink_valid_0.io_out = hw.instance "sink_valid_0" @AsyncValidSync(io_in: %true: i1, clock: %clock: !seq.clock, reset: %11: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_in"}
    %sink_valid_1.io_out = hw.instance "sink_valid_1" @AsyncValidSync(io_in: %sink_valid_0.io_out: i1, clock: %clock: !seq.clock, reset: %12: i1) -> (io_out: i1) {sv.namehint = "sink_valid_1.io_out"}
    %source_extend.io_out = hw.instance "source_extend" @AsyncValidSync(io_in: %io_async_safe_widx_valid: i1, clock: %clock: !seq.clock, reset: %13: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_in"}
    %source_valid.io_out = hw.instance "source_valid" @AsyncValidSync(io_in: %source_extend.io_out: i1, clock: %clock: !seq.clock, reset: %reset: i1) -> (io_out: i1) {sv.namehint = "source_valid.io_out"}
    %10 = comb.xor bin %io_async_safe_source_reset_n, %true {sv.namehint = "_source_extend_reset_T_1"} : i1
    %11 = comb.or bin %reset, %10 {sv.namehint = "_sink_valid_0_reset_T_2"} : i1
    %12 = comb.or bin %reset, %10 {sv.namehint = "_sink_valid_1_reset_T_2"} : i1
    %13 = comb.or bin %reset, %10 {sv.namehint = "_source_extend_reset_T_2"} : i1
    %14 = comb.xor bin %reset, %true {sv.namehint = "io_async_safe_sink_reset_n"} : i1
    hw.output %9, %8, %7, %6, %5, %ridx_gray, %sink_valid_1.io_out, %14 : i1, i1, i10, i1, i1, i1, i1, i1
  }
  hw.module private @TLDebugModuleInnerAsync(in %auto_dmiXing_in_a_mem_0_opcode : i3, in %auto_dmiXing_in_a_mem_0_address : i9, in %auto_dmiXing_in_a_mem_0_data : i32, out auto_dmiXing_in_a_ridx : i1, in %auto_dmiXing_in_a_widx : i1, out auto_dmiXing_in_a_safe_ridx_valid : i1, in %auto_dmiXing_in_a_safe_widx_valid : i1, in %auto_dmiXing_in_a_safe_source_reset_n : i1, out auto_dmiXing_in_a_safe_sink_reset_n : i1, out auto_dmiXing_in_d_mem_0_opcode : i3, out auto_dmiXing_in_d_mem_0_size : i2, out auto_dmiXing_in_d_mem_0_source : i1, out auto_dmiXing_in_d_mem_0_data : i32, in %auto_dmiXing_in_d_ridx : i1, out auto_dmiXing_in_d_widx : i1, in %auto_dmiXing_in_d_safe_ridx_valid : i1, out auto_dmiXing_in_d_safe_widx_valid : i1, out auto_dmiXing_in_d_safe_source_reset_n : i1, in %auto_dmiXing_in_d_safe_sink_reset_n : i1, out auto_dmInner_tl_in_a_ready : i1, in %auto_dmInner_tl_in_a_valid : i1, in %auto_dmInner_tl_in_a_bits_opcode : i3, in %auto_dmInner_tl_in_a_bits_param : i3, in %auto_dmInner_tl_in_a_bits_size : i2, in %auto_dmInner_tl_in_a_bits_source : i6, in %auto_dmInner_tl_in_a_bits_address : i12, in %auto_dmInner_tl_in_a_bits_mask : i8, in %auto_dmInner_tl_in_a_bits_data : i64, in %auto_dmInner_tl_in_a_bits_corrupt : i1, in %auto_dmInner_tl_in_d_ready : i1, out auto_dmInner_tl_in_d_valid : i1, out auto_dmInner_tl_in_d_bits_opcode : i3, out auto_dmInner_tl_in_d_bits_size : i2, out auto_dmInner_tl_in_d_bits_source : i6, out auto_dmInner_tl_in_d_bits_data : i64, in %io_debug_clock : !seq.clock, in %io_debug_reset : i1, in %io_dmactive : i1, in %io_innerCtrl_mem_0_resumereq : i1, in %io_innerCtrl_mem_0_hartsel : i10, in %io_innerCtrl_mem_0_ackhavereset : i1, in %io_innerCtrl_mem_0_hrmask_0 : i1, out io_innerCtrl_ridx : i1, in %io_innerCtrl_widx : i1, out io_innerCtrl_safe_ridx_valid : i1, in %io_innerCtrl_safe_widx_valid : i1, in %io_innerCtrl_safe_source_reset_n : i1, out io_innerCtrl_safe_sink_reset_n : i1, out io_hgDebugInt_0 : i1, in %io_hartIsInReset_0 : i1) {
    %dmInner.auto_tl_in_a_ready, %dmInner.auto_tl_in_d_valid, %dmInner.auto_tl_in_d_bits_opcode, %dmInner.auto_tl_in_d_bits_size, %dmInner.auto_tl_in_d_bits_source, %dmInner.auto_tl_in_d_bits_data, %dmInner.auto_dmi_in_a_ready, %dmInner.auto_dmi_in_d_valid, %dmInner.auto_dmi_in_d_bits_opcode, %dmInner.auto_dmi_in_d_bits_size, %dmInner.auto_dmi_in_d_bits_source, %dmInner.auto_dmi_in_d_bits_data, %dmInner.io_hgDebugInt_0 = hw.instance "dmInner" @TLDebugModuleInner(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, auto_tl_in_a_valid: %auto_dmInner_tl_in_a_valid: i1, auto_tl_in_a_bits_opcode: %auto_dmInner_tl_in_a_bits_opcode: i3, auto_tl_in_a_bits_param: %auto_dmInner_tl_in_a_bits_param: i3, auto_tl_in_a_bits_size: %auto_dmInner_tl_in_a_bits_size: i2, auto_tl_in_a_bits_source: %auto_dmInner_tl_in_a_bits_source: i6, auto_tl_in_a_bits_address: %auto_dmInner_tl_in_a_bits_address: i12, auto_tl_in_a_bits_mask: %auto_dmInner_tl_in_a_bits_mask: i8, auto_tl_in_a_bits_data: %auto_dmInner_tl_in_a_bits_data: i64, auto_tl_in_a_bits_corrupt: %auto_dmInner_tl_in_a_bits_corrupt: i1, auto_tl_in_d_ready: %auto_dmInner_tl_in_d_ready: i1, auto_dmi_in_a_valid: %dmiXing.auto_out_a_valid: i1, auto_dmi_in_a_bits_opcode: %dmiXing.auto_out_a_bits_opcode: i3, auto_dmi_in_a_bits_param: %dmiXing.auto_out_a_bits_param: i3, auto_dmi_in_a_bits_size: %dmiXing.auto_out_a_bits_size: i2, auto_dmi_in_a_bits_source: %dmiXing.auto_out_a_bits_source: i1, auto_dmi_in_a_bits_address: %dmiXing.auto_out_a_bits_address: i9, auto_dmi_in_a_bits_mask: %dmiXing.auto_out_a_bits_mask: i4, auto_dmi_in_a_bits_data: %dmiXing.auto_out_a_bits_data: i32, auto_dmi_in_a_bits_corrupt: %dmiXing.auto_out_a_bits_corrupt: i1, auto_dmi_in_d_ready: %dmiXing.auto_out_d_ready: i1, io_dmactive: %dmactive_synced_dmactive_synced_dmactiveSync.io_q: i1, io_innerCtrl_valid: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_valid: i1, io_innerCtrl_bits_resumereq: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_resumereq: i1, io_innerCtrl_bits_hartsel: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hartsel: i10, io_innerCtrl_bits_ackhavereset: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_ackhavereset: i1, io_innerCtrl_bits_hrmask_0: %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hrmask_0: i1, io_hartIsInReset_0: %io_hartIsInReset_0: i1) -> (auto_tl_in_a_ready: i1, auto_tl_in_d_valid: i1, auto_tl_in_d_bits_opcode: i3, auto_tl_in_d_bits_size: i2, auto_tl_in_d_bits_source: i6, auto_tl_in_d_bits_data: i64, auto_dmi_in_a_ready: i1, auto_dmi_in_d_valid: i1, auto_dmi_in_d_bits_opcode: i3, auto_dmi_in_d_bits_size: i2, auto_dmi_in_d_bits_source: i1, auto_dmi_in_d_bits_data: i32, io_hgDebugInt_0: i1) {sv.namehint = "dmInner.io_hgDebugInt_0"}
    %dmiXing.auto_in_a_ridx, %dmiXing.auto_in_a_safe_ridx_valid, %dmiXing.auto_in_a_safe_sink_reset_n, %dmiXing.auto_in_d_mem_0_opcode, %dmiXing.auto_in_d_mem_0_size, %dmiXing.auto_in_d_mem_0_source, %dmiXing.auto_in_d_mem_0_data, %dmiXing.auto_in_d_widx, %dmiXing.auto_in_d_safe_widx_valid, %dmiXing.auto_in_d_safe_source_reset_n, %dmiXing.auto_out_a_valid, %dmiXing.auto_out_a_bits_opcode, %dmiXing.auto_out_a_bits_param, %dmiXing.auto_out_a_bits_size, %dmiXing.auto_out_a_bits_source, %dmiXing.auto_out_a_bits_address, %dmiXing.auto_out_a_bits_mask, %dmiXing.auto_out_a_bits_data, %dmiXing.auto_out_a_bits_corrupt, %dmiXing.auto_out_d_ready = hw.instance "dmiXing" @TLAsyncCrossingSink(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, auto_in_a_mem_0_opcode: %auto_dmiXing_in_a_mem_0_opcode: i3, auto_in_a_mem_0_address: %auto_dmiXing_in_a_mem_0_address: i9, auto_in_a_mem_0_data: %auto_dmiXing_in_a_mem_0_data: i32, auto_in_a_widx: %auto_dmiXing_in_a_widx: i1, auto_in_a_safe_widx_valid: %auto_dmiXing_in_a_safe_widx_valid: i1, auto_in_a_safe_source_reset_n: %auto_dmiXing_in_a_safe_source_reset_n: i1, auto_in_d_ridx: %auto_dmiXing_in_d_ridx: i1, auto_in_d_safe_ridx_valid: %auto_dmiXing_in_d_safe_ridx_valid: i1, auto_in_d_safe_sink_reset_n: %auto_dmiXing_in_d_safe_sink_reset_n: i1, auto_out_a_ready: %dmInner.auto_dmi_in_a_ready: i1, auto_out_d_valid: %dmInner.auto_dmi_in_d_valid: i1, auto_out_d_bits_opcode: %dmInner.auto_dmi_in_d_bits_opcode: i3, auto_out_d_bits_size: %dmInner.auto_dmi_in_d_bits_size: i2, auto_out_d_bits_source: %dmInner.auto_dmi_in_d_bits_source: i1, auto_out_d_bits_data: %dmInner.auto_dmi_in_d_bits_data: i32) -> (auto_in_a_ridx: i1, auto_in_a_safe_ridx_valid: i1, auto_in_a_safe_sink_reset_n: i1, auto_in_d_mem_0_opcode: i3, auto_in_d_mem_0_size: i2, auto_in_d_mem_0_source: i1, auto_in_d_mem_0_data: i32, auto_in_d_widx: i1, auto_in_d_safe_widx_valid: i1, auto_in_d_safe_source_reset_n: i1, auto_out_a_valid: i1, auto_out_a_bits_opcode: i3, auto_out_a_bits_param: i3, auto_out_a_bits_size: i2, auto_out_a_bits_source: i1, auto_out_a_bits_address: i9, auto_out_a_bits_mask: i4, auto_out_a_bits_data: i32, auto_out_a_bits_corrupt: i1, auto_out_d_ready: i1) {sv.namehint = "dmiXing.auto_in_d_widx"}
    %dmactive_synced_dmactive_synced_dmactiveSync.io_q = hw.instance "dmactive_synced_dmactive_synced_dmactiveSync" @AsyncResetSynchronizerShiftReg_w1_d3_i0(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, io_d: %io_dmactive: i1) -> (io_q: i1) {sv.namehint = "dmactive_synced"}
    %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_valid, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_resumereq, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hartsel, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_ackhavereset, %dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_bits_hrmask_0, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_ridx, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_ridx_valid, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_sink_reset_n = hw.instance "dmactive_synced_dmInner_io_innerCtrl_sink" @AsyncQueueSink_2(clock: %io_debug_clock: !seq.clock, reset: %io_debug_reset: i1, io_async_mem_0_resumereq: %io_innerCtrl_mem_0_resumereq: i1, io_async_mem_0_hartsel: %io_innerCtrl_mem_0_hartsel: i10, io_async_mem_0_ackhavereset: %io_innerCtrl_mem_0_ackhavereset: i1, io_async_mem_0_hrmask_0: %io_innerCtrl_mem_0_hrmask_0: i1, io_async_widx: %io_innerCtrl_widx: i1, io_async_safe_widx_valid: %io_innerCtrl_safe_widx_valid: i1, io_async_safe_source_reset_n: %io_innerCtrl_safe_source_reset_n: i1) -> (io_deq_valid: i1, io_deq_bits_resumereq: i1, io_deq_bits_hartsel: i10, io_deq_bits_ackhavereset: i1, io_deq_bits_hrmask_0: i1, io_async_ridx: i1, io_async_safe_ridx_valid: i1, io_async_safe_sink_reset_n: i1) {sv.namehint = "dmactive_synced_dmInner_io_innerCtrl_sink.io_deq_valid"}
    hw.output %dmiXing.auto_in_a_ridx, %dmiXing.auto_in_a_safe_ridx_valid, %dmiXing.auto_in_a_safe_sink_reset_n, %dmiXing.auto_in_d_mem_0_opcode, %dmiXing.auto_in_d_mem_0_size, %dmiXing.auto_in_d_mem_0_source, %dmiXing.auto_in_d_mem_0_data, %dmiXing.auto_in_d_widx, %dmiXing.auto_in_d_safe_widx_valid, %dmiXing.auto_in_d_safe_source_reset_n, %dmInner.auto_tl_in_a_ready, %dmInner.auto_tl_in_d_valid, %dmInner.auto_tl_in_d_bits_opcode, %dmInner.auto_tl_in_d_bits_size, %dmInner.auto_tl_in_d_bits_source, %dmInner.auto_tl_in_d_bits_data, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_ridx, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_ridx_valid, %dmactive_synced_dmInner_io_innerCtrl_sink.io_async_safe_sink_reset_n, %dmInner.io_hgDebugInt_0 : i1, i1, i1, i3, i2, i1, i32, i1, i1, i1, i1, i1, i3, i2, i6, i64, i1, i1, i1, i1
  }
  hw.module private @TLDebugModule(out auto_dmInner_dmInner_tl_in_a_ready : i1, in %auto_dmInner_dmInner_tl_in_a_valid : i1, in %auto_dmInner_dmInner_tl_in_a_bits_opcode : i3, in %auto_dmInner_dmInner_tl_in_a_bits_param : i3, in %auto_dmInner_dmInner_tl_in_a_bits_size : i2, in %auto_dmInner_dmInner_tl_in_a_bits_source : i6, in %auto_dmInner_dmInner_tl_in_a_bits_address : i12, in %auto_dmInner_dmInner_tl_in_a_bits_mask : i8, in %auto_dmInner_dmInner_tl_in_a_bits_data : i64, in %auto_dmInner_dmInner_tl_in_a_bits_corrupt : i1, in %auto_dmInner_dmInner_tl_in_d_ready : i1, out auto_dmInner_dmInner_tl_in_d_valid : i1, out auto_dmInner_dmInner_tl_in_d_bits_opcode : i3, out auto_dmInner_dmInner_tl_in_d_bits_size : i2, out auto_dmInner_dmInner_tl_in_d_bits_source : i6, out auto_dmInner_dmInner_tl_in_d_bits_data : i64, out auto_dmOuter_intsource_out_sync_0 : i1, in %io_debug_clock : !seq.clock, in %io_debug_reset : i1, out io_ctrl_ndreset : i1, out io_ctrl_dmactive : i1, in %io_ctrl_dmactiveAck : i1, out io_dmi_dmi_req_ready : i1, in %io_dmi_dmi_req_valid : i1, in %io_dmi_dmi_req_bits_addr : i7, in %io_dmi_dmi_req_bits_data : i32, in %io_dmi_dmi_req_bits_op : i2, in %io_dmi_dmi_resp_ready : i1, out io_dmi_dmi_resp_valid : i1, out io_dmi_dmi_resp_bits_data : i32, out io_dmi_dmi_resp_bits_resp : i2, in %io_dmi_dmiClock : !seq.clock, in %io_dmi_dmiReset : i1, in %io_hartIsInReset_0 : i1) {
    %dmOuter.auto_asource_out_a_mem_0_opcode, %dmOuter.auto_asource_out_a_mem_0_address, %dmOuter.auto_asource_out_a_mem_0_data, %dmOuter.auto_asource_out_a_widx, %dmOuter.auto_asource_out_a_safe_widx_valid, %dmOuter.auto_asource_out_a_safe_source_reset_n, %dmOuter.auto_asource_out_d_ridx, %dmOuter.auto_asource_out_d_safe_ridx_valid, %dmOuter.auto_asource_out_d_safe_sink_reset_n, %dmOuter.auto_intsource_out_sync_0, %dmOuter.io_dmi_req_ready, %dmOuter.io_dmi_resp_valid, %dmOuter.io_dmi_resp_bits_data, %dmOuter.io_dmi_resp_bits_resp, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %dmOuter.io_innerCtrl_mem_0_resumereq, %dmOuter.io_innerCtrl_mem_0_hartsel, %dmOuter.io_innerCtrl_mem_0_ackhavereset, %dmOuter.io_innerCtrl_mem_0_hrmask_0, %dmOuter.io_innerCtrl_widx, %dmOuter.io_innerCtrl_safe_widx_valid, %dmOuter.io_innerCtrl_safe_source_reset_n = hw.instance "dmOuter" @TLDebugModuleOuterAsync(auto_asource_out_a_ridx: %dmInner.auto_dmiXing_in_a_ridx: i1, auto_asource_out_a_safe_ridx_valid: %dmInner.auto_dmiXing_in_a_safe_ridx_valid: i1, auto_asource_out_a_safe_sink_reset_n: %dmInner.auto_dmiXing_in_a_safe_sink_reset_n: i1, auto_asource_out_d_mem_0_opcode: %dmInner.auto_dmiXing_in_d_mem_0_opcode: i3, auto_asource_out_d_mem_0_size: %dmInner.auto_dmiXing_in_d_mem_0_size: i2, auto_asource_out_d_mem_0_source: %dmInner.auto_dmiXing_in_d_mem_0_source: i1, auto_asource_out_d_mem_0_data: %dmInner.auto_dmiXing_in_d_mem_0_data: i32, auto_asource_out_d_widx: %dmInner.auto_dmiXing_in_d_widx: i1, auto_asource_out_d_safe_widx_valid: %dmInner.auto_dmiXing_in_d_safe_widx_valid: i1, auto_asource_out_d_safe_source_reset_n: %dmInner.auto_dmiXing_in_d_safe_source_reset_n: i1, io_dmi_clock: %io_dmi_dmiClock: !seq.clock, io_dmi_reset: %io_dmi_dmiReset: i1, io_dmi_req_valid: %io_dmi_dmi_req_valid: i1, io_dmi_req_bits_addr: %io_dmi_dmi_req_bits_addr: i7, io_dmi_req_bits_data: %io_dmi_dmi_req_bits_data: i32, io_dmi_req_bits_op: %io_dmi_dmi_req_bits_op: i2, io_dmi_resp_ready: %io_dmi_dmi_resp_ready: i1, io_ctrl_dmactiveAck: %io_ctrl_dmactiveAck: i1, io_innerCtrl_ridx: %dmInner.io_innerCtrl_ridx: i1, io_innerCtrl_safe_ridx_valid: %dmInner.io_innerCtrl_safe_ridx_valid: i1, io_innerCtrl_safe_sink_reset_n: %dmInner.io_innerCtrl_safe_sink_reset_n: i1, io_hgDebugInt_0: %dmInner.io_hgDebugInt_0: i1) -> (auto_asource_out_a_mem_0_opcode: i3, auto_asource_out_a_mem_0_address: i9, auto_asource_out_a_mem_0_data: i32, auto_asource_out_a_widx: i1, auto_asource_out_a_safe_widx_valid: i1, auto_asource_out_a_safe_source_reset_n: i1, auto_asource_out_d_ridx: i1, auto_asource_out_d_safe_ridx_valid: i1, auto_asource_out_d_safe_sink_reset_n: i1, auto_intsource_out_sync_0: i1, io_dmi_req_ready: i1, io_dmi_resp_valid: i1, io_dmi_resp_bits_data: i32, io_dmi_resp_bits_resp: i2, io_ctrl_ndreset: i1, io_ctrl_dmactive: i1, io_innerCtrl_mem_0_resumereq: i1, io_innerCtrl_mem_0_hartsel: i10, io_innerCtrl_mem_0_ackhavereset: i1, io_innerCtrl_mem_0_hrmask_0: i1, io_innerCtrl_widx: i1, io_innerCtrl_safe_widx_valid: i1, io_innerCtrl_safe_source_reset_n: i1) {sv.namehint = "dmInner.io_dmactive"}
    %dmInner.auto_dmiXing_in_a_ridx, %dmInner.auto_dmiXing_in_a_safe_ridx_valid, %dmInner.auto_dmiXing_in_a_safe_sink_reset_n, %dmInner.auto_dmiXing_in_d_mem_0_opcode, %dmInner.auto_dmiXing_in_d_mem_0_size, %dmInner.auto_dmiXing_in_d_mem_0_source, %dmInner.auto_dmiXing_in_d_mem_0_data, %dmInner.auto_dmiXing_in_d_widx, %dmInner.auto_dmiXing_in_d_safe_widx_valid, %dmInner.auto_dmiXing_in_d_safe_source_reset_n, %dmInner.auto_dmInner_tl_in_a_ready, %dmInner.auto_dmInner_tl_in_d_valid, %dmInner.auto_dmInner_tl_in_d_bits_opcode, %dmInner.auto_dmInner_tl_in_d_bits_size, %dmInner.auto_dmInner_tl_in_d_bits_source, %dmInner.auto_dmInner_tl_in_d_bits_data, %dmInner.io_innerCtrl_ridx, %dmInner.io_innerCtrl_safe_ridx_valid, %dmInner.io_innerCtrl_safe_sink_reset_n, %dmInner.io_hgDebugInt_0 = hw.instance "dmInner" @TLDebugModuleInnerAsync(auto_dmiXing_in_a_mem_0_opcode: %dmOuter.auto_asource_out_a_mem_0_opcode: i3, auto_dmiXing_in_a_mem_0_address: %dmOuter.auto_asource_out_a_mem_0_address: i9, auto_dmiXing_in_a_mem_0_data: %dmOuter.auto_asource_out_a_mem_0_data: i32, auto_dmiXing_in_a_widx: %dmOuter.auto_asource_out_a_widx: i1, auto_dmiXing_in_a_safe_widx_valid: %dmOuter.auto_asource_out_a_safe_widx_valid: i1, auto_dmiXing_in_a_safe_source_reset_n: %dmOuter.auto_asource_out_a_safe_source_reset_n: i1, auto_dmiXing_in_d_ridx: %dmOuter.auto_asource_out_d_ridx: i1, auto_dmiXing_in_d_safe_ridx_valid: %dmOuter.auto_asource_out_d_safe_ridx_valid: i1, auto_dmiXing_in_d_safe_sink_reset_n: %dmOuter.auto_asource_out_d_safe_sink_reset_n: i1, auto_dmInner_tl_in_a_valid: %auto_dmInner_dmInner_tl_in_a_valid: i1, auto_dmInner_tl_in_a_bits_opcode: %auto_dmInner_dmInner_tl_in_a_bits_opcode: i3, auto_dmInner_tl_in_a_bits_param: %auto_dmInner_dmInner_tl_in_a_bits_param: i3, auto_dmInner_tl_in_a_bits_size: %auto_dmInner_dmInner_tl_in_a_bits_size: i2, auto_dmInner_tl_in_a_bits_source: %auto_dmInner_dmInner_tl_in_a_bits_source: i6, auto_dmInner_tl_in_a_bits_address: %auto_dmInner_dmInner_tl_in_a_bits_address: i12, auto_dmInner_tl_in_a_bits_mask: %auto_dmInner_dmInner_tl_in_a_bits_mask: i8, auto_dmInner_tl_in_a_bits_data: %auto_dmInner_dmInner_tl_in_a_bits_data: i64, auto_dmInner_tl_in_a_bits_corrupt: %auto_dmInner_dmInner_tl_in_a_bits_corrupt: i1, auto_dmInner_tl_in_d_ready: %auto_dmInner_dmInner_tl_in_d_ready: i1, io_debug_clock: %io_debug_clock: !seq.clock, io_debug_reset: %io_debug_reset: i1, io_dmactive: %dmOuter.io_ctrl_dmactive: i1, io_innerCtrl_mem_0_resumereq: %dmOuter.io_innerCtrl_mem_0_resumereq: i1, io_innerCtrl_mem_0_hartsel: %dmOuter.io_innerCtrl_mem_0_hartsel: i10, io_innerCtrl_mem_0_ackhavereset: %dmOuter.io_innerCtrl_mem_0_ackhavereset: i1, io_innerCtrl_mem_0_hrmask_0: %dmOuter.io_innerCtrl_mem_0_hrmask_0: i1, io_innerCtrl_widx: %dmOuter.io_innerCtrl_widx: i1, io_innerCtrl_safe_widx_valid: %dmOuter.io_innerCtrl_safe_widx_valid: i1, io_innerCtrl_safe_source_reset_n: %dmOuter.io_innerCtrl_safe_source_reset_n: i1, io_hartIsInReset_0: %io_hartIsInReset_0: i1) -> (auto_dmiXing_in_a_ridx: i1, auto_dmiXing_in_a_safe_ridx_valid: i1, auto_dmiXing_in_a_safe_sink_reset_n: i1, auto_dmiXing_in_d_mem_0_opcode: i3, auto_dmiXing_in_d_mem_0_size: i2, auto_dmiXing_in_d_mem_0_source: i1, auto_dmiXing_in_d_mem_0_data: i32, auto_dmiXing_in_d_widx: i1, auto_dmiXing_in_d_safe_widx_valid: i1, auto_dmiXing_in_d_safe_source_reset_n: i1, auto_dmInner_tl_in_a_ready: i1, auto_dmInner_tl_in_d_valid: i1, auto_dmInner_tl_in_d_bits_opcode: i3, auto_dmInner_tl_in_d_bits_size: i2, auto_dmInner_tl_in_d_bits_source: i6, auto_dmInner_tl_in_d_bits_data: i64, io_innerCtrl_ridx: i1, io_innerCtrl_safe_ridx_valid: i1, io_innerCtrl_safe_sink_reset_n: i1, io_hgDebugInt_0: i1) {sv.namehint = "dmInner.io_hgDebugInt_0"}
    hw.output %dmInner.auto_dmInner_tl_in_a_ready, %dmInner.auto_dmInner_tl_in_d_valid, %dmInner.auto_dmInner_tl_in_d_bits_opcode, %dmInner.auto_dmInner_tl_in_d_bits_size, %dmInner.auto_dmInner_tl_in_d_bits_source, %dmInner.auto_dmInner_tl_in_d_bits_data, %dmOuter.auto_intsource_out_sync_0, %dmOuter.io_ctrl_ndreset, %dmOuter.io_ctrl_dmactive, %dmOuter.io_dmi_req_ready, %dmOuter.io_dmi_resp_valid, %dmOuter.io_dmi_resp_bits_data, %dmOuter.io_dmi_resp_bits_resp : i1, i1, i3, i2, i6, i64, i1, i1, i1, i1, i1, i32, i2
  }
  hw.module private @AsyncResetRegVec_w2_i0(in %clock : !seq.clock, in %reset : i1, in %io_d : i2, out io_q : i2) {
    %c0_i2 = hw.constant 0 : i2
    %reg = seq.firreg %io_d clock %clock reset async %reset, %c0_i2 {firrtl.random_init_start = 0 : ui64, sv.namehint = "reg"} : i2
    hw.output %reg : i2
  }
  hw.module private @IntSyncCrossingSource_5(in %clock : !seq.clock, in %reset : i1, in %auto_in_0 : i1, in %auto_in_1 : i1, out auto_out_sync_0 : i1, out auto_out_sync_1 : i1) {
    %0 = comb.concat %auto_in_1, %auto_in_0 {sv.namehint = "reg.io_d"} : i1, i1
    %reg.io_q = hw.instance "reg" @AsyncResetRegVec_w2_i0(clock: %clock: !seq.clock, reset: %reset: i1, io_d: %0: i2) -> (io_q: i2) {sv.namehint = "reg.io_q"}
    %1 = comb.extract %reg.io_q from 0 {sv.namehint = "bundleOut_0_sync_0"} : (i2) -> i1
    %2 = comb.extract %reg.io_q from 1 {sv.namehint = "bundleOut_0_sync_1"} : (i2) -> i1
    hw.output %1, %2 : i1, i1
  }
  hw.module private @TLMonitor_30(in %clock : !seq.clock, in %reset : i1, in %io_in_a_ready : i1, in %io_in_a_valid : i1, in %io_in_a_bits_opcode : i3, in %io_in_a_bits_param : i3, in %io_in_a_bits_size : i2, in %io_in_a_bits_source : i6, in %io_in_a_bits_address : i17, in %io_in_a_bits_mask : i8, in %io_in_a_bits_corrupt : i1, in %io_in_d_ready : i1, in %io_in_d_valid : i1, in %io_in_d_bits_size : i2, in %io_in_d_bits_source : i6) {
    %c1_i32 = hw.constant 1 : i32
    %0 = hw.aggregate_constant [-4 : i3, -3 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %1 = hw.aggregate_constant [-4 : i3, -4 : i3, 2 : i3, 1 : i3, 1 : i3, 1 : i3, 0 : i3, 0 : i3] : !hw.array<8xi3>
    %c0_i519 = hw.constant 0 : i519
    %c0_i506 = hw.constant 0 : i506
    %c0_i507 = hw.constant 0 : i507
    %c0_i184 = hw.constant 0 : i184
    %c1_i2 = hw.constant 1 : i2
    %c-2_i2 = hw.constant -2 : i2
    %c-1_i2 = hw.constant -1 : i2
    %c15_i527 = hw.constant 15 : i527
    %c1_i64 = hw.constant 1 : i64
    %c7_i6 = hw.constant 7 : i6
    %false = hw.constant false
    %c1_i3 = hw.constant 1 : i3
    %true = hw.constant true {sv.namehint = "mask_size_2"}
    %c-1_i3 = hw.constant -1 : i3
    %c0_i3 = hw.constant 0 : i3
    %c0_i192 = hw.constant 0 : i192
    %c0_i4 = hw.constant 0 : i4
    %c0_i48 = hw.constant 0 : i48
    %c-4_i3 = hw.constant -4 : i3
    %c-3_i3 = hw.constant -3 : i3
    %c2_i3 = hw.constant 2 : i3
    %c0_i32 = hw.constant 0 : i32
    %c3_i3 = hw.constant 3 : i3
    %c-2_i3 = hw.constant -2 : i3
    %c-1_i192 = hw.constant -1 : i192
    %c-1_i48 = hw.constant -1 : i48
    %c0_i42 = hw.constant 0 : i42
    %c0_i511 = hw.constant 0 : i511
    %c0_i58 = hw.constant 0 : i58
    %c0_i8 = hw.constant 0 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i2 = hw.constant 0 : i2
    %2 = seq.from_clock %clock
    %3 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %4 = comb.icmp bin ne %3, %c-1_i2 {sv.namehint = "_source_ok_T_5"} : i2
    %5 = comb.concat %c0_i4, %io_in_a_bits_size : i4, i2
    %6 = comb.shl bin %c7_i6, %5 {sv.namehint = "_is_aligned_mask_T_1"} : i6
    %7 = comb.extract %6 from 0 {sv.namehint = "_is_aligned_mask_T_2"} : (i6) -> i3
    %8 = comb.xor bin %7, %c-1_i3 {sv.namehint = "is_aligned_mask"} : i3
    %9 = comb.extract %io_in_a_bits_address from 0 : (i17) -> i3
    %10 = comb.and bin %9, %8 : i3
    %11 = comb.icmp bin eq %10, %c0_i3 {sv.namehint = "is_aligned"} : i3
    %12 = comb.icmp bin eq %io_in_a_bits_size, %c-1_i2 {sv.namehint = "_mask_T"} : i2
    %13 = comb.icmp eq %io_in_a_bits_size, %c-2_i2 {sv.namehint = "mask_size"} : i2
    %14 = comb.extract %io_in_a_bits_address from 2 {sv.namehint = "mask_bit"} : (i17) -> i1
    %15 = comb.xor bin %14, %true {sv.namehint = "mask_eq"} : i1
    %16 = comb.and bin %13, %15 {sv.namehint = "_mask_acc_T"} : i1
    %17 = comb.or bin %12, %16 {sv.namehint = "mask_acc"} : i1
    %18 = comb.and bin %13, %14 {sv.namehint = "_mask_acc_T_1"} : i1
    %19 = comb.or bin %12, %18 {sv.namehint = "mask_acc_1"} : i1
    %20 = comb.icmp eq %io_in_a_bits_size, %c1_i2 {sv.namehint = "mask_size_1"} : i2
    %21 = comb.extract %io_in_a_bits_address from 1 {sv.namehint = "mask_bit_1"} : (i17) -> i1
    %22 = comb.xor bin %21, %true {sv.namehint = "mask_nbit_1"} : i1
    %23 = comb.and bin %15, %22 {sv.namehint = "mask_eq_2"} : i1
    %24 = comb.and bin %20, %23 {sv.namehint = "_mask_acc_T_2"} : i1
    %25 = comb.or bin %17, %24 {sv.namehint = "mask_acc_2"} : i1
    %26 = comb.and bin %15, %21 {sv.namehint = "mask_eq_3"} : i1
    %27 = comb.and bin %20, %26 {sv.namehint = "_mask_acc_T_3"} : i1
    %28 = comb.or bin %17, %27 {sv.namehint = "mask_acc_3"} : i1
    %29 = comb.and bin %14, %22 {sv.namehint = "mask_eq_4"} : i1
    %30 = comb.and bin %20, %29 {sv.namehint = "_mask_acc_T_4"} : i1
    %31 = comb.or bin %19, %30 {sv.namehint = "mask_acc_4"} : i1
    %32 = comb.and bin %14, %21 {sv.namehint = "mask_eq_5"} : i1
    %33 = comb.and bin %20, %32 {sv.namehint = "_mask_acc_T_5"} : i1
    %34 = comb.or bin %19, %33 {sv.namehint = "mask_acc_5"} : i1
    %35 = comb.extract %io_in_a_bits_address from 0 {sv.namehint = "mask_bit_2"} : (i17) -> i1
    %36 = comb.xor bin %35, %true {sv.namehint = "mask_nbit_2"} : i1
    %37 = comb.and bin %23, %36 {sv.namehint = "mask_eq_6"} : i1
    %38 = comb.or bin %25, %37 {sv.namehint = "mask_lo_lo_lo"} : i1
    %39 = comb.and bin %23, %35 {sv.namehint = "mask_eq_7"} : i1
    %40 = comb.or bin %25, %39 {sv.namehint = "mask_lo_lo_hi"} : i1
    %41 = comb.and bin %26, %36 {sv.namehint = "mask_eq_8"} : i1
    %42 = comb.or bin %28, %41 {sv.namehint = "mask_lo_hi_lo"} : i1
    %43 = comb.and bin %26, %35 {sv.namehint = "mask_eq_9"} : i1
    %44 = comb.or bin %28, %43 {sv.namehint = "mask_lo_hi_hi"} : i1
    %45 = comb.and bin %29, %36 {sv.namehint = "mask_eq_10"} : i1
    %46 = comb.or bin %31, %45 {sv.namehint = "mask_hi_lo_lo"} : i1
    %47 = comb.and bin %29, %35 {sv.namehint = "mask_eq_11"} : i1
    %48 = comb.or bin %31, %47 {sv.namehint = "mask_hi_lo_hi"} : i1
    %49 = comb.and bin %32, %36 {sv.namehint = "mask_eq_12"} : i1
    %50 = comb.or bin %34, %49 {sv.namehint = "mask_hi_hi_lo"} : i1
    %51 = comb.and bin %32, %35 {sv.namehint = "mask_eq_13"} : i1
    %52 = comb.or bin %34, %51 {sv.namehint = "mask_hi_hi_hi"} : i1
    %53 = comb.concat %52, %50, %48, %46, %44, %42, %40, %38 {sv.namehint = "mask"} : i1, i1, i1, i1, i1, i1, i1, i1
    %54 = comb.icmp bin eq %io_in_a_bits_opcode, %c-2_i3 : i3
    %55 = comb.and bin %io_in_a_valid, %54 : i1
    %56 = comb.xor bin %reset, %true : i1
    %57 = comb.and bin %55, %56 : i1
    %58 = comb.or bin %4, %reset : i1
    %59 = comb.xor bin %58, %true : i1
    %60 = comb.and bin %55, %59 : i1
    %61 = comb.or bin %12, %reset : i1
    %62 = comb.xor bin %61, %true : i1
    %63 = comb.and bin %55, %62 : i1
    %64 = comb.or bin %11, %reset : i1
    %65 = comb.xor bin %64, %true : i1
    %66 = comb.and bin %55, %65 : i1
    %67 = comb.icmp bin ult %io_in_a_bits_param, %c3_i3 : i3
    %68 = comb.or bin %67, %reset : i1
    %69 = comb.xor bin %68, %true : i1
    %70 = comb.and bin %55, %69 : i1
    %71 = comb.icmp eq %io_in_a_bits_mask, %c-1_i8 : i8
    %72 = comb.or bin %71, %reset : i1
    %73 = comb.xor bin %72, %true : i1
    %74 = comb.and bin %55, %73 : i1
    %75 = comb.xor bin %io_in_a_bits_corrupt, %true : i1
    %76 = comb.or bin %75, %reset : i1
    %77 = comb.xor bin %76, %true : i1
    %78 = comb.and bin %55, %77 : i1
    %79 = comb.icmp bin eq %io_in_a_bits_opcode, %c-1_i3 : i3
    %80 = comb.and bin %io_in_a_valid, %79 : i1
    %81 = comb.and bin %80, %56 : i1
    %82 = comb.and bin %80, %59 : i1
    %83 = comb.and bin %80, %62 : i1
    %84 = comb.and bin %80, %65 : i1
    %85 = comb.and bin %80, %69 : i1
    %86 = comb.icmp bin ne %io_in_a_bits_param, %c0_i3 : i3
    %87 = comb.or bin %86, %reset : i1
    %88 = comb.xor bin %87, %true : i1
    %89 = comb.and bin %80, %88 : i1
    %90 = comb.and bin %80, %73 : i1
    %91 = comb.and bin %80, %77 : i1
    %92 = comb.icmp bin eq %io_in_a_bits_opcode, %c-4_i3 : i3
    %93 = comb.and bin %io_in_a_valid, %92 : i1
    %94 = comb.extract %io_in_a_bits_source from 4 : (i6) -> i2
    %95 = comb.icmp bin ne %94, %c-1_i2 : i2
    %96 = comb.or bin %95, %reset : i1
    %97 = comb.xor bin %96, %true : i1
    %98 = comb.and bin %93, %97 : i1
    %99 = comb.extract %io_in_a_bits_address from 16 : (i17) -> i1
    %100 = comb.or bin %99, %reset : i1
    %101 = comb.xor bin %100, %true : i1
    %102 = comb.and bin %93, %101 : i1
    %103 = comb.and bin %93, %59 : i1
    %104 = comb.and bin %93, %65 : i1
    %105 = comb.xor bin %86, %true : i1
    %106 = comb.or bin %105, %reset : i1
    %107 = comb.xor bin %106, %true : i1
    %108 = comb.and bin %93, %107 : i1
    %109 = comb.icmp bin eq %io_in_a_bits_mask, %53 : i8
    %110 = comb.or bin %109, %reset : i1
    %111 = comb.xor bin %110, %true : i1
    %112 = comb.and bin %93, %111 : i1
    %113 = comb.and bin %93, %77 : i1
    %114 = comb.icmp bin eq %io_in_a_bits_opcode, %c0_i3 : i3
    %115 = comb.and bin %io_in_a_valid, %114 : i1
    %116 = comb.and bin %115, %56 : i1
    %117 = comb.and bin %115, %59 : i1
    %118 = comb.and bin %115, %65 : i1
    %119 = comb.and bin %115, %107 : i1
    %120 = comb.and bin %115, %111 : i1
    %121 = comb.icmp bin eq %io_in_a_bits_opcode, %c1_i3 : i3
    %122 = comb.and bin %io_in_a_valid, %121 : i1
    %123 = comb.and bin %122, %56 : i1
    %124 = comb.and bin %122, %59 : i1
    %125 = comb.and bin %122, %65 : i1
    %126 = comb.and bin %122, %107 : i1
    %127 = comb.xor bin %53, %c-1_i8 : i8
    %128 = comb.and bin %io_in_a_bits_mask, %127 : i8
    %129 = comb.icmp bin eq %128, %c0_i8 : i8
    %130 = comb.or bin %129, %reset : i1
    %131 = comb.xor bin %130, %true : i1
    %132 = comb.and bin %122, %131 : i1
    %133 = comb.icmp bin eq %io_in_a_bits_opcode, %c2_i3 : i3
    %134 = comb.and bin %io_in_a_valid, %133 : i1
    %135 = comb.and bin %134, %56 : i1
    %136 = comb.and bin %134, %59 : i1
    %137 = comb.and bin %134, %65 : i1
    %138 = comb.icmp bin ult %io_in_a_bits_param, %c-3_i3 : i3
    %139 = comb.or bin %138, %reset : i1
    %140 = comb.xor bin %139, %true : i1
    %141 = comb.and bin %134, %140 : i1
    %142 = comb.and bin %134, %111 : i1
    %143 = comb.icmp bin eq %io_in_a_bits_opcode, %c3_i3 : i3
    %144 = comb.and bin %io_in_a_valid, %143 : i1
    %145 = comb.and bin %144, %56 : i1
    %146 = comb.and bin %144, %59 : i1
    %147 = comb.and bin %144, %65 : i1
    %148 = comb.extract %io_in_a_bits_param from 2 : (i3) -> i1
    %149 = comb.xor bin %148, %true : i1
    %150 = comb.or bin %149, %reset : i1
    %151 = comb.xor bin %150, %true : i1
    %152 = comb.and bin %144, %151 : i1
    %153 = comb.and bin %144, %111 : i1
    %154 = comb.icmp bin eq %io_in_a_bits_opcode, %c-3_i3 : i3
    %155 = comb.and bin %io_in_a_valid, %154 : i1
    %156 = comb.and bin %155, %56 : i1
    %157 = comb.and bin %155, %59 : i1
    %158 = comb.and bin %155, %65 : i1
    %159 = comb.icmp bin ult %io_in_a_bits_param, %c2_i3 : i3
    %160 = comb.or bin %159, %reset : i1
    %161 = comb.xor bin %160, %true : i1
    %162 = comb.and bin %155, %161 : i1
    %163 = comb.and bin %155, %111 : i1
    %164 = comb.and bin %155, %77 : i1
    %165 = comb.extract %io_in_d_bits_source from 4 : (i6) -> i2
    %166 = comb.icmp bin ne %165, %c-1_i2 {sv.namehint = "_source_ok_T_11"} : i2
    %167 = comb.or bin %166, %reset : i1
    %168 = comb.xor bin %167, %true : i1
    %169 = comb.and bin %io_in_d_valid, %168 : i1
    %170 = comb.and bin %io_in_a_ready, %io_in_a_valid {sv.namehint = "a_first_done"} : i1
    %a_first_counter = seq.firreg %175 clock %clock reset sync %reset, %false {firrtl.random_init_start = 0 : ui64} : i1
    %171 = comb.add %a_first_counter, %true {sv.namehint = "_a_first_counter1_T"} : i1
    %172 = comb.xor bin %a_first_counter, %true {sv.namehint = "a_first"} : i1
    %173 = comb.xor %170, %true : i1
    %174 = comb.or %173, %171 : i1
    %175 = comb.and %174, %a_first_counter : i1
    %opcode = seq.firreg %198 clock %clock {firrtl.random_init_start = 1 : ui64} : i3
    %param = seq.firreg %199 clock %clock {firrtl.random_init_start = 4 : ui64} : i3
    %size = seq.firreg %200 clock %clock {firrtl.random_init_start = 7 : ui64} : i2
    %source = seq.firreg %201 clock %clock {firrtl.random_init_start = 9 : ui64} : i6
    %address = seq.firreg %202 clock %clock {firrtl.random_init_start = 15 : ui64} : i17
    %176 = comb.and bin %io_in_a_valid, %a_first_counter : i1
    %177 = comb.icmp bin eq %io_in_a_bits_opcode, %opcode : i3
    %178 = comb.or bin %177, %reset : i1
    %179 = comb.xor bin %178, %true : i1
    %180 = comb.and bin %176, %179 : i1
    %181 = comb.icmp bin eq %io_in_a_bits_param, %param : i3
    %182 = comb.or bin %181, %reset : i1
    %183 = comb.xor bin %182, %true : i1
    %184 = comb.and bin %176, %183 : i1
    %185 = comb.icmp bin eq %io_in_a_bits_size, %size : i2
    %186 = comb.or bin %185, %reset : i1
    %187 = comb.xor bin %186, %true : i1
    %188 = comb.and bin %176, %187 : i1
    %189 = comb.icmp bin eq %io_in_a_bits_source, %source : i6
    %190 = comb.or bin %189, %reset : i1
    %191 = comb.xor bin %190, %true : i1
    %192 = comb.and bin %176, %191 : i1
    %193 = comb.icmp bin eq %io_in_a_bits_address, %address : i17
    %194 = comb.or bin %193, %reset : i1
    %195 = comb.xor bin %194, %true : i1
    %196 = comb.and bin %176, %195 : i1
    %197 = comb.and bin %170, %172 : i1
    %198 = comb.mux bin %197, %io_in_a_bits_opcode, %opcode : i3
    %199 = comb.mux bin %197, %io_in_a_bits_param, %param : i3
    %200 = comb.mux bin %197, %io_in_a_bits_size, %size : i2
    %201 = comb.mux bin %197, %io_in_a_bits_source, %source : i6
    %202 = comb.mux bin %197, %io_in_a_bits_address, %address : i17
    %203 = comb.and bin %io_in_d_ready, %io_in_d_valid {sv.namehint = "d_first_done"} : i1
    %d_first_counter = seq.firreg %208 clock %clock reset sync %reset, %false {firrtl.random_init_start = 32 : ui64} : i1
    %204 = comb.add %d_first_counter, %true {sv.namehint = "_d_first_counter1_T"} : i1
    %205 = comb.xor bin %d_first_counter, %true {sv.namehint = "d_first"} : i1
    %206 = comb.xor %203, %true : i1
    %207 = comb.or %206, %204 : i1
    %208 = comb.and %207, %d_first_counter : i1
    %size_1 = seq.firreg %219 clock %clock {firrtl.random_init_start = 38 : ui64} : i2
    %source_1 = seq.firreg %220 clock %clock {firrtl.random_init_start = 40 : ui64} : i6
    %209 = comb.and bin %io_in_d_valid, %d_first_counter : i1
    %210 = comb.icmp bin eq %io_in_d_bits_size, %size_1 : i2
    %211 = comb.or bin %210, %reset : i1
    %212 = comb.xor bin %211, %true : i1
    %213 = comb.and bin %209, %212 : i1
    %214 = comb.icmp bin eq %io_in_d_bits_source, %source_1 : i6
    %215 = comb.or bin %214, %reset : i1
    %216 = comb.xor bin %215, %true : i1
    %217 = comb.and bin %209, %216 : i1
    %218 = comb.and bin %203, %205 : i1
    %219 = comb.mux bin %218, %io_in_d_bits_size, %size_1 : i2
    %220 = comb.mux bin %218, %io_in_d_bits_source, %source_1 : i6
    %inflight = seq.firreg %320 clock %clock reset sync %reset, %c0_i48 {firrtl.random_init_start = 48 : ui64} : i48
    %inflight_opcodes = seq.firreg %323 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 96 : ui64} : i192
    %inflight_sizes = seq.firreg %326 clock %clock reset sync %reset, %c0_i192 {firrtl.random_init_start = 288 : ui64} : i192
    %a_first_counter_1 = seq.firreg %225 clock %clock reset sync %reset, %false {firrtl.random_init_start = 480 : ui64} : i1
    %221 = comb.add %a_first_counter_1, %true {sv.namehint = "_a_first_counter1_T_1"} : i1
    %222 = comb.xor bin %a_first_counter_1, %true {sv.namehint = "a_first_1"} : i1
    %223 = comb.xor %170, %true : i1
    %224 = comb.or %223, %221 : i1
    %225 = comb.and %224, %a_first_counter_1 : i1
    %d_first_counter_1 = seq.firreg %230 clock %clock reset sync %reset, %false {firrtl.random_init_start = 481 : ui64} : i1
    %226 = comb.add %d_first_counter_1, %true {sv.namehint = "_d_first_counter1_T_1"} : i1
    %227 = comb.xor bin %d_first_counter_1, %true {sv.namehint = "d_first_1"} : i1
    %228 = comb.xor %203, %true : i1
    %229 = comb.or %228, %226 : i1
    %230 = comb.and %229, %d_first_counter_1 : i1
    %231 = comb.concat %c0_i184, %io_in_d_bits_source, %c0_i2 : i184, i6, i2
    %232 = comb.shru bin %inflight_opcodes, %231 {sv.namehint = "_a_opcode_lookup_T_1"} : i192
    %233 = comb.extract %232 from 1 : (i192) -> i3
    %234 = comb.shru bin %inflight_sizes, %231 {sv.namehint = "_a_size_lookup_T_1"} : i192
    %235 = comb.extract %234 from 1 : (i192) -> i3
    %236 = comb.concat %false, %235 {sv.namehint = "a_size_lookup"} : i1, i3
    %237 = comb.and bin %170, %222 : i1
    %238 = comb.concat %c0_i58, %io_in_a_bits_source : i58, i6
    %239 = comb.shl bin %c1_i64, %238 {sv.namehint = "_a_set_T"} : i64
    %240 = comb.extract %239 from 0 : (i64) -> i48
    %241 = comb.mux bin %237, %240, %c0_i48 {sv.namehint = "a_set"} : i48
    %242 = comb.concat %io_in_a_bits_opcode, %true {sv.namehint = "_a_opcodes_set_interm_T_1"} : i3, i1
    %243 = comb.mux bin %237, %242, %c0_i4 {sv.namehint = "a_opcodes_set_interm"} : i4
    %244 = comb.concat %io_in_a_bits_size, %true {sv.namehint = "_a_sizes_set_interm_T_1"} : i2, i1
    %245 = comb.mux bin %237, %244, %c0_i3 {sv.namehint = "a_sizes_set_interm"} : i3
    %246 = comb.concat %c0_i511, %243 : i511, i4
    %247 = comb.concat %c0_i507, %io_in_a_bits_source, %c0_i2 : i507, i6, i2
    %248 = comb.shl bin %246, %247 {sv.namehint = "_a_opcodes_set_T_1"} : i515
    %249 = comb.extract %248 from 0 : (i515) -> i192
    %250 = comb.mux bin %237, %249, %c0_i192 {sv.namehint = "a_opcodes_set"} : i192
    %251 = comb.concat %c0_i511, %245 : i511, i3
    %252 = comb.concat %c0_i506, %io_in_a_bits_source, %c0_i2 : i506, i6, i2
    %253 = comb.shl bin %251, %252 {sv.namehint = "_a_sizes_set_T_1"} : i514
    %254 = comb.extract %253 from 0 : (i514) -> i192
    %255 = comb.mux bin %237, %254, %c0_i192 {sv.namehint = "a_sizes_set"} : i192
    %256 = comb.concat %c0_i42, %io_in_a_bits_source : i42, i6
    %257 = comb.shru bin %inflight, %256 : i48
    %258 = comb.extract %257 from 0 : (i48) -> i1
    %259 = comb.xor bin %258, %true : i1
    %260 = comb.or bin %259, %reset : i1
    %261 = comb.xor bin %260, %true : i1
    %262 = comb.and bin %237, %261 : i1
    %263 = comb.and bin %io_in_d_valid, %227 : i1
    %264 = comb.and bin %203, %227 : i1
    %265 = comb.concat %c0_i58, %io_in_d_bits_source : i58, i6
    %266 = comb.shl bin %c1_i64, %265 {sv.namehint = "_d_clr_T"} : i64
    %267 = comb.extract %266 from 0 : (i64) -> i48
    %268 = comb.mux bin %264, %267, %c0_i48 {sv.namehint = "d_clr"} : i48
    %269 = comb.concat %c0_i519, %io_in_d_bits_source, %c0_i2 : i519, i6, i2
    %270 = comb.shl bin %c15_i527, %269 {sv.namehint = "_d_opcodes_clr_T_5"} : i527
    %271 = comb.extract %270 from 0 : (i527) -> i192
    %272 = comb.mux bin %264, %271, %c0_i192 {sv.namehint = "d_opcodes_clr"} : i192
    %273 = comb.shl bin %c15_i527, %269 {sv.namehint = "_d_sizes_clr_T_5"} : i527
    %274 = comb.extract %273 from 0 : (i527) -> i192
    %275 = comb.mux bin %264, %274, %c0_i192 {sv.namehint = "d_sizes_clr"} : i192
    %276 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source {sv.namehint = "_same_cycle_resp_T_2"} : i6
    %277 = comb.and bin %io_in_a_valid, %222, %276 {sv.namehint = "same_cycle_resp"} : i1
    %278 = comb.concat %c0_i42, %io_in_d_bits_source : i42, i6
    %279 = comb.shru bin %inflight, %278 : i48
    %280 = comb.extract %279 from 0 : (i48) -> i1
    %281 = comb.or bin %280, %277, %reset : i1
    %282 = comb.xor bin %281, %true : i1
    %283 = comb.and bin %263, %282 : i1
    %284 = comb.and bin %263, %277 : i1
    %285 = hw.array_get %1[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %286 = comb.icmp bin eq %285, %c1_i3 : i3
    %287 = hw.array_get %0[%io_in_a_bits_opcode] : !hw.array<8xi3>, i3
    %288 = comb.icmp bin eq %287, %c1_i3 : i3
    %289 = comb.or bin %286, %288, %reset : i1
    %290 = comb.xor bin %289, %true : i1
    %291 = comb.and bin %284, %290 : i1
    %292 = comb.icmp bin eq %io_in_a_bits_size, %io_in_d_bits_size : i2
    %293 = comb.or bin %292, %reset : i1
    %294 = comb.xor bin %293, %true : i1
    %295 = comb.and bin %284, %294 : i1
    %296 = comb.xor bin %277, %true : i1
    %297 = comb.and bin %263, %296 : i1
    %298 = hw.array_get %1[%233] : !hw.array<8xi3>, i3
    %299 = comb.icmp bin eq %298, %c1_i3 : i3
    %300 = hw.array_get %0[%233] : !hw.array<8xi3>, i3
    %301 = comb.icmp bin eq %300, %c1_i3 : i3
    %302 = comb.or bin %299, %301, %reset : i1
    %303 = comb.xor bin %302, %true : i1
    %304 = comb.and bin %297, %303 : i1
    %305 = comb.concat %c0_i2, %io_in_d_bits_size : i2, i2
    %306 = comb.icmp bin eq %305, %236 : i4
    %307 = comb.or bin %306, %reset : i1
    %308 = comb.xor bin %307, %true : i1
    %309 = comb.and bin %297, %308 : i1
    %310 = comb.and bin %263, %222 : i1
    %311 = comb.and bin %310, %io_in_a_valid : i1
    %312 = comb.icmp bin eq %io_in_a_bits_source, %io_in_d_bits_source : i6
    %313 = comb.and bin %311, %312 : i1
    %314 = comb.xor bin %io_in_d_ready, %true : i1
    %315 = comb.or bin %314, %io_in_a_ready, %reset : i1
    %316 = comb.xor bin %315, %true : i1
    %317 = comb.and bin %313, %316 : i1
    %318 = comb.or bin %inflight, %241 {sv.namehint = "_inflight_T"} : i48
    %319 = comb.xor bin %268, %c-1_i48 {sv.namehint = "_inflight_T_1"} : i48
    %320 = comb.and bin %318, %319 {sv.namehint = "_inflight_T_2"} : i48
    %321 = comb.or bin %inflight_opcodes, %250 {sv.namehint = "_inflight_opcodes_T"} : i192
    %322 = comb.xor bin %272, %c-1_i192 {sv.namehint = "_inflight_opcodes_T_1"} : i192
    %323 = comb.and bin %321, %322 {sv.namehint = "_inflight_opcodes_T_2"} : i192
    %324 = comb.or bin %inflight_sizes, %255 {sv.namehint = "_inflight_sizes_T"} : i192
    %325 = comb.xor bin %275, %c-1_i192 {sv.namehint = "_inflight_sizes_T_1"} : i192
    %326 = comb.and bin %324, %325 {sv.namehint = "_inflight_sizes_T_2"} : i192
    %watchdog = seq.firreg %334 clock %clock reset sync %reset, %c0_i32 {firrtl.random_init_start = 482 : ui64} : i32
    %plusarg_reader.out = hw.instance "plusarg_reader" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    %327 = comb.icmp bin eq %inflight, %c0_i48 : i48
    %328 = comb.icmp bin eq %plusarg_reader.out, %c0_i32 : i32
    %329 = comb.icmp bin ult %watchdog, %plusarg_reader.out : i32
    %330 = comb.or bin %327, %328, %329, %reset : i1
    %331 = comb.xor bin %330, %true : i1
    %332 = comb.add %watchdog, %c1_i32 {sv.namehint = "_watchdog_T"} : i32
    %333 = comb.or bin %170, %203 : i1
    %334 = comb.mux bin %333, %c0_i32, %332 : i32
    %plusarg_reader_1.out = hw.instance "plusarg_reader_1" @plusarg_reader<FORMAT: none = "tilelink_timeout=%d", DEFAULT: ui32 = 0, WIDTH: ui32 = 32>() -> (out: i32)
    sv.ifdef  "SYNTHESIS" {
    } else {
      sv.always posedge %2 {
        %STOP_COND_ = sv.macro.ref @STOP_COND_() : () -> i1
        %335 = comb.and bin %STOP_COND_, %false : i1
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        %336 = comb.and bin %STOP_COND_, %57 : i1
        sv.if %336 {
          sv.fatal 1
        }
        sv.if %336 {
          sv.fatal 1
        }
        %337 = comb.and bin %STOP_COND_, %60 : i1
        sv.if %337 {
          sv.fatal 1
        }
        %338 = comb.and bin %STOP_COND_, %63 : i1
        sv.if %338 {
          sv.fatal 1
        }
        %339 = comb.and bin %STOP_COND_, %66 : i1
        sv.if %339 {
          sv.fatal 1
        }
        %340 = comb.and bin %STOP_COND_, %70 : i1
        sv.if %340 {
          sv.fatal 1
        }
        %341 = comb.and bin %STOP_COND_, %74 : i1
        sv.if %341 {
          sv.fatal 1
        }
        %342 = comb.and bin %STOP_COND_, %78 : i1
        sv.if %342 {
          sv.fatal 1
        }
        %343 = comb.and bin %STOP_COND_, %81 : i1
        sv.if %343 {
          sv.fatal 1
        }
        sv.if %343 {
          sv.fatal 1
        }
        %344 = comb.and bin %STOP_COND_, %82 : i1
        sv.if %344 {
          sv.fatal 1
        }
        %345 = comb.and bin %STOP_COND_, %83 : i1
        sv.if %345 {
          sv.fatal 1
        }
        %346 = comb.and bin %STOP_COND_, %84 : i1
        sv.if %346 {
          sv.fatal 1
        }
        %347 = comb.and bin %STOP_COND_, %85 : i1
        sv.if %347 {
          sv.fatal 1
        }
        %348 = comb.and bin %STOP_COND_, %89 : i1
        sv.if %348 {
          sv.fatal 1
        }
        %349 = comb.and bin %STOP_COND_, %90 : i1
        sv.if %349 {
          sv.fatal 1
        }
        %350 = comb.and bin %STOP_COND_, %91 : i1
        sv.if %350 {
          sv.fatal 1
        }
        %351 = comb.and bin %STOP_COND_, %98 : i1
        sv.if %351 {
          sv.fatal 1
        }
        %352 = comb.and bin %STOP_COND_, %102 : i1
        sv.if %352 {
          sv.fatal 1
        }
        %353 = comb.and bin %STOP_COND_, %103 : i1
        sv.if %353 {
          sv.fatal 1
        }
        %354 = comb.and bin %STOP_COND_, %104 : i1
        sv.if %354 {
          sv.fatal 1
        }
        %355 = comb.and bin %STOP_COND_, %108 : i1
        sv.if %355 {
          sv.fatal 1
        }
        %356 = comb.and bin %STOP_COND_, %112 : i1
        sv.if %356 {
          sv.fatal 1
        }
        %357 = comb.and bin %STOP_COND_, %113 : i1
        sv.if %357 {
          sv.fatal 1
        }
        %358 = comb.and bin %STOP_COND_, %116 : i1
        sv.if %358 {
          sv.fatal 1
        }
        %359 = comb.and bin %STOP_COND_, %117 : i1
        sv.if %359 {
          sv.fatal 1
        }
        %360 = comb.and bin %STOP_COND_, %118 : i1
        sv.if %360 {
          sv.fatal 1
        }
        %361 = comb.and bin %STOP_COND_, %119 : i1
        sv.if %361 {
          sv.fatal 1
        }
        %362 = comb.and bin %STOP_COND_, %120 : i1
        sv.if %362 {
          sv.fatal 1
        }
        %363 = comb.and bin %STOP_COND_, %123 : i1
        sv.if %363 {
          sv.fatal 1
        }
        %364 = comb.and bin %STOP_COND_, %124 : i1
        sv.if %364 {
          sv.fatal 1
        }
        %365 = comb.and bin %STOP_COND_, %125 : i1
        sv.if %365 {
          sv.fatal 1
        }
        %366 = comb.and bin %STOP_COND_, %126 : i1
        sv.if %366 {
          sv.fatal 1
        }
        %367 = comb.and bin %STOP_COND_, %132 : i1
        sv.if %367 {
          sv.fatal 1
        }
        %368 = comb.and bin %STOP_COND_, %135 : i1
        sv.if %368 {
          sv.fatal 1
        }
        %369 = comb.and bin %STOP_COND_, %136 : i1
        sv.if %369 {
          sv.fatal 1
        }
        %370 = comb.and bin %STOP_COND_, %137 : i1
        sv.if %370 {
          sv.fatal 1
        }
        %371 = comb.and bin %STOP_COND_, %141 : i1
        sv.if %371 {
          sv.fatal 1
        }
        %372 = comb.and bin %STOP_COND_, %142 : i1
        sv.if %372 {
          sv.fatal 1
        }
        %373 = comb.and bin %STOP_COND_, %145 : i1
        sv.if %373 {
          sv.fatal 1
        }
        %374 = comb.and bin %STOP_COND_, %146 : i1
        sv.if %374 {
          sv.fatal 1
        }
        %375 = comb.and bin %STOP_COND_, %147 : i1
        sv.if %375 {
          sv.fatal 1
        }
        %376 = comb.and bin %STOP_COND_, %152 : i1
        sv.if %376 {
          sv.fatal 1
        }
        %377 = comb.and bin %STOP_COND_, %153 : i1
        sv.if %377 {
          sv.fatal 1
        }
        %378 = comb.and bin %STOP_COND_, %156 : i1
        sv.if %378 {
          sv.fatal 1
        }
        %379 = comb.and bin %STOP_COND_, %157 : i1
        sv.if %379 {
          sv.fatal 1
        }
        %380 = comb.and bin %STOP_COND_, %158 : i1
        sv.if %380 {
          sv.fatal 1
        }
        %381 = comb.and bin %STOP_COND_, %162 : i1
        sv.if %381 {
          sv.fatal 1
        }
        %382 = comb.and bin %STOP_COND_, %163 : i1
        sv.if %382 {
          sv.fatal 1
        }
        %383 = comb.and bin %STOP_COND_, %164 : i1
        sv.if %383 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        %384 = comb.and bin %STOP_COND_, %169 : i1
        sv.if %384 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        %385 = comb.and bin %STOP_COND_, %180 : i1
        sv.if %385 {
          sv.fatal 1
        }
        %386 = comb.and bin %STOP_COND_, %184 : i1
        sv.if %386 {
          sv.fatal 1
        }
        %387 = comb.and bin %STOP_COND_, %188 : i1
        sv.if %387 {
          sv.fatal 1
        }
        %388 = comb.and bin %STOP_COND_, %192 : i1
        sv.if %388 {
          sv.fatal 1
        }
        %389 = comb.and bin %STOP_COND_, %196 : i1
        sv.if %389 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        %390 = comb.and bin %STOP_COND_, %213 : i1
        sv.if %390 {
          sv.fatal 1
        }
        %391 = comb.and bin %STOP_COND_, %217 : i1
        sv.if %391 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        %392 = comb.and bin %STOP_COND_, %262 : i1
        sv.if %392 {
          sv.fatal 1
        }
        %393 = comb.and bin %STOP_COND_, %283 : i1
        sv.if %393 {
          sv.fatal 1
        }
        %394 = comb.and bin %STOP_COND_, %291 : i1
        sv.if %394 {
          sv.fatal 1
        }
        %395 = comb.and bin %STOP_COND_, %295 : i1
        sv.if %395 {
          sv.fatal 1
        }
        %396 = comb.and bin %STOP_COND_, %304 : i1
        sv.if %396 {
          sv.fatal 1
        }
        %397 = comb.and bin %STOP_COND_, %309 : i1
        sv.if %397 {
          sv.fatal 1
        }
        %398 = comb.and bin %STOP_COND_, %317 : i1
        sv.if %398 {
          sv.fatal 1
        }
        %399 = comb.and bin %STOP_COND_, %331 : i1
        sv.if %399 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
        sv.if %335 {
          sv.fatal 1
        }
      }
    }
    hw.output
  }
  hw.module private @TLROM(in %clock : !seq.clock, in %reset : i1, out auto_in_a_ready : i1, in %auto_in_a_valid : i1, in %auto_in_a_bits_opcode : i3, in %auto_in_a_bits_param : i3, in %auto_in_a_bits_size : i2, in %auto_in_a_bits_source : i6, in %auto_in_a_bits_address : i17, in %auto_in_a_bits_mask : i8, in %auto_in_a_bits_corrupt : i1, in %auto_in_d_ready : i1, out auto_in_d_valid : i1, out auto_in_d_bits_size : i2, out auto_in_d_bits_source : i6, out auto_in_d_bits_data : i64) {
    %0 = hw.aggregate_constanthw.array<512xi64>
    %c0_i4 = hw.constant 0 : i4
    %c0_i64 = hw.constant 0 : i64
    hw.instance "monitor" @TLMonitor_30(clock: %clock: !seq.clock, reset: %reset: i1, io_in_a_ready: %auto_in_d_ready: i1, io_in_a_valid: %auto_in_a_valid: i1, io_in_a_bits_opcode: %auto_in_a_bits_opcode: i3, io_in_a_bits_param: %auto_in_a_bits_param: i3, io_in_a_bits_size: %auto_in_a_bits_size: i2, io_in_a_bits_source: %auto_in_a_bits_source: i6, io_in_a_bits_address: %auto_in_a_bits_address: i17, io_in_a_bits_mask: %auto_in_a_bits_mask: i8, io_in_a_bits_corrupt: %auto_in_a_bits_corrupt: i1, io_in_d_ready: %auto_in_d_ready: i1, io_in_d_valid: %auto_in_a_valid: i1, io_in_d_bits_size: %auto_in_a_bits_size: i2, io_in_d_bits_source: %auto_in_a_bits_source: i6) -> ()
    %1 = comb.extract %auto_in_a_bits_address from 3 {sv.namehint = "index"} : (i17) -> i9
    %2 = comb.extract %auto_in_a_bits_address from 12 {sv.namehint = "high"} : (i17) -> i4
    %3 = comb.icmp bin ne %2, %c0_i4 {sv.namehint = "_bundleIn_0_d_bits_T"} : i4
    %4 = hw.array_get %0[%1] : !hw.array<512xi64>, i9
    %5 = comb.mux bin %3, %c0_i64, %4 {sv.namehint = "bundleIn_0_d_bits_d_data"} : i64
    hw.output %auto_in_d_ready, %auto_in_a_valid, %auto_in_a_bits_size, %auto_in_a_bits_source, %5 : i1, i1, i2, i6, i64
  }
  hw.module private @ClockSinkDomain_1(out auto_bootrom_in_a_ready : i1, in %auto_bootrom_in_a_valid : i1, in %auto_bootrom_in_a_bits_opcode : i3, in %auto_bootrom_in_a_bits_param : i3, in %auto_bootrom_in_a_bits_size : i2, in %auto_bootrom_in_a_bits_source : i6, in %auto_bootrom_in_a_bits_address : i17, in %auto_bootrom_in_a_bits_mask : i8, in %auto_bootrom_in_a_bits_corrupt : i1, in %auto_bootrom_in_d_ready : i1, out auto_bootrom_in_d_valid : i1, out auto_bootrom_in_d_bits_size : i2, out auto_bootrom_in_d_bits_source : i6, out auto_bootrom_in_d_bits_data : i64, in %auto_clock_in_clock : !seq.clock, in %auto_clock_in_reset : i1) {
    %bootrom.auto_in_a_ready, %bootrom.auto_in_d_valid, %bootrom.auto_in_d_bits_size, %bootrom.auto_in_d_bits_source, %bootrom.auto_in_d_bits_data = hw.instance "bootrom" @TLROM(clock: %auto_clock_in_clock: !seq.clock, reset: %auto_clock_in_reset: i1, auto_in_a_valid: %auto_bootrom_in_a_valid: i1, auto_in_a_bits_opcode: %auto_bootrom_in_a_bits_opcode: i3, auto_in_a_bits_param: %auto_bootrom_in_a_bits_param: i3, auto_in_a_bits_size: %auto_bootrom_in_a_bits_size: i2, auto_in_a_bits_source: %auto_bootrom_in_a_bits_source: i6, auto_in_a_bits_address: %auto_bootrom_in_a_bits_address: i17, auto_in_a_bits_mask: %auto_bootrom_in_a_bits_mask: i8, auto_in_a_bits_corrupt: %auto_bootrom_in_a_bits_corrupt: i1, auto_in_d_ready: %auto_bootrom_in_d_ready: i1) -> (auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_size: i2, auto_in_d_bits_source: i6, auto_in_d_bits_data: i64) {sv.namehint = "bootrom.auto_in_d_valid"}
    hw.output %bootrom.auto_in_a_ready, %bootrom.auto_in_d_valid, %bootrom.auto_in_d_bits_size, %bootrom.auto_in_d_bits_source, %bootrom.auto_in_d_bits_data : i1, i1, i2, i6, i64
  }
  hw.module @RocketSystem(in %clock : !seq.clock, in %reset : i1, in %mem_axi4_0_aw_ready : i1, out mem_axi4_0_aw_valid : i1, out mem_axi4_0_aw_bits_id : i4, out mem_axi4_0_aw_bits_addr : i32, out mem_axi4_0_aw_bits_len : i8, out mem_axi4_0_aw_bits_size : i3, out mem_axi4_0_aw_bits_burst : i2, out mem_axi4_0_aw_bits_lock : i1, out mem_axi4_0_aw_bits_cache : i4, out mem_axi4_0_aw_bits_prot : i3, out mem_axi4_0_aw_bits_qos : i4, in %mem_axi4_0_w_ready : i1, out mem_axi4_0_w_valid : i1, out mem_axi4_0_w_bits_data : i64, out mem_axi4_0_w_bits_strb : i8, out mem_axi4_0_w_bits_last : i1, out mem_axi4_0_b_ready : i1, in %mem_axi4_0_b_valid : i1, in %mem_axi4_0_b_bits_id : i4, in %mem_axi4_0_b_bits_resp : i2, in %mem_axi4_0_ar_ready : i1, out mem_axi4_0_ar_valid : i1, out mem_axi4_0_ar_bits_id : i4, out mem_axi4_0_ar_bits_addr : i32, out mem_axi4_0_ar_bits_len : i8, out mem_axi4_0_ar_bits_size : i3, out mem_axi4_0_ar_bits_burst : i2, out mem_axi4_0_ar_bits_lock : i1, out mem_axi4_0_ar_bits_cache : i4, out mem_axi4_0_ar_bits_prot : i3, out mem_axi4_0_ar_bits_qos : i4, out mem_axi4_0_r_ready : i1, in %mem_axi4_0_r_valid : i1, in %mem_axi4_0_r_bits_id : i4, in %mem_axi4_0_r_bits_data : i64, in %mem_axi4_0_r_bits_resp : i2, in %mem_axi4_0_r_bits_last : i1, in %mmio_axi4_0_aw_ready : i1, out mmio_axi4_0_aw_valid : i1, out mmio_axi4_0_aw_bits_id : i4, out mmio_axi4_0_aw_bits_addr : i31, out mmio_axi4_0_aw_bits_len : i8, out mmio_axi4_0_aw_bits_size : i3, out mmio_axi4_0_aw_bits_burst : i2, out mmio_axi4_0_aw_bits_lock : i1, out mmio_axi4_0_aw_bits_cache : i4, out mmio_axi4_0_aw_bits_prot : i3, out mmio_axi4_0_aw_bits_qos : i4, in %mmio_axi4_0_w_ready : i1, out mmio_axi4_0_w_valid : i1, out mmio_axi4_0_w_bits_data : i64, out mmio_axi4_0_w_bits_strb : i8, out mmio_axi4_0_w_bits_last : i1, out mmio_axi4_0_b_ready : i1, in %mmio_axi4_0_b_valid : i1, in %mmio_axi4_0_b_bits_id : i4, in %mmio_axi4_0_b_bits_resp : i2, in %mmio_axi4_0_ar_ready : i1, out mmio_axi4_0_ar_valid : i1, out mmio_axi4_0_ar_bits_id : i4, out mmio_axi4_0_ar_bits_addr : i31, out mmio_axi4_0_ar_bits_len : i8, out mmio_axi4_0_ar_bits_size : i3, out mmio_axi4_0_ar_bits_burst : i2, out mmio_axi4_0_ar_bits_lock : i1, out mmio_axi4_0_ar_bits_cache : i4, out mmio_axi4_0_ar_bits_prot : i3, out mmio_axi4_0_ar_bits_qos : i4, out mmio_axi4_0_r_ready : i1, in %mmio_axi4_0_r_valid : i1, in %mmio_axi4_0_r_bits_id : i4, in %mmio_axi4_0_r_bits_data : i64, in %mmio_axi4_0_r_bits_resp : i2, in %mmio_axi4_0_r_bits_last : i1, in %resetctrl_hartIsInReset_0 : i1, in %debug_clock : !seq.clock, in %debug_reset : i1, out debug_clockeddmi_dmi_req_ready : i1, in %debug_clockeddmi_dmi_req_valid : i1, in %debug_clockeddmi_dmi_req_bits_addr : i7, in %debug_clockeddmi_dmi_req_bits_data : i32, in %debug_clockeddmi_dmi_req_bits_op : i2, in %debug_clockeddmi_dmi_resp_ready : i1, out debug_clockeddmi_dmi_resp_valid : i1, out debug_clockeddmi_dmi_resp_bits_data : i32, out debug_clockeddmi_dmi_resp_bits_resp : i2, in %debug_clockeddmi_dmiClock : !seq.clock, in %debug_clockeddmi_dmiReset : i1, out debug_ndreset : i1, out debug_dmactive : i1, in %debug_dmactiveAck : i1) {
    %false = hw.constant false
    %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_reset, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_clock, %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_reset = hw.instance "dummyClockGroupSourceNode" @SimpleClockGroupSource(clock: %clock: !seq.clock, reset: %reset: i1) -> (auto_out_member_subsystem_sbus_5_clock: !seq.clock, auto_out_member_subsystem_sbus_5_reset: i1, auto_out_member_subsystem_sbus_4_clock: !seq.clock, auto_out_member_subsystem_sbus_4_reset: i1, auto_out_member_subsystem_sbus_2_clock: !seq.clock, auto_out_member_subsystem_sbus_2_reset: i1, auto_out_member_subsystem_sbus_1_clock: !seq.clock, auto_out_member_subsystem_sbus_1_reset: i1, auto_out_member_subsystem_sbus_0_clock: !seq.clock, auto_out_member_subsystem_sbus_0_reset: i1) {sv.namehint = "subsystem_sbus.auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset"}
    %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_a_ready, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_valid, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_c_ready, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_valid, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data, %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_bufferable, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_modifiable, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_readalloc, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_writealloc, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_privileged, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_secure, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_fetch, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt, %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready, %subsystem_sbus.auto_fixedClockNode_out_1_clock, %subsystem_sbus.auto_fixedClockNode_out_1_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock, %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset = hw.instance "subsystem_sbus" @SystemBus(auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_ready: %mmio_axi4_0_aw_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_ready: %mmio_axi4_0_w_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_valid: %mmio_axi4_0_b_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_id: %mmio_axi4_0_b_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_bits_resp: %mmio_axi4_0_b_bits_resp: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_ready: %mmio_axi4_0_ar_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_valid: %mmio_axi4_0_r_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_id: %mmio_axi4_0_r_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_data: %mmio_axi4_0_r_bits_data: i64, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_resp: %mmio_axi4_0_r_bits_resp: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_bits_last: %mmio_axi4_0_r_bits_last: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_valid: %tile_prci_domain.auto_tl_master_clock_xing_out_a_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_opcode: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_opcode: i3, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_param: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_param: i3, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_size: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_size: i4, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_source: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_source: i2, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_address: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_address: i32, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_bufferable: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_bufferable: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_modifiable: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_modifiable: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_readalloc: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_readalloc: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_writealloc: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_writealloc: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_privileged: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_privileged: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_secure: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_secure: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_user_amba_prot_fetch: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_fetch: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_mask: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_mask: i8, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_data: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_data: i64, auto_coupler_from_tile_tl_master_clock_xing_in_a_bits_corrupt: %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_corrupt: i1, auto_coupler_from_tile_tl_master_clock_xing_in_b_ready: %tile_prci_domain.auto_tl_master_clock_xing_out_b_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_c_valid: %tile_prci_domain.auto_tl_master_clock_xing_out_c_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_opcode: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_opcode: i3, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_param: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_param: i3, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_size: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_size: i4, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_source: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_source: i2, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_address: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_address: i32, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_data: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_data: i64, auto_coupler_from_tile_tl_master_clock_xing_in_c_bits_corrupt: %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_corrupt: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_ready: %tile_prci_domain.auto_tl_master_clock_xing_out_d_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_e_valid: %tile_prci_domain.auto_tl_master_clock_xing_out_e_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_e_bits_sink: %tile_prci_domain.auto_tl_master_clock_xing_out_e_bits_sink: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_ready: %subsystem_l2_wrapper.auto_coherent_jbar_in_a_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_valid: %subsystem_l2_wrapper.auto_coherent_jbar_in_b_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_param: %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_param: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_bits_address: %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_address: i32, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_ready: %subsystem_l2_wrapper.auto_coherent_jbar_in_c_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_valid: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_opcode: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_param: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_param: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_size: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_size: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_source: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_source: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_sink: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_sink: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_denied: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_denied: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_data: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_data: i64, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_bits_corrupt: %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_ready: %subsystem_cbus.auto_bus_xing_in_a_ready: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_valid: %subsystem_cbus.auto_bus_xing_in_d_valid: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_opcode: %subsystem_cbus.auto_bus_xing_in_d_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_param: %subsystem_cbus.auto_bus_xing_in_d_bits_param: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_size: %subsystem_cbus.auto_bus_xing_in_d_bits_size: i4, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_source: %subsystem_cbus.auto_bus_xing_in_d_bits_source: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_sink: %subsystem_cbus.auto_bus_xing_in_d_bits_sink: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_denied: %subsystem_cbus.auto_bus_xing_in_d_bits_denied: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_data: %subsystem_cbus.auto_bus_xing_in_d_bits_data: i64, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_bits_corrupt: %subsystem_cbus.auto_bus_xing_in_d_bits_corrupt: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_5_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_5_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_4_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_4_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_2_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_2_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_1_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_1_reset: i1, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_clock: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_clock: !seq.clock, auto_subsystem_sbus_clock_groups_in_member_subsystem_sbus_0_reset: %dummyClockGroupSourceNode.auto_out_member_subsystem_sbus_0_reset: i1) -> (auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr: i31, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len: i8, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data: i64, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb: i8, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr: i31, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len: i8, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst: i2, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock: i1, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot: i3, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos: i4, auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_a_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_b_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param: i2, auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address: i32, auto_coupler_from_tile_tl_master_clock_xing_in_c_ready: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_valid: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode: i3, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param: i2, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size: i4, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source: i2, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink: i2, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied: i1, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data: i64, auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address: i32, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_bufferable: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_modifiable: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_readalloc: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_writealloc: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_privileged: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_secure: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_fetch: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask: i8, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data: i64, auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size: i3, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source: i2, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address: i32, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data: i64, auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid: i1, auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param: i3, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size: i4, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source: i2, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address: i28, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask: i8, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data: i64, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt: i1, auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready: i1, auto_fixedClockNode_out_1_clock: !seq.clock, auto_fixedClockNode_out_1_reset: i1, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset: i1, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset: i1, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset: i1, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset: i1) {sv.namehint = "bundleIn_0_10_r_ready"}
    %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_d_ready, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_data, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_d_ready, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_data, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_d_ready, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_valid, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_opcode, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_param, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_size, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_source, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_address, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_mask, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_data, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_corrupt, %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_d_ready, %subsystem_cbus.auto_fixedClockNode_out_2_clock, %subsystem_cbus.auto_fixedClockNode_out_2_reset, %subsystem_cbus.auto_fixedClockNode_out_0_clock, %subsystem_cbus.auto_fixedClockNode_out_0_reset, %subsystem_cbus.auto_bus_xing_in_a_ready, %subsystem_cbus.auto_bus_xing_in_d_valid, %subsystem_cbus.auto_bus_xing_in_d_bits_opcode, %subsystem_cbus.auto_bus_xing_in_d_bits_param, %subsystem_cbus.auto_bus_xing_in_d_bits_size, %subsystem_cbus.auto_bus_xing_in_d_bits_source, %subsystem_cbus.auto_bus_xing_in_d_bits_sink, %subsystem_cbus.auto_bus_xing_in_d_bits_denied, %subsystem_cbus.auto_bus_xing_in_d_bits_data, %subsystem_cbus.auto_bus_xing_in_d_bits_corrupt, %subsystem_cbus.clock, %subsystem_cbus.reset = hw.instance "subsystem_cbus" @PeripheryBus_1(auto_coupler_to_bootrom_fragmenter_out_a_ready: %bootROMDomainWrapper.auto_bootrom_in_a_ready: i1, auto_coupler_to_bootrom_fragmenter_out_d_valid: %bootROMDomainWrapper.auto_bootrom_in_d_valid: i1, auto_coupler_to_bootrom_fragmenter_out_d_bits_size: %bootROMDomainWrapper.auto_bootrom_in_d_bits_size: i2, auto_coupler_to_bootrom_fragmenter_out_d_bits_source: %bootROMDomainWrapper.auto_bootrom_in_d_bits_source: i6, auto_coupler_to_bootrom_fragmenter_out_d_bits_data: %bootROMDomainWrapper.auto_bootrom_in_d_bits_data: i64, auto_coupler_to_debug_fragmenter_out_a_ready: %debug_1.auto_dmInner_dmInner_tl_in_a_ready: i1, auto_coupler_to_debug_fragmenter_out_d_valid: %debug_1.auto_dmInner_dmInner_tl_in_d_valid: i1, auto_coupler_to_debug_fragmenter_out_d_bits_opcode: %debug_1.auto_dmInner_dmInner_tl_in_d_bits_opcode: i3, auto_coupler_to_debug_fragmenter_out_d_bits_size: %debug_1.auto_dmInner_dmInner_tl_in_d_bits_size: i2, auto_coupler_to_debug_fragmenter_out_d_bits_source: %debug_1.auto_dmInner_dmInner_tl_in_d_bits_source: i6, auto_coupler_to_debug_fragmenter_out_d_bits_data: %debug_1.auto_dmInner_dmInner_tl_in_d_bits_data: i64, auto_coupler_to_clint_fragmenter_out_a_ready: %clint.auto_in_a_ready: i1, auto_coupler_to_clint_fragmenter_out_d_valid: %clint.auto_in_d_valid: i1, auto_coupler_to_clint_fragmenter_out_d_bits_opcode: %clint.auto_in_d_bits_opcode: i3, auto_coupler_to_clint_fragmenter_out_d_bits_size: %clint.auto_in_d_bits_size: i2, auto_coupler_to_clint_fragmenter_out_d_bits_source: %clint.auto_in_d_bits_source: i6, auto_coupler_to_clint_fragmenter_out_d_bits_data: %clint.auto_in_d_bits_data: i64, auto_coupler_to_plic_fragmenter_out_a_ready: %plicDomainWrapper.auto_plic_in_a_ready: i1, auto_coupler_to_plic_fragmenter_out_d_valid: %plicDomainWrapper.auto_plic_in_d_valid: i1, auto_coupler_to_plic_fragmenter_out_d_bits_opcode: %plicDomainWrapper.auto_plic_in_d_bits_opcode: i3, auto_coupler_to_plic_fragmenter_out_d_bits_size: %plicDomainWrapper.auto_plic_in_d_bits_size: i2, auto_coupler_to_plic_fragmenter_out_d_bits_source: %plicDomainWrapper.auto_plic_in_d_bits_source: i6, auto_coupler_to_plic_fragmenter_out_d_bits_data: %plicDomainWrapper.auto_plic_in_d_bits_data: i64, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_clock: !seq.clock, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_1_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_1_reset: i1, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_clock: !seq.clock, auto_subsystem_cbus_clock_groups_in_member_subsystem_cbus_0_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_0_member_subsystem_cbus_0_reset: i1, auto_bus_xing_in_a_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_valid: i1, auto_bus_xing_in_a_bits_opcode: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_in_a_bits_param: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_param: i3, auto_bus_xing_in_a_bits_size: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_size: i4, auto_bus_xing_in_a_bits_source: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_source: i2, auto_bus_xing_in_a_bits_address: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_address: i28, auto_bus_xing_in_a_bits_mask: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_mask: i8, auto_bus_xing_in_a_bits_data: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_data: i64, auto_bus_xing_in_a_bits_corrupt: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_a_bits_corrupt: i1, auto_bus_xing_in_d_ready: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_cbus_bus_xing_out_d_ready: i1) -> (auto_coupler_to_bootrom_fragmenter_out_a_valid: i1, auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_bootrom_fragmenter_out_a_bits_param: i3, auto_coupler_to_bootrom_fragmenter_out_a_bits_size: i2, auto_coupler_to_bootrom_fragmenter_out_a_bits_source: i6, auto_coupler_to_bootrom_fragmenter_out_a_bits_address: i17, auto_coupler_to_bootrom_fragmenter_out_a_bits_mask: i8, auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_bootrom_fragmenter_out_d_ready: i1, auto_coupler_to_debug_fragmenter_out_a_valid: i1, auto_coupler_to_debug_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_debug_fragmenter_out_a_bits_param: i3, auto_coupler_to_debug_fragmenter_out_a_bits_size: i2, auto_coupler_to_debug_fragmenter_out_a_bits_source: i6, auto_coupler_to_debug_fragmenter_out_a_bits_address: i12, auto_coupler_to_debug_fragmenter_out_a_bits_mask: i8, auto_coupler_to_debug_fragmenter_out_a_bits_data: i64, auto_coupler_to_debug_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_debug_fragmenter_out_d_ready: i1, auto_coupler_to_clint_fragmenter_out_a_valid: i1, auto_coupler_to_clint_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_clint_fragmenter_out_a_bits_param: i3, auto_coupler_to_clint_fragmenter_out_a_bits_size: i2, auto_coupler_to_clint_fragmenter_out_a_bits_source: i6, auto_coupler_to_clint_fragmenter_out_a_bits_address: i26, auto_coupler_to_clint_fragmenter_out_a_bits_mask: i8, auto_coupler_to_clint_fragmenter_out_a_bits_data: i64, auto_coupler_to_clint_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_clint_fragmenter_out_d_ready: i1, auto_coupler_to_plic_fragmenter_out_a_valid: i1, auto_coupler_to_plic_fragmenter_out_a_bits_opcode: i3, auto_coupler_to_plic_fragmenter_out_a_bits_param: i3, auto_coupler_to_plic_fragmenter_out_a_bits_size: i2, auto_coupler_to_plic_fragmenter_out_a_bits_source: i6, auto_coupler_to_plic_fragmenter_out_a_bits_address: i28, auto_coupler_to_plic_fragmenter_out_a_bits_mask: i8, auto_coupler_to_plic_fragmenter_out_a_bits_data: i64, auto_coupler_to_plic_fragmenter_out_a_bits_corrupt: i1, auto_coupler_to_plic_fragmenter_out_d_ready: i1, auto_fixedClockNode_out_2_clock: !seq.clock, auto_fixedClockNode_out_2_reset: i1, auto_fixedClockNode_out_0_clock: !seq.clock, auto_fixedClockNode_out_0_reset: i1, auto_bus_xing_in_a_ready: i1, auto_bus_xing_in_d_valid: i1, auto_bus_xing_in_d_bits_opcode: i3, auto_bus_xing_in_d_bits_param: i2, auto_bus_xing_in_d_bits_size: i4, auto_bus_xing_in_d_bits_source: i2, auto_bus_xing_in_d_bits_sink: i1, auto_bus_xing_in_d_bits_denied: i1, auto_bus_xing_in_d_bits_data: i64, auto_bus_xing_in_d_bits_corrupt: i1, clock: !seq.clock, reset: i1) {sv.namehint = "clint.auto_in_d_ready"}
    %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready, %subsystem_mbus.auto_bus_xing_in_a_ready, %subsystem_mbus.auto_bus_xing_in_d_valid, %subsystem_mbus.auto_bus_xing_in_d_bits_opcode, %subsystem_mbus.auto_bus_xing_in_d_bits_size, %subsystem_mbus.auto_bus_xing_in_d_bits_source, %subsystem_mbus.auto_bus_xing_in_d_bits_denied, %subsystem_mbus.auto_bus_xing_in_d_bits_data, %subsystem_mbus.auto_bus_xing_in_d_bits_corrupt = hw.instance "subsystem_mbus" @MemoryBus(auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_ready: %mem_axi4_0_aw_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_ready: %mem_axi4_0_w_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_valid: %mem_axi4_0_b_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_id: %mem_axi4_0_b_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_bits_resp: %mem_axi4_0_b_bits_resp: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_ready: %mem_axi4_0_ar_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_valid: %mem_axi4_0_r_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_id: %mem_axi4_0_r_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_data: %mem_axi4_0_r_bits_data: i64, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_resp: %mem_axi4_0_r_bits_resp: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_bits_last: %mem_axi4_0_r_bits_last: i1, auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_clock: %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock: !seq.clock, auto_subsystem_mbus_clock_groups_in_member_subsystem_mbus_0_reset: %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset: i1, auto_bus_xing_in_a_valid: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid: i1, auto_bus_xing_in_a_bits_opcode: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode: i3, auto_bus_xing_in_a_bits_param: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param: i3, auto_bus_xing_in_a_bits_size: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size: i3, auto_bus_xing_in_a_bits_source: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source: i4, auto_bus_xing_in_a_bits_address: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address: i32, auto_bus_xing_in_a_bits_user_amba_prot_bufferable: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable: i1, auto_bus_xing_in_a_bits_user_amba_prot_modifiable: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable: i1, auto_bus_xing_in_a_bits_user_amba_prot_readalloc: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc: i1, auto_bus_xing_in_a_bits_user_amba_prot_writealloc: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc: i1, auto_bus_xing_in_a_bits_user_amba_prot_privileged: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_privileged: i1, auto_bus_xing_in_a_bits_user_amba_prot_secure: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_secure: i1, auto_bus_xing_in_a_bits_user_amba_prot_fetch: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_fetch: i1, auto_bus_xing_in_a_bits_mask: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask: i8, auto_bus_xing_in_a_bits_data: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data: i64, auto_bus_xing_in_d_ready: %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready: i1) -> (auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr: i32, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len: i8, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data: i64, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb: i8, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr: i32, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len: i8, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst: i2, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock: i1, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot: i3, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos: i4, auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready: i1, auto_bus_xing_in_a_ready: i1, auto_bus_xing_in_d_valid: i1, auto_bus_xing_in_d_bits_opcode: i3, auto_bus_xing_in_d_bits_size: i3, auto_bus_xing_in_d_bits_source: i4, auto_bus_xing_in_d_bits_denied: i1, auto_bus_xing_in_d_bits_data: i64, auto_bus_xing_in_d_bits_corrupt: i1) {sv.namehint = "bundleIn_0_9_r_ready"}
    %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_privileged, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_secure, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_fetch, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data, %subsystem_l2_wrapper.auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready, %subsystem_l2_wrapper.auto_coherent_jbar_in_a_ready, %subsystem_l2_wrapper.auto_coherent_jbar_in_b_valid, %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_param, %subsystem_l2_wrapper.auto_coherent_jbar_in_b_bits_address, %subsystem_l2_wrapper.auto_coherent_jbar_in_c_ready, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_valid, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_opcode, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_param, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_size, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_source, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_sink, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_denied, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_data, %subsystem_l2_wrapper.auto_coherent_jbar_in_d_bits_corrupt, %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock, %subsystem_l2_wrapper.auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset = hw.instance "subsystem_l2_wrapper" @CoherenceManagerWrapper(auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_ready: %subsystem_mbus.auto_bus_xing_in_a_ready: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_valid: %subsystem_mbus.auto_bus_xing_in_d_valid: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_opcode: %subsystem_mbus.auto_bus_xing_in_d_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_size: %subsystem_mbus.auto_bus_xing_in_d_bits_size: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_source: %subsystem_mbus.auto_bus_xing_in_d_bits_source: i4, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_denied: %subsystem_mbus.auto_bus_xing_in_d_bits_denied: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_data: %subsystem_mbus.auto_bus_xing_in_d_bits_data: i64, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_bits_corrupt: %subsystem_mbus.auto_bus_xing_in_d_bits_corrupt: i1, auto_coherent_jbar_in_a_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_valid: i1, auto_coherent_jbar_in_a_bits_opcode: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_opcode: i3, auto_coherent_jbar_in_a_bits_param: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_param: i3, auto_coherent_jbar_in_a_bits_size: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_size: i3, auto_coherent_jbar_in_a_bits_source: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_source: i2, auto_coherent_jbar_in_a_bits_address: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_address: i32, auto_coherent_jbar_in_a_bits_user_amba_prot_bufferable: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_bufferable: i1, auto_coherent_jbar_in_a_bits_user_amba_prot_modifiable: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_modifiable: i1, auto_coherent_jbar_in_a_bits_user_amba_prot_readalloc: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_readalloc: i1, auto_coherent_jbar_in_a_bits_user_amba_prot_writealloc: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_writealloc: i1, auto_coherent_jbar_in_a_bits_user_amba_prot_privileged: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_privileged: i1, auto_coherent_jbar_in_a_bits_user_amba_prot_secure: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_secure: i1, auto_coherent_jbar_in_a_bits_user_amba_prot_fetch: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_user_amba_prot_fetch: i1, auto_coherent_jbar_in_a_bits_mask: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_mask: i8, auto_coherent_jbar_in_a_bits_data: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_data: i64, auto_coherent_jbar_in_a_bits_corrupt: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_a_bits_corrupt: i1, auto_coherent_jbar_in_b_ready: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_b_ready: i1, auto_coherent_jbar_in_c_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_valid: i1, auto_coherent_jbar_in_c_bits_opcode: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_opcode: i3, auto_coherent_jbar_in_c_bits_param: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_param: i3, auto_coherent_jbar_in_c_bits_size: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_size: i3, auto_coherent_jbar_in_c_bits_source: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_source: i2, auto_coherent_jbar_in_c_bits_address: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_address: i32, auto_coherent_jbar_in_c_bits_data: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_data: i64, auto_coherent_jbar_in_c_bits_corrupt: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_c_bits_corrupt: i1, auto_coherent_jbar_in_d_ready: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_d_ready: i1, auto_coherent_jbar_in_e_valid: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_valid: i1, auto_coherent_jbar_in_e_bits_sink: %subsystem_sbus.auto_coupler_to_bus_named_subsystem_l2_widget_out_e_bits_sink: i2, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_clock: !seq.clock, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_1_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_1_reset: i1, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_clock: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_clock: !seq.clock, auto_subsystem_l2_clock_groups_in_member_subsystem_l2_0_reset: %subsystem_sbus.auto_subsystem_sbus_clock_groups_out_2_member_subsystem_l2_0_reset: i1) -> (auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_valid: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_opcode: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_param: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_size: i3, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_source: i4, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_address: i32, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_bufferable: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_modifiable: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_readalloc: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_writealloc: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_privileged: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_secure: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_user_amba_prot_fetch: i1, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_mask: i8, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_a_bits_data: i64, auto_coupler_to_bus_named_subsystem_mbus_bus_xing_out_d_ready: i1, auto_coherent_jbar_in_a_ready: i1, auto_coherent_jbar_in_b_valid: i1, auto_coherent_jbar_in_b_bits_param: i2, auto_coherent_jbar_in_b_bits_address: i32, auto_coherent_jbar_in_c_ready: i1, auto_coherent_jbar_in_d_valid: i1, auto_coherent_jbar_in_d_bits_opcode: i3, auto_coherent_jbar_in_d_bits_param: i2, auto_coherent_jbar_in_d_bits_size: i3, auto_coherent_jbar_in_d_bits_source: i2, auto_coherent_jbar_in_d_bits_sink: i2, auto_coherent_jbar_in_d_bits_denied: i1, auto_coherent_jbar_in_d_bits_data: i64, auto_coherent_jbar_in_d_bits_corrupt: i1, auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_clock: !seq.clock, auto_subsystem_l2_clock_groups_out_member_subsystem_mbus_0_reset: i1) {sv.namehint = "subsystem_l2_wrapper.auto_coherent_jbar_in_d_valid"}
    %tile_prci_domain.auto_tl_master_clock_xing_out_a_valid, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_opcode, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_param, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_size, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_source, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_address, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_bufferable, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_modifiable, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_readalloc, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_writealloc, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_privileged, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_secure, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_user_amba_prot_fetch, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_mask, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_data, %tile_prci_domain.auto_tl_master_clock_xing_out_a_bits_corrupt, %tile_prci_domain.auto_tl_master_clock_xing_out_b_ready, %tile_prci_domain.auto_tl_master_clock_xing_out_c_valid, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_opcode, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_param, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_size, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_source, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_address, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_data, %tile_prci_domain.auto_tl_master_clock_xing_out_c_bits_corrupt, %tile_prci_domain.auto_tl_master_clock_xing_out_d_ready, %tile_prci_domain.auto_tl_master_clock_xing_out_e_valid, %tile_prci_domain.auto_tl_master_clock_xing_out_e_bits_sink = hw.instance "tile_prci_domain" @TilePRCIDomain(auto_intsink_in_sync_0: %debug_1.auto_dmOuter_intsource_out_sync_0: i1, auto_int_in_clock_xing_in_1_sync_0: %intsource_1.auto_out_sync_0: i1, auto_int_in_clock_xing_in_0_sync_0: %intsource.auto_out_sync_0: i1, auto_int_in_clock_xing_in_0_sync_1: %intsource.auto_out_sync_1: i1, auto_tl_master_clock_xing_out_a_ready: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_a_ready: i1, auto_tl_master_clock_xing_out_b_valid: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_valid: i1, auto_tl_master_clock_xing_out_b_bits_param: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_param: i2, auto_tl_master_clock_xing_out_b_bits_address: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_b_bits_address: i32, auto_tl_master_clock_xing_out_c_ready: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_c_ready: i1, auto_tl_master_clock_xing_out_d_valid: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_valid: i1, auto_tl_master_clock_xing_out_d_bits_opcode: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_opcode: i3, auto_tl_master_clock_xing_out_d_bits_param: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_param: i2, auto_tl_master_clock_xing_out_d_bits_size: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_size: i4, auto_tl_master_clock_xing_out_d_bits_source: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_source: i2, auto_tl_master_clock_xing_out_d_bits_sink: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_sink: i2, auto_tl_master_clock_xing_out_d_bits_denied: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_denied: i1, auto_tl_master_clock_xing_out_d_bits_data: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_data: i64, auto_tl_master_clock_xing_out_d_bits_corrupt: %subsystem_sbus.auto_coupler_from_tile_tl_master_clock_xing_in_d_bits_corrupt: i1, auto_tap_clock_in_clock: %subsystem_sbus.auto_fixedClockNode_out_1_clock: !seq.clock, auto_tap_clock_in_reset: %subsystem_sbus.auto_fixedClockNode_out_1_reset: i1) -> (auto_tl_master_clock_xing_out_a_valid: i1, auto_tl_master_clock_xing_out_a_bits_opcode: i3, auto_tl_master_clock_xing_out_a_bits_param: i3, auto_tl_master_clock_xing_out_a_bits_size: i4, auto_tl_master_clock_xing_out_a_bits_source: i2, auto_tl_master_clock_xing_out_a_bits_address: i32, auto_tl_master_clock_xing_out_a_bits_user_amba_prot_bufferable: i1, auto_tl_master_clock_xing_out_a_bits_user_amba_prot_modifiable: i1, auto_tl_master_clock_xing_out_a_bits_user_amba_prot_readalloc: i1, auto_tl_master_clock_xing_out_a_bits_user_amba_prot_writealloc: i1, auto_tl_master_clock_xing_out_a_bits_user_amba_prot_privileged: i1, auto_tl_master_clock_xing_out_a_bits_user_amba_prot_secure: i1, auto_tl_master_clock_xing_out_a_bits_user_amba_prot_fetch: i1, auto_tl_master_clock_xing_out_a_bits_mask: i8, auto_tl_master_clock_xing_out_a_bits_data: i64, auto_tl_master_clock_xing_out_a_bits_corrupt: i1, auto_tl_master_clock_xing_out_b_ready: i1, auto_tl_master_clock_xing_out_c_valid: i1, auto_tl_master_clock_xing_out_c_bits_opcode: i3, auto_tl_master_clock_xing_out_c_bits_param: i3, auto_tl_master_clock_xing_out_c_bits_size: i4, auto_tl_master_clock_xing_out_c_bits_source: i2, auto_tl_master_clock_xing_out_c_bits_address: i32, auto_tl_master_clock_xing_out_c_bits_data: i64, auto_tl_master_clock_xing_out_c_bits_corrupt: i1, auto_tl_master_clock_xing_out_d_ready: i1, auto_tl_master_clock_xing_out_e_valid: i1, auto_tl_master_clock_xing_out_e_bits_sink: i2) {sv.namehint = "tile_prci_domain.auto_tl_master_clock_xing_out_e_valid"}
    %plicDomainWrapper.auto_plic_in_a_ready, %plicDomainWrapper.auto_plic_in_d_valid, %plicDomainWrapper.auto_plic_in_d_bits_opcode, %plicDomainWrapper.auto_plic_in_d_bits_size, %plicDomainWrapper.auto_plic_in_d_bits_source, %plicDomainWrapper.auto_plic_in_d_bits_data = hw.instance "plicDomainWrapper" @ClockSinkDomain(auto_plic_in_a_valid: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_valid: i1, auto_plic_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_opcode: i3, auto_plic_in_a_bits_param: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_param: i3, auto_plic_in_a_bits_size: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_size: i2, auto_plic_in_a_bits_source: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_source: i6, auto_plic_in_a_bits_address: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_address: i28, auto_plic_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_mask: i8, auto_plic_in_a_bits_data: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_data: i64, auto_plic_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_a_bits_corrupt: i1, auto_plic_in_d_ready: %subsystem_cbus.auto_coupler_to_plic_fragmenter_out_d_ready: i1, auto_clock_in_clock: %subsystem_cbus.auto_fixedClockNode_out_0_clock: !seq.clock, auto_clock_in_reset: %subsystem_cbus.auto_fixedClockNode_out_0_reset: i1) -> (auto_plic_in_a_ready: i1, auto_plic_in_d_valid: i1, auto_plic_in_d_bits_opcode: i3, auto_plic_in_d_bits_size: i2, auto_plic_in_d_bits_source: i6, auto_plic_in_d_bits_data: i64) {sv.namehint = "plicDomainWrapper.auto_plic_in_d_valid"}
    %clint.auto_int_out_0, %clint.auto_int_out_1, %clint.auto_in_a_ready, %clint.auto_in_d_valid, %clint.auto_in_d_bits_opcode, %clint.auto_in_d_bits_size, %clint.auto_in_d_bits_source, %clint.auto_in_d_bits_data = hw.instance "clint" @CLINT(clock: %subsystem_cbus.clock: !seq.clock, reset: %subsystem_cbus.reset: i1, auto_in_a_valid: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_valid: i1, auto_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_opcode: i3, auto_in_a_bits_param: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_param: i3, auto_in_a_bits_size: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_size: i2, auto_in_a_bits_source: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_source: i6, auto_in_a_bits_address: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_address: i26, auto_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_mask: i8, auto_in_a_bits_data: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_data: i64, auto_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_a_bits_corrupt: i1, auto_in_d_ready: %subsystem_cbus.auto_coupler_to_clint_fragmenter_out_d_ready: i1) -> (auto_int_out_0: i1, auto_int_out_1: i1, auto_in_a_ready: i1, auto_in_d_valid: i1, auto_in_d_bits_opcode: i3, auto_in_d_bits_size: i2, auto_in_d_bits_source: i6, auto_in_d_bits_data: i64) {sv.namehint = "intsource.auto_in_1"}
    %debug_1.auto_dmInner_dmInner_tl_in_a_ready, %debug_1.auto_dmInner_dmInner_tl_in_d_valid, %debug_1.auto_dmInner_dmInner_tl_in_d_bits_opcode, %debug_1.auto_dmInner_dmInner_tl_in_d_bits_size, %debug_1.auto_dmInner_dmInner_tl_in_d_bits_source, %debug_1.auto_dmInner_dmInner_tl_in_d_bits_data, %debug_1.auto_dmOuter_intsource_out_sync_0, %debug_1.io_ctrl_ndreset, %debug_1.io_ctrl_dmactive, %debug_1.io_dmi_dmi_req_ready, %debug_1.io_dmi_dmi_resp_valid, %debug_1.io_dmi_dmi_resp_bits_data, %debug_1.io_dmi_dmi_resp_bits_resp = hw.instance "debug_1" @TLDebugModule(auto_dmInner_dmInner_tl_in_a_valid: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_valid: i1, auto_dmInner_dmInner_tl_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_opcode: i3, auto_dmInner_dmInner_tl_in_a_bits_param: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_param: i3, auto_dmInner_dmInner_tl_in_a_bits_size: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_size: i2, auto_dmInner_dmInner_tl_in_a_bits_source: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_source: i6, auto_dmInner_dmInner_tl_in_a_bits_address: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_address: i12, auto_dmInner_dmInner_tl_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_mask: i8, auto_dmInner_dmInner_tl_in_a_bits_data: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_data: i64, auto_dmInner_dmInner_tl_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_a_bits_corrupt: i1, auto_dmInner_dmInner_tl_in_d_ready: %subsystem_cbus.auto_coupler_to_debug_fragmenter_out_d_ready: i1, io_debug_clock: %debug_clock: !seq.clock, io_debug_reset: %debug_reset: i1, io_ctrl_dmactiveAck: %debug_dmactiveAck: i1, io_dmi_dmi_req_valid: %debug_clockeddmi_dmi_req_valid: i1, io_dmi_dmi_req_bits_addr: %debug_clockeddmi_dmi_req_bits_addr: i7, io_dmi_dmi_req_bits_data: %debug_clockeddmi_dmi_req_bits_data: i32, io_dmi_dmi_req_bits_op: %debug_clockeddmi_dmi_req_bits_op: i2, io_dmi_dmi_resp_ready: %debug_clockeddmi_dmi_resp_ready: i1, io_dmi_dmiClock: %debug_clockeddmi_dmiClock: !seq.clock, io_dmi_dmiReset: %debug_clockeddmi_dmiReset: i1, io_hartIsInReset_0: %resetctrl_hartIsInReset_0: i1) -> (auto_dmInner_dmInner_tl_in_a_ready: i1, auto_dmInner_dmInner_tl_in_d_valid: i1, auto_dmInner_dmInner_tl_in_d_bits_opcode: i3, auto_dmInner_dmInner_tl_in_d_bits_size: i2, auto_dmInner_dmInner_tl_in_d_bits_source: i6, auto_dmInner_dmInner_tl_in_d_bits_data: i64, auto_dmOuter_intsource_out_sync_0: i1, io_ctrl_ndreset: i1, io_ctrl_dmactive: i1, io_dmi_dmi_req_ready: i1, io_dmi_dmi_resp_valid: i1, io_dmi_dmi_resp_bits_data: i32, io_dmi_dmi_resp_bits_resp: i2) {sv.namehint = "debug_1.io_ctrl_ndreset"}
    %intsource.auto_out_sync_0, %intsource.auto_out_sync_1 = hw.instance "intsource" @IntSyncCrossingSource_5(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_0: %clint.auto_int_out_0: i1, auto_in_1: %clint.auto_int_out_1: i1) -> (auto_out_sync_0: i1, auto_out_sync_1: i1) {sv.namehint = "intsource.auto_out_sync_1"}
    %intsource_1.auto_out_sync_0 = hw.instance "intsource_1" @IntSyncCrossingSource_1(clock: %clock: !seq.clock, reset: %reset: i1, auto_in_0: %false: i1) -> (auto_out_sync_0: i1) {sv.namehint = "bundleIn_0_5_sync_0"}
    %bootROMDomainWrapper.auto_bootrom_in_a_ready, %bootROMDomainWrapper.auto_bootrom_in_d_valid, %bootROMDomainWrapper.auto_bootrom_in_d_bits_size, %bootROMDomainWrapper.auto_bootrom_in_d_bits_source, %bootROMDomainWrapper.auto_bootrom_in_d_bits_data = hw.instance "bootROMDomainWrapper" @ClockSinkDomain_1(auto_bootrom_in_a_valid: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_valid: i1, auto_bootrom_in_a_bits_opcode: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_opcode: i3, auto_bootrom_in_a_bits_param: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_param: i3, auto_bootrom_in_a_bits_size: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_size: i2, auto_bootrom_in_a_bits_source: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_source: i6, auto_bootrom_in_a_bits_address: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_address: i17, auto_bootrom_in_a_bits_mask: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_mask: i8, auto_bootrom_in_a_bits_corrupt: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_a_bits_corrupt: i1, auto_bootrom_in_d_ready: %subsystem_cbus.auto_coupler_to_bootrom_fragmenter_out_d_ready: i1, auto_clock_in_clock: %subsystem_cbus.auto_fixedClockNode_out_2_clock: !seq.clock, auto_clock_in_reset: %subsystem_cbus.auto_fixedClockNode_out_2_reset: i1) -> (auto_bootrom_in_a_ready: i1, auto_bootrom_in_d_valid: i1, auto_bootrom_in_d_bits_size: i2, auto_bootrom_in_d_bits_source: i6, auto_bootrom_in_d_bits_data: i64) {sv.namehint = "bootROMDomainWrapper.auto_bootrom_in_d_valid"}
    hw.output %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_aw_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_data, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_strb, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_w_bits_last, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_b_ready, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_valid, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_id, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_addr, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_len, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_size, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_burst, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_lock, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_cache, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_prot, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_ar_bits_qos, %subsystem_mbus.auto_coupler_to_memory_controller_port_named_axi4_axi4yank_out_r_ready, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_aw_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_data, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_strb, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_w_bits_last, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_b_ready, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_valid, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_id, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_addr, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_len, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_size, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_burst, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_lock, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_cache, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_prot, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_ar_bits_qos, %subsystem_sbus.auto_coupler_to_port_named_mmio_port_axi4_axi4buf_out_r_ready, %debug_1.io_dmi_dmi_req_ready, %debug_1.io_dmi_dmi_resp_valid, %debug_1.io_dmi_dmi_resp_bits_data, %debug_1.io_dmi_dmi_resp_bits_resp, %debug_1.io_ctrl_ndreset, %debug_1.io_ctrl_dmactive : i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i32, i8, i3, i2, i1, i4, i3, i4, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i64, i8, i1, i1, i1, i4, i31, i8, i3, i2, i1, i4, i3, i4, i1, i1, i1, i32, i2, i1, i1
  }
  om.class @RocketSystem_Class(%basepath: !om.basepath) {
  }
}

